
F746SIAProjectGlobal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c7ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015850  0801c9c0  0801c9c0  0002c9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08032210  08032210  000500d8  2**0
                  CONTENTS
  4 .ARM          00000008  08032210  08032210  00042210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08032218  08032218  000500d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08032218  08032218  00042218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803221c  0803221c  0004221c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08032220  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004a224  200000d8  080322f8  000500d8  2**3
                  ALLOC
 10 ._user_heap_stack 00002804  2004a2fc  080322f8  0005a2fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000485f4  00000000  00000000  00050108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009c7d  00000000  00000000  000986fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003630  00000000  00000000  000a2380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003240  00000000  00000000  000a59b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003950f  00000000  00000000  000a8bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004aed6  00000000  00000000  000e20ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012940f  00000000  00000000  0012cfd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  002563e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f0d0  00000000  00000000  002564a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003a35  00000000  00000000  00265574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000009c  00000000  00000000  00268fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00269048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801c9a4 	.word	0x0801c9a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000dc 	.word	0x200000dc
 800020c:	0801c9a4 	.word	0x0801c9a4

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpun>:
 8000c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x10>
 8000c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2a:	d10a      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x20>
 8000c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0001 	mov.w	r0, #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2iz>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d215      	bcs.n	8000c7e <__aeabi_d2iz+0x36>
 8000c52:	d511      	bpl.n	8000c78 <__aeabi_d2iz+0x30>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d912      	bls.n	8000c84 <__aeabi_d2iz+0x3c>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	4770      	bx	lr
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	4770      	bx	lr
 8000c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c82:	d105      	bne.n	8000c90 <__aeabi_d2iz+0x48>
 8000c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	bf08      	it	eq
 8000c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <audioLoop>:
 * This is the main audio loop (aka infinite while loop) which is responsible for real time audio processing tasks:
 * - transferring recorded audio from the DMA buffer to buf_input[]
 * - processing audio samples and writing them to buf_output[]
 * - transferring processed samples back to the DMA buffer
 */
void audioLoop() {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		*/

		/* Copy recorded 1st half block */
		osSignalSet(uiTaskHandle, 0x0001);
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <audioLoop+0x5c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f014 fd6f 	bl	8015a8c <osSignalSet>
		osSignalWait (0x0001, osWaitForever);
 8000fae:	463b      	mov	r3, r7
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f014 fda8 	bl	8015b0c <osSignalWait>
		processAudio(buf_output, buf_input);
 8000fbc:	490f      	ldr	r1, [pc, #60]	; (8000ffc <audioLoop+0x60>)
 8000fbe:	4810      	ldr	r0, [pc, #64]	; (8001000 <audioLoop+0x64>)
 8000fc0:	f000 f9c6 	bl	8001350 <processAudio>
		osSignalSet(uiTaskHandle, 0x0001);
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <audioLoop+0x5c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f014 fd5e 	bl	8015a8c <osSignalSet>
		}


		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
		 	 */
		osSignalWait (0x0001, osWaitForever);
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f014 fd97 	bl	8015b0c <osSignalWait>
		/* Copy recorded 2nd half block */
		processAudio(buf_output_half, buf_input_half);
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <audioLoop+0x68>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a09      	ldr	r2, [pc, #36]	; (8001008 <audioLoop+0x6c>)
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f9b1 	bl	8001350 <processAudio>



	//}

}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20001e08 	.word	0x20001e08
 8000ffc:	200000f8 	.word	0x200000f8
 8001000:	200008f8 	.word	0x200008f8
 8001004:	20000004 	.word	0x20000004
 8001008:	20000000 	.word	0x20000000

0800100c <AudioSetup>:

void AudioSetup(){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	/* Initialize SDRAM buffers */
	memset((int16_t*) AUDIO_SCRATCH_ADDR, 0, AUDIO_SCRATCH_SIZE * 2); // note that the size argument here always refers to bytes whatever the data type
 8001010:	4a09      	ldr	r2, [pc, #36]	; (8001038 <AudioSetup+0x2c>)
 8001012:	2100      	movs	r1, #0
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <AudioSetup+0x30>)
 8001016:	f018 ff91 	bl	8019f3c <memset>

		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <AudioSetup+0x34>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]

		// start SAI (audio) DMA transfers:
		startAudioDMA(buf_output, buf_input, AUDIO_DMA_BUF_SIZE);
 8001020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001024:	4907      	ldr	r1, [pc, #28]	; (8001044 <AudioSetup+0x38>)
 8001026:	4808      	ldr	r0, [pc, #32]	; (8001048 <AudioSetup+0x3c>)
 8001028:	f004 f91c 	bl	8005264 <startAudioDMA>


		arm_rfft_fast_init_f32(&fft,fftSize);
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <AudioSetup+0x40>)
 8001030:	f017 fd50 	bl	8018ad4 <arm_rfft_fast_init_f32>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	0076a000 	.word	0x0076a000
 800103c:	c0096000 	.word	0xc0096000
 8001040:	200000f4 	.word	0x200000f4
 8001044:	200000f8 	.word	0x200000f8
 8001048:	200008f8 	.word	0x200008f8
 800104c:	200011fc 	.word	0x200011fc

08001050 <Graphique>:

void Graphique() {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0


		/* calculate average input level over 20 audio frames */

		accumulateInputLevels();
 8001054:	f000 f892 	bl	800117c <accumulateInputLevels>

		count++;
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <Graphique+0xa0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	4a24      	ldr	r2, [pc, #144]	; (80010f0 <Graphique+0xa0>)
 8001060:	6013      	str	r3, [r2, #0]
		if (count >= 20) {
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <Graphique+0xa0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b13      	cmp	r3, #19
 8001068:	dd3a      	ble.n	80010e0 <Graphique+0x90>
			count = 0;
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <Graphique+0xa0>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
			inputLevelL *= 0.05;
 8001070:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <Graphique+0xa4>)
 8001072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001076:	a31c      	add	r3, pc, #112	; (adr r3, 80010e8 <Graphique+0x98>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fb34 	bl	80006e8 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	491b      	ldr	r1, [pc, #108]	; (80010f4 <Graphique+0xa4>)
 8001086:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR *= 0.05;
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <Graphique+0xa8>)
 800108c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001090:	a315      	add	r3, pc, #84	; (adr r3, 80010e8 <Graphique+0x98>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fb27 	bl	80006e8 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4916      	ldr	r1, [pc, #88]	; (80010f8 <Graphique+0xa8>)
 80010a0:	e9c1 2300 	strd	r2, r3, [r1]
			uiDisplayInputLevel(inputLevelL, inputLevelR);
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <Graphique+0xa4>)
 80010a6:	ed93 7b00 	vldr	d7, [r3]
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <Graphique+0xa8>)
 80010ac:	ed93 6b00 	vldr	d6, [r3]
 80010b0:	eeb0 1a46 	vmov.f32	s2, s12
 80010b4:	eef0 1a66 	vmov.f32	s3, s13
 80010b8:	eeb0 0a47 	vmov.f32	s0, s14
 80010bc:	eef0 0a67 	vmov.f32	s1, s15
 80010c0:	f003 fad4 	bl	800466c <uiDisplayInputLevel>
			inputLevelL = 0.;
 80010c4:	490b      	ldr	r1, [pc, #44]	; (80010f4 <Graphique+0xa4>)
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	f04f 0300 	mov.w	r3, #0
 80010ce:	e9c1 2300 	strd	r2, r3, [r1]
			inputLevelR = 0.;
 80010d2:	4909      	ldr	r1, [pc, #36]	; (80010f8 <Graphique+0xa8>)
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c1 2300 	strd	r2, r3, [r1]
		}

		DrawSprectrum();
 80010e0:	f000 f80c 	bl	80010fc <DrawSprectrum>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	3fa99999 	.word	0x3fa99999
 80010f0:	20001214 	.word	0x20001214
 80010f4:	20001218 	.word	0x20001218
 80010f8:	20001220 	.word	0x20001220

080010fc <DrawSprectrum>:
static int x=10;
//int pas = SizeScreenY % fftSize;


void DrawSprectrum()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0

	//uiDisplayInputLevel((float)magFFt[1], 1);
	for(int y=0; y<fftSize/2;y++)
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	e01d      	b.n	8001144 <DrawSprectrum+0x48>
	{

		LCD_SetStrokeColor((int)(magFFt[y])*5);
 8001108:	4a19      	ldr	r2, [pc, #100]	; (8001170 <DrawSprectrum+0x74>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001118:	ee17 2a90 	vmov	r2, s15
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f003 fcac 	bl	8004a80 <LCD_SetStrokeColor>

		LCD_DrawPixel(x,y+128);
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <DrawSprectrum+0x78>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	b29a      	uxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	b29b      	uxth	r3, r3
 8001132:	3380      	adds	r3, #128	; 0x80
 8001134:	b29b      	uxth	r3, r3
 8001136:	4619      	mov	r1, r3
 8001138:	4610      	mov	r0, r2
 800113a:	f003 fcf9 	bl	8004b30 <LCD_DrawPixel>
	for(int y=0; y<fftSize/2;y++)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3301      	adds	r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b3f      	cmp	r3, #63	; 0x3f
 8001148:	ddde      	ble.n	8001108 <DrawSprectrum+0xc>

	}

	if(x<SizeScreenX){x +=1;}
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <DrawSprectrum+0x78>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <DrawSprectrum+0x7c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	da05      	bge.n	8001162 <DrawSprectrum+0x66>
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <DrawSprectrum+0x78>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <DrawSprectrum+0x78>)
 800115e:	6013      	str	r3, [r2, #0]
	else{x =1;}

}
 8001160:	e002      	b.n	8001168 <DrawSprectrum+0x6c>
	else{x =1;}
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <DrawSprectrum+0x78>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200010fc 	.word	0x200010fc
 8001174:	20000010 	.word	0x20000010
 8001178:	2000000c 	.word	0x2000000c

0800117c <accumulateInputLevels>:
 * Update input levels from the last audio frame (see global variable inputLevelL and inputLevelR).
 * Reminder: audio samples are actually interleaved L/R samples,
 * with left channel samples at even positions,
 * and right channel samples at odd positions.
 */
static void accumulateInputLevels() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0

	// Left channel:
	uint32_t lvl = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	e016      	b.n	80011ba <accumulateInputLevels+0x3e>
		int16_t v = (int16_t) buf_input[i];
 800118c:	4a3e      	ldr	r2, [pc, #248]	; (8001288 <accumulateInputLevels+0x10c>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001194:	803b      	strh	r3, [r7, #0]
		if (v > 0)
 8001196:	f9b7 3000 	ldrsh.w	r3, [r7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	dd05      	ble.n	80011aa <accumulateInputLevels+0x2e>
			lvl += v;
 800119e:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	4413      	add	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	e004      	b.n	80011b4 <accumulateInputLevels+0x38>
		else
			lvl -= v;
 80011aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3302      	adds	r3, #2
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c0:	d3e4      	bcc.n	800118c <accumulateInputLevels+0x10>
	}
	inputLevelL += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff fa16 	bl	80005f4 <__aeabi_ui2d>
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <accumulateInputLevels+0x110>)
 80011ce:	f7ff fbb5 	bl	800093c <__aeabi_ddiv>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <accumulateInputLevels+0x114>)
 80011e0:	f7ff fbac 	bl	800093c <__aeabi_ddiv>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <accumulateInputLevels+0x118>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff f8c3 	bl	800037c <__adddf3>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4926      	ldr	r1, [pc, #152]	; (8001294 <accumulateInputLevels+0x118>)
 80011fc:	e9c1 2300 	strd	r2, r3, [r1]

	// Right channel:
	lvl = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001204:	2301      	movs	r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	e016      	b.n	8001238 <accumulateInputLevels+0xbc>
		int16_t v = (int16_t) buf_input[i];
 800120a:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <accumulateInputLevels+0x10c>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001212:	807b      	strh	r3, [r7, #2]
		if (v > 0)
 8001214:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001218:	2b00      	cmp	r3, #0
 800121a:	dd05      	ble.n	8001228 <accumulateInputLevels+0xac>
			lvl += v;
 800121c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	e004      	b.n	8001232 <accumulateInputLevels+0xb6>
		else
			lvl -= v;
 8001228:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	60fb      	str	r3, [r7, #12]
	for (int i = 1; i < AUDIO_DMA_BUF_SIZE; i += 2) {
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3302      	adds	r3, #2
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123e:	d3e4      	bcc.n	800120a <accumulateInputLevels+0x8e>
	}
	inputLevelR += (double) lvl / AUDIO_DMA_BUF_SIZE / (1 << 15);
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff f9d7 	bl	80005f4 <__aeabi_ui2d>
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <accumulateInputLevels+0x110>)
 800124c:	f7ff fb76 	bl	800093c <__aeabi_ddiv>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <accumulateInputLevels+0x114>)
 800125e:	f7ff fb6d 	bl	800093c <__aeabi_ddiv>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <accumulateInputLevels+0x11c>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff f884 	bl	800037c <__adddf3>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <accumulateInputLevels+0x11c>)
 800127a:	e9c1 2300 	strd	r2, r3, [r1]
	;
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200000f8 	.word	0x200000f8
 800128c:	40900000 	.word	0x40900000
 8001290:	40e00000 	.word	0x40e00000
 8001294:	20001218 	.word	0x20001218
 8001298:	20001220 	.word	0x20001220

0800129c <HAL_SAI_RxCpltCallback>:
/**
 * Audio IN DMA Transfer complete interrupt.
 */


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

	audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_SAI_RxCpltCallback+0x24>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	601a      	str	r2, [r3, #0]
	osSignalSet(defaultTaskHandle, 0x0001); //// si le buffer est plein on cherche à revenir au traitement audio
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_SAI_RxCpltCallback+0x28>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2101      	movs	r1, #1
 80012b0:	4618      	mov	r0, r3
 80012b2:	f014 fbeb 	bl	8015a8c <osSignalSet>
	return;
 80012b6:	bf00      	nop
}
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200000f4 	.word	0x200000f4
 80012c4:	20001e04 	.word	0x20001e04

080012c8 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Audio IN DMA Half Transfer complete interrupt.
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

	//osSignalSet(uiTaskHandle, 0x0001);
	audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_SAI_RxHalfCpltCallback+0x24>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]
	osSignalSet(defaultTaskHandle, 0x0001);
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_SAI_RxHalfCpltCallback+0x28>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2101      	movs	r1, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f014 fbd5 	bl	8015a8c <osSignalSet>

	return;
 80012e2:	bf00      	nop
}
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200000f4 	.word	0x200000f4
 80012f0:	20001e04 	.word	0x20001e04

080012f4 <readInt16FromSDRAM>:
}

/**
 * Read a 16 bit integer from SDRAM at position "pos"
 */
static int16_t readInt16FromSDRAM(int pos) {
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

	__IO int16_t *pSdramAddress = (int16_t*) AUDIO_SCRATCH_ADDR;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <readInt16FromSDRAM+0x28>)
 80012fe:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
	//return *(__IO int16_t*) pSdramAddress;
	return *pSdramAddress;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	b21b      	sxth	r3, r3

}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	c0096000 	.word	0xc0096000

08001320 <writeInt16ToSDRAM>:

/**
 * Write the given 16 bit integer to the SDRAM at position "pos"
 */
static void writeInt16ToSDRAM(int16_t val, int pos) {
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	80fb      	strh	r3, [r7, #6]

	__IO int16_t *pSdramAddress = (int16_t*) AUDIO_SCRATCH_ADDR;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <writeInt16ToSDRAM+0x2c>)
 800132e:	60fb      	str	r3, [r7, #12]
	pSdramAddress += pos;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
	//*(__IO int16_t*) pSdramAddress = val;
	*pSdramAddress = val;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	88fa      	ldrh	r2, [r7, #6]
 800133e:	801a      	strh	r2, [r3, #0]

}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	c0096000 	.word	0xc0096000

08001350 <processAudio>:
int reverb3=5371;
int reverb4=5771;



static void processAudio(int16_t *out, int16_t *in) {
 8001350:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]

	LED_On(); // for oscilloscope measurements...
 800135c:	f003 fa12 	bl	8004784 <LED_On>


// echo
	//int NumberBufSave =100;

		for (int n = 0; n < AUDIO_BUF_SIZE; n++){
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	e289      	b.n	800187a <processAudio+0x52a>
			posi=posi+1;
 8001366:	4bb6      	ldr	r3, [pc, #728]	; (8001640 <processAudio+0x2f0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4ab4      	ldr	r2, [pc, #720]	; (8001640 <processAudio+0x2f0>)
 800136e:	6013      	str	r3, [r2, #0]

			//compression
			if(in[n]<=seuil1 && in[n]>=-seuil1){in[n]=gainTan*tan(in[n]*3.1415/(4*seuil1));}
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	4413      	add	r3, r2
 8001378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001384:	4baf      	ldr	r3, [pc, #700]	; (8001644 <processAudio+0x2f4>)
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001392:	d85b      	bhi.n	800144c <processAudio+0xfc>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	4413      	add	r3, r2
 800139c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a8:	4ba6      	ldr	r3, [pc, #664]	; (8001644 <processAudio+0x2f4>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	eef1 7a67 	vneg.f32	s15, s15
 80013b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ba:	db47      	blt.n	800144c <processAudio+0xfc>
 80013bc:	4ba2      	ldr	r3, [pc, #648]	; (8001648 <processAudio+0x2f8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f939 	bl	8000638 <__aeabi_f2d>
 80013c6:	4604      	mov	r4, r0
 80013c8:	460d      	mov	r5, r1
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	4413      	add	r3, r2
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f91c 	bl	8000614 <__aeabi_i2d>
 80013dc:	a396      	add	r3, pc, #600	; (adr r3, 8001638 <processAudio+0x2e8>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7ff f981 	bl	80006e8 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4690      	mov	r8, r2
 80013ec:	4699      	mov	r9, r3
 80013ee:	4b95      	ldr	r3, [pc, #596]	; (8001644 <processAudio+0x2f4>)
 80013f0:	edd3 7a00 	vldr	s15, [r3]
 80013f4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80013f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013fc:	ee17 0a90 	vmov	r0, s15
 8001400:	f7ff f91a 	bl	8000638 <__aeabi_f2d>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4640      	mov	r0, r8
 800140a:	4649      	mov	r1, r9
 800140c:	f7ff fa96 	bl	800093c <__aeabi_ddiv>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	ec43 2b17 	vmov	d7, r2, r3
 8001418:	eeb0 0a47 	vmov.f32	s0, s14
 800141c:	eef0 0a67 	vmov.f32	s1, s15
 8001420:	f019 ff36 	bl	801b290 <tan>
 8001424:	ec53 2b10 	vmov	r2, r3, d0
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7ff f95c 	bl	80006e8 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	18d4      	adds	r4, r2, r3
 8001440:	f7ff fc02 	bl	8000c48 <__aeabi_d2iz>
 8001444:	4603      	mov	r3, r0
 8001446:	b21b      	sxth	r3, r3
 8001448:	8023      	strh	r3, [r4, #0]
 800144a:	e165      	b.n	8001718 <processAudio+0x3c8>
			else if(in[n]>=seuil1 && in[n]<=seuil2) {in[n]=p1*(in[n]-seuil1)+gainTan;}
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4413      	add	r3, r2
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001460:	4b78      	ldr	r3, [pc, #480]	; (8001644 <processAudio+0x2f4>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	db35      	blt.n	80014dc <processAudio+0x18c>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	4413      	add	r3, r2
 8001478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001484:	4b71      	ldr	r3, [pc, #452]	; (800164c <processAudio+0x2fc>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	d823      	bhi.n	80014dc <processAudio+0x18c>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	4413      	add	r3, r2
 800149c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014a8:	4b66      	ldr	r3, [pc, #408]	; (8001644 <processAudio+0x2f4>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b2:	4b67      	ldr	r3, [pc, #412]	; (8001650 <processAudio+0x300>)
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014bc:	4b62      	ldr	r3, [pc, #392]	; (8001648 <processAudio+0x2f8>)
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d2:	ee17 2a90 	vmov	r2, s15
 80014d6:	b212      	sxth	r2, r2
 80014d8:	801a      	strh	r2, [r3, #0]
 80014da:	e11d      	b.n	8001718 <processAudio+0x3c8>
			else if(in[n]<=-seuil1 && in[n]>=-seuil2) {in[n]=p1*(in[n]+seuil1)-gainTan;}
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f0:	4b54      	ldr	r3, [pc, #336]	; (8001644 <processAudio+0x2f4>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	eef1 7a67 	vneg.f32	s15, s15
 80014fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	d837      	bhi.n	8001574 <processAudio+0x224>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	4413      	add	r3, r2
 800150c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001518:	4b4c      	ldr	r3, [pc, #304]	; (800164c <processAudio+0x2fc>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	eef1 7a67 	vneg.f32	s15, s15
 8001522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	db23      	blt.n	8001574 <processAudio+0x224>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	4413      	add	r3, r2
 8001534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001540:	4b40      	ldr	r3, [pc, #256]	; (8001644 <processAudio+0x2f4>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ee37 7a27 	vadd.f32	s14, s14, s15
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <processAudio+0x300>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001554:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <processAudio+0x2f8>)
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	4413      	add	r3, r2
 8001566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800156a:	ee17 2a90 	vmov	r2, s15
 800156e:	b212      	sxth	r2, r2
 8001570:	801a      	strh	r2, [r3, #0]
 8001572:	e0d1      	b.n	8001718 <processAudio+0x3c8>

			else if(in[n]>=seuil2) {in[n]=p2*(in[n]-seuil2)+gainTan+p1*(seuil2-seuil1);}
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	4413      	add	r3, r2
 800157c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001580:	ee07 3a90 	vmov	s15, r3
 8001584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001588:	4b30      	ldr	r3, [pc, #192]	; (800164c <processAudio+0x2fc>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001596:	db5d      	blt.n	8001654 <processAudio+0x304>
 8001598:	4b2c      	ldr	r3, [pc, #176]	; (800164c <processAudio+0x2fc>)
 800159a:	ed93 7a00 	vldr	s14, [r3]
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <processAudio+0x2f4>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <processAudio+0x300>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <processAudio+0x2f8>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <processAudio+0x2fc>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	4413      	add	r3, r2
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <processAudio+0x2fc>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <processAudio+0x2f8>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <processAudio+0x2fc>)
 8001604:	edd3 6a00 	vldr	s13, [r3]
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <processAudio+0x2f4>)
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <processAudio+0x300>)
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800161c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	4413      	add	r3, r2
 8001628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800162c:	ee17 2a90 	vmov	r2, s15
 8001630:	b212      	sxth	r2, r2
 8001632:	801a      	strh	r2, [r3, #0]
 8001634:	e070      	b.n	8001718 <processAudio+0x3c8>
 8001636:	bf00      	nop
 8001638:	c083126f 	.word	0xc083126f
 800163c:	400921ca 	.word	0x400921ca
 8001640:	200010f8 	.word	0x200010f8
 8001644:	20001228 	.word	0x20001228
 8001648:	2000122c 	.word	0x2000122c
 800164c:	20000014 	.word	0x20000014
 8001650:	20000018 	.word	0x20000018
			else if(in[n]<=-seuil2) {in[n]=p2*(in[n]+seuil2)+gainTan-p1*(seuil2-seuil1);}
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	4413      	add	r3, r2
 800165c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001668:	4b9f      	ldr	r3, [pc, #636]	; (80018e8 <processAudio+0x598>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eef1 7a67 	vneg.f32	s15, s15
 8001672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	d84d      	bhi.n	8001718 <processAudio+0x3c8>
 800167c:	4b9a      	ldr	r3, [pc, #616]	; (80018e8 <processAudio+0x598>)
 800167e:	ed93 7a00 	vldr	s14, [r3]
 8001682:	4b9a      	ldr	r3, [pc, #616]	; (80018ec <processAudio+0x59c>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	ee37 7a67 	vsub.f32	s14, s14, s15
 800168c:	4b98      	ldr	r3, [pc, #608]	; (80018f0 <processAudio+0x5a0>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001696:	4b97      	ldr	r3, [pc, #604]	; (80018f4 <processAudio+0x5a4>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016a8:	4b8f      	ldr	r3, [pc, #572]	; (80018e8 <processAudio+0x598>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016ce:	4b86      	ldr	r3, [pc, #536]	; (80018e8 <processAudio+0x598>)
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016dc:	4b85      	ldr	r3, [pc, #532]	; (80018f4 <processAudio+0x5a4>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016e6:	4b80      	ldr	r3, [pc, #512]	; (80018e8 <processAudio+0x598>)
 80016e8:	edd3 6a00 	vldr	s13, [r3]
 80016ec:	4b7f      	ldr	r3, [pc, #508]	; (80018ec <processAudio+0x59c>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016f6:	4b7e      	ldr	r3, [pc, #504]	; (80018f0 <processAudio+0x5a0>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	4413      	add	r3, r2
 800170c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001710:	ee17 2a90 	vmov	r2, s15
 8001714:	b212      	sxth	r2, r2
 8001716:	801a      	strh	r2, [r3, #0]



			//________________________

			writeInt16ToSDRAM(in[n], posi);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	4413      	add	r3, r2
 8001720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001724:	4a74      	ldr	r2, [pc, #464]	; (80018f8 <processAudio+0x5a8>)
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fdf8 	bl	8001320 <writeInt16ToSDRAM>

			if(posi>=deca)
 8001730:	4b71      	ldr	r3, [pc, #452]	; (80018f8 <processAudio+0x5a8>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b71      	ldr	r3, [pc, #452]	; (80018fc <processAudio+0x5ac>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	f2c0 8088 	blt.w	800184e <processAudio+0x4fe>
			{ //out[n]= 0.5*readInt16FromSDRAM(posi-deca)+readInt16FromSDRAM(posi); //echo
				out[n]= 0.25*readInt16FromSDRAM(posi-reverb1)+0.12*readInt16FromSDRAM(posi-reverb2)+0.06*readInt16FromSDRAM(posi-reverb3)+0.03*readInt16FromSDRAM(posi-reverb4)+0.5*readInt16FromSDRAM(posi);
 800173e:	4b6e      	ldr	r3, [pc, #440]	; (80018f8 <processAudio+0x5a8>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b6f      	ldr	r3, [pc, #444]	; (8001900 <processAudio+0x5b0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fdd3 	bl	80012f4 <readInt16FromSDRAM>
 800174e:	4603      	mov	r3, r0
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe ff5f 	bl	8000614 <__aeabi_i2d>
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	4b6a      	ldr	r3, [pc, #424]	; (8001904 <processAudio+0x5b4>)
 800175c:	f7fe ffc4 	bl	80006e8 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4614      	mov	r4, r2
 8001766:	461d      	mov	r5, r3
 8001768:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <processAudio+0x5a8>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b66      	ldr	r3, [pc, #408]	; (8001908 <processAudio+0x5b8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fdbe 	bl	80012f4 <readInt16FromSDRAM>
 8001778:	4603      	mov	r3, r0
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe ff4a 	bl	8000614 <__aeabi_i2d>
 8001780:	a351      	add	r3, pc, #324	; (adr r3, 80018c8 <processAudio+0x578>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe ffaf 	bl	80006e8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4620      	mov	r0, r4
 8001790:	4629      	mov	r1, r5
 8001792:	f7fe fdf3 	bl	800037c <__adddf3>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4614      	mov	r4, r2
 800179c:	461d      	mov	r5, r3
 800179e:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <processAudio+0x5a8>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b5a      	ldr	r3, [pc, #360]	; (800190c <processAudio+0x5bc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fda3 	bl	80012f4 <readInt16FromSDRAM>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe ff2f 	bl	8000614 <__aeabi_i2d>
 80017b6:	a346      	add	r3, pc, #280	; (adr r3, 80018d0 <processAudio+0x580>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe ff94 	bl	80006e8 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4620      	mov	r0, r4
 80017c6:	4629      	mov	r1, r5
 80017c8:	f7fe fdd8 	bl	800037c <__adddf3>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4614      	mov	r4, r2
 80017d2:	461d      	mov	r5, r3
 80017d4:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <processAudio+0x5a8>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b4d      	ldr	r3, [pc, #308]	; (8001910 <processAudio+0x5c0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fd88 	bl	80012f4 <readInt16FromSDRAM>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe ff14 	bl	8000614 <__aeabi_i2d>
 80017ec:	a33a      	add	r3, pc, #232	; (adr r3, 80018d8 <processAudio+0x588>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	f7fe ff79 	bl	80006e8 <__aeabi_dmul>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4620      	mov	r0, r4
 80017fc:	4629      	mov	r1, r5
 80017fe:	f7fe fdbd 	bl	800037c <__adddf3>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4614      	mov	r4, r2
 8001808:	461d      	mov	r5, r3
 800180a:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <processAudio+0x5a8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fd70 	bl	80012f4 <readInt16FromSDRAM>
 8001814:	4603      	mov	r3, r0
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fefc 	bl	8000614 <__aeabi_i2d>
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <processAudio+0x5c4>)
 8001822:	f7fe ff61 	bl	80006e8 <__aeabi_dmul>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4620      	mov	r0, r4
 800182c:	4629      	mov	r1, r5
 800182e:	f7fe fda5 	bl	800037c <__adddf3>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	18d4      	adds	r4, r2, r3
 8001842:	f7ff fa01 	bl	8000c48 <__aeabi_d2iz>
 8001846:	4603      	mov	r3, r0
 8001848:	b21b      	sxth	r3, r3
 800184a:	8023      	strh	r3, [r4, #0]
 800184c:	e00a      	b.n	8001864 <processAudio+0x514>



			}

			else {out[n] = readInt16FromSDRAM(posi);}
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <processAudio+0x5a8>)
 8001850:	6819      	ldr	r1, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	18d4      	adds	r4, r2, r3
 800185a:	4608      	mov	r0, r1
 800185c:	f7ff fd4a 	bl	80012f4 <readInt16FromSDRAM>
 8001860:	4603      	mov	r3, r0
 8001862:	8023      	strh	r3, [r4, #0]


			if(posi>100000)
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <processAudio+0x5a8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <processAudio+0x5c8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	dd02      	ble.n	8001874 <processAudio+0x524>
			 {posi=0;}
 800186e:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <processAudio+0x5a8>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
		for (int n = 0; n < AUDIO_BUF_SIZE; n++){
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3301      	adds	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001880:	f4ff ad71 	bcc.w	8001366 <processAudio+0x16>


			//out[n] = in[n-nu];
		}

		if((posi%fftSize ==0)&& (posi>fftSize)){
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <processAudio+0x5a8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800188c:	2b00      	cmp	r3, #0
 800188e:	d110      	bne.n	80018b2 <processAudio+0x562>
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <processAudio+0x5a8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b80      	cmp	r3, #128	; 0x80
 8001896:	dd0c      	ble.n	80018b2 <processAudio+0x562>
			uiDisplayInputLevel(1, posi);
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <processAudio+0x5a8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe feb9 	bl	8000614 <__aeabi_i2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	ec43 2b11 	vmov	d1, r2, r3
 80018aa:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80018e0 <processAudio+0x590>
 80018ae:	f002 fedd 	bl	800466c <uiDisplayInputLevel>

		}
		runFFT();
 80018b2:	f000 f833 	bl	800191c <runFFT>


//	out[n] = in[n];

	LED_Off();
 80018b6:	f002 ff71 	bl	800479c <LED_Off>
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018c4:	f3af 8000 	nop.w
 80018c8:	eb851eb8 	.word	0xeb851eb8
 80018cc:	3fbeb851 	.word	0x3fbeb851
 80018d0:	eb851eb8 	.word	0xeb851eb8
 80018d4:	3faeb851 	.word	0x3faeb851
 80018d8:	eb851eb8 	.word	0xeb851eb8
 80018dc:	3f9eb851 	.word	0x3f9eb851
 80018e0:	00000000 	.word	0x00000000
 80018e4:	3ff00000 	.word	0x3ff00000
 80018e8:	20000014 	.word	0x20000014
 80018ec:	20001228 	.word	0x20001228
 80018f0:	20000018 	.word	0x20000018
 80018f4:	2000122c 	.word	0x2000122c
 80018f8:	200010f8 	.word	0x200010f8
 80018fc:	20000008 	.word	0x20000008
 8001900:	2000001c 	.word	0x2000001c
 8001904:	3fd00000 	.word	0x3fd00000
 8001908:	20000020 	.word	0x20000020
 800190c:	20000024 	.word	0x20000024
 8001910:	20000028 	.word	0x20000028
 8001914:	3fe00000 	.word	0x3fe00000
 8001918:	000186a0 	.word	0x000186a0

0800191c <runFFT>:




void runFFT()
{
 800191c:	b580      	push	{r7, lr}
 800191e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8001922:	af00      	add	r7, sp, #0
	//int32_t startTime, stopTime, totalTime;


	float32_t inputData[fftSize];
	float32_t rfftOutput[fftSize];
	for(int i=0;i<fftSize;i++)
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800192a:	e01e      	b.n	800196a <runFFT+0x4e>
	{

		inputData[i]= (float32_t)readInt16FromSDRAM(posi-(fftSize*2)+i*2);
 800192c:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <runFFT+0x84>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001934:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fcd9 	bl	80012f4 <readInt16FromSDRAM>
 8001942:	4603      	mov	r3, r0
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001950:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 8001954:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<fftSize;i++)
 8001960:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001964:	3301      	adds	r3, #1
 8001966:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800196a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800196e:	2b7f      	cmp	r3, #127	; 0x7f
 8001970:	dddc      	ble.n	800192c <runFFT+0x10>




	//float32_t maxValue;
	uint8_t rfftFlag=0;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 3403 	strb.w	r3, [r7, #1027]	; 0x403
	 arm_rfft_fast_instance_f32 * S,
	 float32_t * p, float32_t * pOut,
	 uint8_t ifftFlag);*/

	/* Process the real data through the RFFT module */
	arm_rfft_fast_f32(&fft, inputData, rfftOutput, rfftFlag);
 8001978:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 800197c:	463a      	mov	r2, r7
 800197e:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8001982:	4808      	ldr	r0, [pc, #32]	; (80019a4 <runFFT+0x88>)
 8001984:	f017 f95a 	bl	8018c3c <arm_rfft_fast_f32>

	/* Process the data through the Complex Magnitude Module for
	  calculating the magnitude at each bin */
	//arm_cmplx_mag_f32(rfftOutput, magFFt, fftSize / 2);
	arm_cmplx_mag_f32(rfftOutput, magFFt, fftSize/2);
 8001988:	463b      	mov	r3, r7
 800198a:	2240      	movs	r2, #64	; 0x40
 800198c:	4906      	ldr	r1, [pc, #24]	; (80019a8 <runFFT+0x8c>)
 800198e:	4618      	mov	r0, r3
 8001990:	f017 fdb8 	bl	8019504 <arm_cmplx_mag_f32>


	//MAP_SysCtlDelay(1);


}
 8001994:	bf00      	nop
 8001996:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200010f8 	.word	0x200010f8
 80019a4:	200011fc 	.word	0x200011fc
 80019a8:	200010fc 	.word	0x200010fc

080019ac <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <vApplicationGetIdleTaskMemory+0x2c>)
 80019f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <vApplicationGetIdleTaskMemory+0x30>)
 80019f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20001230 	.word	0x20001230
 8001a10:	200012e8 	.word	0x200012e8

08001a14 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a18:	f3bf 8f4f 	dsb	sy
}
 8001a1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a1e:	f3bf 8f6f 	isb	sy
}
 8001a22:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <SCB_EnableICache+0x48>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001a2c:	f3bf 8f4f 	dsb	sy
}
 8001a30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a32:	f3bf 8f6f 	isb	sy
}
 8001a36:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <SCB_EnableICache+0x48>)
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <SCB_EnableICache+0x48>)
 8001a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a42:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a44:	f3bf 8f4f 	dsb	sy
}
 8001a48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a4a:	f3bf 8f6f 	isb	sy
}
 8001a4e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <SCB_InvalidateICache>:
/**
  \brief   Invalidate I-Cache
  \details Invalidates I-Cache
  */
__STATIC_INLINE void SCB_InvalidateICache (void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001a64:	f3bf 8f4f 	dsb	sy
}
 8001a68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a6a:	f3bf 8f6f 	isb	sy
}
 8001a6e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <SCB_InvalidateICache+0x30>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001a78:	f3bf 8f4f 	dsb	sy
}
 8001a7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a7e:	f3bf 8f6f 	isb	sy
}
 8001a82:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <SCB_EnableDCache+0x84>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001aa2:	f3bf 8f4f 	dsb	sy
}
 8001aa6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <SCB_EnableDCache+0x84>)
 8001aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aae:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	0b5b      	lsrs	r3, r3, #13
 8001ab4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ab8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	015a      	lsls	r2, r3, #5
 8001ac8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001acc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ad2:	4911      	ldr	r1, [pc, #68]	; (8001b18 <SCB_EnableDCache+0x84>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1e5a      	subs	r2, r3, #1
 8001ade:	60ba      	str	r2, [r7, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1ef      	bne.n	8001ac4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1e5a      	subs	r2, r3, #1
 8001ae8:	60fa      	str	r2, [r7, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1e5      	bne.n	8001aba <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001aee:	f3bf 8f4f 	dsb	sy
}
 8001af2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <SCB_EnableDCache+0x84>)
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <SCB_EnableDCache+0x84>)
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b00:	f3bf 8f4f 	dsb	sy
}
 8001b04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b06:	f3bf 8f6f 	isb	sy
}
 8001b0a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <SCB_InvalidateDCache>:
/**
  \brief   Invalidate D-Cache
  \details Invalidates D-Cache
  */
__STATIC_INLINE void SCB_InvalidateDCache (void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001b22:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <SCB_InvalidateDCache+0x74>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <SCB_InvalidateDCache+0x74>)
 8001b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b36:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	0b5b      	lsrs	r3, r3, #13
 8001b3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b40:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b4a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001b54:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b5a:	490d      	ldr	r1, [pc, #52]	; (8001b90 <SCB_InvalidateDCache+0x74>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1e5a      	subs	r2, r3, #1
 8001b66:	60ba      	str	r2, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ef      	bne.n	8001b4c <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1e5a      	subs	r2, r3, #1
 8001b70:	60fa      	str	r2, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1e5      	bne.n	8001b42 <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b76:	f3bf 8f4f 	dsb	sy
}
 8001b7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b7c:	f3bf 8f6f 	isb	sy
}
 8001b80:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b94:	b5b0      	push	{r4, r5, r7, lr}
 8001b96:	b08e      	sub	sp, #56	; 0x38
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	SCB_InvalidateDCache();
 8001b9a:	f7ff ffbf 	bl	8001b1c <SCB_InvalidateDCache>
	SCB_InvalidateICache();
 8001b9e:	f7ff ff5f 	bl	8001a60 <SCB_InvalidateICache>


  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001ba2:	f7ff ff37 	bl	8001a14 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001ba6:	f7ff ff75 	bl	8001a94 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001baa:	f004 fb6a 	bl	8006282 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bae:	f000 f879 	bl	8001ca4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001bb2:	f000 f8e9 	bl	8001d88 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb6:	f001 f8b9 	bl	8002d2c <MX_GPIO_Init>
  MX_DMA_Init();
 8001bba:	f000 fff5 	bl	8002ba8 <MX_DMA_Init>
  MX_ADC3_Init();
 8001bbe:	f000 f915 	bl	8001dec <MX_ADC3_Init>
  MX_CRC_Init();
 8001bc2:	f000 f965 	bl	8001e90 <MX_CRC_Init>
  MX_DCMI_Init();
 8001bc6:	f000 f985 	bl	8001ed4 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001bca:	f000 f9b7 	bl	8001f3c <MX_DMA2D_Init>
  MX_FMC_Init();
 8001bce:	f001 f859 	bl	8002c84 <MX_FMC_Init>
  MX_I2C1_Init();
 8001bd2:	f000 f9e5 	bl	8001fa0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001bd6:	f000 fa23 	bl	8002020 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001bda:	f000 fa61 	bl	80020a0 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001bde:	f000 fae3 	bl	80021a8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001be2:	f000 fb23 	bl	800222c <MX_RTC_Init>
  MX_SAI2_Init();
 8001be6:	f000 fbc5 	bl	8002374 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001bea:	f000 fc7f 	bl	80024ec <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001bee:	f000 fc9f 	bl	8002530 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8001bf2:	f000 fccd 	bl	8002590 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bf6:	f000 fd77 	bl	80026e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bfa:	f000 fdeb 	bl	80027d4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001bfe:	f000 fe61 	bl	80028c4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001c02:	f000 fed7 	bl	80029b4 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001c06:	f000 ff29 	bl	8002a5c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001c0a:	f000 ff6d 	bl	8002ae8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001c0e:	f000 ff9b 	bl	8002b48 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001c12:	f011 f997 	bl	8012f44 <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8001c16:	f011 fbe5 	bl	80133e4 <MX_LIBJPEG_Init>

	//MPU_Init(); // uncomment in case of weird behaviors with SDRAM or LCD, see comment at mpu.c:74

	/* post-init SDRAM */
	// Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
	FMC_Bank1->BTCR[0] = 0x000030D2;
 8001c1a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001c1e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c22:	601a      	str	r2, [r3, #0]

	/* post-init touchscreen */
	TS_Init();
 8001c24:	f003 fc12 	bl	800544c <TS_Init>
	printf("Touchscreen Init: OK\n");
 8001c28:	4818      	ldr	r0, [pc, #96]	; (8001c8c <main+0xf8>)
 8001c2a:	f018 fb0b 	bl	801a244 <puts>

	SCB_EnableICache(); // comment out if in step debugging to avoid weird behaviours
 8001c2e:	f7ff fef1 	bl	8001a14 <SCB_EnableICache>
	SCB_EnableDCache();
 8001c32:	f7ff ff2f 	bl	8001a94 <SCB_EnableDCache>
	printf("Cache enabled\n");
 8001c36:	4816      	ldr	r0, [pc, #88]	; (8001c90 <main+0xfc>)
 8001c38:	f018 fb04 	bl	801a244 <puts>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <main+0x100>)
 8001c3e:	f107 041c 	add.w	r4, r7, #28
 8001c42:	461d      	mov	r5, r3
 8001c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f013 feb8 	bl	80159cc <osThreadCreate>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <main+0x104>)
 8001c60:	6013      	str	r3, [r2, #0]

  /* definition and creation of uiTask */
  osThreadDef(uiTask, startUITask, osPriorityLow, 0, 1024);
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <main+0x108>)
 8001c64:	463c      	mov	r4, r7
 8001c66:	461d      	mov	r5, r3
 8001c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uiTaskHandle = osThreadCreate(osThread(uiTask), NULL);
 8001c74:	463b      	mov	r3, r7
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f013 fea7 	bl	80159cc <osThreadCreate>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <main+0x10c>)
 8001c82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001c84:	f013 fe7f 	bl	8015986 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001c88:	e7fe      	b.n	8001c88 <main+0xf4>
 8001c8a:	bf00      	nop
 8001c8c:	0801c9d4 	.word	0x0801c9d4
 8001c90:	0801c9ec 	.word	0x0801c9ec
 8001c94:	0801c9fc 	.word	0x0801c9fc
 8001c98:	20001e04 	.word	0x20001e04
 8001c9c:	0801ca18 	.word	0x0801ca18
 8001ca0:	20001e08 	.word	0x20001e08

08001ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b094      	sub	sp, #80	; 0x50
 8001ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001caa:	f107 0320 	add.w	r3, r7, #32
 8001cae:	2230      	movs	r2, #48	; 0x30
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f018 f942 	bl	8019f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001cc8:	f009 fa1a 	bl	800b100 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <SystemClock_Config+0xdc>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	4a2b      	ldr	r2, [pc, #172]	; (8001d80 <SystemClock_Config+0xdc>)
 8001cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <SystemClock_Config+0xdc>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <SystemClock_Config+0xe0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <SystemClock_Config+0xe0>)
 8001cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <SystemClock_Config+0xe0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001cfc:	2309      	movs	r3, #9
 8001cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d06:	2301      	movs	r3, #1
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001d14:	2319      	movs	r3, #25
 8001d16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001d18:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001d1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001d22:	2309      	movs	r3, #9
 8001d24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d26:	f107 0320 	add.w	r3, r7, #32
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f00a fa24 	bl	800c178 <HAL_RCC_OscConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d36:	f001 fa69 	bl	800320c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d3a:	f009 f9f1 	bl	800b120 <HAL_PWREx_EnableOverDrive>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001d44:	f001 fa62 	bl	800320c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d48:	230f      	movs	r3, #15
 8001d4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2107      	movs	r1, #7
 8001d66:	4618      	mov	r0, r3
 8001d68:	f00a fcaa 	bl	800c6c0 <HAL_RCC_ClockConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001d72:	f001 fa4b 	bl	800320c <Error_Handler>
  }
}
 8001d76:	bf00      	nop
 8001d78:	3750      	adds	r7, #80	; 0x50
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40007000 	.word	0x40007000

08001d88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b0a2      	sub	sp, #136	; 0x88
 8001d8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2284      	movs	r2, #132	; 0x84
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f018 f8d1 	bl	8019f3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <PeriphCommonClock_Config+0x60>)
 8001d9c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001d9e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001da2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001da4:	2305      	movs	r3, #5
 8001da6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 8;
 8001da8:	2308      	movs	r3, #8
 8001daa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001dac:	2303      	movs	r3, #3
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001dbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001dc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f00a fe8e 	bl	800caf0 <HAL_RCCEx_PeriphCLKConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001dda:	f001 fa17 	bl	800320c <Error_Handler>
  }
}
 8001dde:	bf00      	nop
 8001de0:	3788      	adds	r7, #136	; 0x88
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	00b00008 	.word	0x00b00008

08001dec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001df2:	463b      	mov	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e00:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <MX_ADC3_Init+0x9c>)
 8001e02:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e0a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e2e:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <MX_ADC3_Init+0xa0>)
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e4e:	f004 fa69 	bl	8006324 <HAL_ADC_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001e58:	f001 f9d8 	bl	800320c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e60:	2301      	movs	r3, #1
 8001e62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_ADC3_Init+0x98>)
 8001e6e:	f004 fa9d 	bl	80063ac <HAL_ADC_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001e78:	f001 f9c8 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200014e8 	.word	0x200014e8
 8001e88:	40012200 	.word	0x40012200
 8001e8c:	0f000001 	.word	0x0f000001

08001e90 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <MX_CRC_Init+0x3c>)
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <MX_CRC_Init+0x40>)
 8001e98:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_CRC_Init+0x3c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <MX_CRC_Init+0x3c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_CRC_Init+0x3c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <MX_CRC_Init+0x3c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MX_CRC_Init+0x3c>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001eb8:	4804      	ldr	r0, [pc, #16]	; (8001ecc <MX_CRC_Init+0x3c>)
 8001eba:	f004 fddb 	bl	8006a74 <HAL_CRC_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001ec4:	f001 f9a2 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20001530 	.word	0x20001530
 8001ed0:	40023000 	.word	0x40023000

08001ed4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <MX_DCMI_Init+0x60>)
 8001eda:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <MX_DCMI_Init+0x64>)
 8001edc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <MX_DCMI_Init+0x60>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <MX_DCMI_Init+0x60>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <MX_DCMI_Init+0x60>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001ef0:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <MX_DCMI_Init+0x60>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_DCMI_Init+0x60>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <MX_DCMI_Init+0x60>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_DCMI_Init+0x60>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <MX_DCMI_Init+0x60>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_DCMI_Init+0x60>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <MX_DCMI_Init+0x60>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_DCMI_Init+0x60>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_DCMI_Init+0x60>)
 8001f22:	f004 fe91 	bl	8006c48 <HAL_DCMI_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001f2c:	f001 f96e 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20001554 	.word	0x20001554
 8001f38:	50050000 	.word	0x50050000

08001f3c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <MX_DMA2D_Init+0x5c>)
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <MX_DMA2D_Init+0x60>)
 8001f44:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <MX_DMA2D_Init+0x5c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <MX_DMA2D_Init+0x5c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_DMA2D_Init+0x5c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <MX_DMA2D_Init+0x5c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <MX_DMA2D_Init+0x5c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <MX_DMA2D_Init+0x5c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <MX_DMA2D_Init+0x5c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001f70:	4809      	ldr	r0, [pc, #36]	; (8001f98 <MX_DMA2D_Init+0x5c>)
 8001f72:	f005 fbc9 	bl	8007708 <HAL_DMA2D_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001f7c:	f001 f946 	bl	800320c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001f80:	2101      	movs	r1, #1
 8001f82:	4805      	ldr	r0, [pc, #20]	; (8001f98 <MX_DMA2D_Init+0x5c>)
 8001f84:	f005 fe2e 	bl	8007be4 <HAL_DMA2D_ConfigLayer>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001f8e:	f001 f93d 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20001604 	.word	0x20001604
 8001f9c:	4002b000 	.word	0x4002b000

08001fa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <MX_I2C1_Init+0x78>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fac:	4a1b      	ldr	r2, [pc, #108]	; (800201c <MX_I2C1_Init+0x7c>)
 8001fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fda:	480e      	ldr	r0, [pc, #56]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fdc:	f007 ff92 	bl	8009f04 <HAL_I2C_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fe6:	f001 f911 	bl	800320c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fea:	2100      	movs	r1, #0
 8001fec:	4809      	ldr	r0, [pc, #36]	; (8002014 <MX_I2C1_Init+0x74>)
 8001fee:	f008 fd11 	bl	800aa14 <HAL_I2CEx_ConfigAnalogFilter>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ff8:	f001 f908 	bl	800320c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_I2C1_Init+0x74>)
 8002000:	f008 fd53 	bl	800aaaa <HAL_I2CEx_ConfigDigitalFilter>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800200a:	f001 f8ff 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20001644 	.word	0x20001644
 8002018:	40005400 	.word	0x40005400
 800201c:	20404768 	.word	0x20404768

08002020 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_I2C3_Init+0x74>)
 8002026:	4a1c      	ldr	r2, [pc, #112]	; (8002098 <MX_I2C3_Init+0x78>)
 8002028:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <MX_I2C3_Init+0x74>)
 800202c:	4a1b      	ldr	r2, [pc, #108]	; (800209c <MX_I2C3_Init+0x7c>)
 800202e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_I2C3_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <MX_I2C3_Init+0x74>)
 8002038:	2201      	movs	r2, #1
 800203a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_I2C3_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_I2C3_Init+0x74>)
 8002044:	2200      	movs	r2, #0
 8002046:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <MX_I2C3_Init+0x74>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_I2C3_Init+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_I2C3_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800205a:	480e      	ldr	r0, [pc, #56]	; (8002094 <MX_I2C3_Init+0x74>)
 800205c:	f007 ff52 	bl	8009f04 <HAL_I2C_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002066:	f001 f8d1 	bl	800320c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800206a:	2100      	movs	r1, #0
 800206c:	4809      	ldr	r0, [pc, #36]	; (8002094 <MX_I2C3_Init+0x74>)
 800206e:	f008 fcd1 	bl	800aa14 <HAL_I2CEx_ConfigAnalogFilter>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002078:	f001 f8c8 	bl	800320c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800207c:	2100      	movs	r1, #0
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_I2C3_Init+0x74>)
 8002080:	f008 fd13 	bl	800aaaa <HAL_I2CEx_ConfigDigitalFilter>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800208a:	f001 f8bf 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20001698 	.word	0x20001698
 8002098:	40005c00 	.word	0x40005c00
 800209c:	20404768 	.word	0x20404768

080020a0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08e      	sub	sp, #56	; 0x38
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2234      	movs	r2, #52	; 0x34
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f017 ff45 	bl	8019f3c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80020b2:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <MX_LTDC_Init+0x100>)
 80020b4:	4a3b      	ldr	r2, [pc, #236]	; (80021a4 <MX_LTDC_Init+0x104>)
 80020b6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80020b8:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <MX_LTDC_Init+0x100>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80020be:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <MX_LTDC_Init+0x100>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80020c4:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <MX_LTDC_Init+0x100>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80020ca:	4b35      	ldr	r3, [pc, #212]	; (80021a0 <MX_LTDC_Init+0x100>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80020d0:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <MX_LTDC_Init+0x100>)
 80020d2:	2228      	movs	r2, #40	; 0x28
 80020d4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80020d6:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <MX_LTDC_Init+0x100>)
 80020d8:	2209      	movs	r2, #9
 80020da:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80020dc:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <MX_LTDC_Init+0x100>)
 80020de:	2235      	movs	r2, #53	; 0x35
 80020e0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <MX_LTDC_Init+0x100>)
 80020e4:	220b      	movs	r2, #11
 80020e6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <MX_LTDC_Init+0x100>)
 80020ea:	f240 2215 	movw	r2, #533	; 0x215
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <MX_LTDC_Init+0x100>)
 80020f2:	f240 121b 	movw	r2, #283	; 0x11b
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80020f8:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <MX_LTDC_Init+0x100>)
 80020fa:	f240 2235 	movw	r2, #565	; 0x235
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <MX_LTDC_Init+0x100>)
 8002102:	f240 121d 	movw	r2, #285	; 0x11d
 8002106:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002108:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <MX_LTDC_Init+0x100>)
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002110:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <MX_LTDC_Init+0x100>)
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002118:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <MX_LTDC_Init+0x100>)
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002120:	481f      	ldr	r0, [pc, #124]	; (80021a0 <MX_LTDC_Init+0x100>)
 8002122:	f008 fd0f 	bl	800ab44 <HAL_LTDC_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800212c:	f001 f86e 	bl	800320c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002134:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002138:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800213e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002142:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002144:	2302      	movs	r3, #2
 8002146:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002148:	23ff      	movs	r3, #255	; 0xff
 800214a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002150:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002154:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002156:	2307      	movs	r3, #7
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800215a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8002160:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8002166:	f44f 7388 	mov.w	r3, #272	; 0x110
 800216a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	2200      	movs	r2, #0
 8002182:	4619      	mov	r1, r3
 8002184:	4806      	ldr	r0, [pc, #24]	; (80021a0 <MX_LTDC_Init+0x100>)
 8002186:	f008 fdad 	bl	800ace4 <HAL_LTDC_ConfigLayer>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002190:	f001 f83c 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

	LCD_Init();
 8002194:	f002 fc2a 	bl	80049ec <LCD_Init>

  /* USER CODE END LTDC_Init 2 */

}
 8002198:	bf00      	nop
 800219a:	3738      	adds	r7, #56	; 0x38
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	200016ec 	.word	0x200016ec
 80021a4:	40016800 	.word	0x40016800

080021a8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <MX_QUADSPI_Init+0x7c>)
 80021ae:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <MX_QUADSPI_Init+0x80>)
 80021b0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <MX_QUADSPI_Init+0x7c>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <MX_QUADSPI_Init+0x7c>)
 80021ba:	2204      	movs	r2, #4
 80021bc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <MX_QUADSPI_Init+0x7c>)
 80021c0:	2210      	movs	r2, #16
 80021c2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80021c4:	4b17      	ldr	r3, [pc, #92]	; (8002224 <MX_QUADSPI_Init+0x7c>)
 80021c6:	2218      	movs	r2, #24
 80021c8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <MX_QUADSPI_Init+0x7c>)
 80021cc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80021d0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <MX_QUADSPI_Init+0x7c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <MX_QUADSPI_Init+0x7c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <MX_QUADSPI_Init+0x7c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80021e4:	480f      	ldr	r0, [pc, #60]	; (8002224 <MX_QUADSPI_Init+0x7c>)
 80021e6:	f008 ffeb 	bl	800b1c0 <HAL_QSPI_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80021f0:	f001 f80c 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

	// + memory reset + config dummy cycles on QSPI memory side, see disco_qspi.c
	/* QSPI memory reset */
	if (DISCO_QSPI_ResetMemory(&hqspi) != HAL_OK) Error_Handler();
 80021f4:	480b      	ldr	r0, [pc, #44]	; (8002224 <MX_QUADSPI_Init+0x7c>)
 80021f6:	f002 fefd 	bl	8004ff4 <DISCO_QSPI_ResetMemory>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_QUADSPI_Init+0x5c>
 8002200:	f001 f804 	bl	800320c <Error_Handler>
	/* Configuration of the dummy cycles on QSPI memory side */
	if (DISCO_QSPI_DummyCyclesCfg(&hqspi) != HAL_OK) Error_Handler();
 8002204:	4807      	ldr	r0, [pc, #28]	; (8002224 <MX_QUADSPI_Init+0x7c>)
 8002206:	f002 ff37 	bl	8005078 <DISCO_QSPI_DummyCyclesCfg>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_QUADSPI_Init+0x6c>
 8002210:	f000 fffc 	bl	800320c <Error_Handler>

	DISCO_QSPI_EnableMemoryMappedMode();
 8002214:	f002 febc 	bl	8004f90 <DISCO_QSPI_EnableMemoryMappedMode>
	HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8002218:	205c      	movs	r0, #92	; 0x5c
 800221a:	f004 fc1d 	bl	8006a58 <HAL_NVIC_DisableIRQ>


  /* USER CODE END QUADSPI_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20001794 	.word	0x20001794
 8002228:	a0001000 	.word	0xa0001000

0800222c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b090      	sub	sp, #64	; 0x40
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002242:	2300      	movs	r3, #0
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002246:	463b      	mov	r3, r7
 8002248:	2228      	movs	r2, #40	; 0x28
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f017 fe75 	bl	8019f3c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002252:	4b46      	ldr	r3, [pc, #280]	; (800236c <MX_RTC_Init+0x140>)
 8002254:	4a46      	ldr	r2, [pc, #280]	; (8002370 <MX_RTC_Init+0x144>)
 8002256:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002258:	4b44      	ldr	r3, [pc, #272]	; (800236c <MX_RTC_Init+0x140>)
 800225a:	2200      	movs	r2, #0
 800225c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800225e:	4b43      	ldr	r3, [pc, #268]	; (800236c <MX_RTC_Init+0x140>)
 8002260:	227f      	movs	r2, #127	; 0x7f
 8002262:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002264:	4b41      	ldr	r3, [pc, #260]	; (800236c <MX_RTC_Init+0x140>)
 8002266:	22ff      	movs	r2, #255	; 0xff
 8002268:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800226a:	4b40      	ldr	r3, [pc, #256]	; (800236c <MX_RTC_Init+0x140>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002270:	4b3e      	ldr	r3, [pc, #248]	; (800236c <MX_RTC_Init+0x140>)
 8002272:	2200      	movs	r2, #0
 8002274:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002276:	4b3d      	ldr	r3, [pc, #244]	; (800236c <MX_RTC_Init+0x140>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800227c:	483b      	ldr	r0, [pc, #236]	; (800236c <MX_RTC_Init+0x140>)
 800227e:	f00b f96b 	bl	800d558 <HAL_RTC_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002288:	f000 ffc0 	bl	800320c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800228c:	2300      	movs	r3, #0
 800228e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8002292:	2300      	movs	r3, #0
 8002294:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8002298:	2300      	movs	r3, #0
 800229a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800229e:	2300      	movs	r3, #0
 80022a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80022a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022aa:	2201      	movs	r2, #1
 80022ac:	4619      	mov	r1, r3
 80022ae:	482f      	ldr	r0, [pc, #188]	; (800236c <MX_RTC_Init+0x140>)
 80022b0:	f00b f9d6 	bl	800d660 <HAL_RTC_SetTime>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80022ba:	f000 ffa7 	bl	800320c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80022be:	2301      	movs	r3, #1
 80022c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80022c4:	2301      	movs	r3, #1
 80022c6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80022d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022da:	2201      	movs	r2, #1
 80022dc:	4619      	mov	r1, r3
 80022de:	4823      	ldr	r0, [pc, #140]	; (800236c <MX_RTC_Init+0x140>)
 80022e0:	f00b fa58 	bl	800d794 <HAL_RTC_SetDate>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80022ea:	f000 ff8f 	bl	800320c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002312:	2301      	movs	r3, #1
 8002314:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800231e:	463b      	mov	r3, r7
 8002320:	2201      	movs	r2, #1
 8002322:	4619      	mov	r1, r3
 8002324:	4811      	ldr	r0, [pc, #68]	; (800236c <MX_RTC_Init+0x140>)
 8002326:	f00b fab9 	bl	800d89c <HAL_RTC_SetAlarm>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002330:	f000 ff6c 	bl	800320c <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800233a:	463b      	mov	r3, r7
 800233c:	2201      	movs	r2, #1
 800233e:	4619      	mov	r1, r3
 8002340:	480a      	ldr	r0, [pc, #40]	; (800236c <MX_RTC_Init+0x140>)
 8002342:	f00b faab 	bl	800d89c <HAL_RTC_SetAlarm>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 800234c:	f000 ff5e 	bl	800320c <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002350:	2202      	movs	r2, #2
 8002352:	2100      	movs	r1, #0
 8002354:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_RTC_Init+0x140>)
 8002356:	f00b fc6d 	bl	800dc34 <HAL_RTCEx_SetTimeStamp>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002360:	f000 ff54 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002364:	bf00      	nop
 8002366:	3740      	adds	r7, #64	; 0x40
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	200017e0 	.word	0x200017e0
 8002370:	40002800 	.word	0x40002800

08002374 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002378:	4b58      	ldr	r3, [pc, #352]	; (80024dc <MX_SAI2_Init+0x168>)
 800237a:	4a59      	ldr	r2, [pc, #356]	; (80024e0 <MX_SAI2_Init+0x16c>)
 800237c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800237e:	4b57      	ldr	r3, [pc, #348]	; (80024dc <MX_SAI2_Init+0x168>)
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002384:	4b55      	ldr	r3, [pc, #340]	; (80024dc <MX_SAI2_Init+0x168>)
 8002386:	2200      	movs	r2, #0
 8002388:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 800238a:	4b54      	ldr	r3, [pc, #336]	; (80024dc <MX_SAI2_Init+0x168>)
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002390:	4b52      	ldr	r3, [pc, #328]	; (80024dc <MX_SAI2_Init+0x168>)
 8002392:	2200      	movs	r2, #0
 8002394:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002396:	4b51      	ldr	r3, [pc, #324]	; (80024dc <MX_SAI2_Init+0x168>)
 8002398:	2201      	movs	r2, #1
 800239a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800239c:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <MX_SAI2_Init+0x168>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80023a2:	4b4e      	ldr	r3, [pc, #312]	; (80024dc <MX_SAI2_Init+0x168>)
 80023a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023a8:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80023aa:	4b4c      	ldr	r3, [pc, #304]	; (80024dc <MX_SAI2_Init+0x168>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80023b0:	4b4a      	ldr	r3, [pc, #296]	; (80024dc <MX_SAI2_Init+0x168>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 80023b6:	4b49      	ldr	r3, [pc, #292]	; (80024dc <MX_SAI2_Init+0x168>)
 80023b8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80023bc:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80023be:	4b47      	ldr	r3, [pc, #284]	; (80024dc <MX_SAI2_Init+0x168>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80023c4:	4b45      	ldr	r3, [pc, #276]	; (80024dc <MX_SAI2_Init+0x168>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80023ca:	4b44      	ldr	r3, [pc, #272]	; (80024dc <MX_SAI2_Init+0x168>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80023d0:	4b42      	ldr	r3, [pc, #264]	; (80024dc <MX_SAI2_Init+0x168>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 64;
 80023d6:	4b41      	ldr	r3, [pc, #260]	; (80024dc <MX_SAI2_Init+0x168>)
 80023d8:	2240      	movs	r2, #64	; 0x40
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 80023dc:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <MX_SAI2_Init+0x168>)
 80023de:	2220      	movs	r2, #32
 80023e0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80023e2:	4b3e      	ldr	r3, [pc, #248]	; (80024dc <MX_SAI2_Init+0x168>)
 80023e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023e8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80023ea:	4b3c      	ldr	r3, [pc, #240]	; (80024dc <MX_SAI2_Init+0x168>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80023f0:	4b3a      	ldr	r3, [pc, #232]	; (80024dc <MX_SAI2_Init+0x168>)
 80023f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80023f6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80023f8:	4b38      	ldr	r3, [pc, #224]	; (80024dc <MX_SAI2_Init+0x168>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80023fe:	4b37      	ldr	r3, [pc, #220]	; (80024dc <MX_SAI2_Init+0x168>)
 8002400:	2200      	movs	r2, #0
 8002402:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 4;
 8002404:	4b35      	ldr	r3, [pc, #212]	; (80024dc <MX_SAI2_Init+0x168>)
 8002406:	2204      	movs	r2, #4
 8002408:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 800240a:	4b34      	ldr	r3, [pc, #208]	; (80024dc <MX_SAI2_Init+0x168>)
 800240c:	2205      	movs	r2, #5
 800240e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002410:	4832      	ldr	r0, [pc, #200]	; (80024dc <MX_SAI2_Init+0x168>)
 8002412:	f00b fc77 	bl	800dd04 <HAL_SAI_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_SAI2_Init+0xac>
  {
    Error_Handler();
 800241c:	f000 fef6 	bl	800320c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002420:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <MX_SAI2_Init+0x170>)
 8002422:	4a31      	ldr	r2, [pc, #196]	; (80024e8 <MX_SAI2_Init+0x174>)
 8002424:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002426:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <MX_SAI2_Init+0x170>)
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <MX_SAI2_Init+0x170>)
 800242e:	2203      	movs	r2, #3
 8002430:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8002432:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <MX_SAI2_Init+0x170>)
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <MX_SAI2_Init+0x170>)
 800243a:	2200      	movs	r2, #0
 800243c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800243e:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <MX_SAI2_Init+0x170>)
 8002440:	2201      	movs	r2, #1
 8002442:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002444:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <MX_SAI2_Init+0x170>)
 8002446:	2201      	movs	r2, #1
 8002448:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <MX_SAI2_Init+0x170>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002450:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <MX_SAI2_Init+0x170>)
 8002452:	2201      	movs	r2, #1
 8002454:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002456:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <MX_SAI2_Init+0x170>)
 8002458:	2200      	movs	r2, #0
 800245a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <MX_SAI2_Init+0x170>)
 800245e:	2200      	movs	r2, #0
 8002460:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <MX_SAI2_Init+0x170>)
 8002464:	2200      	movs	r2, #0
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002468:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <MX_SAI2_Init+0x170>)
 800246a:	2200      	movs	r2, #0
 800246c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 64;
 800246e:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <MX_SAI2_Init+0x170>)
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8002474:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <MX_SAI2_Init+0x170>)
 8002476:	2220      	movs	r2, #32
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <MX_SAI2_Init+0x170>)
 800247c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002480:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002482:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <MX_SAI2_Init+0x170>)
 8002484:	2200      	movs	r2, #0
 8002486:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002488:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <MX_SAI2_Init+0x170>)
 800248a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800248e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <MX_SAI2_Init+0x170>)
 8002492:	2200      	movs	r2, #0
 8002494:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <MX_SAI2_Init+0x170>)
 8002498:	2200      	movs	r2, #0
 800249a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 4;
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <MX_SAI2_Init+0x170>)
 800249e:	2204      	movs	r2, #4
 80024a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <MX_SAI2_Init+0x170>)
 80024a4:	220a      	movs	r2, #10
 80024a6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80024a8:	480e      	ldr	r0, [pc, #56]	; (80024e4 <MX_SAI2_Init+0x170>)
 80024aa:	f00b fc2b 	bl	800dd04 <HAL_SAI_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_SAI2_Init+0x144>
  {
    Error_Handler();
 80024b4:	f000 feaa 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

	// bug fix:
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <MX_SAI2_Init+0x168>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <MX_SAI2_Init+0x168>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024c6:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2);
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <MX_SAI2_Init+0x170>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <MX_SAI2_Init+0x170>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024d6:	601a      	str	r2, [r3, #0]

  /* USER CODE END SAI2_Init 2 */

}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20001800 	.word	0x20001800
 80024e0:	40015c04 	.word	0x40015c04
 80024e4:	20001884 	.word	0x20001884
 80024e8:	40015c24 	.word	0x40015c24

080024ec <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <MX_SDMMC1_SD_Init+0x3c>)
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <MX_SDMMC1_SD_Init+0x40>)
 80024f4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <MX_SDMMC1_SD_Init+0x3c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <MX_SDMMC1_SD_Init+0x3c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <MX_SDMMC1_SD_Init+0x3c>)
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <MX_SDMMC1_SD_Init+0x3c>)
 800250a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800250e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <MX_SDMMC1_SD_Init+0x3c>)
 8002512:	2200      	movs	r2, #0
 8002514:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <MX_SDMMC1_SD_Init+0x3c>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	200019c8 	.word	0x200019c8
 800252c:	40012c00 	.word	0x40012c00

08002530 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <MX_SPDIFRX_Init+0x5c>)
 8002536:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800253a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <MX_SPDIFRX_Init+0x5c>)
 800253e:	2200      	movs	r2, #0
 8002540:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <MX_SPDIFRX_Init+0x5c>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002548:	4b10      	ldr	r3, [pc, #64]	; (800258c <MX_SPDIFRX_Init+0x5c>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <MX_SPDIFRX_Init+0x5c>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <MX_SPDIFRX_Init+0x5c>)
 8002556:	2200      	movs	r2, #0
 8002558:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <MX_SPDIFRX_Init+0x5c>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <MX_SPDIFRX_Init+0x5c>)
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <MX_SPDIFRX_Init+0x5c>)
 8002568:	2200      	movs	r2, #0
 800256a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <MX_SPDIFRX_Init+0x5c>)
 800256e:	2200      	movs	r2, #0
 8002570:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <MX_SPDIFRX_Init+0x5c>)
 8002574:	2200      	movs	r2, #0
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002578:	4804      	ldr	r0, [pc, #16]	; (800258c <MX_SPDIFRX_Init+0x5c>)
 800257a:	f00d f8cf 	bl	800f71c <HAL_SPDIFRX_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002584:	f000 fe42 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20001a4c 	.word	0x20001a4c

08002590 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b09a      	sub	sp, #104	; 0x68
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
 80025c0:	615a      	str	r2, [r3, #20]
 80025c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	222c      	movs	r2, #44	; 0x2c
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f017 fcb6 	bl	8019f3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025d0:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <MX_TIM1_Init+0x150>)
 80025d2:	4a44      	ldr	r2, [pc, #272]	; (80026e4 <MX_TIM1_Init+0x154>)
 80025d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80025d6:	4b42      	ldr	r3, [pc, #264]	; (80026e0 <MX_TIM1_Init+0x150>)
 80025d8:	2200      	movs	r2, #0
 80025da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025dc:	4b40      	ldr	r3, [pc, #256]	; (80026e0 <MX_TIM1_Init+0x150>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80025e2:	4b3f      	ldr	r3, [pc, #252]	; (80026e0 <MX_TIM1_Init+0x150>)
 80025e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ea:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <MX_TIM1_Init+0x150>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025f0:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <MX_TIM1_Init+0x150>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f6:	4b3a      	ldr	r3, [pc, #232]	; (80026e0 <MX_TIM1_Init+0x150>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025fc:	4838      	ldr	r0, [pc, #224]	; (80026e0 <MX_TIM1_Init+0x150>)
 80025fe:	f00d f8e9 	bl	800f7d4 <HAL_TIM_Base_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002608:	f000 fe00 	bl	800320c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800260c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002610:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002612:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002616:	4619      	mov	r1, r3
 8002618:	4831      	ldr	r0, [pc, #196]	; (80026e0 <MX_TIM1_Init+0x150>)
 800261a:	f00d fc35 	bl	800fe88 <HAL_TIM_ConfigClockSource>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002624:	f000 fdf2 	bl	800320c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002628:	482d      	ldr	r0, [pc, #180]	; (80026e0 <MX_TIM1_Init+0x150>)
 800262a:	f00d f9a3 	bl	800f974 <HAL_TIM_PWM_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002634:	f000 fdea 	bl	800320c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800263c:	2300      	movs	r3, #0
 800263e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002644:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002648:	4619      	mov	r1, r3
 800264a:	4825      	ldr	r0, [pc, #148]	; (80026e0 <MX_TIM1_Init+0x150>)
 800264c:	f00e f8a6 	bl	801079c <HAL_TIMEx_MasterConfigSynchronization>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002656:	f000 fdd9 	bl	800320c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800265a:	2360      	movs	r3, #96	; 0x60
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002662:	2300      	movs	r3, #0
 8002664:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002666:	2300      	movs	r3, #0
 8002668:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002676:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800267a:	2200      	movs	r2, #0
 800267c:	4619      	mov	r1, r3
 800267e:	4818      	ldr	r0, [pc, #96]	; (80026e0 <MX_TIM1_Init+0x150>)
 8002680:	f00d faee 	bl	800fc60 <HAL_TIM_PWM_ConfigChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800268a:	f000 fdbf 	bl	800320c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80026b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4807      	ldr	r0, [pc, #28]	; (80026e0 <MX_TIM1_Init+0x150>)
 80026c4:	f00e f8f8 	bl	80108b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80026ce:	f000 fd9d 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026d2:	4803      	ldr	r0, [pc, #12]	; (80026e0 <MX_TIM1_Init+0x150>)
 80026d4:	f001 fb22 	bl	8003d1c <HAL_TIM_MspPostInit>

}
 80026d8:	bf00      	nop
 80026da:	3768      	adds	r7, #104	; 0x68
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20001a98 	.word	0x20001a98
 80026e4:	40010000 	.word	0x40010000

080026e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08e      	sub	sp, #56	; 0x38
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fc:	f107 031c 	add.w	r3, r7, #28
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002708:	463b      	mov	r3, r7
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
 8002714:	611a      	str	r2, [r3, #16]
 8002716:	615a      	str	r2, [r3, #20]
 8002718:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800271a:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <MX_TIM2_Init+0xe8>)
 800271c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002720:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002722:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <MX_TIM2_Init+0xe8>)
 8002724:	2200      	movs	r2, #0
 8002726:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002728:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <MX_TIM2_Init+0xe8>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800272e:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <MX_TIM2_Init+0xe8>)
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002736:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <MX_TIM2_Init+0xe8>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273c:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <MX_TIM2_Init+0xe8>)
 800273e:	2200      	movs	r2, #0
 8002740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002742:	4823      	ldr	r0, [pc, #140]	; (80027d0 <MX_TIM2_Init+0xe8>)
 8002744:	f00d f846 	bl	800f7d4 <HAL_TIM_Base_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800274e:	f000 fd5d 	bl	800320c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002758:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800275c:	4619      	mov	r1, r3
 800275e:	481c      	ldr	r0, [pc, #112]	; (80027d0 <MX_TIM2_Init+0xe8>)
 8002760:	f00d fb92 	bl	800fe88 <HAL_TIM_ConfigClockSource>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800276a:	f000 fd4f 	bl	800320c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800276e:	4818      	ldr	r0, [pc, #96]	; (80027d0 <MX_TIM2_Init+0xe8>)
 8002770:	f00d f900 	bl	800f974 <HAL_TIM_PWM_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800277a:	f000 fd47 	bl	800320c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002786:	f107 031c 	add.w	r3, r7, #28
 800278a:	4619      	mov	r1, r3
 800278c:	4810      	ldr	r0, [pc, #64]	; (80027d0 <MX_TIM2_Init+0xe8>)
 800278e:	f00e f805 	bl	801079c <HAL_TIMEx_MasterConfigSynchronization>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002798:	f000 fd38 	bl	800320c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800279c:	2360      	movs	r3, #96	; 0x60
 800279e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027ac:	463b      	mov	r3, r7
 80027ae:	2200      	movs	r2, #0
 80027b0:	4619      	mov	r1, r3
 80027b2:	4807      	ldr	r0, [pc, #28]	; (80027d0 <MX_TIM2_Init+0xe8>)
 80027b4:	f00d fa54 	bl	800fc60 <HAL_TIM_PWM_ConfigChannel>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80027be:	f000 fd25 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027c2:	4803      	ldr	r0, [pc, #12]	; (80027d0 <MX_TIM2_Init+0xe8>)
 80027c4:	f001 faaa 	bl	8003d1c <HAL_TIM_MspPostInit>

}
 80027c8:	bf00      	nop
 80027ca:	3738      	adds	r7, #56	; 0x38
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20001ae4 	.word	0x20001ae4

080027d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08e      	sub	sp, #56	; 0x38
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f4:	463b      	mov	r3, r7
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	615a      	str	r2, [r3, #20]
 8002804:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002806:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <MX_TIM3_Init+0xe8>)
 8002808:	4a2d      	ldr	r2, [pc, #180]	; (80028c0 <MX_TIM3_Init+0xec>)
 800280a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <MX_TIM3_Init+0xe8>)
 800280e:	2200      	movs	r2, #0
 8002810:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002812:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <MX_TIM3_Init+0xe8>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002818:	4b28      	ldr	r3, [pc, #160]	; (80028bc <MX_TIM3_Init+0xe8>)
 800281a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800281e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002820:	4b26      	ldr	r3, [pc, #152]	; (80028bc <MX_TIM3_Init+0xe8>)
 8002822:	2200      	movs	r2, #0
 8002824:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002826:	4b25      	ldr	r3, [pc, #148]	; (80028bc <MX_TIM3_Init+0xe8>)
 8002828:	2200      	movs	r2, #0
 800282a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800282c:	4823      	ldr	r0, [pc, #140]	; (80028bc <MX_TIM3_Init+0xe8>)
 800282e:	f00c ffd1 	bl	800f7d4 <HAL_TIM_Base_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002838:	f000 fce8 	bl	800320c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800283c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002846:	4619      	mov	r1, r3
 8002848:	481c      	ldr	r0, [pc, #112]	; (80028bc <MX_TIM3_Init+0xe8>)
 800284a:	f00d fb1d 	bl	800fe88 <HAL_TIM_ConfigClockSource>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002854:	f000 fcda 	bl	800320c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002858:	4818      	ldr	r0, [pc, #96]	; (80028bc <MX_TIM3_Init+0xe8>)
 800285a:	f00d f88b 	bl	800f974 <HAL_TIM_PWM_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002864:	f000 fcd2 	bl	800320c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	4619      	mov	r1, r3
 8002876:	4811      	ldr	r0, [pc, #68]	; (80028bc <MX_TIM3_Init+0xe8>)
 8002878:	f00d ff90 	bl	801079c <HAL_TIMEx_MasterConfigSynchronization>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002882:	f000 fcc3 	bl	800320c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002886:	2360      	movs	r3, #96	; 0x60
 8002888:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002896:	463b      	mov	r3, r7
 8002898:	2200      	movs	r2, #0
 800289a:	4619      	mov	r1, r3
 800289c:	4807      	ldr	r0, [pc, #28]	; (80028bc <MX_TIM3_Init+0xe8>)
 800289e:	f00d f9df 	bl	800fc60 <HAL_TIM_PWM_ConfigChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80028a8:	f000 fcb0 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028ac:	4803      	ldr	r0, [pc, #12]	; (80028bc <MX_TIM3_Init+0xe8>)
 80028ae:	f001 fa35 	bl	8003d1c <HAL_TIM_MspPostInit>

}
 80028b2:	bf00      	nop
 80028b4:	3738      	adds	r7, #56	; 0x38
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20001b30 	.word	0x20001b30
 80028c0:	40000400 	.word	0x40000400

080028c4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08e      	sub	sp, #56	; 0x38
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028e4:	463b      	mov	r3, r7
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	60da      	str	r2, [r3, #12]
 80028f0:	611a      	str	r2, [r3, #16]
 80028f2:	615a      	str	r2, [r3, #20]
 80028f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80028f6:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <MX_TIM5_Init+0xe8>)
 80028f8:	4a2d      	ldr	r2, [pc, #180]	; (80029b0 <MX_TIM5_Init+0xec>)
 80028fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80028fc:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <MX_TIM5_Init+0xe8>)
 80028fe:	2200      	movs	r2, #0
 8002900:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002902:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <MX_TIM5_Init+0xe8>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002908:	4b28      	ldr	r3, [pc, #160]	; (80029ac <MX_TIM5_Init+0xe8>)
 800290a:	f04f 32ff 	mov.w	r2, #4294967295
 800290e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002910:	4b26      	ldr	r3, [pc, #152]	; (80029ac <MX_TIM5_Init+0xe8>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002916:	4b25      	ldr	r3, [pc, #148]	; (80029ac <MX_TIM5_Init+0xe8>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800291c:	4823      	ldr	r0, [pc, #140]	; (80029ac <MX_TIM5_Init+0xe8>)
 800291e:	f00c ff59 	bl	800f7d4 <HAL_TIM_Base_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002928:	f000 fc70 	bl	800320c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800292c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002936:	4619      	mov	r1, r3
 8002938:	481c      	ldr	r0, [pc, #112]	; (80029ac <MX_TIM5_Init+0xe8>)
 800293a:	f00d faa5 	bl	800fe88 <HAL_TIM_ConfigClockSource>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002944:	f000 fc62 	bl	800320c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002948:	4818      	ldr	r0, [pc, #96]	; (80029ac <MX_TIM5_Init+0xe8>)
 800294a:	f00d f813 	bl	800f974 <HAL_TIM_PWM_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002954:	f000 fc5a 	bl	800320c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	4811      	ldr	r0, [pc, #68]	; (80029ac <MX_TIM5_Init+0xe8>)
 8002968:	f00d ff18 	bl	801079c <HAL_TIMEx_MasterConfigSynchronization>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002972:	f000 fc4b 	bl	800320c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002976:	2360      	movs	r3, #96	; 0x60
 8002978:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800297e:	2300      	movs	r3, #0
 8002980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002986:	463b      	mov	r3, r7
 8002988:	220c      	movs	r2, #12
 800298a:	4619      	mov	r1, r3
 800298c:	4807      	ldr	r0, [pc, #28]	; (80029ac <MX_TIM5_Init+0xe8>)
 800298e:	f00d f967 	bl	800fc60 <HAL_TIM_PWM_ConfigChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002998:	f000 fc38 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800299c:	4803      	ldr	r0, [pc, #12]	; (80029ac <MX_TIM5_Init+0xe8>)
 800299e:	f001 f9bd 	bl	8003d1c <HAL_TIM_MspPostInit>

}
 80029a2:	bf00      	nop
 80029a4:	3738      	adds	r7, #56	; 0x38
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20001b7c 	.word	0x20001b7c
 80029b0:	40000c00 	.word	0x40000c00

080029b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <MX_TIM8_Init+0xa0>)
 80029d4:	4a20      	ldr	r2, [pc, #128]	; (8002a58 <MX_TIM8_Init+0xa4>)
 80029d6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80029d8:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <MX_TIM8_Init+0xa0>)
 80029da:	2200      	movs	r2, #0
 80029dc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029de:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <MX_TIM8_Init+0xa0>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <MX_TIM8_Init+0xa0>)
 80029e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <MX_TIM8_Init+0xa0>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80029f2:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <MX_TIM8_Init+0xa0>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <MX_TIM8_Init+0xa0>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80029fe:	4815      	ldr	r0, [pc, #84]	; (8002a54 <MX_TIM8_Init+0xa0>)
 8002a00:	f00c fee8 	bl	800f7d4 <HAL_TIM_Base_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002a0a:	f000 fbff 	bl	800320c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	4619      	mov	r1, r3
 8002a1a:	480e      	ldr	r0, [pc, #56]	; (8002a54 <MX_TIM8_Init+0xa0>)
 8002a1c:	f00d fa34 	bl	800fe88 <HAL_TIM_ConfigClockSource>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002a26:	f000 fbf1 	bl	800320c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4806      	ldr	r0, [pc, #24]	; (8002a54 <MX_TIM8_Init+0xa0>)
 8002a3c:	f00d feae 	bl	801079c <HAL_TIMEx_MasterConfigSynchronization>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002a46:	f000 fbe1 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002a4a:	bf00      	nop
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20001bc8 	.word	0x20001bc8
 8002a58:	40010400 	.word	0x40010400

08002a5c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
 8002a70:	615a      	str	r2, [r3, #20]
 8002a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002a74:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <MX_TIM12_Init+0x84>)
 8002a76:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <MX_TIM12_Init+0x88>)
 8002a78:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <MX_TIM12_Init+0x84>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a80:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <MX_TIM12_Init+0x84>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <MX_TIM12_Init+0x84>)
 8002a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a8c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <MX_TIM12_Init+0x84>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <MX_TIM12_Init+0x84>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002a9a:	4811      	ldr	r0, [pc, #68]	; (8002ae0 <MX_TIM12_Init+0x84>)
 8002a9c:	f00c ff6a 	bl	800f974 <HAL_TIM_PWM_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002aa6:	f000 fbb1 	bl	800320c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aaa:	2360      	movs	r3, #96	; 0x60
 8002aac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	2200      	movs	r2, #0
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4807      	ldr	r0, [pc, #28]	; (8002ae0 <MX_TIM12_Init+0x84>)
 8002ac2:	f00d f8cd 	bl	800fc60 <HAL_TIM_PWM_ConfigChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002acc:	f000 fb9e 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002ad0:	4803      	ldr	r0, [pc, #12]	; (8002ae0 <MX_TIM12_Init+0x84>)
 8002ad2:	f001 f923 	bl	8003d1c <HAL_TIM_MspPostInit>

}
 8002ad6:	bf00      	nop
 8002ad8:	3720      	adds	r7, #32
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20001c14 	.word	0x20001c14
 8002ae4:	40001800 	.word	0x40001800

08002ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002aec:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <MX_USART1_UART_Init+0x58>)
 8002aee:	4a15      	ldr	r2, [pc, #84]	; (8002b44 <MX_USART1_UART_Init+0x5c>)
 8002af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <MX_USART1_UART_Init+0x58>)
 8002af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <MX_USART1_UART_Init+0x58>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b06:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b0e:	220c      	movs	r2, #12
 8002b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b2a:	4805      	ldr	r0, [pc, #20]	; (8002b40 <MX_USART1_UART_Init+0x58>)
 8002b2c:	f00d ff60 	bl	80109f0 <HAL_UART_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002b36:	f000 fb69 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20001c60 	.word	0x20001c60
 8002b44:	40011000 	.word	0x40011000

08002b48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <MX_USART6_UART_Init+0x58>)
 8002b4e:	4a15      	ldr	r2, [pc, #84]	; (8002ba4 <MX_USART6_UART_Init+0x5c>)
 8002b50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002b52:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <MX_USART6_UART_Init+0x58>)
 8002b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <MX_USART6_UART_Init+0x58>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <MX_USART6_UART_Init+0x58>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <MX_USART6_UART_Init+0x58>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <MX_USART6_UART_Init+0x58>)
 8002b6e:	220c      	movs	r2, #12
 8002b70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <MX_USART6_UART_Init+0x58>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <MX_USART6_UART_Init+0x58>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <MX_USART6_UART_Init+0x58>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_USART6_UART_Init+0x58>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b8a:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <MX_USART6_UART_Init+0x58>)
 8002b8c:	f00d ff30 	bl	80109f0 <HAL_UART_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002b96:	f000 fb39 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20001ce8 	.word	0x20001ce8
 8002ba4:	40011400 	.word	0x40011400

08002ba8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bae:	4b32      	ldr	r3, [pc, #200]	; (8002c78 <MX_DMA_Init+0xd0>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	4a31      	ldr	r2, [pc, #196]	; (8002c78 <MX_DMA_Init+0xd0>)
 8002bb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bba:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <MX_DMA_Init+0xd0>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002bc6:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002bc8:	4a2d      	ldr	r2, [pc, #180]	; (8002c80 <MX_DMA_Init+0xd8>)
 8002bca:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002bd2:	4b2a      	ldr	r3, [pc, #168]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002bd4:	2280      	movs	r2, #128	; 0x80
 8002bd6:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002bd8:	4b28      	ldr	r3, [pc, #160]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bde:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002be0:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be6:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002be8:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bee:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bf0:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bf6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002bf8:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8002bfe:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002c00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c04:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002c08:	2204      	movs	r2, #4
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002c0e:	2203      	movs	r2, #3
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002c12:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8002c1e:	4817      	ldr	r0, [pc, #92]	; (8002c7c <MX_DMA_Init+0xd4>)
 8002c20:	f004 f95c 	bl	8006edc <HAL_DMA_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_DMA_Init+0x86>
  {
    Error_Handler( );
 8002c2a:	f000 faef 	bl	800320c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2105      	movs	r1, #5
 8002c32:	2038      	movs	r0, #56	; 0x38
 8002c34:	f003 fee6 	bl	8006a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c38:	2038      	movs	r0, #56	; 0x38
 8002c3a:	f003 feff 	bl	8006a3c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2105      	movs	r1, #5
 8002c42:	2039      	movs	r0, #57	; 0x39
 8002c44:	f003 fede 	bl	8006a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002c48:	2039      	movs	r0, #57	; 0x39
 8002c4a:	f003 fef7 	bl	8006a3c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2105      	movs	r1, #5
 8002c52:	203c      	movs	r0, #60	; 0x3c
 8002c54:	f003 fed6 	bl	8006a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002c58:	203c      	movs	r0, #60	; 0x3c
 8002c5a:	f003 feef 	bl	8006a3c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2105      	movs	r1, #5
 8002c62:	2046      	movs	r0, #70	; 0x46
 8002c64:	f003 fece 	bl	8006a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002c68:	2046      	movs	r0, #70	; 0x46
 8002c6a:	f003 fee7 	bl	8006a3c <HAL_NVIC_EnableIRQ>

}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	20001d70 	.word	0x20001d70
 8002c80:	40026410 	.word	0x40026410

08002c84 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
 8002c98:	615a      	str	r2, [r3, #20]
 8002c9a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002c9c:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <MX_FMC_Init+0xa0>)
 8002c9e:	4a22      	ldr	r2, [pc, #136]	; (8002d28 <MX_FMC_Init+0xa4>)
 8002ca0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <MX_FMC_Init+0xa0>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <MX_FMC_Init+0xa0>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <MX_FMC_Init+0xa0>)
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <MX_FMC_Init+0xa0>)
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002cba:	4b1a      	ldr	r3, [pc, #104]	; (8002d24 <MX_FMC_Init+0xa0>)
 8002cbc:	2240      	movs	r2, #64	; 0x40
 8002cbe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002cc0:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <MX_FMC_Init+0xa0>)
 8002cc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cc6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002cc8:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <MX_FMC_Init+0xa0>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <MX_FMC_Init+0xa0>)
 8002cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cd4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002cd6:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <MX_FMC_Init+0xa0>)
 8002cd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002cde:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <MX_FMC_Init+0xa0>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002ce8:	2307      	movs	r3, #7
 8002cea:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002cec:	2304      	movs	r3, #4
 8002cee:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002cf0:	2307      	movs	r3, #7
 8002cf2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	4619      	mov	r1, r3
 8002d04:	4807      	ldr	r0, [pc, #28]	; (8002d24 <MX_FMC_Init+0xa0>)
 8002d06:	f00c fc78 	bl	800f5fa <HAL_SDRAM_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002d10:	f000 fa7c 	bl	800320c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

	DISCO_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002d14:	f240 6003 	movw	r0, #1539	; 0x603
 8002d18:	f002 fb38 	bl	800538c <DISCO_SDRAM_Initialization_sequence>

  /* USER CODE END FMC_Init 2 */
}
 8002d1c:	bf00      	nop
 8002d1e:	3720      	adds	r7, #32
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20001dd0 	.word	0x20001dd0
 8002d28:	a0000140 	.word	0xa0000140

08002d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b090      	sub	sp, #64	; 0x40
 8002d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d42:	4bb0      	ldr	r3, [pc, #704]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4aaf      	ldr	r2, [pc, #700]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002d48:	f043 0310 	orr.w	r3, r3, #16
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4bad      	ldr	r3, [pc, #692]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d5a:	4baa      	ldr	r3, [pc, #680]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	4aa9      	ldr	r2, [pc, #676]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d64:	6313      	str	r3, [r2, #48]	; 0x30
 8002d66:	4ba7      	ldr	r3, [pc, #668]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d72:	4ba4      	ldr	r3, [pc, #656]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4aa3      	ldr	r2, [pc, #652]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4ba1      	ldr	r3, [pc, #644]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	623b      	str	r3, [r7, #32]
 8002d88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d8a:	4b9e      	ldr	r3, [pc, #632]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4a9d      	ldr	r2, [pc, #628]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002d90:	f043 0308 	orr.w	r3, r3, #8
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
 8002d96:	4b9b      	ldr	r3, [pc, #620]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da2:	4b98      	ldr	r3, [pc, #608]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a97      	ldr	r2, [pc, #604]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b95      	ldr	r3, [pc, #596]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dba:	4b92      	ldr	r3, [pc, #584]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a91      	ldr	r2, [pc, #580]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b8f      	ldr	r3, [pc, #572]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002dd2:	4b8c      	ldr	r3, [pc, #560]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a8b      	ldr	r2, [pc, #556]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b89      	ldr	r3, [pc, #548]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002dea:	4b86      	ldr	r3, [pc, #536]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a85      	ldr	r2, [pc, #532]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b83      	ldr	r3, [pc, #524]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e02:	4b80      	ldr	r3, [pc, #512]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a7f      	ldr	r2, [pc, #508]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002e08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b7d      	ldr	r3, [pc, #500]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e1a:	4b7a      	ldr	r3, [pc, #488]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a79      	ldr	r2, [pc, #484]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002e20:	f043 0320 	orr.w	r3, r3, #32
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b77      	ldr	r3, [pc, #476]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e32:	4b74      	ldr	r3, [pc, #464]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a73      	ldr	r2, [pc, #460]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b71      	ldr	r3, [pc, #452]	; (8003004 <MX_GPIO_Init+0x2d8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	2120      	movs	r1, #32
 8002e4e:	486e      	ldr	r0, [pc, #440]	; (8003008 <MX_GPIO_Init+0x2dc>)
 8002e50:	f005 fac6 	bl	80083e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin, GPIO_PIN_RESET);
 8002e54:	2200      	movs	r2, #0
 8002e56:	210e      	movs	r1, #14
 8002e58:	486c      	ldr	r0, [pc, #432]	; (800300c <MX_GPIO_Init+0x2e0>)
 8002e5a:	f005 fac1 	bl	80083e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002e5e:	2201      	movs	r2, #1
 8002e60:	2108      	movs	r1, #8
 8002e62:	486b      	ldr	r0, [pc, #428]	; (8003010 <MX_GPIO_Init+0x2e4>)
 8002e64:	f005 fabc 	bl	80083e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e6e:	4867      	ldr	r0, [pc, #412]	; (800300c <MX_GPIO_Init+0x2e0>)
 8002e70:	f005 fab6 	bl	80083e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002e74:	2200      	movs	r2, #0
 8002e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e7a:	4866      	ldr	r0, [pc, #408]	; (8003014 <MX_GPIO_Init+0x2e8>)
 8002e7c:	f005 fab0 	bl	80083e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002e80:	2200      	movs	r2, #0
 8002e82:	21c8      	movs	r1, #200	; 0xc8
 8002e84:	4864      	ldr	r0, [pc, #400]	; (8003018 <MX_GPIO_Init+0x2ec>)
 8002e86:	f005 faab 	bl	80083e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	485f      	ldr	r0, [pc, #380]	; (800301c <MX_GPIO_Init+0x2f0>)
 8002e9e:	f004 ffcf 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002ea2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002eb4:	230b      	movs	r3, #11
 8002eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4856      	ldr	r0, [pc, #344]	; (8003018 <MX_GPIO_Init+0x2ec>)
 8002ec0:	f004 ffbe 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8002ec4:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002ed6:	230a      	movs	r3, #10
 8002ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ede:	4619      	mov	r1, r3
 8002ee0:	484f      	ldr	r0, [pc, #316]	; (8003020 <MX_GPIO_Init+0x2f4>)
 8002ee2:	f004 ffad 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eec:	2300      	movs	r3, #0
 8002eee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ef8:	4619      	mov	r1, r3
 8002efa:	484a      	ldr	r0, [pc, #296]	; (8003024 <MX_GPIO_Init+0x2f8>)
 8002efc:	f004 ffa0 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002f00:	2340      	movs	r3, #64	; 0x40
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002f04:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002f08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f12:	4619      	mov	r1, r3
 8002f14:	483c      	ldr	r0, [pc, #240]	; (8003008 <MX_GPIO_Init+0x2dc>)
 8002f16:	f004 ff93 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002f1a:	2320      	movs	r3, #32
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002f2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4835      	ldr	r0, [pc, #212]	; (8003008 <MX_GPIO_Init+0x2dc>)
 8002f32:	f004 ff85 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD_GREEN_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD_GREEN_Pin|LCD_DISP_Pin;
 8002f36:	f241 030e 	movw	r3, #4110	; 0x100e
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	482f      	ldr	r0, [pc, #188]	; (800300c <MX_GPIO_Init+0x2e0>)
 8002f50:	f004 ff76 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002f54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002f62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f66:	4619      	mov	r1, r3
 8002f68:	482f      	ldr	r0, [pc, #188]	; (8003028 <MX_GPIO_Init+0x2fc>)
 8002f6a:	f004 ff69 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002f6e:	2308      	movs	r3, #8
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f72:	2301      	movs	r3, #1
 8002f74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f82:	4619      	mov	r1, r3
 8002f84:	4822      	ldr	r0, [pc, #136]	; (8003010 <MX_GPIO_Init+0x2e4>)
 8002f86:	f004 ff5b 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	481a      	ldr	r0, [pc, #104]	; (8003008 <MX_GPIO_Init+0x2dc>)
 8002f9e:	f004 ff4f 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002fa2:	f248 0304 	movw	r3, #32772	; 0x8004
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4817      	ldr	r0, [pc, #92]	; (8003014 <MX_GPIO_Init+0x2e8>)
 8002fb8:	f004 ff42 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	480f      	ldr	r0, [pc, #60]	; (8003014 <MX_GPIO_Init+0x2e8>)
 8002fd6:	f004 ff33 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BTN_Pin */
  GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8002fda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8002fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fec:	4619      	mov	r1, r3
 8002fee:	4807      	ldr	r0, [pc, #28]	; (800300c <MX_GPIO_Init+0x2e0>)
 8002ff0:	f004 ff26 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ffa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ffe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	e013      	b.n	800302c <MX_GPIO_Init+0x300>
 8003004:	40023800 	.word	0x40023800
 8003008:	40020c00 	.word	0x40020c00
 800300c:	40022000 	.word	0x40022000
 8003010:	40022800 	.word	0x40022800
 8003014:	40021c00 	.word	0x40021c00
 8003018:	40021800 	.word	0x40021800
 800301c:	40021000 	.word	0x40021000
 8003020:	40020400 	.word	0x40020400
 8003024:	40022400 	.word	0x40022400
 8003028:	40020800 	.word	0x40020800
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800302e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003032:	4619      	mov	r1, r3
 8003034:	4844      	ldr	r0, [pc, #272]	; (8003148 <MX_GPIO_Init+0x41c>)
 8003036:	f004 ff03 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800303a:	2310      	movs	r3, #16
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303e:	2302      	movs	r3, #2
 8003040:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	2300      	movs	r3, #0
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003046:	2303      	movs	r3, #3
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800304a:	230a      	movs	r3, #10
 800304c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800304e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003052:	4619      	mov	r1, r3
 8003054:	483d      	ldr	r0, [pc, #244]	; (800314c <MX_GPIO_Init+0x420>)
 8003056:	f004 fef3 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800305a:	23c8      	movs	r3, #200	; 0xc8
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800305e:	2301      	movs	r3, #1
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003066:	2300      	movs	r3, #0
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800306a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800306e:	4619      	mov	r1, r3
 8003070:	4837      	ldr	r0, [pc, #220]	; (8003150 <MX_GPIO_Init+0x424>)
 8003072:	f004 fee5 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003076:	2305      	movs	r3, #5
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003082:	2303      	movs	r3, #3
 8003084:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003086:	230a      	movs	r3, #10
 8003088:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800308a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800308e:	4619      	mov	r1, r3
 8003090:	4830      	ldr	r0, [pc, #192]	; (8003154 <MX_GPIO_Init+0x428>)
 8003092:	f004 fed5 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003096:	2332      	movs	r3, #50	; 0x32
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309a:	2302      	movs	r3, #2
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a2:	2303      	movs	r3, #3
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030a6:	230b      	movs	r3, #11
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030ae:	4619      	mov	r1, r3
 80030b0:	4828      	ldr	r0, [pc, #160]	; (8003154 <MX_GPIO_Init+0x428>)
 80030b2:	f004 fec5 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80030b6:	2304      	movs	r3, #4
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ba:	2300      	movs	r3, #0
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80030c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030c6:	4619      	mov	r1, r3
 80030c8:	4821      	ldr	r0, [pc, #132]	; (8003150 <MX_GPIO_Init+0x424>)
 80030ca:	f004 feb9 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80030ce:	2386      	movs	r3, #134	; 0x86
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d2:	2302      	movs	r3, #2
 80030d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030da:	2303      	movs	r3, #3
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030de:	230b      	movs	r3, #11
 80030e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030e6:	4619      	mov	r1, r3
 80030e8:	481b      	ldr	r0, [pc, #108]	; (8003158 <MX_GPIO_Init+0x42c>)
 80030ea:	f004 fea9 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80030ee:	2328      	movs	r3, #40	; 0x28
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f2:	2302      	movs	r3, #2
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030fa:	2303      	movs	r3, #3
 80030fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80030fe:	230a      	movs	r3, #10
 8003100:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003106:	4619      	mov	r1, r3
 8003108:	4813      	ldr	r0, [pc, #76]	; (8003158 <MX_GPIO_Init+0x42c>)
 800310a:	f004 fe99 	bl	8007e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800310e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003114:	2302      	movs	r3, #2
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311c:	2300      	movs	r3, #0
 800311e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003120:	2305      	movs	r3, #5
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003128:	4619      	mov	r1, r3
 800312a:	480c      	ldr	r0, [pc, #48]	; (800315c <MX_GPIO_Init+0x430>)
 800312c:	f004 fe88 	bl	8007e40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003130:	2200      	movs	r2, #0
 8003132:	2105      	movs	r1, #5
 8003134:	2028      	movs	r0, #40	; 0x28
 8003136:	f003 fc65 	bl	8006a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800313a:	2028      	movs	r0, #40	; 0x28
 800313c:	f003 fc7e 	bl	8006a3c <HAL_NVIC_EnableIRQ>

}
 8003140:	bf00      	nop
 8003142:	3740      	adds	r7, #64	; 0x40
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40022000 	.word	0x40022000
 800314c:	40021c00 	.word	0x40021c00
 8003150:	40021800 	.word	0x40021800
 8003154:	40020800 	.word	0x40020800
 8003158:	40020000 	.word	0x40020000
 800315c:	40020400 	.word	0x40020400

08003160 <Error>:

/* USER CODE BEGIN 4 */

void Error(char* msg)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	printf(msg);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f016 ffcf 	bl	801a10c <iprintf>
	printf("\n");
 800316e:	200a      	movs	r0, #10
 8003170:	f016 ffe4 	bl	801a13c <putchar>
	Error_Handler();
 8003174:	f000 f84a 	bl	800320c <Error_Handler>
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8003188:	f015 f9ae 	bl	80184e8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */

	printf("StartDefaultTask\n");
 800318c:	4809      	ldr	r0, [pc, #36]	; (80031b4 <StartDefaultTask+0x34>)
 800318e:	f017 f859 	bl	801a244 <puts>
	//osSignalWait(); //on attend le moment judissieux pour

	AudioSetup();
 8003192:	f7fd ff3b 	bl	800100c <AudioSetup>

	//uint32_t PreviousWakeTime = osKernelSysTick();
	/* Infinite loop */
	int i=0;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		//osDelay(1000);
		//osDelayUntil (&PreviousWakeTime, 500);
		printf("thread alive : %d\n", i++);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	4619      	mov	r1, r3
 80031a2:	4805      	ldr	r0, [pc, #20]	; (80031b8 <StartDefaultTask+0x38>)
 80031a4:	f016 ffb2 	bl	801a10c <iprintf>
		printf("waiting for signal...\n");
 80031a8:	4804      	ldr	r0, [pc, #16]	; (80031bc <StartDefaultTask+0x3c>)
 80031aa:	f017 f84b 	bl	801a244 <puts>


		audioLoop();
 80031ae:	f7fd fef5 	bl	8000f9c <audioLoop>
		printf("thread alive : %d\n", i++);
 80031b2:	e7f2      	b.n	800319a <StartDefaultTask+0x1a>
 80031b4:	0801ca34 	.word	0x0801ca34
 80031b8:	0801ca48 	.word	0x0801ca48
 80031bc:	0801ca5c 	.word	0x0801ca5c

080031c0 <startUITask>:
 * @retval None
 */

/* USER CODE END Header_startUITask */
void startUITask(void const * argument)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUITask */
	uiDisplayBasic();
 80031c8:	f001 fa16 	bl	80045f8 <uiDisplayBasic>
	osDelay(200);
 80031cc:	20c8      	movs	r0, #200	; 0xc8
 80031ce:	f012 fc49 	bl	8015a64 <osDelay>
	printf("StartLedTask\n");
 80031d2:	4804      	ldr	r0, [pc, #16]	; (80031e4 <startUITask+0x24>)
 80031d4:	f017 f836 	bl	801a244 <puts>
	/* Infinite loop */
	for(;;)
	{
		//osSignalWait (0x0002, osWaitForever);

		osDelay(50);
 80031d8:	2032      	movs	r0, #50	; 0x32
 80031da:	f012 fc43 	bl	8015a64 <osDelay>
		//LED_Toggle();

		Graphique();
 80031de:	f7fd ff37 	bl	8001050 <Graphique>
		osDelay(50);
 80031e2:	e7f9      	b.n	80031d8 <startUITask+0x18>
 80031e4:	0801ca74 	.word	0x0801ca74

080031e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a04      	ldr	r2, [pc, #16]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031fa:	f003 f84f 	bl	800629c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40001000 	.word	0x40001000

0800320c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		LED_Toggle();
 8003210:	f001 fad0 	bl	80047b4 <LED_Toggle>
		HAL_Delay(100);
 8003214:	2064      	movs	r0, #100	; 0x64
 8003216:	f003 f861 	bl	80062dc <HAL_Delay>
		LED_Toggle();
 800321a:	e7f9      	b.n	8003210 <Error_Handler+0x4>

0800321c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <HAL_MspInit+0x4c>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	4a10      	ldr	r2, [pc, #64]	; (8003268 <HAL_MspInit+0x4c>)
 8003228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322c:	6413      	str	r3, [r2, #64]	; 0x40
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HAL_MspInit+0x4c>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_MspInit+0x4c>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <HAL_MspInit+0x4c>)
 8003240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003244:	6453      	str	r3, [r2, #68]	; 0x44
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <HAL_MspInit+0x4c>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003252:	2200      	movs	r2, #0
 8003254:	210f      	movs	r1, #15
 8003256:	f06f 0001 	mvn.w	r0, #1
 800325a:	f003 fbd3 	bl	8006a04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800

0800326c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a21      	ldr	r2, [pc, #132]	; (8003310 <HAL_ADC_MspInit+0xa4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d13c      	bne.n	8003308 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800328e:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_ADC_MspInit+0xa8>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	4a20      	ldr	r2, [pc, #128]	; (8003314 <HAL_ADC_MspInit+0xa8>)
 8003294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003298:	6453      	str	r3, [r2, #68]	; 0x44
 800329a:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_ADC_MspInit+0xa8>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_ADC_MspInit+0xa8>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a1a      	ldr	r2, [pc, #104]	; (8003314 <HAL_ADC_MspInit+0xa8>)
 80032ac:	f043 0320 	orr.w	r3, r3, #32
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b18      	ldr	r3, [pc, #96]	; (8003314 <HAL_ADC_MspInit+0xa8>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_ADC_MspInit+0xa8>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a14      	ldr	r2, [pc, #80]	; (8003314 <HAL_ADC_MspInit+0xa8>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_ADC_MspInit+0xa8>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80032d6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80032da:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032dc:	2303      	movs	r3, #3
 80032de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	4619      	mov	r1, r3
 80032ea:	480b      	ldr	r0, [pc, #44]	; (8003318 <HAL_ADC_MspInit+0xac>)
 80032ec:	f004 fda8 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80032f0:	2301      	movs	r3, #1
 80032f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032f4:	2303      	movs	r3, #3
 80032f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	4619      	mov	r1, r3
 8003302:	4806      	ldr	r0, [pc, #24]	; (800331c <HAL_ADC_MspInit+0xb0>)
 8003304:	f004 fd9c 	bl	8007e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003308:	bf00      	nop
 800330a:	3728      	adds	r7, #40	; 0x28
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40012200 	.word	0x40012200
 8003314:	40023800 	.word	0x40023800
 8003318:	40021400 	.word	0x40021400
 800331c:	40020000 	.word	0x40020000

08003320 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <HAL_CRC_MspInit+0x38>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10b      	bne.n	800334a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <HAL_CRC_MspInit+0x3c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <HAL_CRC_MspInit+0x3c>)
 8003338:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <HAL_CRC_MspInit+0x3c>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40023000 	.word	0x40023000
 800335c:	40023800 	.word	0x40023800

08003360 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08e      	sub	sp, #56	; 0x38
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a6c      	ldr	r2, [pc, #432]	; (8003530 <HAL_DCMI_MspInit+0x1d0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	f040 80d2 	bne.w	8003528 <HAL_DCMI_MspInit+0x1c8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003384:	4b6b      	ldr	r3, [pc, #428]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 8003386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003388:	4a6a      	ldr	r2, [pc, #424]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6353      	str	r3, [r2, #52]	; 0x34
 8003390:	4b68      	ldr	r3, [pc, #416]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 8003392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	623b      	str	r3, [r7, #32]
 800339a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800339c:	4b65      	ldr	r3, [pc, #404]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	4a64      	ldr	r2, [pc, #400]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 80033a2:	f043 0310 	orr.w	r3, r3, #16
 80033a6:	6313      	str	r3, [r2, #48]	; 0x30
 80033a8:	4b62      	ldr	r3, [pc, #392]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033b4:	4b5f      	ldr	r3, [pc, #380]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	4a5e      	ldr	r2, [pc, #376]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 80033ba:	f043 0308 	orr.w	r3, r3, #8
 80033be:	6313      	str	r3, [r2, #48]	; 0x30
 80033c0:	4b5c      	ldr	r3, [pc, #368]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033cc:	4b59      	ldr	r3, [pc, #356]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	4a58      	ldr	r2, [pc, #352]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 80033d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d6:	6313      	str	r3, [r2, #48]	; 0x30
 80033d8:	4b56      	ldr	r3, [pc, #344]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80033e4:	4b53      	ldr	r3, [pc, #332]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	4a52      	ldr	r2, [pc, #328]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 80033ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ee:	6313      	str	r3, [r2, #48]	; 0x30
 80033f0:	4b50      	ldr	r3, [pc, #320]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fc:	4b4d      	ldr	r3, [pc, #308]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	4a4c      	ldr	r2, [pc, #304]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6313      	str	r3, [r2, #48]	; 0x30
 8003408:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <HAL_DCMI_MspInit+0x1d4>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003414:	2360      	movs	r3, #96	; 0x60
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	2302      	movs	r3, #2
 800341a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003420:	2300      	movs	r3, #0
 8003422:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003424:	230d      	movs	r3, #13
 8003426:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800342c:	4619      	mov	r1, r3
 800342e:	4842      	ldr	r0, [pc, #264]	; (8003538 <HAL_DCMI_MspInit+0x1d8>)
 8003430:	f004 fd06 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003434:	2308      	movs	r3, #8
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003438:	2302      	movs	r3, #2
 800343a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003440:	2300      	movs	r3, #0
 8003442:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003444:	230d      	movs	r3, #13
 8003446:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344c:	4619      	mov	r1, r3
 800344e:	483b      	ldr	r0, [pc, #236]	; (800353c <HAL_DCMI_MspInit+0x1dc>)
 8003450:	f004 fcf6 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8003454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345a:	2302      	movs	r3, #2
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003462:	2300      	movs	r3, #0
 8003464:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003466:	230d      	movs	r3, #13
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800346a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800346e:	4619      	mov	r1, r3
 8003470:	4833      	ldr	r0, [pc, #204]	; (8003540 <HAL_DCMI_MspInit+0x1e0>)
 8003472:	f004 fce5 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003476:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347c:	2302      	movs	r3, #2
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003484:	2300      	movs	r3, #0
 8003486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003488:	230d      	movs	r3, #13
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800348c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003490:	4619      	mov	r1, r3
 8003492:	482c      	ldr	r0, [pc, #176]	; (8003544 <HAL_DCMI_MspInit+0x1e4>)
 8003494:	f004 fcd4 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003498:	2350      	movs	r3, #80	; 0x50
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a4:	2300      	movs	r3, #0
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80034a8:	230d      	movs	r3, #13
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b0:	4619      	mov	r1, r3
 80034b2:	4825      	ldr	r0, [pc, #148]	; (8003548 <HAL_DCMI_MspInit+0x1e8>)
 80034b4:	f004 fcc4 	bl	8007e40 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80034b8:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_DCMI_MspInit+0x1ec>)
 80034ba:	4a25      	ldr	r2, [pc, #148]	; (8003550 <HAL_DCMI_MspInit+0x1f0>)
 80034bc:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80034be:	4b23      	ldr	r3, [pc, #140]	; (800354c <HAL_DCMI_MspInit+0x1ec>)
 80034c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c4:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034c6:	4b21      	ldr	r3, [pc, #132]	; (800354c <HAL_DCMI_MspInit+0x1ec>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80034cc:	4b1f      	ldr	r3, [pc, #124]	; (800354c <HAL_DCMI_MspInit+0x1ec>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80034d2:	4b1e      	ldr	r3, [pc, #120]	; (800354c <HAL_DCMI_MspInit+0x1ec>)
 80034d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034d8:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034da:	4b1c      	ldr	r3, [pc, #112]	; (800354c <HAL_DCMI_MspInit+0x1ec>)
 80034dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034e0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034e2:	4b1a      	ldr	r3, [pc, #104]	; (800354c <HAL_DCMI_MspInit+0x1ec>)
 80034e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034e8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80034ea:	4b18      	ldr	r3, [pc, #96]	; (800354c <HAL_DCMI_MspInit+0x1ec>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 80034f0:	4b16      	ldr	r3, [pc, #88]	; (800354c <HAL_DCMI_MspInit+0x1ec>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <HAL_DCMI_MspInit+0x1ec>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80034fc:	4813      	ldr	r0, [pc, #76]	; (800354c <HAL_DCMI_MspInit+0x1ec>)
 80034fe:	f003 fced 	bl	8006edc <HAL_DMA_Init>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_DCMI_MspInit+0x1ac>
    {
      Error_Handler();
 8003508:	f7ff fe80 	bl	800320c <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a0f      	ldr	r2, [pc, #60]	; (800354c <HAL_DCMI_MspInit+0x1ec>)
 8003510:	649a      	str	r2, [r3, #72]	; 0x48
 8003512:	4a0e      	ldr	r2, [pc, #56]	; (800354c <HAL_DCMI_MspInit+0x1ec>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8003518:	2200      	movs	r2, #0
 800351a:	2105      	movs	r1, #5
 800351c:	204e      	movs	r0, #78	; 0x4e
 800351e:	f003 fa71 	bl	8006a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8003522:	204e      	movs	r0, #78	; 0x4e
 8003524:	f003 fa8a 	bl	8006a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8003528:	bf00      	nop
 800352a:	3738      	adds	r7, #56	; 0x38
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	50050000 	.word	0x50050000
 8003534:	40023800 	.word	0x40023800
 8003538:	40021000 	.word	0x40021000
 800353c:	40020c00 	.word	0x40020c00
 8003540:	40021800 	.word	0x40021800
 8003544:	40021c00 	.word	0x40021c00
 8003548:	40020000 	.word	0x40020000
 800354c:	200015a4 	.word	0x200015a4
 8003550:	40026428 	.word	0x40026428

08003554 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0d      	ldr	r2, [pc, #52]	; (8003598 <HAL_DMA2D_MspInit+0x44>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d113      	bne.n	800358e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_DMA2D_MspInit+0x48>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a0c      	ldr	r2, [pc, #48]	; (800359c <HAL_DMA2D_MspInit+0x48>)
 800356c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <HAL_DMA2D_MspInit+0x48>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	2105      	movs	r1, #5
 8003582:	205a      	movs	r0, #90	; 0x5a
 8003584:	f003 fa3e 	bl	8006a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003588:	205a      	movs	r0, #90	; 0x5a
 800358a:	f003 fa57 	bl	8006a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	4002b000 	.word	0x4002b000
 800359c:	40023800 	.word	0x40023800

080035a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b0ac      	sub	sp, #176	; 0xb0
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035b8:	f107 0318 	add.w	r3, r7, #24
 80035bc:	2284      	movs	r2, #132	; 0x84
 80035be:	2100      	movs	r1, #0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f016 fcbb 	bl	8019f3c <memset>
  if(hi2c->Instance==I2C1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a44      	ldr	r2, [pc, #272]	; (80036dc <HAL_I2C_MspInit+0x13c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d13d      	bne.n	800364c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80035d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80035d6:	2300      	movs	r3, #0
 80035d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035da:	f107 0318 	add.w	r3, r7, #24
 80035de:	4618      	mov	r0, r3
 80035e0:	f009 fa86 	bl	800caf0 <HAL_RCCEx_PeriphCLKConfig>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80035ea:	f7ff fe0f 	bl	800320c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ee:	4b3c      	ldr	r3, [pc, #240]	; (80036e0 <HAL_I2C_MspInit+0x140>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4a3b      	ldr	r2, [pc, #236]	; (80036e0 <HAL_I2C_MspInit+0x140>)
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	6313      	str	r3, [r2, #48]	; 0x30
 80035fa:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <HAL_I2C_MspInit+0x140>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003606:	f44f 7340 	mov.w	r3, #768	; 0x300
 800360a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800360e:	2312      	movs	r3, #18
 8003610:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003614:	2301      	movs	r3, #1
 8003616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361a:	2300      	movs	r3, #0
 800361c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003620:	2304      	movs	r3, #4
 8003622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003626:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800362a:	4619      	mov	r1, r3
 800362c:	482d      	ldr	r0, [pc, #180]	; (80036e4 <HAL_I2C_MspInit+0x144>)
 800362e:	f004 fc07 	bl	8007e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003632:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <HAL_I2C_MspInit+0x140>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <HAL_I2C_MspInit+0x140>)
 8003638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
 800363e:	4b28      	ldr	r3, [pc, #160]	; (80036e0 <HAL_I2C_MspInit+0x140>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800364a:	e042      	b.n	80036d2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a25      	ldr	r2, [pc, #148]	; (80036e8 <HAL_I2C_MspInit+0x148>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d13d      	bne.n	80036d2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800365a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800365c:	2300      	movs	r3, #0
 800365e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003662:	f107 0318 	add.w	r3, r7, #24
 8003666:	4618      	mov	r0, r3
 8003668:	f009 fa42 	bl	800caf0 <HAL_RCCEx_PeriphCLKConfig>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003672:	f7ff fdcb 	bl	800320c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003676:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_I2C_MspInit+0x140>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <HAL_I2C_MspInit+0x140>)
 800367c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003680:	6313      	str	r3, [r2, #48]	; 0x30
 8003682:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <HAL_I2C_MspInit+0x140>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800368e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003692:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003696:	2312      	movs	r3, #18
 8003698:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800369c:	2301      	movs	r3, #1
 800369e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a2:	2303      	movs	r3, #3
 80036a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80036a8:	2304      	movs	r3, #4
 80036aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80036ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036b2:	4619      	mov	r1, r3
 80036b4:	480d      	ldr	r0, [pc, #52]	; (80036ec <HAL_I2C_MspInit+0x14c>)
 80036b6:	f004 fbc3 	bl	8007e40 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_I2C_MspInit+0x140>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	4a08      	ldr	r2, [pc, #32]	; (80036e0 <HAL_I2C_MspInit+0x140>)
 80036c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036c4:	6413      	str	r3, [r2, #64]	; 0x40
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_I2C_MspInit+0x140>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	68bb      	ldr	r3, [r7, #8]
}
 80036d2:	bf00      	nop
 80036d4:	37b0      	adds	r7, #176	; 0xb0
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40005400 	.word	0x40005400
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40020400 	.word	0x40020400
 80036e8:	40005c00 	.word	0x40005c00
 80036ec:	40021c00 	.word	0x40021c00

080036f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a15      	ldr	r2, [pc, #84]	; (8003754 <HAL_I2C_MspDeInit+0x64>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d110      	bne.n	8003724 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <HAL_I2C_MspDeInit+0x68>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	4a14      	ldr	r2, [pc, #80]	; (8003758 <HAL_I2C_MspDeInit+0x68>)
 8003708:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800370c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 800370e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003712:	4812      	ldr	r0, [pc, #72]	; (800375c <HAL_I2C_MspDeInit+0x6c>)
 8003714:	f004 fd40 	bl	8008198 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8003718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800371c:	480f      	ldr	r0, [pc, #60]	; (800375c <HAL_I2C_MspDeInit+0x6c>)
 800371e:	f004 fd3b 	bl	8008198 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003722:	e013      	b.n	800374c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a0d      	ldr	r2, [pc, #52]	; (8003760 <HAL_I2C_MspDeInit+0x70>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10e      	bne.n	800374c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_I2C_MspDeInit+0x68>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	4a09      	ldr	r2, [pc, #36]	; (8003758 <HAL_I2C_MspDeInit+0x68>)
 8003734:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003738:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800373a:	2180      	movs	r1, #128	; 0x80
 800373c:	4809      	ldr	r0, [pc, #36]	; (8003764 <HAL_I2C_MspDeInit+0x74>)
 800373e:	f004 fd2b 	bl	8008198 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003746:	4807      	ldr	r0, [pc, #28]	; (8003764 <HAL_I2C_MspDeInit+0x74>)
 8003748:	f004 fd26 	bl	8008198 <HAL_GPIO_DeInit>
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40005400 	.word	0x40005400
 8003758:	40023800 	.word	0x40023800
 800375c:	40020400 	.word	0x40020400
 8003760:	40005c00 	.word	0x40005c00
 8003764:	40021c00 	.word	0x40021c00

08003768 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08e      	sub	sp, #56	; 0x38
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a51      	ldr	r2, [pc, #324]	; (80038cc <HAL_LTDC_MspInit+0x164>)
 8003786:	4293      	cmp	r3, r2
 8003788:	f040 809b 	bne.w	80038c2 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800378c:	4b50      	ldr	r3, [pc, #320]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	4a4f      	ldr	r2, [pc, #316]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 8003792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003796:	6453      	str	r3, [r2, #68]	; 0x44
 8003798:	4b4d      	ldr	r3, [pc, #308]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037a0:	623b      	str	r3, [r7, #32]
 80037a2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037a4:	4b4a      	ldr	r3, [pc, #296]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	4a49      	ldr	r2, [pc, #292]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 80037aa:	f043 0310 	orr.w	r3, r3, #16
 80037ae:	6313      	str	r3, [r2, #48]	; 0x30
 80037b0:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80037bc:	4b44      	ldr	r3, [pc, #272]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	4a43      	ldr	r2, [pc, #268]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 80037c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c6:	6313      	str	r3, [r2, #48]	; 0x30
 80037c8:	4b41      	ldr	r3, [pc, #260]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80037d4:	4b3e      	ldr	r3, [pc, #248]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	4a3d      	ldr	r2, [pc, #244]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 80037da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037de:	6313      	str	r3, [r2, #48]	; 0x30
 80037e0:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80037ec:	4b38      	ldr	r3, [pc, #224]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	4a37      	ldr	r2, [pc, #220]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 80037f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f6:	6313      	str	r3, [r2, #48]	; 0x30
 80037f8:	4b35      	ldr	r3, [pc, #212]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003804:	4b32      	ldr	r3, [pc, #200]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	4a31      	ldr	r2, [pc, #196]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 800380a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380e:	6313      	str	r3, [r2, #48]	; 0x30
 8003810:	4b2f      	ldr	r3, [pc, #188]	; (80038d0 <HAL_LTDC_MspInit+0x168>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800381c:	2310      	movs	r3, #16
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003820:	2302      	movs	r3, #2
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	2300      	movs	r3, #0
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003828:	2300      	movs	r3, #0
 800382a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800382c:	230e      	movs	r3, #14
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003834:	4619      	mov	r1, r3
 8003836:	4827      	ldr	r0, [pc, #156]	; (80038d4 <HAL_LTDC_MspInit+0x16c>)
 8003838:	f004 fb02 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800383c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384a:	2300      	movs	r3, #0
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800384e:	230e      	movs	r3, #14
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003856:	4619      	mov	r1, r3
 8003858:	481f      	ldr	r0, [pc, #124]	; (80038d8 <HAL_LTDC_MspInit+0x170>)
 800385a:	f004 faf1 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800385e:	23f7      	movs	r3, #247	; 0xf7
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	2302      	movs	r3, #2
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386a:	2300      	movs	r3, #0
 800386c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800386e:	230e      	movs	r3, #14
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003876:	4619      	mov	r1, r3
 8003878:	4818      	ldr	r0, [pc, #96]	; (80038dc <HAL_LTDC_MspInit+0x174>)
 800387a:	f004 fae1 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800387e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003884:	2302      	movs	r3, #2
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003888:	2300      	movs	r3, #0
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388c:	2300      	movs	r3, #0
 800388e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003890:	2309      	movs	r3, #9
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003898:	4619      	mov	r1, r3
 800389a:	4811      	ldr	r0, [pc, #68]	; (80038e0 <HAL_LTDC_MspInit+0x178>)
 800389c:	f004 fad0 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80038a0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a6:	2302      	movs	r3, #2
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ae:	2300      	movs	r3, #0
 80038b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80038b2:	230e      	movs	r3, #14
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80038b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ba:	4619      	mov	r1, r3
 80038bc:	4809      	ldr	r0, [pc, #36]	; (80038e4 <HAL_LTDC_MspInit+0x17c>)
 80038be:	f004 fabf 	bl	8007e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80038c2:	bf00      	nop
 80038c4:	3738      	adds	r7, #56	; 0x38
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40016800 	.word	0x40016800
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40022400 	.word	0x40022400
 80038dc:	40022800 	.word	0x40022800
 80038e0:	40021800 	.word	0x40021800
 80038e4:	40022000 	.word	0x40022000

080038e8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08c      	sub	sp, #48	; 0x30
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f0:	f107 031c 	add.w	r3, r7, #28
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a3f      	ldr	r2, [pc, #252]	; (8003a04 <HAL_QSPI_MspInit+0x11c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d178      	bne.n	80039fc <HAL_QSPI_MspInit+0x114>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800390a:	4b3f      	ldr	r3, [pc, #252]	; (8003a08 <HAL_QSPI_MspInit+0x120>)
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	4a3e      	ldr	r2, [pc, #248]	; (8003a08 <HAL_QSPI_MspInit+0x120>)
 8003910:	f043 0302 	orr.w	r3, r3, #2
 8003914:	6393      	str	r3, [r2, #56]	; 0x38
 8003916:	4b3c      	ldr	r3, [pc, #240]	; (8003a08 <HAL_QSPI_MspInit+0x120>)
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003922:	4b39      	ldr	r3, [pc, #228]	; (8003a08 <HAL_QSPI_MspInit+0x120>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a38      	ldr	r2, [pc, #224]	; (8003a08 <HAL_QSPI_MspInit+0x120>)
 8003928:	f043 0310 	orr.w	r3, r3, #16
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b36      	ldr	r3, [pc, #216]	; (8003a08 <HAL_QSPI_MspInit+0x120>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393a:	4b33      	ldr	r3, [pc, #204]	; (8003a08 <HAL_QSPI_MspInit+0x120>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4a32      	ldr	r2, [pc, #200]	; (8003a08 <HAL_QSPI_MspInit+0x120>)
 8003940:	f043 0302 	orr.w	r3, r3, #2
 8003944:	6313      	str	r3, [r2, #48]	; 0x30
 8003946:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <HAL_QSPI_MspInit+0x120>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003952:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <HAL_QSPI_MspInit+0x120>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	4a2c      	ldr	r2, [pc, #176]	; (8003a08 <HAL_QSPI_MspInit+0x120>)
 8003958:	f043 0308 	orr.w	r3, r3, #8
 800395c:	6313      	str	r3, [r2, #48]	; 0x30
 800395e:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <HAL_QSPI_MspInit+0x120>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800396a:	2304      	movs	r3, #4
 800396c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	2302      	movs	r3, #2
 8003970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003976:	2303      	movs	r3, #3
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800397a:	2309      	movs	r3, #9
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800397e:	f107 031c 	add.w	r3, r7, #28
 8003982:	4619      	mov	r1, r3
 8003984:	4821      	ldr	r0, [pc, #132]	; (8003a0c <HAL_QSPI_MspInit+0x124>)
 8003986:	f004 fa5b 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800398a:	2340      	movs	r3, #64	; 0x40
 800398c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398e:	2302      	movs	r3, #2
 8003990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003996:	2303      	movs	r3, #3
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800399a:	230a      	movs	r3, #10
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800399e:	f107 031c 	add.w	r3, r7, #28
 80039a2:	4619      	mov	r1, r3
 80039a4:	481a      	ldr	r0, [pc, #104]	; (8003a10 <HAL_QSPI_MspInit+0x128>)
 80039a6:	f004 fa4b 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039aa:	2304      	movs	r3, #4
 80039ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ae:	2302      	movs	r3, #2
 80039b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b6:	2303      	movs	r3, #3
 80039b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80039ba:	2309      	movs	r3, #9
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039be:	f107 031c 	add.w	r3, r7, #28
 80039c2:	4619      	mov	r1, r3
 80039c4:	4812      	ldr	r0, [pc, #72]	; (8003a10 <HAL_QSPI_MspInit+0x128>)
 80039c6:	f004 fa3b 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80039ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80039ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d8:	2303      	movs	r3, #3
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80039dc:	2309      	movs	r3, #9
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039e0:	f107 031c 	add.w	r3, r7, #28
 80039e4:	4619      	mov	r1, r3
 80039e6:	480b      	ldr	r0, [pc, #44]	; (8003a14 <HAL_QSPI_MspInit+0x12c>)
 80039e8:	f004 fa2a 	bl	8007e40 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80039ec:	2200      	movs	r2, #0
 80039ee:	2105      	movs	r1, #5
 80039f0:	205c      	movs	r0, #92	; 0x5c
 80039f2:	f003 f807 	bl	8006a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80039f6:	205c      	movs	r0, #92	; 0x5c
 80039f8:	f003 f820 	bl	8006a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80039fc:	bf00      	nop
 80039fe:	3730      	adds	r7, #48	; 0x30
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	a0001000 	.word	0xa0001000
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40020400 	.word	0x40020400
 8003a14:	40020c00 	.word	0x40020c00

08003a18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b0a4      	sub	sp, #144	; 0x90
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a20:	f107 030c 	add.w	r3, r7, #12
 8003a24:	2284      	movs	r2, #132	; 0x84
 8003a26:	2100      	movs	r1, #0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f016 fa87 	bl	8019f3c <memset>
  if(hrtc->Instance==RTC)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <HAL_RTC_MspInit+0x54>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d114      	bne.n	8003a62 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a38:	2320      	movs	r3, #32
 8003a3a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a42:	f107 030c 	add.w	r3, r7, #12
 8003a46:	4618      	mov	r0, r3
 8003a48:	f009 f852 	bl	800caf0 <HAL_RCCEx_PeriphCLKConfig>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003a52:	f7ff fbdb 	bl	800320c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RTC_MspInit+0x58>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <HAL_RTC_MspInit+0x58>)
 8003a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a60:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a62:	bf00      	nop
 8003a64:	3790      	adds	r7, #144	; 0x90
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40002800 	.word	0x40002800
 8003a70:	40023800 	.word	0x40023800

08003a74 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	; 0x28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7c:	f107 0314 	add.w	r3, r7, #20
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	60da      	str	r2, [r3, #12]
 8003a8a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a25      	ldr	r2, [pc, #148]	; (8003b28 <HAL_SD_MspInit+0xb4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d144      	bne.n	8003b20 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003a96:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <HAL_SD_MspInit+0xb8>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	4a24      	ldr	r2, [pc, #144]	; (8003b2c <HAL_SD_MspInit+0xb8>)
 8003a9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <HAL_SD_MspInit+0xb8>)
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aae:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <HAL_SD_MspInit+0xb8>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	4a1e      	ldr	r2, [pc, #120]	; (8003b2c <HAL_SD_MspInit+0xb8>)
 8003ab4:	f043 0304 	orr.w	r3, r3, #4
 8003ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aba:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <HAL_SD_MspInit+0xb8>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ac6:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_SD_MspInit+0xb8>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <HAL_SD_MspInit+0xb8>)
 8003acc:	f043 0308 	orr.w	r3, r3, #8
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	4b16      	ldr	r3, [pc, #88]	; (8003b2c <HAL_SD_MspInit+0xb8>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003ade:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003ae2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aec:	2303      	movs	r3, #3
 8003aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003af0:	230c      	movs	r3, #12
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	4619      	mov	r1, r3
 8003afa:	480d      	ldr	r0, [pc, #52]	; (8003b30 <HAL_SD_MspInit+0xbc>)
 8003afc:	f004 f9a0 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003b00:	2304      	movs	r3, #4
 8003b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003b10:	230c      	movs	r3, #12
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003b14:	f107 0314 	add.w	r3, r7, #20
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4806      	ldr	r0, [pc, #24]	; (8003b34 <HAL_SD_MspInit+0xc0>)
 8003b1c:	f004 f990 	bl	8007e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003b20:	bf00      	nop
 8003b22:	3728      	adds	r7, #40	; 0x28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40020800 	.word	0x40020800
 8003b34:	40020c00 	.word	0x40020c00

08003b38 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b0aa      	sub	sp, #168	; 0xa8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	60da      	str	r2, [r3, #12]
 8003b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b50:	f107 0310 	add.w	r3, r7, #16
 8003b54:	2284      	movs	r2, #132	; 0x84
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f016 f9ef 	bl	8019f3c <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003b66:	d143      	bne.n	8003bf0 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8003b6e:	2364      	movs	r3, #100	; 0x64
 8003b70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8003b72:	2302      	movs	r3, #2
 8003b74:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003b76:	2302      	movs	r3, #2
 8003b78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b82:	f107 0310 	add.w	r3, r7, #16
 8003b86:	4618      	mov	r0, r3
 8003b88:	f008 ffb2 	bl	800caf0 <HAL_RCCEx_PeriphCLKConfig>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8003b92:	f7ff fb3b 	bl	800320c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003b96:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <HAL_SPDIFRX_MspInit+0xc0>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <HAL_SPDIFRX_MspInit+0xc0>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <HAL_SPDIFRX_MspInit+0xc0>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_SPDIFRX_MspInit+0xc0>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <HAL_SPDIFRX_MspInit+0xc0>)
 8003bb4:	f043 0308 	orr.w	r3, r3, #8
 8003bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <HAL_SPDIFRX_MspInit+0xc0>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003bde:	2308      	movs	r3, #8
 8003be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003be4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003be8:	4619      	mov	r1, r3
 8003bea:	4804      	ldr	r0, [pc, #16]	; (8003bfc <HAL_SPDIFRX_MspInit+0xc4>)
 8003bec:	f004 f928 	bl	8007e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8003bf0:	bf00      	nop
 8003bf2:	37a8      	adds	r7, #168	; 0xa8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40020c00 	.word	0x40020c00

08003c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b089      	sub	sp, #36	; 0x24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a2e      	ldr	r2, [pc, #184]	; (8003cc8 <HAL_TIM_Base_MspInit+0xc8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10c      	bne.n	8003c2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c12:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	4a2d      	ldr	r2, [pc, #180]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c1e:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c2a:	e046      	b.n	8003cba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d10c      	bne.n	8003c50 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c36:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	4a24      	ldr	r2, [pc, #144]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6413      	str	r3, [r2, #64]	; 0x40
 8003c42:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	69bb      	ldr	r3, [r7, #24]
}
 8003c4e:	e034      	b.n	8003cba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <HAL_TIM_Base_MspInit+0xd0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d10c      	bne.n	8003c74 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003c60:	f043 0302 	orr.w	r3, r3, #2
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697b      	ldr	r3, [r7, #20]
}
 8003c72:	e022      	b.n	8003cba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a16      	ldr	r2, [pc, #88]	; (8003cd4 <HAL_TIM_Base_MspInit+0xd4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10c      	bne.n	8003c98 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c7e:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003c84:	f043 0308 	orr.w	r3, r3, #8
 8003c88:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	693b      	ldr	r3, [r7, #16]
}
 8003c96:	e010      	b.n	8003cba <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <HAL_TIM_Base_MspInit+0xd8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10b      	bne.n	8003cba <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	4a09      	ldr	r2, [pc, #36]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003ca8:	f043 0302 	orr.w	r3, r3, #2
 8003cac:	6453      	str	r3, [r2, #68]	; 0x44
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <HAL_TIM_Base_MspInit+0xcc>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
}
 8003cba:	bf00      	nop
 8003cbc:	3724      	adds	r7, #36	; 0x24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000c00 	.word	0x40000c00
 8003cd8:	40010400 	.word	0x40010400

08003cdc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <HAL_TIM_PWM_MspInit+0x38>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10b      	bne.n	8003d06 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_TIM_PWM_MspInit+0x3c>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <HAL_TIM_PWM_MspInit+0x3c>)
 8003cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <HAL_TIM_PWM_MspInit+0x3c>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40001800 	.word	0x40001800
 8003d18:	40023800 	.word	0x40023800

08003d1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08c      	sub	sp, #48	; 0x30
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d24:	f107 031c 	add.w	r3, r7, #28
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	609a      	str	r2, [r3, #8]
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a56      	ldr	r2, [pc, #344]	; (8003e94 <HAL_TIM_MspPostInit+0x178>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d11d      	bne.n	8003d7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d3e:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	4a55      	ldr	r2, [pc, #340]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4a:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d64:	2300      	movs	r3, #0
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003d6c:	f107 031c 	add.w	r3, r7, #28
 8003d70:	4619      	mov	r1, r3
 8003d72:	484a      	ldr	r0, [pc, #296]	; (8003e9c <HAL_TIM_MspPostInit+0x180>)
 8003d74:	f004 f864 	bl	8007e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003d78:	e087      	b.n	8003e8a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d82:	d11d      	bne.n	8003dc0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d84:	4b44      	ldr	r3, [pc, #272]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	4a43      	ldr	r2, [pc, #268]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d90:	4b41      	ldr	r3, [pc, #260]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003d9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da2:	2302      	movs	r3, #2
 8003da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003daa:	2300      	movs	r3, #0
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dae:	2301      	movs	r3, #1
 8003db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003db2:	f107 031c 	add.w	r3, r7, #28
 8003db6:	4619      	mov	r1, r3
 8003db8:	4838      	ldr	r0, [pc, #224]	; (8003e9c <HAL_TIM_MspPostInit+0x180>)
 8003dba:	f004 f841 	bl	8007e40 <HAL_GPIO_Init>
}
 8003dbe:	e064      	b.n	8003e8a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a36      	ldr	r2, [pc, #216]	; (8003ea0 <HAL_TIM_MspPostInit+0x184>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d11c      	bne.n	8003e04 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dca:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	4a32      	ldr	r2, [pc, #200]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd6:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003de2:	2310      	movs	r3, #16
 8003de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de6:	2302      	movs	r3, #2
 8003de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dee:	2300      	movs	r3, #0
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003df2:	2302      	movs	r3, #2
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003df6:	f107 031c 	add.w	r3, r7, #28
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4829      	ldr	r0, [pc, #164]	; (8003ea4 <HAL_TIM_MspPostInit+0x188>)
 8003dfe:	f004 f81f 	bl	8007e40 <HAL_GPIO_Init>
}
 8003e02:	e042      	b.n	8003e8a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a27      	ldr	r2, [pc, #156]	; (8003ea8 <HAL_TIM_MspPostInit+0x18c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d11c      	bne.n	8003e48 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e0e:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e18:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1a:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003e26:	2301      	movs	r3, #1
 8003e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e32:	2300      	movs	r3, #0
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003e36:	2302      	movs	r3, #2
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003e3a:	f107 031c 	add.w	r3, r7, #28
 8003e3e:	4619      	mov	r1, r3
 8003e40:	481a      	ldr	r0, [pc, #104]	; (8003eac <HAL_TIM_MspPostInit+0x190>)
 8003e42:	f003 fffd 	bl	8007e40 <HAL_GPIO_Init>
}
 8003e46:	e020      	b.n	8003e8a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a18      	ldr	r2, [pc, #96]	; (8003eb0 <HAL_TIM_MspPostInit+0x194>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d11b      	bne.n	8003e8a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e52:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	4a10      	ldr	r2, [pc, #64]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5e:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <HAL_TIM_MspPostInit+0x17c>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003e6a:	2340      	movs	r3, #64	; 0x40
 8003e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e76:	2300      	movs	r3, #0
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003e7a:	2309      	movs	r3, #9
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003e7e:	f107 031c 	add.w	r3, r7, #28
 8003e82:	4619      	mov	r1, r3
 8003e84:	480b      	ldr	r0, [pc, #44]	; (8003eb4 <HAL_TIM_MspPostInit+0x198>)
 8003e86:	f003 ffdb 	bl	8007e40 <HAL_GPIO_Init>
}
 8003e8a:	bf00      	nop
 8003e8c:	3730      	adds	r7, #48	; 0x30
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40010000 	.word	0x40010000
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	40020000 	.word	0x40020000
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40020400 	.word	0x40020400
 8003ea8:	40000c00 	.word	0x40000c00
 8003eac:	40022000 	.word	0x40022000
 8003eb0:	40001800 	.word	0x40001800
 8003eb4:	40021c00 	.word	0x40021c00

08003eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b0ae      	sub	sp, #184	; 0xb8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ed0:	f107 0320 	add.w	r3, r7, #32
 8003ed4:	2284      	movs	r2, #132	; 0x84
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f016 f82f 	bl	8019f3c <memset>
  if(huart->Instance==USART1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a53      	ldr	r2, [pc, #332]	; (8004030 <HAL_UART_MspInit+0x178>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d15d      	bne.n	8003fa4 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ee8:	2340      	movs	r3, #64	; 0x40
 8003eea:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003eec:	2300      	movs	r3, #0
 8003eee:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ef0:	f107 0320 	add.w	r3, r7, #32
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f008 fdfb 	bl	800caf0 <HAL_RCCEx_PeriphCLKConfig>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f00:	f7ff f984 	bl	800320c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f04:	4b4b      	ldr	r3, [pc, #300]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	4a4a      	ldr	r2, [pc, #296]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003f0a:	f043 0310 	orr.w	r3, r3, #16
 8003f0e:	6453      	str	r3, [r2, #68]	; 0x44
 8003f10:	4b48      	ldr	r3, [pc, #288]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f1c:	4b45      	ldr	r3, [pc, #276]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	4a44      	ldr	r2, [pc, #272]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003f22:	f043 0302 	orr.w	r3, r3, #2
 8003f26:	6313      	str	r3, [r2, #48]	; 0x30
 8003f28:	4b42      	ldr	r3, [pc, #264]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f34:	4b3f      	ldr	r3, [pc, #252]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	4a3e      	ldr	r2, [pc, #248]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f40:	4b3c      	ldr	r3, [pc, #240]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f52:	2302      	movs	r3, #2
 8003f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f64:	2307      	movs	r3, #7
 8003f66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003f6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4831      	ldr	r0, [pc, #196]	; (8004038 <HAL_UART_MspInit+0x180>)
 8003f72:	f003 ff65 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f90:	2307      	movs	r3, #7
 8003f92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003f96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4827      	ldr	r0, [pc, #156]	; (800403c <HAL_UART_MspInit+0x184>)
 8003f9e:	f003 ff4f 	bl	8007e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003fa2:	e040      	b.n	8004026 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a25      	ldr	r2, [pc, #148]	; (8004040 <HAL_UART_MspInit+0x188>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d13b      	bne.n	8004026 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003fae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fb2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fb8:	f107 0320 	add.w	r3, r7, #32
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f008 fd97 	bl	800caf0 <HAL_RCCEx_PeriphCLKConfig>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_UART_MspInit+0x114>
      Error_Handler();
 8003fc8:	f7ff f920 	bl	800320c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003fcc:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd0:	4a18      	ldr	r2, [pc, #96]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003fd2:	f043 0320 	orr.w	r3, r3, #32
 8003fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8003fd8:	4b16      	ldr	r3, [pc, #88]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fe4:	4b13      	ldr	r3, [pc, #76]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	4a12      	ldr	r2, [pc, #72]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003fea:	f043 0304 	orr.w	r3, r3, #4
 8003fee:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff0:	4b10      	ldr	r3, [pc, #64]	; (8004034 <HAL_UART_MspInit+0x17c>)
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003ffc:	23c0      	movs	r3, #192	; 0xc0
 8003ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004002:	2302      	movs	r3, #2
 8004004:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400e:	2303      	movs	r3, #3
 8004010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004014:	2308      	movs	r3, #8
 8004016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800401a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800401e:	4619      	mov	r1, r3
 8004020:	4808      	ldr	r0, [pc, #32]	; (8004044 <HAL_UART_MspInit+0x18c>)
 8004022:	f003 ff0d 	bl	8007e40 <HAL_GPIO_Init>
}
 8004026:	bf00      	nop
 8004028:	37b8      	adds	r7, #184	; 0xb8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40011000 	.word	0x40011000
 8004034:	40023800 	.word	0x40023800
 8004038:	40020400 	.word	0x40020400
 800403c:	40020000 	.word	0x40020000
 8004040:	40011400 	.word	0x40011400
 8004044:	40020800 	.word	0x40020800

08004048 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800404e:	1d3b      	adds	r3, r7, #4
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800405c:	4b3d      	ldr	r3, [pc, #244]	; (8004154 <HAL_FMC_MspInit+0x10c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d173      	bne.n	800414c <HAL_FMC_MspInit+0x104>
    return;
  }
  FMC_Initialized = 1;
 8004064:	4b3b      	ldr	r3, [pc, #236]	; (8004154 <HAL_FMC_MspInit+0x10c>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800406a:	4b3b      	ldr	r3, [pc, #236]	; (8004158 <HAL_FMC_MspInit+0x110>)
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	4a3a      	ldr	r2, [pc, #232]	; (8004158 <HAL_FMC_MspInit+0x110>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	6393      	str	r3, [r2, #56]	; 0x38
 8004076:	4b38      	ldr	r3, [pc, #224]	; (8004158 <HAL_FMC_MspInit+0x110>)
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8004082:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004086:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004088:	2302      	movs	r3, #2
 800408a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004090:	2303      	movs	r3, #3
 8004092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004094:	230c      	movs	r3, #12
 8004096:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	4619      	mov	r1, r3
 800409c:	482f      	ldr	r0, [pc, #188]	; (800415c <HAL_FMC_MspInit+0x114>)
 800409e:	f003 fecf 	bl	8007e40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80040a2:	f248 1333 	movw	r3, #33075	; 0x8133
 80040a6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a8:	2302      	movs	r3, #2
 80040aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b0:	2303      	movs	r3, #3
 80040b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040b4:	230c      	movs	r3, #12
 80040b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040b8:	1d3b      	adds	r3, r7, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	4828      	ldr	r0, [pc, #160]	; (8004160 <HAL_FMC_MspInit+0x118>)
 80040be:	f003 febf 	bl	8007e40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80040c2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80040c6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c8:	2302      	movs	r3, #2
 80040ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d0:	2303      	movs	r3, #3
 80040d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040d4:	230c      	movs	r3, #12
 80040d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040d8:	1d3b      	adds	r3, r7, #4
 80040da:	4619      	mov	r1, r3
 80040dc:	4821      	ldr	r0, [pc, #132]	; (8004164 <HAL_FMC_MspInit+0x11c>)
 80040de:	f003 feaf 	bl	8007e40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80040e2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80040e6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e8:	2302      	movs	r3, #2
 80040ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f0:	2303      	movs	r3, #3
 80040f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040f4:	230c      	movs	r3, #12
 80040f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	4619      	mov	r1, r3
 80040fc:	481a      	ldr	r0, [pc, #104]	; (8004168 <HAL_FMC_MspInit+0x120>)
 80040fe:	f003 fe9f 	bl	8007e40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004102:	2328      	movs	r3, #40	; 0x28
 8004104:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004106:	2302      	movs	r3, #2
 8004108:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800410e:	2303      	movs	r3, #3
 8004110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004112:	230c      	movs	r3, #12
 8004114:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004116:	1d3b      	adds	r3, r7, #4
 8004118:	4619      	mov	r1, r3
 800411a:	4814      	ldr	r0, [pc, #80]	; (800416c <HAL_FMC_MspInit+0x124>)
 800411c:	f003 fe90 	bl	8007e40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004120:	2308      	movs	r3, #8
 8004122:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004124:	2302      	movs	r3, #2
 8004126:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800412c:	2303      	movs	r3, #3
 800412e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004130:	230c      	movs	r3, #12
 8004132:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	4619      	mov	r1, r3
 8004138:	480d      	ldr	r0, [pc, #52]	; (8004170 <HAL_FMC_MspInit+0x128>)
 800413a:	f003 fe81 	bl	8007e40 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  // syd:
  /* Associate mem2mem DMA handle with SDRAM */
  __HAL_LINKDMA(&hsdram1, hdma, hdma_memtomem_dma2_stream0);
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <HAL_FMC_MspInit+0x12c>)
 8004140:	4a0d      	ldr	r2, [pc, #52]	; (8004178 <HAL_FMC_MspInit+0x130>)
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <HAL_FMC_MspInit+0x130>)
 8004146:	4a0b      	ldr	r2, [pc, #44]	; (8004174 <HAL_FMC_MspInit+0x12c>)
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
 800414a:	e000      	b.n	800414e <HAL_FMC_MspInit+0x106>
    return;
 800414c:	bf00      	nop
  //i.e.:
  // hsdram1.hdma = &hdma_memtomem_dma2_stream0;
  // hdma_memtomem_dma2_stream0.Parent = &hsdram1;

  /* USER CODE END FMC_MspInit 1 */
}
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20001e0c 	.word	0x20001e0c
 8004158:	40023800 	.word	0x40023800
 800415c:	40021000 	.word	0x40021000
 8004160:	40021800 	.word	0x40021800
 8004164:	40020c00 	.word	0x40020c00
 8004168:	40021400 	.word	0x40021400
 800416c:	40021c00 	.word	0x40021c00
 8004170:	40020800 	.word	0x40020800
 8004174:	20001dd0 	.word	0x20001dd0
 8004178:	20001d70 	.word	0x20001d70

0800417c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004184:	f7ff ff60 	bl	8004048 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a6f      	ldr	r2, [pc, #444]	; (800435c <HAL_SAI_MspInit+0x1cc>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d175      	bne.n	800428e <HAL_SAI_MspInit+0xfe>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80041a2:	4b6f      	ldr	r3, [pc, #444]	; (8004360 <HAL_SAI_MspInit+0x1d0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80041aa:	4b6e      	ldr	r3, [pc, #440]	; (8004364 <HAL_SAI_MspInit+0x1d4>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	4a6d      	ldr	r2, [pc, #436]	; (8004364 <HAL_SAI_MspInit+0x1d4>)
 80041b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041b4:	6453      	str	r3, [r2, #68]	; 0x44
 80041b6:	4b6b      	ldr	r3, [pc, #428]	; (8004364 <HAL_SAI_MspInit+0x1d4>)
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80041c2:	4b67      	ldr	r3, [pc, #412]	; (8004360 <HAL_SAI_MspInit+0x1d0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3301      	adds	r3, #1
 80041c8:	4a65      	ldr	r2, [pc, #404]	; (8004360 <HAL_SAI_MspInit+0x1d0>)
 80041ca:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin;
 80041cc:	2310      	movs	r3, #16
 80041ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d0:	2302      	movs	r3, #2
 80041d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d8:	2303      	movs	r3, #3
 80041da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80041dc:	230a      	movs	r3, #10
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80041e0:	f107 0314 	add.w	r3, r7, #20
 80041e4:	4619      	mov	r1, r3
 80041e6:	4860      	ldr	r0, [pc, #384]	; (8004368 <HAL_SAI_MspInit+0x1d8>)
 80041e8:	f003 fe2a 	bl	8007e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80041ec:	23e0      	movs	r3, #224	; 0xe0
 80041ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f0:	2302      	movs	r3, #2
 80041f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041f8:	2302      	movs	r3, #2
 80041fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80041fc:	230a      	movs	r3, #10
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004200:	f107 0314 	add.w	r3, r7, #20
 8004204:	4619      	mov	r1, r3
 8004206:	4858      	ldr	r0, [pc, #352]	; (8004368 <HAL_SAI_MspInit+0x1d8>)
 8004208:	f003 fe1a 	bl	8007e40 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 800420c:	4b57      	ldr	r3, [pc, #348]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 800420e:	4a58      	ldr	r2, [pc, #352]	; (8004370 <HAL_SAI_MspInit+0x1e0>)
 8004210:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8004212:	4b56      	ldr	r3, [pc, #344]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 8004214:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004218:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800421a:	4b54      	ldr	r3, [pc, #336]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 800421c:	2240      	movs	r2, #64	; 0x40
 800421e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8004220:	4b52      	ldr	r3, [pc, #328]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 8004222:	2200      	movs	r2, #0
 8004224:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8004226:	4b51      	ldr	r3, [pc, #324]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 8004228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800422c:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800422e:	4b4f      	ldr	r3, [pc, #316]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 8004230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004234:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004236:	4b4d      	ldr	r3, [pc, #308]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 8004238:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800423c:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800423e:	4b4b      	ldr	r3, [pc, #300]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 8004240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004244:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8004246:	4b49      	ldr	r3, [pc, #292]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 8004248:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800424c:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800424e:	4b47      	ldr	r3, [pc, #284]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 8004250:	2204      	movs	r2, #4
 8004252:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai2_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004254:	4b45      	ldr	r3, [pc, #276]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 8004256:	2203      	movs	r2, #3
 8004258:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai2_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800425a:	4b44      	ldr	r3, [pc, #272]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 800425c:	2200      	movs	r2, #0
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai2_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004260:	4b42      	ldr	r3, [pc, #264]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8004266:	4841      	ldr	r0, [pc, #260]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 8004268:	f002 fe38 	bl	8006edc <HAL_DMA_Init>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_SAI_MspInit+0xe6>
    {
      Error_Handler();
 8004272:	f7fe ffcb 	bl	800320c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a3c      	ldr	r2, [pc, #240]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 800427a:	671a      	str	r2, [r3, #112]	; 0x70
 800427c:	4a3b      	ldr	r2, [pc, #236]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a39      	ldr	r2, [pc, #228]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 8004286:	66da      	str	r2, [r3, #108]	; 0x6c
 8004288:	4a38      	ldr	r2, [pc, #224]	; (800436c <HAL_SAI_MspInit+0x1dc>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a38      	ldr	r2, [pc, #224]	; (8004374 <HAL_SAI_MspInit+0x1e4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d15c      	bne.n	8004352 <HAL_SAI_MspInit+0x1c2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8004298:	4b31      	ldr	r3, [pc, #196]	; (8004360 <HAL_SAI_MspInit+0x1d0>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10b      	bne.n	80042b8 <HAL_SAI_MspInit+0x128>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80042a0:	4b30      	ldr	r3, [pc, #192]	; (8004364 <HAL_SAI_MspInit+0x1d4>)
 80042a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a4:	4a2f      	ldr	r2, [pc, #188]	; (8004364 <HAL_SAI_MspInit+0x1d4>)
 80042a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042aa:	6453      	str	r3, [r2, #68]	; 0x44
 80042ac:	4b2d      	ldr	r3, [pc, #180]	; (8004364 <HAL_SAI_MspInit+0x1d4>)
 80042ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80042b8:	4b29      	ldr	r3, [pc, #164]	; (8004360 <HAL_SAI_MspInit+0x1d0>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3301      	adds	r3, #1
 80042be:	4a28      	ldr	r2, [pc, #160]	; (8004360 <HAL_SAI_MspInit+0x1d0>)
 80042c0:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80042c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c8:	2302      	movs	r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042d0:	2302      	movs	r3, #2
 80042d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80042d4:	230a      	movs	r3, #10
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80042d8:	f107 0314 	add.w	r3, r7, #20
 80042dc:	4619      	mov	r1, r3
 80042de:	4826      	ldr	r0, [pc, #152]	; (8004378 <HAL_SAI_MspInit+0x1e8>)
 80042e0:	f003 fdae 	bl	8007e40 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 80042e6:	4a26      	ldr	r2, [pc, #152]	; (8004380 <HAL_SAI_MspInit+0x1f0>)
 80042e8:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 80042ea:	4b24      	ldr	r3, [pc, #144]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042f0:	4b22      	ldr	r3, [pc, #136]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80042f6:	4b21      	ldr	r3, [pc, #132]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80042fc:	4b1f      	ldr	r3, [pc, #124]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 80042fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004302:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004304:	4b1d      	ldr	r3, [pc, #116]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 8004306:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800430a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800430c:	4b1b      	ldr	r3, [pc, #108]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 800430e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004312:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8004314:	4b19      	ldr	r3, [pc, #100]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 8004316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800431a:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 800431c:	4b17      	ldr	r3, [pc, #92]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 800431e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004322:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004324:	4b15      	ldr	r3, [pc, #84]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 8004326:	2200      	movs	r2, #0
 8004328:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 800432a:	4814      	ldr	r0, [pc, #80]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 800432c:	f002 fdd6 	bl	8006edc <HAL_DMA_Init>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_SAI_MspInit+0x1aa>
    {
      Error_Handler();
 8004336:	f7fe ff69 	bl	800320c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a0f      	ldr	r2, [pc, #60]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 800433e:	671a      	str	r2, [r3, #112]	; 0x70
 8004340:	4a0e      	ldr	r2, [pc, #56]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a0c      	ldr	r2, [pc, #48]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 800434a:	66da      	str	r2, [r3, #108]	; 0x6c
 800434c:	4a0b      	ldr	r2, [pc, #44]	; (800437c <HAL_SAI_MspInit+0x1ec>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8004352:	bf00      	nop
 8004354:	3728      	adds	r7, #40	; 0x28
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40015c04 	.word	0x40015c04
 8004360:	20001e10 	.word	0x20001e10
 8004364:	40023800 	.word	0x40023800
 8004368:	40022000 	.word	0x40022000
 800436c:	20001908 	.word	0x20001908
 8004370:	40026470 	.word	0x40026470
 8004374:	40015c24 	.word	0x40015c24
 8004378:	40021800 	.word	0x40021800
 800437c:	20001968 	.word	0x20001968
 8004380:	400264b8 	.word	0x400264b8

08004384 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08e      	sub	sp, #56	; 0x38
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004394:	4b33      	ldr	r3, [pc, #204]	; (8004464 <HAL_InitTick+0xe0>)
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	4a32      	ldr	r2, [pc, #200]	; (8004464 <HAL_InitTick+0xe0>)
 800439a:	f043 0310 	orr.w	r3, r3, #16
 800439e:	6413      	str	r3, [r2, #64]	; 0x40
 80043a0:	4b30      	ldr	r3, [pc, #192]	; (8004464 <HAL_InitTick+0xe0>)
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043ac:	f107 0210 	add.w	r2, r7, #16
 80043b0:	f107 0314 	add.w	r3, r7, #20
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f008 fb68 	bl	800ca8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d103      	bne.n	80043ce <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80043c6:	f008 fb39 	bl	800ca3c <HAL_RCC_GetPCLK1Freq>
 80043ca:	6378      	str	r0, [r7, #52]	; 0x34
 80043cc:	e004      	b.n	80043d8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80043ce:	f008 fb35 	bl	800ca3c <HAL_RCC_GetPCLK1Freq>
 80043d2:	4603      	mov	r3, r0
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80043d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043da:	4a23      	ldr	r2, [pc, #140]	; (8004468 <HAL_InitTick+0xe4>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	0c9b      	lsrs	r3, r3, #18
 80043e2:	3b01      	subs	r3, #1
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80043e6:	4b21      	ldr	r3, [pc, #132]	; (800446c <HAL_InitTick+0xe8>)
 80043e8:	4a21      	ldr	r2, [pc, #132]	; (8004470 <HAL_InitTick+0xec>)
 80043ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80043ec:	4b1f      	ldr	r3, [pc, #124]	; (800446c <HAL_InitTick+0xe8>)
 80043ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80043f4:	4a1d      	ldr	r2, [pc, #116]	; (800446c <HAL_InitTick+0xe8>)
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80043fa:	4b1c      	ldr	r3, [pc, #112]	; (800446c <HAL_InitTick+0xe8>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004400:	4b1a      	ldr	r3, [pc, #104]	; (800446c <HAL_InitTick+0xe8>)
 8004402:	2200      	movs	r2, #0
 8004404:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004406:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_InitTick+0xe8>)
 8004408:	2200      	movs	r2, #0
 800440a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800440c:	4817      	ldr	r0, [pc, #92]	; (800446c <HAL_InitTick+0xe8>)
 800440e:	f00b f9e1 	bl	800f7d4 <HAL_TIM_Base_Init>
 8004412:	4603      	mov	r3, r0
 8004414:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004418:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800441c:	2b00      	cmp	r3, #0
 800441e:	d11b      	bne.n	8004458 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004420:	4812      	ldr	r0, [pc, #72]	; (800446c <HAL_InitTick+0xe8>)
 8004422:	f00b fa2f 	bl	800f884 <HAL_TIM_Base_Start_IT>
 8004426:	4603      	mov	r3, r0
 8004428:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800442c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004430:	2b00      	cmp	r3, #0
 8004432:	d111      	bne.n	8004458 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004434:	2036      	movs	r0, #54	; 0x36
 8004436:	f002 fb01 	bl	8006a3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b0f      	cmp	r3, #15
 800443e:	d808      	bhi.n	8004452 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004440:	2200      	movs	r2, #0
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	2036      	movs	r0, #54	; 0x36
 8004446:	f002 fadd 	bl	8006a04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800444a:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <HAL_InitTick+0xf0>)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	e002      	b.n	8004458 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004458:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800445c:	4618      	mov	r0, r3
 800445e:	3738      	adds	r7, #56	; 0x38
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40023800 	.word	0x40023800
 8004468:	431bde83 	.word	0x431bde83
 800446c:	20001e14 	.word	0x20001e14
 8004470:	40001000 	.word	0x40001000
 8004474:	20000048 	.word	0x20000048

08004478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800447c:	e7fe      	b.n	800447c <NMI_Handler+0x4>

0800447e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800447e:	b480      	push	{r7}
 8004480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004482:	e7fe      	b.n	8004482 <HardFault_Handler+0x4>

08004484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004488:	e7fe      	b.n	8004488 <MemManage_Handler+0x4>

0800448a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800448a:	b480      	push	{r7}
 800448c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800448e:	e7fe      	b.n	800448e <BusFault_Handler+0x4>

08004490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004494:	e7fe      	b.n	8004494 <UsageFault_Handler+0x4>

08004496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004496:	b480      	push	{r7}
 8004498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800449a:	bf00      	nop
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 80044a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80044ac:	f003 ffcc 	bl	8008448 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80044b0:	bf00      	nop
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80044b8:	4802      	ldr	r0, [pc, #8]	; (80044c4 <TIM6_DAC_IRQHandler+0x10>)
 80044ba:	f00b fab2 	bl	800fa22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20001e14 	.word	0x20001e14

080044c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	// mem2mem DMA (eg SDRAM to RAM)

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80044cc:	4802      	ldr	r0, [pc, #8]	; (80044d8 <DMA2_Stream0_IRQHandler+0x10>)
 80044ce:	f002 fea5 	bl	800721c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20001d70 	.word	0x20001d70

080044dc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

	// DMA streaming from camera to memory

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80044e0:	4802      	ldr	r0, [pc, #8]	; (80044ec <DMA2_Stream1_IRQHandler+0x10>)
 80044e2:	f002 fe9b 	bl	800721c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	200015a4 	.word	0x200015a4

080044f0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

	// audio out

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80044f4:	4802      	ldr	r0, [pc, #8]	; (8004500 <DMA2_Stream4_IRQHandler+0x10>)
 80044f6:	f002 fe91 	bl	800721c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20001908 	.word	0x20001908

08004504 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004508:	4802      	ldr	r0, [pc, #8]	; (8004514 <OTG_FS_IRQHandler+0x10>)
 800450a:	f004 fa2b 	bl	8008964 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20049fe8 	.word	0x20049fe8

08004518 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

	// audio in

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800451c:	4802      	ldr	r0, [pc, #8]	; (8004528 <DMA2_Stream7_IRQHandler+0x10>)
 800451e:	f002 fe7d 	bl	800721c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20001968 	.word	0x20001968

0800452c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

	// c'était BSP_CAMERA_IRQHandler()

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8004530:	4802      	ldr	r0, [pc, #8]	; (800453c <DCMI_IRQHandler+0x10>)
 8004532:	f002 fc03 	bl	8006d3c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20001554 	.word	0x20001554

08004540 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

	// c'était BSP_LCD_DMA2D_IRQHandler();

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004544:	4802      	ldr	r0, [pc, #8]	; (8004550 <DMA2D_IRQHandler+0x10>)
 8004546:	f003 fa3d 	bl	80079c4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20001604 	.word	0x20001604

08004554 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8004558:	4802      	ldr	r0, [pc, #8]	; (8004564 <QUADSPI_IRQHandler+0x10>)
 800455a:	f006 fead 	bl	800b2b8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800455e:	bf00      	nop
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20001794 	.word	0x20001794

08004568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004570:	4a14      	ldr	r2, [pc, #80]	; (80045c4 <_sbrk+0x5c>)
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <_sbrk+0x60>)
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800457c:	4b13      	ldr	r3, [pc, #76]	; (80045cc <_sbrk+0x64>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <_sbrk+0x64>)
 8004586:	4a12      	ldr	r2, [pc, #72]	; (80045d0 <_sbrk+0x68>)
 8004588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800458a:	4b10      	ldr	r3, [pc, #64]	; (80045cc <_sbrk+0x64>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4413      	add	r3, r2
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	429a      	cmp	r2, r3
 8004596:	d207      	bcs.n	80045a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004598:	f015 fb8e 	bl	8019cb8 <__errno>
 800459c:	4603      	mov	r3, r0
 800459e:	220c      	movs	r2, #12
 80045a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295
 80045a6:	e009      	b.n	80045bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045a8:	4b08      	ldr	r3, [pc, #32]	; (80045cc <_sbrk+0x64>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045ae:	4b07      	ldr	r3, [pc, #28]	; (80045cc <_sbrk+0x64>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	4a05      	ldr	r2, [pc, #20]	; (80045cc <_sbrk+0x64>)
 80045b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045ba:	68fb      	ldr	r3, [r7, #12]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20050000 	.word	0x20050000
 80045c8:	00000800 	.word	0x00000800
 80045cc:	20001e60 	.word	0x20001e60
 80045d0:	2004a300 	.word	0x2004a300

080045d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <SystemInit+0x20>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	4a05      	ldr	r2, [pc, #20]	; (80045f4 <SystemInit+0x20>)
 80045e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	e000ed00 	.word	0xe000ed00

080045f8 <uiDisplayBasic>:
#include <stdio.h>

/**
 * Display basic UI information.
 */
void uiDisplayBasic(void) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af02      	add	r7, sp, #8

	LCD_Clear(LCD_COLOR_WHITE);
 80045fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004602:	f000 fad9 	bl	8004bb8 <LCD_Clear>

	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_FillRect(0, 0, LCD_GetXSize(), 90);

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8004606:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800460a:	f000 fa39 	bl	8004a80 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 800460e:	f04f 30ff 	mov.w	r0, #4294967295
 8004612:	f000 fa65 	bl	8004ae0 <LCD_SetBackColor>
	LCD_SetFont(&Font24);
 8004616:	4810      	ldr	r0, [pc, #64]	; (8004658 <uiDisplayBasic+0x60>)
 8004618:	f000 fa7a 	bl	8004b10 <LCD_SetFont>
	LCD_DrawString(0, 0, (uint8_t*) "SIA 2021 - RT AUDIO FX", CENTER_MODE, true);
 800461c:	2301      	movs	r3, #1
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2301      	movs	r3, #1
 8004622:	4a0e      	ldr	r2, [pc, #56]	; (800465c <uiDisplayBasic+0x64>)
 8004624:	2100      	movs	r1, #0
 8004626:	2000      	movs	r0, #0
 8004628:	f000 fb0e 	bl	8004c48 <LCD_DrawString>

	LCD_SetFont(&Font12);
 800462c:	480c      	ldr	r0, [pc, #48]	; (8004660 <uiDisplayBasic+0x68>)
 800462e:	f000 fa6f 	bl	8004b10 <LCD_SetFont>
	LCD_DrawString(10, 30, (uint8_t*) "Input L =", LEFT_MODE, true);
 8004632:	2301      	movs	r3, #1
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	2303      	movs	r3, #3
 8004638:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <uiDisplayBasic+0x6c>)
 800463a:	211e      	movs	r1, #30
 800463c:	200a      	movs	r0, #10
 800463e:	f000 fb03 	bl	8004c48 <LCD_DrawString>
	LCD_DrawString(10, 50, (uint8_t*) "Input R =", LEFT_MODE, true);
 8004642:	2301      	movs	r3, #1
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	2303      	movs	r3, #3
 8004648:	4a07      	ldr	r2, [pc, #28]	; (8004668 <uiDisplayBasic+0x70>)
 800464a:	2132      	movs	r1, #50	; 0x32
 800464c:	200a      	movs	r0, #10
 800464e:	f000 fafb 	bl	8004c48 <LCD_DrawString>

	/* Set the LCD Text Color */
	//LCD_SetTextColor(LCD_COLOR_BLUE);
	//LCD_DrawRect(10, 100, LCD_GetXSize() - 20, LCD_GetYSize() - 110);
	//LCD_DrawRect(11, 101, LCD_GetXSize() - 22, LCD_GetYSize() - 112);
}
 8004652:	bf00      	nop
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000040 	.word	0x20000040
 800465c:	0801ca84 	.word	0x0801ca84
 8004660:	20000038 	.word	0x20000038
 8004664:	0801ca9c 	.word	0x0801ca9c
 8004668:	0801caa8 	.word	0x0801caa8

0800466c <uiDisplayInputLevel>:


/**
 * Displays line or microphones input level on the LCD.
 */
void uiDisplayInputLevel(double inputLevelL, double inputLevelR) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b096      	sub	sp, #88	; 0x58
 8004670:	af02      	add	r7, sp, #8
 8004672:	ed87 0b02 	vstr	d0, [r7, #8]
 8004676:	ed87 1b00 	vstr	d1, [r7]

	uint8_t buf[50];

	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 800467a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800467e:	f000 f9ff 	bl	8004a80 <LCD_SetStrokeColor>
	LCD_SetBackColor(LCD_COLOR_WHITE);
 8004682:	f04f 30ff 	mov.w	r0, #4294967295
 8004686:	f000 fa2b 	bl	8004ae0 <LCD_SetBackColor>
	LCD_SetFont(&Font12);
 800468a:	483a      	ldr	r0, [pc, #232]	; (8004774 <uiDisplayInputLevel+0x108>)
 800468c:	f000 fa40 	bl	8004b10 <LCD_SetFont>
	 LCD_DisplayStringAt(90, 30, (uint8_t *)buf, LEFT_MODE);

	 sprintf((char *)buf, "%d     ", (int)(inputLevelR));
	 LCD_DisplayStringAt(90, 50, (uint8_t *)buf, LEFT_MODE);*/

	if (inputLevelL > 0) {
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800469c:	f7fc fab4 	bl	8000c08 <__aeabi_dcmpgt>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d023      	beq.n	80046ee <uiDisplayInputLevel+0x82>
		int lvl_db = (int) (20. * log10(inputLevelL));
 80046a6:	ed97 0b02 	vldr	d0, [r7, #8]
 80046aa:	f016 fe25 	bl	801b2f8 <log10>
 80046ae:	ec51 0b10 	vmov	r0, r1, d0
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	4b30      	ldr	r3, [pc, #192]	; (8004778 <uiDisplayInputLevel+0x10c>)
 80046b8:	f7fc f816 	bl	80006e8 <__aeabi_dmul>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	f7fc fac0 	bl	8000c48 <__aeabi_d2iz>
 80046c8:	4603      	mov	r3, r0
 80046ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		sprintf((char*) buf, "%d dB   ", lvl_db);
 80046cc:	f107 0314 	add.w	r3, r7, #20
 80046d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046d2:	492a      	ldr	r1, [pc, #168]	; (800477c <uiDisplayInputLevel+0x110>)
 80046d4:	4618      	mov	r0, r3
 80046d6:	f015 fe37 	bl	801a348 <siprintf>
		LCD_DrawString(90, 30, (uint8_t*) buf, LEFT_MODE, true);
 80046da:	f107 0214 	add.w	r2, r7, #20
 80046de:	2301      	movs	r3, #1
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	2303      	movs	r3, #3
 80046e4:	211e      	movs	r1, #30
 80046e6:	205a      	movs	r0, #90	; 0x5a
 80046e8:	f000 faae 	bl	8004c48 <LCD_DrawString>
 80046ec:	e007      	b.n	80046fe <uiDisplayInputLevel+0x92>
	} else
		LCD_DrawString(90, 30, (uint8_t*) "-inf dB", LEFT_MODE, true);
 80046ee:	2301      	movs	r3, #1
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	2303      	movs	r3, #3
 80046f4:	4a22      	ldr	r2, [pc, #136]	; (8004780 <uiDisplayInputLevel+0x114>)
 80046f6:	211e      	movs	r1, #30
 80046f8:	205a      	movs	r0, #90	; 0x5a
 80046fa:	f000 faa5 	bl	8004c48 <LCD_DrawString>

	if (inputLevelR > 0) {
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800470a:	f7fc fa7d 	bl	8000c08 <__aeabi_dcmpgt>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d023      	beq.n	800475c <uiDisplayInputLevel+0xf0>
		int lvl_db = (int) (20. * log10(inputLevelR));
 8004714:	ed97 0b00 	vldr	d0, [r7]
 8004718:	f016 fdee 	bl	801b2f8 <log10>
 800471c:	ec51 0b10 	vmov	r0, r1, d0
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	4b14      	ldr	r3, [pc, #80]	; (8004778 <uiDisplayInputLevel+0x10c>)
 8004726:	f7fb ffdf 	bl	80006e8 <__aeabi_dmul>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4610      	mov	r0, r2
 8004730:	4619      	mov	r1, r3
 8004732:	f7fc fa89 	bl	8000c48 <__aeabi_d2iz>
 8004736:	4603      	mov	r3, r0
 8004738:	64bb      	str	r3, [r7, #72]	; 0x48
		sprintf((char*) buf, "%d dB   ", lvl_db);
 800473a:	f107 0314 	add.w	r3, r7, #20
 800473e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004740:	490e      	ldr	r1, [pc, #56]	; (800477c <uiDisplayInputLevel+0x110>)
 8004742:	4618      	mov	r0, r3
 8004744:	f015 fe00 	bl	801a348 <siprintf>
		LCD_DrawString(90, 50, (uint8_t*) buf, LEFT_MODE, true);
 8004748:	f107 0214 	add.w	r2, r7, #20
 800474c:	2301      	movs	r3, #1
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	2303      	movs	r3, #3
 8004752:	2132      	movs	r1, #50	; 0x32
 8004754:	205a      	movs	r0, #90	; 0x5a
 8004756:	f000 fa77 	bl	8004c48 <LCD_DrawString>
	} else
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);

}
 800475a:	e007      	b.n	800476c <uiDisplayInputLevel+0x100>
		LCD_DrawString(90, 50, (uint8_t*) "-inf dB", LEFT_MODE, true);
 800475c:	2301      	movs	r3, #1
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	2303      	movs	r3, #3
 8004762:	4a07      	ldr	r2, [pc, #28]	; (8004780 <uiDisplayInputLevel+0x114>)
 8004764:	2132      	movs	r1, #50	; 0x32
 8004766:	205a      	movs	r0, #90	; 0x5a
 8004768:	f000 fa6e 	bl	8004c48 <LCD_DrawString>
}
 800476c:	bf00      	nop
 800476e:	3750      	adds	r7, #80	; 0x50
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000038 	.word	0x20000038
 8004778:	40340000 	.word	0x40340000
 800477c:	0801cab4 	.word	0x0801cab4
 8004780:	0801cac0 	.word	0x0801cac0

08004784 <LED_On>:
#include "stdio.h"


// -------------------------------- onboard green led (CN7, pin D13) --------------------------------

void LED_On(){
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_SET);
 8004788:	2201      	movs	r2, #1
 800478a:	2102      	movs	r1, #2
 800478c:	4802      	ldr	r0, [pc, #8]	; (8004798 <LED_On+0x14>)
 800478e:	f003 fe27 	bl	80083e0 <HAL_GPIO_WritePin>
}
 8004792:	bf00      	nop
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40022000 	.word	0x40022000

0800479c <LED_Off>:

void LED_Off(){
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOI, LD_GREEN_Pin, GPIO_PIN_RESET);
 80047a0:	2200      	movs	r2, #0
 80047a2:	2102      	movs	r1, #2
 80047a4:	4802      	ldr	r0, [pc, #8]	; (80047b0 <LED_Off+0x14>)
 80047a6:	f003 fe1b 	bl	80083e0 <HAL_GPIO_WritePin>
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40022000 	.word	0x40022000

080047b4 <LED_Toggle>:

void LED_Toggle(){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(GPIOI, LD_GREEN_Pin);
 80047b8:	2102      	movs	r1, #2
 80047ba:	4802      	ldr	r0, [pc, #8]	; (80047c4 <LED_Toggle+0x10>)
 80047bc:	f003 fe29 	bl	8008412 <HAL_GPIO_TogglePin>

}
 80047c0:	bf00      	nop
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40022000 	.word	0x40022000

080047c8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af04      	add	r7, sp, #16
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	4608      	mov	r0, r1
 80047d2:	4611      	mov	r1, r2
 80047d4:	461a      	mov	r2, r3
 80047d6:	4603      	mov	r3, r0
 80047d8:	72fb      	strb	r3, [r7, #11]
 80047da:	460b      	mov	r3, r1
 80047dc:	813b      	strh	r3, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80047e6:	7afb      	ldrb	r3, [r7, #11]
 80047e8:	b299      	uxth	r1, r3
 80047ea:	88f8      	ldrh	r0, [r7, #6]
 80047ec:	893a      	ldrh	r2, [r7, #8]
 80047ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047f2:	9302      	str	r3, [sp, #8]
 80047f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047f6:	9301      	str	r3, [sp, #4]
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	4603      	mov	r3, r0
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f005 fd54 	bl	800a2ac <HAL_I2C_Mem_Read>
 8004804:	4603      	mov	r3, r0
 8004806:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004808:	7dfb      	ldrb	r3, [r7, #23]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d004      	beq.n	8004818 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800480e:	7afb      	ldrb	r3, [r7, #11]
 8004810:	4619      	mov	r1, r3
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f832 	bl	800487c <I2Cx_Error>
  }
  return status;
 8004818:	7dfb      	ldrb	r3, [r7, #23]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b08a      	sub	sp, #40	; 0x28
 8004826:	af04      	add	r7, sp, #16
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	4608      	mov	r0, r1
 800482c:	4611      	mov	r1, r2
 800482e:	461a      	mov	r2, r3
 8004830:	4603      	mov	r3, r0
 8004832:	72fb      	strb	r3, [r7, #11]
 8004834:	460b      	mov	r3, r1
 8004836:	813b      	strh	r3, [r7, #8]
 8004838:	4613      	mov	r3, r2
 800483a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004840:	7afb      	ldrb	r3, [r7, #11]
 8004842:	b299      	uxth	r1, r3
 8004844:	88f8      	ldrh	r0, [r7, #6]
 8004846:	893a      	ldrh	r2, [r7, #8]
 8004848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800484c:	9302      	str	r3, [sp, #8]
 800484e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	4603      	mov	r3, r0
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f005 fc13 	bl	800a084 <HAL_I2C_Mem_Write>
 800485e:	4603      	mov	r3, r0
 8004860:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d004      	beq.n	8004872 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004868:	7afb      	ldrb	r3, [r7, #11]
 800486a:	4619      	mov	r1, r3
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f805 	bl	800487c <I2Cx_Error>
  }
  return status;
 8004872:	7dfb      	ldrb	r3, [r7, #23]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f005 fbcb 	bl	800a024 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  HAL_I2C_Init(i2c_handler);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f005 fb38 	bl	8009f04 <HAL_I2C_Init>
}
 8004894:	bf00      	nop
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <AUDIO_I2C_Write>:
  * Writes a single CONTROL data to the audio codec over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_I2C_Write(uint16_t Reg, uint16_t Value){
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	4603      	mov	r3, r0
 80048a4:	460a      	mov	r2, r1
 80048a6:	80fb      	strh	r3, [r7, #6]
 80048a8:	4613      	mov	r3, r2
 80048aa:	80bb      	strh	r3, [r7, #4]

  uint16_t tmp = Value;
 80048ac:	88bb      	ldrh	r3, [r7, #4]
 80048ae:	81fb      	strh	r3, [r7, #14]

  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80048b0:	89fb      	ldrh	r3, [r7, #14]
 80048b2:	0a1b      	lsrs	r3, r3, #8
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	80bb      	strh	r3, [r7, #4]

  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80048b8:	89fb      	ldrh	r3, [r7, #14]
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	b29b      	uxth	r3, r3
 80048be:	b21a      	sxth	r2, r3
 80048c0:	88bb      	ldrh	r3, [r7, #4]
 80048c2:	b21b      	sxth	r3, r3
 80048c4:	4313      	orrs	r3, r2
 80048c6:	b21b      	sxth	r3, r3
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	80bb      	strh	r3, [r7, #4]

  I2Cx_WriteMultiple(&hi2c3, AUDIO_I2C_ADDRESS, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80048cc:	88fa      	ldrh	r2, [r7, #6]
 80048ce:	2302      	movs	r3, #2
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	1d3b      	adds	r3, r7, #4
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	2302      	movs	r3, #2
 80048d8:	2134      	movs	r1, #52	; 0x34
 80048da:	4803      	ldr	r0, [pc, #12]	; (80048e8 <AUDIO_I2C_Write+0x4c>)
 80048dc:	f7ff ffa1 	bl	8004822 <I2Cx_WriteMultiple>
  //I2Cx_WriteMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20001698 	.word	0x20001698

080048ec <AUDIO_I2C_Read>:
/**
  * Reads a single CONTROL data from the audio codec over the I2C bus.
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint16_t AUDIO_I2C_Read(uint16_t Reg){
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	4603      	mov	r3, r0
 80048f4:	80fb      	strh	r3, [r7, #6]

  uint16_t read_value = 0, tmp = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	81bb      	strh	r3, [r7, #12]
 80048fa:	2300      	movs	r3, #0
 80048fc:	81fb      	strh	r3, [r7, #14]

  I2Cx_ReadMultiple(&hi2c3, AUDIO_I2C_ADDRESS, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80048fe:	88fa      	ldrh	r2, [r7, #6]
 8004900:	2302      	movs	r3, #2
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	f107 030c 	add.w	r3, r7, #12
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2302      	movs	r3, #2
 800490c:	2134      	movs	r1, #52	; 0x34
 800490e:	480b      	ldr	r0, [pc, #44]	; (800493c <AUDIO_I2C_Read+0x50>)
 8004910:	f7ff ff5a 	bl	80047c8 <I2Cx_ReadMultiple>
  //I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);

  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8004914:	89bb      	ldrh	r3, [r7, #12]
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	81fb      	strh	r3, [r7, #14]

  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800491a:	89bb      	ldrh	r3, [r7, #12]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	b29b      	uxth	r3, r3
 8004920:	b21a      	sxth	r2, r3
 8004922:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004926:	4313      	orrs	r3, r2
 8004928:	b21b      	sxth	r3, r3
 800492a:	81fb      	strh	r3, [r7, #14]

  read_value = tmp;
 800492c:	89fb      	ldrh	r3, [r7, #14]
 800492e:	81bb      	strh	r3, [r7, #12]

  return read_value;
 8004930:	89bb      	ldrh	r3, [r7, #12]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20001698 	.word	0x20001698

08004940 <TS_I2C_Write>:
  * Writes a single control data to the touchscreen controller over the I2C bus.
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_I2C_Write(uint8_t Reg, uint8_t Value){
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af02      	add	r7, sp, #8
 8004946:	4603      	mov	r3, r0
 8004948:	460a      	mov	r2, r1
 800494a:	71fb      	strb	r3, [r7, #7]
 800494c:	4613      	mov	r3, r2
 800494e:	71bb      	strb	r3, [r7, #6]

  I2Cx_WriteMultiple(&hi2c3, TS_I2C_ADDRESS, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	b29a      	uxth	r2, r3
 8004954:	2301      	movs	r3, #1
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	1dbb      	adds	r3, r7, #6
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	2301      	movs	r3, #1
 800495e:	2170      	movs	r1, #112	; 0x70
 8004960:	4803      	ldr	r0, [pc, #12]	; (8004970 <TS_I2C_Write+0x30>)
 8004962:	f7ff ff5e 	bl	8004822 <I2Cx_WriteMultiple>

}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20001698 	.word	0x20001698

08004974 <SCB_CleanDCache>:
/**
  \brief   Clean D-Cache
  \details Cleans D-Cache
  */
__STATIC_INLINE void SCB_CleanDCache (void)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <SCB_CleanDCache+0x74>)
 800497c:	2200      	movs	r2, #0
 800497e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004982:	f3bf 8f4f 	dsb	sy
}
 8004986:	bf00      	nop
   __DSB();

    ccsidr = SCB->CCSIDR;
 8004988:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <SCB_CleanDCache+0x74>)
 800498a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800498e:	607b      	str	r3, [r7, #4]

                                            /* clean D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	0b5b      	lsrs	r3, r3, #13
 8004994:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004998:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	08db      	lsrs	r3, r3, #3
 800499e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049a2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80049ac:	4013      	ands	r3, r2
                      ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	0792      	lsls	r2, r2, #30
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
 80049b2:	490d      	ldr	r1, [pc, #52]	; (80049e8 <SCB_CleanDCache+0x74>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 326c 	str.w	r3, [r1, #620]	; 0x26c
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	1e5a      	subs	r2, r3, #1
 80049be:	60ba      	str	r2, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1ef      	bne.n	80049a4 <SCB_CleanDCache+0x30>
    } while(sets-- != 0U);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1e5a      	subs	r2, r3, #1
 80049c8:	60fa      	str	r2, [r7, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e5      	bne.n	800499a <SCB_CleanDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80049ce:	f3bf 8f4f 	dsb	sy
}
 80049d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049d4:	f3bf 8f6f 	isb	sy
}
 80049d8:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	e000ed00 	.word	0xe000ed00

080049ec <LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
void LCD_Init(void){
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0

	/* check if FB has a pixel format coherent with PF_565 define */
#ifdef PF_565
	if (hltdc.LayerCfg[0].PixelFormat != LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB565, check MX_LTDC_Init() or undefine PF_565");
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <LCD_Init+0x44>)
 80049f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d002      	beq.n	80049fe <LCD_Init+0x12>
 80049f8:	480e      	ldr	r0, [pc, #56]	; (8004a34 <LCD_Init+0x48>)
 80049fa:	f7fe fbb1 	bl	8003160 <Error>
#else
	if (hltdc.LayerCfg[0].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) Error("Pixel Format Error: should be RGB888, check MX_LTDC_Init() or define PF_565");
#endif

#ifndef FB_IN_SDRAM
	HAL_LTDC_SetAddress(&hltdc, frameBuf0, 0);
 80049fe:	4b0e      	ldr	r3, [pc, #56]	; (8004a38 <LCD_Init+0x4c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	4619      	mov	r1, r3
 8004a06:	480a      	ldr	r0, [pc, #40]	; (8004a30 <LCD_Init+0x44>)
 8004a08:	f006 f9aa 	bl	800ad60 <HAL_LTDC_SetAddress>
#endif

	LCD_DisplayOn();
 8004a0c:	f000 f81a 	bl	8004a44 <LCD_DisplayOn>

	LCD_SetFont(&LCD_DEFAULT_FONT);
 8004a10:	480a      	ldr	r0, [pc, #40]	; (8004a3c <LCD_Init+0x50>)
 8004a12:	f000 f87d 	bl	8004b10 <LCD_SetFont>

	LCD_SetBackColor(LCD_COLOR_WHITE);
 8004a16:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1a:	f000 f861 	bl	8004ae0 <LCD_SetBackColor>
	LCD_SetStrokeColor(LCD_COLOR_BLACK);
 8004a1e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004a22:	f000 f82d 	bl	8004a80 <LCD_SetStrokeColor>
	LCD_SetFillColor(LCD_COLOR_RED);
 8004a26:	4806      	ldr	r0, [pc, #24]	; (8004a40 <LCD_Init+0x54>)
 8004a28:	f000 f842 	bl	8004ab0 <LCD_SetFillColor>


}
 8004a2c:	bf00      	nop
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	200016ec 	.word	0x200016ec
 8004a34:	0801cac8 	.word	0x0801cac8
 8004a38:	20000030 	.word	0x20000030
 8004a3c:	20000040 	.word	0x20000040
 8004a40:	ffff0000 	.word	0xffff0000

08004a44 <LCD_DisplayOn>:
/**
 * @brief  Enables the display.
 * @retval None
 */
void LCD_DisplayOn(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
	__HAL_LTDC_ENABLE(&hltdc);
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <LCD_DisplayOn+0x30>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699a      	ldr	r2, [r3, #24]
 8004a4e:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <LCD_DisplayOn+0x30>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a5e:	4806      	ldr	r0, [pc, #24]	; (8004a78 <LCD_DisplayOn+0x34>)
 8004a60:	f003 fcbe 	bl	80083e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004a64:	2201      	movs	r2, #1
 8004a66:	2108      	movs	r1, #8
 8004a68:	4804      	ldr	r0, [pc, #16]	; (8004a7c <LCD_DisplayOn+0x38>)
 8004a6a:	f003 fcb9 	bl	80083e0 <HAL_GPIO_WritePin>
}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	200016ec 	.word	0x200016ec
 8004a78:	40022000 	.word	0x40022000
 8004a7c:	40022800 	.word	0x40022800

08004a80 <LCD_SetStrokeColor>:
/**
 * @brief  Sets the LCD stroke (and text) color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetStrokeColor(uint32_t Color8888)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	StrokeColor = Color8888;
 8004a88:	4a07      	ldr	r2, [pc, #28]	; (8004aa8 <LCD_SetStrokeColor+0x28>)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	StrokeColor565 = ARGB888ToRGB565(StrokeColor);
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <LCD_SetStrokeColor+0x28>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fa4e 	bl	8004f34 <ARGB888ToRGB565>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4b03      	ldr	r3, [pc, #12]	; (8004aac <LCD_SetStrokeColor+0x2c>)
 8004a9e:	601a      	str	r2, [r3, #0]
#endif
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20041a64 	.word	0x20041a64
 8004aac:	20041a70 	.word	0x20041a70

08004ab0 <LCD_SetFillColor>:
/**
 * @brief  Sets the LCD fill color.
 * @param  Color: Text color code ARGB(8-8-8-8)
 */
void LCD_SetFillColor(uint32_t Color8888)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	FillColor = Color8888;
 8004ab8:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <LCD_SetFillColor+0x28>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	FillColor565 = ARGB888ToRGB565(FillColor);
 8004abe:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <LCD_SetFillColor+0x28>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fa36 	bl	8004f34 <ARGB888ToRGB565>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	461a      	mov	r2, r3
 8004acc:	4b03      	ldr	r3, [pc, #12]	; (8004adc <LCD_SetFillColor+0x2c>)
 8004ace:	601a      	str	r2, [r3, #0]
#endif
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20041a68 	.word	0x20041a68
 8004adc:	20041a74 	.word	0x20041a74

08004ae0 <LCD_SetBackColor>:
 * @brief  Sets the LCD background color.
 * @param  Color: Layer background color code ARGB(8-8-8-8)
 * @retval None
 */
void LCD_SetBackColor(uint32_t Color)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	BackColor = Color;
 8004ae8:	4a07      	ldr	r2, [pc, #28]	; (8004b08 <LCD_SetBackColor+0x28>)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6013      	str	r3, [r2, #0]
#ifdef PF_565
	BackColor565 = ARGB888ToRGB565(BackColor);
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <LCD_SetBackColor+0x28>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fa1e 	bl	8004f34 <ARGB888ToRGB565>
 8004af8:	4603      	mov	r3, r0
 8004afa:	461a      	mov	r2, r3
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <LCD_SetBackColor+0x2c>)
 8004afe:	601a      	str	r2, [r3, #0]
#endif
}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20041a6c 	.word	0x20041a6c
 8004b0c:	20041a78 	.word	0x20041a78

08004b10 <LCD_SetFont>:
 * @brief  Sets the LCD text font.
 * @param  fonts: Layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *fonts)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	pFont = fonts;
 8004b18:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <LCD_SetFont+0x1c>)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6013      	str	r3, [r2, #0]
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20041a7c 	.word	0x20041a7c

08004b30 <LCD_DrawPixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	460a      	mov	r2, r1
 8004b3a:	80fb      	strh	r3, [r7, #6]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, STROKE_COLOR);
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <LCD_DrawPixel+0x3c>)
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <LCD_DrawPixel+0x40>)
 8004b46:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004b48:	88ba      	ldrh	r2, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	015b      	lsls	r3, r3, #5
 8004b52:	461a      	mov	r2, r3
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	4413      	add	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	440b      	add	r3, r1
 8004b5c:	b282      	uxth	r2, r0
 8004b5e:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
 8004b60:	f7ff ff08 	bl	8004974 <SCB_CleanDCache>

}
 8004b64:	bf00      	nop
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20041a70 	.word	0x20041a70
 8004b70:	200016ec 	.word	0x200016ec

08004b74 <LCD_ErasePixel>:
 * @param  Xpos: X position
 * @param  Ypos: Y position
 * @retval None
 */
void LCD_ErasePixel(uint16_t Xpos, uint16_t Ypos)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	80fb      	strh	r3, [r7, #6]
 8004b80:	4613      	mov	r3, r2
 8004b82:	80bb      	strh	r3, [r7, #4]
	__DrawPixel(Xpos, Ypos, BACK_COLOR);
 8004b84:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <LCD_ErasePixel+0x3c>)
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <LCD_ErasePixel+0x40>)
 8004b8a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004b8c:	88ba      	ldrh	r2, [r7, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	1a9b      	subs	r3, r3, r2
 8004b94:	015b      	lsls	r3, r3, #5
 8004b96:	461a      	mov	r2, r3
 8004b98:	88fb      	ldrh	r3, [r7, #6]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	440b      	add	r3, r1
 8004ba0:	b282      	uxth	r2, r0
 8004ba2:	801a      	strh	r2, [r3, #0]
	__CleanDCache();
 8004ba4:	f7ff fee6 	bl	8004974 <SCB_CleanDCache>
}
 8004ba8:	bf00      	nop
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20041a78 	.word	0x20041a78
 8004bb4:	200016ec 	.word	0x200016ec

08004bb8 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD, ie fills with background color
 * @retval None
 */
void LCD_Clear()
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af02      	add	r7, sp, #8
	/* Clear the LCD */
	LL_FillBuffer((uint32_t *)(hltdc.LayerCfg[0].FBStartAdress), LCD_SCREEN_WIDTH, LCD_SCREEN_HEIGHT, 0, BackColor);
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <LCD_Clear+0x28>)
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	4b07      	ldr	r3, [pc, #28]	; (8004be4 <LCD_Clear+0x2c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004bd0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004bd4:	f000 f976 	bl	8004ec4 <LL_FillBuffer>
}
 8004bd8:	bf00      	nop
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	200016ec 	.word	0x200016ec
 8004be4:	20041a6c 	.word	0x20041a6c

08004be8 <LCD_DrawChar>:
 * @param  Ascii: Character ascii code
 *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
 * @retval None
 */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii, const boolean_t isOpaqueBackground)
{
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4604      	mov	r4, r0
 8004bf0:	4608      	mov	r0, r1
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4623      	mov	r3, r4
 8004bf8:	80fb      	strh	r3, [r7, #6]
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	80bb      	strh	r3, [r7, #4]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	70fb      	strb	r3, [r7, #3]
 8004c02:	4613      	mov	r3, r2
 8004c04:	70bb      	strb	r3, [r7, #2]
	DrawChar(Xpos, Ypos, &pFont->table[(Ascii-' ') * pFont->Height * ((pFont->Width + 7) / 8)], isOpaqueBackground);
 8004c06:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <LCD_DrawChar+0x5c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	3b20      	subs	r3, #32
 8004c10:	490c      	ldr	r1, [pc, #48]	; (8004c44 <LCD_DrawChar+0x5c>)
 8004c12:	6809      	ldr	r1, [r1, #0]
 8004c14:	88c9      	ldrh	r1, [r1, #6]
 8004c16:	fb03 f101 	mul.w	r1, r3, r1
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <LCD_DrawChar+0x5c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	889b      	ldrh	r3, [r3, #4]
 8004c20:	3307      	adds	r3, #7
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	da00      	bge.n	8004c28 <LCD_DrawChar+0x40>
 8004c26:	3307      	adds	r3, #7
 8004c28:	10db      	asrs	r3, r3, #3
 8004c2a:	fb01 f303 	mul.w	r3, r1, r3
 8004c2e:	441a      	add	r2, r3
 8004c30:	78bb      	ldrb	r3, [r7, #2]
 8004c32:	88b9      	ldrh	r1, [r7, #4]
 8004c34:	88f8      	ldrh	r0, [r7, #6]
 8004c36:	f000 f89d 	bl	8004d74 <DrawChar>

}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd90      	pop	{r4, r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20041a7c 	.word	0x20041a7c

08004c48 <LCD_DrawString>:
 *            @arg  RIGHT_MODE
 *            @arg  LEFT_MODE
 * @retval None
 */
void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Alignment, const boolean_t isOpaqueBackground)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60ba      	str	r2, [r7, #8]
 8004c50:	461a      	mov	r2, r3
 8004c52:	4603      	mov	r3, r0
 8004c54:	81fb      	strh	r3, [r7, #14]
 8004c56:	460b      	mov	r3, r1
 8004c58:	81bb      	strh	r3, [r7, #12]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	83fb      	strh	r3, [r7, #30]
 8004c62:	2300      	movs	r3, #0
 8004c64:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
	uint8_t  *ptr = Text;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++) size ++ ;
 8004c72:	e002      	b.n	8004c7a <LCD_DrawString+0x32>
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	3301      	adds	r3, #1
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	617a      	str	r2, [r7, #20]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1f6      	bne.n	8004c74 <LCD_DrawString+0x2c>

	/* Characters number per line */
	xsize = (LCD_SCREEN_WIDTH / pFont->Width);
 8004c86:	4b3a      	ldr	r3, [pc, #232]	; (8004d70 <LCD_DrawString+0x128>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	889b      	ldrh	r3, [r3, #4]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004c92:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c96:	613b      	str	r3, [r7, #16]

	switch (Alignment)
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d014      	beq.n	8004cc8 <LCD_DrawString+0x80>
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	dc23      	bgt.n	8004cea <LCD_DrawString+0xa2>
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d002      	beq.n	8004cac <LCD_DrawString+0x64>
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d011      	beq.n	8004cce <LCD_DrawString+0x86>
 8004caa:	e01e      	b.n	8004cea <LCD_DrawString+0xa2>
	{
	case CENTER_MODE:
	{
		ref_column = Xpos + ((xsize - size)* pFont->Width) / 2;
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	4a2f      	ldr	r2, [pc, #188]	; (8004d70 <LCD_DrawString+0x128>)
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	8892      	ldrh	r2, [r2, #4]
 8004cb8:	fb02 f303 	mul.w	r3, r2, r3
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	89fb      	ldrh	r3, [r7, #14]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	83fb      	strh	r3, [r7, #30]
		break;
 8004cc6:	e013      	b.n	8004cf0 <LCD_DrawString+0xa8>
	}
	case LEFT_MODE:
	{
		ref_column = Xpos;
 8004cc8:	89fb      	ldrh	r3, [r7, #14]
 8004cca:	83fb      	strh	r3, [r7, #30]
		break;
 8004ccc:	e010      	b.n	8004cf0 <LCD_DrawString+0xa8>
	}
	case RIGHT_MODE:
	{
		ref_column = - Xpos + ((xsize - size)*pFont->Width);
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	4b26      	ldr	r3, [pc, #152]	; (8004d70 <LCD_DrawString+0x128>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	889b      	ldrh	r3, [r3, #4]
 8004cdc:	fb12 f303 	smulbb	r3, r2, r3
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	89fb      	ldrh	r3, [r7, #14]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	83fb      	strh	r3, [r7, #30]
		break;
 8004ce8:	e002      	b.n	8004cf0 <LCD_DrawString+0xa8>
	}
	default:
	{
		ref_column = Xpos;
 8004cea:	89fb      	ldrh	r3, [r7, #14]
 8004cec:	83fb      	strh	r3, [r7, #30]
		break;
 8004cee:	bf00      	nop
	}
	}

	/* Check that the Start column is located in the screen */
	if ((ref_column < 1) || (ref_column >= 0x8000))
 8004cf0:	8bfb      	ldrh	r3, [r7, #30]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <LCD_DrawString+0xb6>
 8004cf6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	da16      	bge.n	8004d2c <LCD_DrawString+0xe4>
	{
		ref_column = 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	83fb      	strh	r3, [r7, #30]
	}

	/* Send the string character by character on LCD */
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004d02:	e013      	b.n	8004d2c <LCD_DrawString+0xe4>
	{
		/* Display one character on LCD */
		LCD_DrawChar(ref_column, Ypos, *Text, isOpaqueBackground);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	781a      	ldrb	r2, [r3, #0]
 8004d08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d0c:	89b9      	ldrh	r1, [r7, #12]
 8004d0e:	8bf8      	ldrh	r0, [r7, #30]
 8004d10:	f7ff ff6a 	bl	8004be8 <LCD_DrawChar>
		/* Decrement the column position by 16 */
		ref_column += pFont->Width;
 8004d14:	4b16      	ldr	r3, [pc, #88]	; (8004d70 <LCD_DrawString+0x128>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	889a      	ldrh	r2, [r3, #4]
 8004d1a:	8bfb      	ldrh	r3, [r7, #30]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		Text++;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	3301      	adds	r3, #1
 8004d24:	60bb      	str	r3, [r7, #8]
		i++;
 8004d26:	8bbb      	ldrh	r3, [r7, #28]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((LCD_SCREEN_WIDTH - (i*pFont->Width)) & 0xFFFF) >= pFont->Width))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf14      	ite	ne
 8004d34:	2301      	movne	r3, #1
 8004d36:	2300      	moveq	r3, #0
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	8bbb      	ldrh	r3, [r7, #28]
 8004d3c:	490c      	ldr	r1, [pc, #48]	; (8004d70 <LCD_DrawString+0x128>)
 8004d3e:	6809      	ldr	r1, [r1, #0]
 8004d40:	8889      	ldrh	r1, [r1, #4]
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	4908      	ldr	r1, [pc, #32]	; (8004d70 <LCD_DrawString+0x128>)
 8004d4e:	6809      	ldr	r1, [r1, #0]
 8004d50:	8889      	ldrh	r1, [r1, #4]
 8004d52:	428b      	cmp	r3, r1
 8004d54:	bfac      	ite	ge
 8004d56:	2301      	movge	r3, #1
 8004d58:	2300      	movlt	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1cf      	bne.n	8004d04 <LCD_DrawString+0xbc>
	}
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20041a7c 	.word	0x20041a7c

08004d74 <DrawChar>:
 * @param  Ypos: Start column address
 * @param  c: Pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c, const boolean_t isOpaqueBackground)
{
 8004d74:	b590      	push	{r4, r7, lr}
 8004d76:	b08b      	sub	sp, #44	; 0x2c
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60ba      	str	r2, [r7, #8]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	81fb      	strh	r3, [r7, #14]
 8004d82:	460b      	mov	r3, r1
 8004d84:	81bb      	strh	r3, [r7, #12]
 8004d86:	4613      	mov	r3, r2
 8004d88:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0, j = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8e:	2300      	movs	r3, #0
 8004d90:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t  offset;
	uint8_t  *pchar;
	uint32_t line;

	height = pFont->Height;
 8004d92:	4b49      	ldr	r3, [pc, #292]	; (8004eb8 <DrawChar+0x144>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	88db      	ldrh	r3, [r3, #6]
 8004d98:	837b      	strh	r3, [r7, #26]
	width  = pFont->Width;
 8004d9a:	4b47      	ldr	r3, [pc, #284]	; (8004eb8 <DrawChar+0x144>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	889b      	ldrh	r3, [r3, #4]
 8004da0:	833b      	strh	r3, [r7, #24]

	offset =  8 *((width + 7)/8) -  width ;
 8004da2:	8b3b      	ldrh	r3, [r7, #24]
 8004da4:	3307      	adds	r3, #7
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	da00      	bge.n	8004dac <DrawChar+0x38>
 8004daa:	3307      	adds	r3, #7
 8004dac:	10db      	asrs	r3, r3, #3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	8b3b      	ldrh	r3, [r7, #24]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < height; i++)
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc0:	e070      	b.n	8004ea4 <DrawChar+0x130>
	{
		pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004dc2:	8b3b      	ldrh	r3, [r7, #24]
 8004dc4:	3307      	adds	r3, #7
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	da00      	bge.n	8004dcc <DrawChar+0x58>
 8004dca:	3307      	adds	r3, #7
 8004dcc:	10db      	asrs	r3, r3, #3
 8004dce:	461a      	mov	r2, r3
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	fb02 f303 	mul.w	r3, r2, r3
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	4413      	add	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

		switch(((width + 7)/8))
 8004ddc:	8b3b      	ldrh	r3, [r7, #24]
 8004dde:	3307      	adds	r3, #7
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	da00      	bge.n	8004de6 <DrawChar+0x72>
 8004de4:	3307      	adds	r3, #7
 8004de6:	10db      	asrs	r3, r3, #3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d002      	beq.n	8004df2 <DrawChar+0x7e>
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d004      	beq.n	8004dfa <DrawChar+0x86>
 8004df0:	e00c      	b.n	8004e0c <DrawChar+0x98>
		{

		case 1:
			line =  pchar[0];
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	61fb      	str	r3, [r7, #28]
			break;
 8004df8:	e016      	b.n	8004e28 <DrawChar+0xb4>

		case 2:
			line =  (pchar[0]<< 8) | pchar[1];
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	3201      	adds	r2, #1
 8004e04:	7812      	ldrb	r2, [r2, #0]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61fb      	str	r3, [r7, #28]
			break;
 8004e0a:	e00d      	b.n	8004e28 <DrawChar+0xb4>

		case 3:
		default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	041a      	lsls	r2, r3, #16
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	3301      	adds	r3, #1
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	3202      	adds	r2, #2
 8004e20:	7812      	ldrb	r2, [r2, #0]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61fb      	str	r3, [r7, #28]
			break;
 8004e26:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8004e28:	2300      	movs	r3, #0
 8004e2a:	623b      	str	r3, [r7, #32]
 8004e2c:	e030      	b.n	8004e90 <DrawChar+0x11c>
		{
			if(line & (1 << (width- j + offset- 1)))
 8004e2e:	8b3a      	ldrh	r2, [r7, #24]
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	1ad2      	subs	r2, r2, r3
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
 8004e36:	4413      	add	r3, r2
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d012      	beq.n	8004e70 <DrawChar+0xfc>
			{
				__DrawPixel((Xpos + j), Ypos, STROKE_COLOR);
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <DrawChar+0x148>)
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	4b1c      	ldr	r3, [pc, #112]	; (8004ec0 <DrawChar+0x14c>)
 8004e50:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004e52:	89ba      	ldrh	r2, [r7, #12]
 8004e54:	4613      	mov	r3, r2
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	015b      	lsls	r3, r3, #5
 8004e5c:	461c      	mov	r4, r3
 8004e5e:	89fa      	ldrh	r2, [r7, #14]
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	4413      	add	r3, r2
 8004e64:	4423      	add	r3, r4
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	440b      	add	r3, r1
 8004e6a:	b282      	uxth	r2, r0
 8004e6c:	801a      	strh	r2, [r3, #0]
 8004e6e:	e00c      	b.n	8004e8a <DrawChar+0x116>
			}
			else
			{
				if (isOpaqueBackground == true) LCD_ErasePixel((Xpos + j), Ypos);
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d109      	bne.n	8004e8a <DrawChar+0x116>
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	89fb      	ldrh	r3, [r7, #14]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	89ba      	ldrh	r2, [r7, #12]
 8004e82:	4611      	mov	r1, r2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff fe75 	bl	8004b74 <LCD_ErasePixel>
		for (j = 0; j < width; j++)
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	623b      	str	r3, [r7, #32]
 8004e90:	8b3b      	ldrh	r3, [r7, #24]
 8004e92:	6a3a      	ldr	r2, [r7, #32]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d3ca      	bcc.n	8004e2e <DrawChar+0xba>
			}
		}
		Ypos++;
 8004e98:	89bb      	ldrh	r3, [r7, #12]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	81bb      	strh	r3, [r7, #12]
	for(i = 0; i < height; i++)
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea4:	8b7b      	ldrh	r3, [r7, #26]
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d38a      	bcc.n	8004dc2 <DrawChar+0x4e>
	}

	__CleanDCache();
 8004eac:	f7ff fd62 	bl	8004974 <SCB_CleanDCache>
}
 8004eb0:	bf00      	nop
 8004eb2:	372c      	adds	r7, #44	; 0x2c
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd90      	pop	{r4, r7, pc}
 8004eb8:	20041a7c 	.word	0x20041a7c
 8004ebc:	20041a70 	.word	0x20041a70
 8004ec0:	200016ec 	.word	0x200016ec

08004ec4 <LL_FillBuffer>:
 * @param  OffLine: Offset
 * @param  withColor: fill color in ARGB888 format (even if FB may use RGB565)
 * @retval None
 */
static void LL_FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t withColor)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
	/* Register to memory mode with ARGB8888 as color Mode */
	hdma2d.Init.Mode         = DMA2D_R2M;
 8004ed2:	4b16      	ldr	r3, [pc, #88]	; (8004f2c <LL_FillBuffer+0x68>)
 8004ed4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004ed8:	605a      	str	r2, [r3, #4]
#ifdef PF_565
	/* RGB565 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_RGB565;
 8004eda:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <LL_FillBuffer+0x68>)
 8004edc:	2202      	movs	r2, #2
 8004ede:	609a      	str	r2, [r3, #8]
#else
	/* ARGB8888 "output" format */
	hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
#endif
	hdma2d.Init.OutputOffset = OffLine;
 8004ee0:	4a12      	ldr	r2, [pc, #72]	; (8004f2c <LL_FillBuffer+0x68>)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	60d3      	str	r3, [r2, #12]

	hdma2d.Instance = DMA2D;
 8004ee6:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <LL_FillBuffer+0x68>)
 8004ee8:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <LL_FillBuffer+0x6c>)
 8004eea:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8004eec:	480f      	ldr	r0, [pc, #60]	; (8004f2c <LL_FillBuffer+0x68>)
 8004eee:	f002 fc0b 	bl	8007708 <HAL_DMA2D_Init>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d115      	bne.n	8004f24 <LL_FillBuffer+0x60>
	{
		if(HAL_DMA2D_ConfigLayer(&hdma2d, 0) == HAL_OK)
 8004ef8:	2100      	movs	r1, #0
 8004efa:	480c      	ldr	r0, [pc, #48]	; (8004f2c <LL_FillBuffer+0x68>)
 8004efc:	f002 fe72 	bl	8007be4 <HAL_DMA2D_ConfigLayer>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10e      	bne.n	8004f24 <LL_FillBuffer+0x60>
		{
			if (HAL_DMA2D_Start(&hdma2d, withColor, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	69b9      	ldr	r1, [r7, #24]
 8004f10:	4806      	ldr	r0, [pc, #24]	; (8004f2c <LL_FillBuffer+0x68>)
 8004f12:	f002 fc43 	bl	800779c <HAL_DMA2D_Start>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d103      	bne.n	8004f24 <LL_FillBuffer+0x60>
			{
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&hdma2d, 10); // TODO : adapt to to CMSIS-RTOS
 8004f1c:	210a      	movs	r1, #10
 8004f1e:	4803      	ldr	r0, [pc, #12]	; (8004f2c <LL_FillBuffer+0x68>)
 8004f20:	f002 fc67 	bl	80077f2 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20001604 	.word	0x20001604
 8004f30:	4002b000 	.word	0x4002b000

08004f34 <ARGB888ToRGB565>:

/**
 * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
 */
static uint16_t ARGB888ToRGB565(uint32_t RGB_Code)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	uint8_t red   = (RGB_Code & 0x00FF0000) >> 16;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	0c1b      	lsrs	r3, r3, #16
 8004f40:	75fb      	strb	r3, [r7, #23]
	uint8_t green = (RGB_Code & 0x0000FF00) >> 8;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	0a1b      	lsrs	r3, r3, #8
 8004f46:	75bb      	strb	r3, [r7, #22]
	uint8_t blue  = (RGB_Code & 0x000000FF);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	757b      	strb	r3, [r7, #21]

	uint16_t b = (blue >> 3) & 0x1f; // 5 bits
 8004f4c:	7d7b      	ldrb	r3, [r7, #21]
 8004f4e:	08db      	lsrs	r3, r3, #3
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f003 031f 	and.w	r3, r3, #31
 8004f58:	827b      	strh	r3, [r7, #18]
	uint16_t g = ((green >> 2) & 0x3f) << 5; // 6 bits
 8004f5a:	7dbb      	ldrb	r3, [r7, #22]
 8004f5c:	089b      	lsrs	r3, r3, #2
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	015b      	lsls	r3, r3, #5
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8004f68:	823b      	strh	r3, [r7, #16]
	uint16_t r = ((red >> 3) & 0x1f) << 11; // 5 bits
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
 8004f6c:	08db      	lsrs	r3, r3, #3
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	02db      	lsls	r3, r3, #11
 8004f72:	81fb      	strh	r3, [r7, #14]

	return (uint16_t) (r | g | b);
 8004f74:	89fa      	ldrh	r2, [r7, #14]
 8004f76:	8a3b      	ldrh	r3, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	8a7b      	ldrh	r3, [r7, #18]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	b29b      	uxth	r3, r3
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <DISCO_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t DISCO_QSPI_EnableMemoryMappedMode(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b090      	sub	sp, #64	; 0x40
 8004f94:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f9a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8004f9c:	23eb      	movs	r3, #235	; 0xeb
 8004f9e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004fa0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004faa:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004fac:	2300      	movs	r3, #0
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004fb0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004fb6:	230a      	movs	r3, #10
 8004fb8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	603b      	str	r3, [r7, #0]

  if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004fce:	463a      	mov	r2, r7
 8004fd0:	f107 0308 	add.w	r3, r7, #8
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4806      	ldr	r0, [pc, #24]	; (8004ff0 <DISCO_QSPI_EnableMemoryMappedMode+0x60>)
 8004fd8:	f006 fd3c 	bl	800ba54 <HAL_QSPI_MemoryMapped>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <DISCO_QSPI_EnableMemoryMappedMode+0x56>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <DISCO_QSPI_EnableMemoryMappedMode+0x58>
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3740      	adds	r7, #64	; 0x40
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20001794 	.word	0x20001794

08004ff4 <DISCO_QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b090      	sub	sp, #64	; 0x40
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005000:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8005002:	2366      	movs	r3, #102	; 0x66
 8005004:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005006:	2300      	movs	r3, #0
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800500a:	2300      	movs	r3, #0
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800500e:	2300      	movs	r3, #0
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005016:	2300      	movs	r3, #0
 8005018:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800501a:	2300      	movs	r3, #0
 800501c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800501e:	2300      	movs	r3, #0
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005022:	f107 0308 	add.w	r3, r7, #8
 8005026:	f241 3288 	movw	r2, #5000	; 0x1388
 800502a:	4619      	mov	r1, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f006 fb03 	bl	800b638 <HAL_QSPI_Command>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <DISCO_QSPI_ResetMemory+0x48>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e019      	b.n	8005070 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 800503c:	2399      	movs	r3, #153	; 0x99
 800503e:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005040:	f107 0308 	add.w	r3, r7, #8
 8005044:	f241 3288 	movw	r2, #5000	; 0x1388
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f006 faf4 	bl	800b638 <HAL_QSPI_Command>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <DISCO_QSPI_ResetMemory+0x66>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e00a      	b.n	8005070 <DISCO_QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800505a:	f241 3188 	movw	r1, #5000	; 0x1388
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f8c7 	bl	80051f2 <QSPI_AutoPollingMemReady>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <DISCO_QSPI_ResetMemory+0x7a>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <DISCO_QSPI_ResetMemory+0x7c>
  }

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3740      	adds	r7, #64	; 0x40
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <DISCO_QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t DISCO_QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b094      	sub	sp, #80	; 0x50
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005084:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8005086:	2385      	movs	r3, #133	; 0x85
 8005088:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800508a:	2300      	movs	r3, #0
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800508e:	2300      	movs	r3, #0
 8005090:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8005092:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005096:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 800509c:	2301      	movs	r3, #1
 800509e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80050a0:	2300      	movs	r3, #0
 80050a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80050a4:	2300      	movs	r3, #0
 80050a6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80050a8:	2300      	movs	r3, #0
 80050aa:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050ac:	f107 0310 	add.w	r3, r7, #16
 80050b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b4:	4619      	mov	r1, r3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f006 fabe 	bl	800b638 <HAL_QSPI_Command>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <DISCO_QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e048      	b.n	8005158 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050c6:	f107 030f 	add.w	r3, r7, #15
 80050ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ce:	4619      	mov	r1, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f006 fba6 	bl	800b822 <HAL_QSPI_Receive>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <DISCO_QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e03b      	b.n	8005158 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != HAL_OK)
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f83d 	bl	8005160 <QSPI_WriteEnable>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <DISCO_QSPI_DummyCyclesCfg+0x78>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e033      	b.n	8005158 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 80050f0:	2381      	movs	r3, #129	; 0x81
 80050f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	b25b      	sxtb	r3, r3
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	b25a      	sxtb	r2, r3
 80050fe:	23f0      	movs	r3, #240	; 0xf0
 8005100:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005104:	fa93 f3a3 	rbit	r3, r3
 8005108:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800510a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800510c:	fab3 f383 	clz	r3, r3
 8005110:	b2db      	uxtb	r3, r3
 8005112:	4619      	mov	r1, r3
 8005114:	230a      	movs	r3, #10
 8005116:	408b      	lsls	r3, r1
 8005118:	b25b      	sxtb	r3, r3
 800511a:	4313      	orrs	r3, r2
 800511c:	b25b      	sxtb	r3, r3
 800511e:	b2db      	uxtb	r3, r3
 8005120:	73fb      	strb	r3, [r7, #15]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005122:	f107 0310 	add.w	r3, r7, #16
 8005126:	f241 3288 	movw	r2, #5000	; 0x1388
 800512a:	4619      	mov	r1, r3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f006 fa83 	bl	800b638 <HAL_QSPI_Command>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <DISCO_QSPI_DummyCyclesCfg+0xc4>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e00d      	b.n	8005158 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800513c:	f107 030f 	add.w	r3, r7, #15
 8005140:	f241 3288 	movw	r2, #5000	; 0x1388
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f006 fad4 	bl	800b6f4 <HAL_QSPI_Transmit>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <DISCO_QSPI_DummyCyclesCfg+0xde>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <DISCO_QSPI_DummyCyclesCfg+0xe0>
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3750      	adds	r7, #80	; 0x50
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b096      	sub	sp, #88	; 0x58
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800516c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800516e:	2306      	movs	r3, #6
 8005170:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005172:	2300      	movs	r3, #0
 8005174:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005176:	2300      	movs	r3, #0
 8005178:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800517a:	2300      	movs	r3, #0
 800517c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005182:	2300      	movs	r3, #0
 8005184:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005186:	2300      	movs	r3, #0
 8005188:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800518a:	2300      	movs	r3, #0
 800518c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800518e:	f107 0320 	add.w	r3, r7, #32
 8005192:	f241 3288 	movw	r2, #5000	; 0x1388
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f006 fa4d 	bl	800b638 <HAL_QSPI_Command>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <QSPI_WriteEnable+0x48>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e020      	b.n	80051ea <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = N25Q128A_SR_WREN;
 80051a8:	2302      	movs	r3, #2
 80051aa:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 80051ac:	2302      	movs	r3, #2
 80051ae:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80051b4:	2301      	movs	r3, #1
 80051b6:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80051b8:	2310      	movs	r3, #16
 80051ba:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80051bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051c0:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 80051c2:	2305      	movs	r3, #5
 80051c4:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80051c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80051cc:	f107 0208 	add.w	r2, r7, #8
 80051d0:	f107 0120 	add.w	r1, r7, #32
 80051d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f006 fbc4 	bl	800b966 <HAL_QSPI_AutoPolling>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <QSPI_WriteEnable+0x88>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <QSPI_WriteEnable+0x8a>
  }

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3758      	adds	r7, #88	; 0x58
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b096      	sub	sp, #88	; 0x58
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80051fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005200:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8005202:	2305      	movs	r3, #5
 8005204:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005206:	2300      	movs	r3, #0
 8005208:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800520a:	2300      	movs	r3, #0
 800520c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800520e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005212:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005218:	2300      	movs	r3, #0
 800521a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800521c:	2300      	movs	r3, #0
 800521e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005220:	2300      	movs	r3, #0
 8005222:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8005224:	2300      	movs	r3, #0
 8005226:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8005228:	2301      	movs	r3, #1
 800522a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800522c:	2300      	movs	r3, #0
 800522e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8005230:	2301      	movs	r3, #1
 8005232:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8005234:	2310      	movs	r3, #16
 8005236:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005238:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800523c:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800523e:	f107 0208 	add.w	r2, r7, #8
 8005242:	f107 0120 	add.w	r1, r7, #32
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f006 fb8c 	bl	800b966 <HAL_QSPI_AutoPolling>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <QSPI_AutoPollingMemReady+0x66>
  {
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <QSPI_AutoPollingMemReady+0x68>
  }

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3758      	adds	r7, #88	; 0x58
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <startAudioDMA>:
 * @param AudioFreq I2S_AUDIOFREQ_16K, I2S_AUDIOFREQ_48K, etc (48kHz frequency group)
 *
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
void startAudioDMA(int16_t *buf_output, int16_t *buf_input,
		uint32_t audio_dma_buf_size) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]

	__HAL_RCC_SAI2_CLK_ENABLE(); // bug fix syd: was not called in stm32f7xx_hal_msp.c (pb with static variable SAI2_client)
 8005270:	4b27      	ldr	r3, [pc, #156]	; (8005310 <startAudioDMA+0xac>)
 8005272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005274:	4a26      	ldr	r2, [pc, #152]	; (8005310 <startAudioDMA+0xac>)
 8005276:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800527a:	6453      	str	r3, [r2, #68]	; 0x44
 800527c:	4b24      	ldr	r3, [pc, #144]	; (8005310 <startAudioDMA+0xac>)
 800527e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	697b      	ldr	r3, [r7, #20]

	//  Initialize WM8994 CODEC
	if (wm8994_ReadID(AUDIO_I2C_ADDRESS) != WM8994_ID) Error_Handler();
 8005288:	2034      	movs	r0, #52	; 0x34
 800528a:	f000 fe5b 	bl	8005f44 <wm8994_ReadID>
 800528e:	4603      	mov	r3, r0
 8005290:	f648 1294 	movw	r2, #35220	; 0x8994
 8005294:	4293      	cmp	r3, r2
 8005296:	d001      	beq.n	800529c <startAudioDMA+0x38>
 8005298:	f7fd ffb8 	bl	800320c <Error_Handler>

	/* Reset the Codec Registers */
	wm8994_Reset(AUDIO_I2C_ADDRESS);
 800529c:	2034      	movs	r0, #52	; 0x34
 800529e:	f000 ff99 	bl	80061d4 <wm8994_Reset>

	switch (hsai_BlockB2.SlotInit.SlotActive) {
 80052a2:	4b1c      	ldr	r3, [pc, #112]	; (8005314 <startAudioDMA+0xb0>)
 80052a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a6:	2b05      	cmp	r3, #5
 80052a8:	d002      	beq.n	80052b0 <startAudioDMA+0x4c>
 80052aa:	2b0a      	cmp	r3, #10
 80052ac:	d009      	beq.n	80052c2 <startAudioDMA+0x5e>
 80052ae:	e011      	b.n	80052d4 <startAudioDMA+0x70>

	// line in (slot 0 L/R, violet jack):
	case 0x5:
		wm8994_Init(INPUT_DEVICE_INPUT_LINE_1 | OUTPUT_DEVICE_HEADPHONE,
 80052b0:	4b19      	ldr	r3, [pc, #100]	; (8005318 <startAudioDMA+0xb4>)
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	461a      	mov	r2, r3
 80052b6:	214b      	movs	r1, #75	; 0x4b
 80052b8:	f240 3002 	movw	r0, #770	; 0x302
 80052bc:	f000 f8e0 	bl	8005480 <wm8994_Init>
				DEFAULT_LINEIN_VOLUME, hsai_BlockA2.Init.AudioFrequency);
		break;
 80052c0:	e00d      	b.n	80052de <startAudioDMA+0x7a>

		// microphones (slot 1 L/R):
	case 0xA:
		wm8994_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2 | OUTPUT_DEVICE_HEADPHONE,
 80052c2:	4b15      	ldr	r3, [pc, #84]	; (8005318 <startAudioDMA+0xb4>)
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	461a      	mov	r2, r3
 80052c8:	21c8      	movs	r1, #200	; 0xc8
 80052ca:	f240 2002 	movw	r0, #514	; 0x202
 80052ce:	f000 f8d7 	bl	8005480 <wm8994_Init>
				DEFAULT_MICIN_VOLUME, hsai_BlockA2.Init.AudioFrequency);
		break;
 80052d2:	e004      	b.n	80052de <startAudioDMA+0x7a>

	default:
		printf("Unsupported audio input in hsai_BlockB2.SlotInit.SlotActive\n");
 80052d4:	4811      	ldr	r0, [pc, #68]	; (800531c <startAudioDMA+0xb8>)
 80052d6:	f014 ffb5 	bl	801a244 <puts>
		Error_Handler();
 80052da:	f7fd ff97 	bl	800320c <Error_Handler>
	}

	// unmute CODEC output
	wm8994_SetMute(AUDIO_MUTE_OFF);
 80052de:	2000      	movs	r0, #0
 80052e0:	f000 ff38 	bl	8006154 <wm8994_SetMute>

	//  Start DMA transfers

	/* Start Recording */
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) buf_input, audio_dma_buf_size);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	4809      	ldr	r0, [pc, #36]	; (8005314 <startAudioDMA+0xb0>)
 80052ee:	f008 ff37 	bl	800e160 <HAL_SAI_Receive_DMA>
	/* Start Playback */
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) buf_output, audio_dma_buf_size);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	4807      	ldr	r0, [pc, #28]	; (8005318 <startAudioDMA+0xb4>)
 80052fc:	f008 fe80 	bl	800e000 <HAL_SAI_Transmit_DMA>

	printf("SAI (audio) DMA started: OK\n");
 8005300:	4807      	ldr	r0, [pc, #28]	; (8005320 <startAudioDMA+0xbc>)
 8005302:	f014 ff9f 	bl	801a244 <puts>


}
 8005306:	bf00      	nop
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40023800 	.word	0x40023800
 8005314:	20001884 	.word	0x20001884
 8005318:	20001800 	.word	0x20001800
 800531c:	0801cb18 	.word	0x0801cb18
 8005320:	0801cb54 	.word	0x0801cb54

08005324 <HAL_SAI_TxCpltCallback>:

/*------------------------------------------------------------------------------
 SAI DMA Callbacks
 ----------------------------------------------------------------------------*/

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]

	if (hsai == &hsai_BlockA2)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a09      	ldr	r2, [pc, #36]	; (800537c <HAL_SAI_ErrorCallback+0x30>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d103      	bne.n	8005364 <HAL_SAI_ErrorCallback+0x18>
		printf("DMA Out error\n");
 800535c:	4808      	ldr	r0, [pc, #32]	; (8005380 <HAL_SAI_ErrorCallback+0x34>)
 800535e:	f014 ff71 	bl	801a244 <puts>
	else if (hsai == &hsai_BlockB2)
		printf("DMA In error\n");
}
 8005362:	e006      	b.n	8005372 <HAL_SAI_ErrorCallback+0x26>
	else if (hsai == &hsai_BlockB2)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a07      	ldr	r2, [pc, #28]	; (8005384 <HAL_SAI_ErrorCallback+0x38>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d102      	bne.n	8005372 <HAL_SAI_ErrorCallback+0x26>
		printf("DMA In error\n");
 800536c:	4806      	ldr	r0, [pc, #24]	; (8005388 <HAL_SAI_ErrorCallback+0x3c>)
 800536e:	f014 ff69 	bl	801a244 <puts>
}
 8005372:	bf00      	nop
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20001800 	.word	0x20001800
 8005380:	0801cb70 	.word	0x0801cb70
 8005384:	20001884 	.word	0x20001884
 8005388:	0801cb80 	.word	0x0801cb80

0800538c <DISCO_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  * @retval None
  */
void DISCO_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005398:	4b2a      	ldr	r3, [pc, #168]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800539a:	2201      	movs	r2, #1
 800539c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800539e:	4b29      	ldr	r3, [pc, #164]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80053a0:	2210      	movs	r2, #16
 80053a2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80053a4:	4b27      	ldr	r3, [pc, #156]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80053aa:	4b26      	ldr	r3, [pc, #152]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80053b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053b4:	4923      	ldr	r1, [pc, #140]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80053b6:	4824      	ldr	r0, [pc, #144]	; (8005448 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80053b8:	f00a f953 	bl	800f662 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80053bc:	2001      	movs	r0, #1
 80053be:	f000 ff8d 	bl	80062dc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80053c2:	4b20      	ldr	r3, [pc, #128]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80053c4:	2202      	movs	r2, #2
 80053c6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80053c8:	4b1e      	ldr	r3, [pc, #120]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80053ca:	2210      	movs	r2, #16
 80053cc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80053ce:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80053d4:	4b1b      	ldr	r3, [pc, #108]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80053da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053de:	4919      	ldr	r1, [pc, #100]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80053e0:	4819      	ldr	r0, [pc, #100]	; (8005448 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 80053e2:	f00a f93e 	bl	800f662 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80053e6:	4b17      	ldr	r3, [pc, #92]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80053e8:	2203      	movs	r2, #3
 80053ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80053ec:	4b15      	ldr	r3, [pc, #84]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80053ee:	2210      	movs	r2, #16
 80053f0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80053f2:	4b14      	ldr	r3, [pc, #80]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80053f4:	2208      	movs	r2, #8
 80053f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80053f8:	4b12      	ldr	r3, [pc, #72]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80053fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005402:	4910      	ldr	r1, [pc, #64]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005404:	4810      	ldr	r0, [pc, #64]	; (8005448 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005406:	f00a f92c 	bl	800f662 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800540a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800540e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005410:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005412:	2204      	movs	r2, #4
 8005414:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005418:	2210      	movs	r2, #16
 800541a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800541c:	4b09      	ldr	r3, [pc, #36]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800541e:	2201      	movs	r2, #1
 8005420:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4a07      	ldr	r2, [pc, #28]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 8005426:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8005428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800542c:	4905      	ldr	r1, [pc, #20]	; (8005444 <DISCO_SDRAM_Initialization_sequence+0xb8>)
 800542e:	4806      	ldr	r0, [pc, #24]	; (8005448 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005430:	f00a f917 	bl	800f662 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	4804      	ldr	r0, [pc, #16]	; (8005448 <DISCO_SDRAM_Initialization_sequence+0xbc>)
 8005438:	f00a f948 	bl	800f6cc <HAL_SDRAM_ProgramRefreshRate>
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	20041a80 	.word	0x20041a80
 8005448:	20001dd0 	.word	0x20001dd0

0800544c <TS_Init>:
 * @brief  Initializes and configures the touch screen functionalities and
 *         configures all necessary hardware resources (GPIOs, I2C, clocks..).
 * @retval TS_OK if all initializations are OK. Other value if error.
 */
void TS_Init()
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
	/* Wait at least 200ms after power up before accessing registers
	 * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
	HAL_Delay(200);
 8005450:	20c8      	movs	r0, #200	; 0xc8
 8005452:	f000 ff43 	bl	80062dc <HAL_Delay>

	TS_DisableIT();
 8005456:	f000 f802 	bl	800545e <TS_DisableIT>

}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}

0800545e <TS_DisableIT>:
  * @brief  Configure the FT5336 device to stop generating IT on the given INT pin
  *         connected to MCU as EXTI.
  * @retval None
  */
void TS_DisableIT()
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
  uint8_t regValue = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	71fb      	strb	r3, [r7, #7]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8005468:	2300      	movs	r3, #0
 800546a:	71fb      	strb	r3, [r7, #7]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_I2C_Write(FT5336_GMODE_REG, regValue);
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	4619      	mov	r1, r3
 8005470:	20a4      	movs	r0, #164	; 0xa4
 8005472:	f7ff fa65 	bl	8004940 <TS_I2C_Write>
}
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	603a      	str	r2, [r7, #0]
 800548a:	80fb      	strh	r3, [r7, #6]
 800548c:	460b      	mov	r3, r1
 800548e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	823b      	strh	r3, [r7, #16]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80054a0:	81fb      	strh	r3, [r7, #14]
  uint16_t power_mgnt_reg_1 = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	827b      	strh	r3, [r7, #18]

  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(0x102, 0x0003);
 80054a6:	2103      	movs	r1, #3
 80054a8:	f44f 7081 	mov.w	r0, #258	; 0x102
 80054ac:	f000 feac 	bl	8006208 <CODEC_IO_Write>
 80054b0:	4603      	mov	r3, r0
 80054b2:	461a      	mov	r2, r3
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	4413      	add	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(0x817, 0x0000);
 80054ba:	2100      	movs	r1, #0
 80054bc:	f640 0017 	movw	r0, #2071	; 0x817
 80054c0:	f000 fea2 	bl	8006208 <CODEC_IO_Write>
 80054c4:	4603      	mov	r3, r0
 80054c6:	461a      	mov	r2, r3
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	4413      	add	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(0x102, 0x0000);
 80054ce:	2100      	movs	r1, #0
 80054d0:	f44f 7081 	mov.w	r0, #258	; 0x102
 80054d4:	f000 fe98 	bl	8006208 <CODEC_IO_Write>
 80054d8:	4603      	mov	r3, r0
 80054da:	461a      	mov	r2, r3
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4413      	add	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(0x39, 0x006C);
 80054e2:	216c      	movs	r1, #108	; 0x6c
 80054e4:	2039      	movs	r0, #57	; 0x39
 80054e6:	f000 fe8f 	bl	8006208 <CODEC_IO_Write>
 80054ea:	4603      	mov	r3, r0
 80054ec:	461a      	mov	r2, r3
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	4413      	add	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80054f4:	89fb      	ldrh	r3, [r7, #14]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <wm8994_Init+0x8e>
  {
    counter += CODEC_IO_Write(0x01, 0x0013);
 80054fa:	2113      	movs	r1, #19
 80054fc:	2001      	movs	r0, #1
 80054fe:	f000 fe83 	bl	8006208 <CODEC_IO_Write>
 8005502:	4603      	mov	r3, r0
 8005504:	461a      	mov	r2, r3
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	4413      	add	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	e008      	b.n	8005520 <wm8994_Init+0xa0>
  }
  else
  {
    counter += CODEC_IO_Write(0x01, 0x0003);
 800550e:	2103      	movs	r1, #3
 8005510:	2001      	movs	r0, #1
 8005512:	f000 fe79 	bl	8006208 <CODEC_IO_Write>
 8005516:	4603      	mov	r3, r0
 8005518:	461a      	mov	r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
  }

  /* Add Delay */
  HAL_Delay(50);
 8005520:	2032      	movs	r0, #50	; 0x32
 8005522:	f000 fedb 	bl	80062dc <HAL_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8005526:	8a3b      	ldrh	r3, [r7, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 8111 	beq.w	8005750 <wm8994_Init+0x2d0>
  {
    outputEnabled = 1;
 800552e:	4bb8      	ldr	r3, [pc, #736]	; (8005810 <wm8994_Init+0x390>)
 8005530:	2201      	movs	r2, #1
 8005532:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8005534:	8a3b      	ldrh	r3, [r7, #16]
 8005536:	2b03      	cmp	r3, #3
 8005538:	d06d      	beq.n	8005616 <wm8994_Init+0x196>
 800553a:	2b03      	cmp	r3, #3
 800553c:	f300 80d5 	bgt.w	80056ea <wm8994_Init+0x26a>
 8005540:	2b01      	cmp	r3, #1
 8005542:	d002      	beq.n	800554a <wm8994_Init+0xca>
 8005544:	2b02      	cmp	r3, #2
 8005546:	d033      	beq.n	80055b0 <wm8994_Init+0x130>
 8005548:	e0cf      	b.n	80056ea <wm8994_Init+0x26a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(0x05, 0x0C0C);
 800554a:	f640 410c 	movw	r1, #3084	; 0xc0c
 800554e:	2005      	movs	r0, #5
 8005550:	f000 fe5a 	bl	8006208 <CODEC_IO_Write>
 8005554:	4603      	mov	r3, r0
 8005556:	461a      	mov	r2, r3
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	4413      	add	r3, r2
 800555c:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x601, 0x0000);
 800555e:	2100      	movs	r1, #0
 8005560:	f240 6001 	movw	r0, #1537	; 0x601
 8005564:	f000 fe50 	bl	8006208 <CODEC_IO_Write>
 8005568:	4603      	mov	r3, r0
 800556a:	461a      	mov	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	4413      	add	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x602, 0x0000);
 8005572:	2100      	movs	r1, #0
 8005574:	f240 6002 	movw	r0, #1538	; 0x602
 8005578:	f000 fe46 	bl	8006208 <CODEC_IO_Write>
 800557c:	4603      	mov	r3, r0
 800557e:	461a      	mov	r2, r3
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	4413      	add	r3, r2
 8005584:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(0x604, 0x0002);
 8005586:	2102      	movs	r1, #2
 8005588:	f240 6004 	movw	r0, #1540	; 0x604
 800558c:	f000 fe3c 	bl	8006208 <CODEC_IO_Write>
 8005590:	4603      	mov	r3, r0
 8005592:	461a      	mov	r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	4413      	add	r3, r2
 8005598:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(0x605, 0x0002);
 800559a:	2102      	movs	r1, #2
 800559c:	f240 6005 	movw	r0, #1541	; 0x605
 80055a0:	f000 fe32 	bl	8006208 <CODEC_IO_Write>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	4413      	add	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
      break;
 80055ae:	e0d2      	b.n	8005756 <wm8994_Init+0x2d6>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(0x05, 0x0303);
 80055b0:	f240 3103 	movw	r1, #771	; 0x303
 80055b4:	2005      	movs	r0, #5
 80055b6:	f000 fe27 	bl	8006208 <CODEC_IO_Write>
 80055ba:	4603      	mov	r3, r0
 80055bc:	461a      	mov	r2, r3
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	4413      	add	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x601, 0x0001);
 80055c4:	2101      	movs	r1, #1
 80055c6:	f240 6001 	movw	r0, #1537	; 0x601
 80055ca:	f000 fe1d 	bl	8006208 <CODEC_IO_Write>
 80055ce:	4603      	mov	r3, r0
 80055d0:	461a      	mov	r2, r3
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	4413      	add	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x602, 0x0001);
 80055d8:	2101      	movs	r1, #1
 80055da:	f240 6002 	movw	r0, #1538	; 0x602
 80055de:	f000 fe13 	bl	8006208 <CODEC_IO_Write>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	4413      	add	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(0x604, 0x0000);
 80055ec:	2100      	movs	r1, #0
 80055ee:	f240 6004 	movw	r0, #1540	; 0x604
 80055f2:	f000 fe09 	bl	8006208 <CODEC_IO_Write>
 80055f6:	4603      	mov	r3, r0
 80055f8:	461a      	mov	r2, r3
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	4413      	add	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(0x605, 0x0000);
 8005600:	2100      	movs	r1, #0
 8005602:	f240 6005 	movw	r0, #1541	; 0x605
 8005606:	f000 fdff 	bl	8006208 <CODEC_IO_Write>
 800560a:	4603      	mov	r3, r0
 800560c:	461a      	mov	r2, r3
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	4413      	add	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
      break;
 8005614:	e09f      	b.n	8005756 <wm8994_Init+0x2d6>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005616:	89fb      	ldrh	r3, [r7, #14]
 8005618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800561c:	d132      	bne.n	8005684 <wm8994_Init+0x204>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(0x05, 0x0303 | 0x0C0C);
 800561e:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005622:	2005      	movs	r0, #5
 8005624:	f000 fdf0 	bl	8006208 <CODEC_IO_Write>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4413      	add	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(0x601, 0x0003);
 8005632:	2103      	movs	r1, #3
 8005634:	f240 6001 	movw	r0, #1537	; 0x601
 8005638:	f000 fde6 	bl	8006208 <CODEC_IO_Write>
 800563c:	4603      	mov	r3, r0
 800563e:	461a      	mov	r2, r3
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	4413      	add	r3, r2
 8005644:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(0x602, 0x0003);
 8005646:	2103      	movs	r1, #3
 8005648:	f240 6002 	movw	r0, #1538	; 0x602
 800564c:	f000 fddc 	bl	8006208 <CODEC_IO_Write>
 8005650:	4603      	mov	r3, r0
 8005652:	461a      	mov	r2, r3
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	4413      	add	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(0x604, 0x0003);
 800565a:	2103      	movs	r1, #3
 800565c:	f240 6004 	movw	r0, #1540	; 0x604
 8005660:	f000 fdd2 	bl	8006208 <CODEC_IO_Write>
 8005664:	4603      	mov	r3, r0
 8005666:	461a      	mov	r2, r3
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	4413      	add	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(0x605, 0x0003);
 800566e:	2103      	movs	r1, #3
 8005670:	f240 6005 	movw	r0, #1541	; 0x605
 8005674:	f000 fdc8 	bl	8006208 <CODEC_IO_Write>
 8005678:	4603      	mov	r3, r0
 800567a:	461a      	mov	r2, r3
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	4413      	add	r3, r2
 8005680:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x604, 0x0002);

        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(0x605, 0x0002);
      }
      break;
 8005682:	e068      	b.n	8005756 <wm8994_Init+0x2d6>
        counter += CODEC_IO_Write(0x05, 0x0303 | 0x0C0C);
 8005684:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005688:	2005      	movs	r0, #5
 800568a:	f000 fdbd 	bl	8006208 <CODEC_IO_Write>
 800568e:	4603      	mov	r3, r0
 8005690:	461a      	mov	r2, r3
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	4413      	add	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x601, 0x0001);
 8005698:	2101      	movs	r1, #1
 800569a:	f240 6001 	movw	r0, #1537	; 0x601
 800569e:	f000 fdb3 	bl	8006208 <CODEC_IO_Write>
 80056a2:	4603      	mov	r3, r0
 80056a4:	461a      	mov	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	4413      	add	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x602, 0x0001);
 80056ac:	2101      	movs	r1, #1
 80056ae:	f240 6002 	movw	r0, #1538	; 0x602
 80056b2:	f000 fda9 	bl	8006208 <CODEC_IO_Write>
 80056b6:	4603      	mov	r3, r0
 80056b8:	461a      	mov	r2, r3
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	4413      	add	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x604, 0x0002);
 80056c0:	2102      	movs	r1, #2
 80056c2:	f240 6004 	movw	r0, #1540	; 0x604
 80056c6:	f000 fd9f 	bl	8006208 <CODEC_IO_Write>
 80056ca:	4603      	mov	r3, r0
 80056cc:	461a      	mov	r2, r3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	4413      	add	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
        counter += CODEC_IO_Write(0x605, 0x0002);
 80056d4:	2102      	movs	r1, #2
 80056d6:	f240 6005 	movw	r0, #1541	; 0x605
 80056da:	f000 fd95 	bl	8006208 <CODEC_IO_Write>
 80056de:	4603      	mov	r3, r0
 80056e0:	461a      	mov	r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	4413      	add	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]
      break;
 80056e8:	e035      	b.n	8005756 <wm8994_Init+0x2d6>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(0x05, 0x0303);
 80056ea:	f240 3103 	movw	r1, #771	; 0x303
 80056ee:	2005      	movs	r0, #5
 80056f0:	f000 fd8a 	bl	8006208 <CODEC_IO_Write>
 80056f4:	4603      	mov	r3, r0
 80056f6:	461a      	mov	r2, r3
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	4413      	add	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x601, 0x0001);
 80056fe:	2101      	movs	r1, #1
 8005700:	f240 6001 	movw	r0, #1537	; 0x601
 8005704:	f000 fd80 	bl	8006208 <CODEC_IO_Write>
 8005708:	4603      	mov	r3, r0
 800570a:	461a      	mov	r2, r3
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4413      	add	r3, r2
 8005710:	617b      	str	r3, [r7, #20]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x602, 0x0001);
 8005712:	2101      	movs	r1, #1
 8005714:	f240 6002 	movw	r0, #1538	; 0x602
 8005718:	f000 fd76 	bl	8006208 <CODEC_IO_Write>
 800571c:	4603      	mov	r3, r0
 800571e:	461a      	mov	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	4413      	add	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(0x604, 0x0000);
 8005726:	2100      	movs	r1, #0
 8005728:	f240 6004 	movw	r0, #1540	; 0x604
 800572c:	f000 fd6c 	bl	8006208 <CODEC_IO_Write>
 8005730:	4603      	mov	r3, r0
 8005732:	461a      	mov	r2, r3
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4413      	add	r3, r2
 8005738:	617b      	str	r3, [r7, #20]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(0x605, 0x0000);
 800573a:	2100      	movs	r1, #0
 800573c:	f240 6005 	movw	r0, #1541	; 0x605
 8005740:	f000 fd62 	bl	8006208 <CODEC_IO_Write>
 8005744:	4603      	mov	r3, r0
 8005746:	461a      	mov	r2, r3
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4413      	add	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
      break;
 800574e:	e002      	b.n	8005756 <wm8994_Init+0x2d6>
    }
  }
  else
  {
    outputEnabled = 0;
 8005750:	4b2f      	ldr	r3, [pc, #188]	; (8005810 <wm8994_Init+0x390>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8005756:	89fb      	ldrh	r3, [r7, #14]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8151 	beq.w	8005a00 <wm8994_Init+0x580>
  {
    inputEnabled = 1;
 800575e:	4b2d      	ldr	r3, [pc, #180]	; (8005814 <wm8994_Init+0x394>)
 8005760:	2201      	movs	r2, #1
 8005762:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8005764:	89fb      	ldrh	r3, [r7, #14]
 8005766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800576a:	f000 80ea 	beq.w	8005942 <wm8994_Init+0x4c2>
 800576e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005772:	f300 8141 	bgt.w	80059f8 <wm8994_Init+0x578>
 8005776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800577a:	d04d      	beq.n	8005818 <wm8994_Init+0x398>
 800577c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005780:	f300 813a 	bgt.w	80059f8 <wm8994_Init+0x578>
 8005784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005788:	f000 809e 	beq.w	80058c8 <wm8994_Init+0x448>
 800578c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005790:	f040 8132 	bne.w	80059f8 <wm8994_Init+0x578>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x0C30);
 8005794:	f44f 6143 	mov.w	r1, #3120	; 0xc30
 8005798:	2004      	movs	r0, #4
 800579a:	f000 fd35 	bl	8006208 <CODEC_IO_Write>
 800579e:	4603      	mov	r3, r0
 80057a0:	461a      	mov	r2, r3
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	4413      	add	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(0x450, 0x00DB);
 80057a8:	21db      	movs	r1, #219	; 0xdb
 80057aa:	f44f 608a 	mov.w	r0, #1104	; 0x450
 80057ae:	f000 fd2b 	bl	8006208 <CODEC_IO_Write>
 80057b2:	4603      	mov	r3, r0
 80057b4:	461a      	mov	r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	4413      	add	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x6000);
 80057bc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80057c0:	2002      	movs	r0, #2
 80057c2:	f000 fd21 	bl	8006208 <CODEC_IO_Write>
 80057c6:	4603      	mov	r3, r0
 80057c8:	461a      	mov	r2, r3
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	4413      	add	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x608, 0x0002);
 80057d0:	2102      	movs	r1, #2
 80057d2:	f44f 60c1 	mov.w	r0, #1544	; 0x608
 80057d6:	f000 fd17 	bl	8006208 <CODEC_IO_Write>
 80057da:	4603      	mov	r3, r0
 80057dc:	461a      	mov	r2, r3
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	4413      	add	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x609, 0x0002);
 80057e4:	2102      	movs	r1, #2
 80057e6:	f240 6009 	movw	r0, #1545	; 0x609
 80057ea:	f000 fd0d 	bl	8006208 <CODEC_IO_Write>
 80057ee:	4603      	mov	r3, r0
 80057f0:	461a      	mov	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	4413      	add	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000E);
 80057f8:	210e      	movs	r1, #14
 80057fa:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80057fe:	f000 fd03 	bl	8006208 <CODEC_IO_Write>
 8005802:	4603      	mov	r3, r0
 8005804:	461a      	mov	r2, r3
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4413      	add	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
      break;
 800580c:	e0fb      	b.n	8005a06 <wm8994_Init+0x586>
 800580e:	bf00      	nop
 8005810:	20041a90 	.word	0x20041a90
 8005814:	20041a94 	.word	0x20041a94

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(0x28, 0x0011);
 8005818:	2111      	movs	r1, #17
 800581a:	2028      	movs	r0, #40	; 0x28
 800581c:	f000 fcf4 	bl	8006208 <CODEC_IO_Write>
 8005820:	4603      	mov	r3, r0
 8005822:	461a      	mov	r2, r3
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4413      	add	r3, r2
 8005828:	617b      	str	r3, [r7, #20]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      // syd : counter += CODEC_IO_Write(0x29, 0x0035);
      /* CHANGE! MIXOUTR_MIXINR_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(0x29, 0x0020);
 800582a:	2120      	movs	r1, #32
 800582c:	2029      	movs	r0, #41	; 0x29
 800582e:	f000 fceb 	bl	8006208 <CODEC_IO_Write>
 8005832:	4603      	mov	r3, r0
 8005834:	461a      	mov	r2, r3
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	4413      	add	r3, r2
 800583a:	617b      	str	r3, [r7, #20]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      //syd : counter += CODEC_IO_Write(0x2A, 0x0035);
      /* CHANGE! MIXOUTL_MIXINL_VOL set to 0 (mute)
         +30db removed : 0x0020 instead of 0x0035  */
      counter += CODEC_IO_Write(0x2A, 0x0020);
 800583c:	2120      	movs	r1, #32
 800583e:	202a      	movs	r0, #42	; 0x2a
 8005840:	f000 fce2 	bl	8006208 <CODEC_IO_Write>
 8005844:	4603      	mov	r3, r0
 8005846:	461a      	mov	r2, r3
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	4413      	add	r3, r2
 800584c:	617b      	str	r3, [r7, #20]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x0303);
 800584e:	f240 3103 	movw	r1, #771	; 0x303
 8005852:	2004      	movs	r0, #4
 8005854:	f000 fcd8 	bl	8006208 <CODEC_IO_Write>
 8005858:	4603      	mov	r3, r0
 800585a:	461a      	mov	r2, r3
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4413      	add	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(0x440, 0x00DB);
 8005862:	21db      	movs	r1, #219	; 0xdb
 8005864:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8005868:	f000 fcce 	bl	8006208 <CODEC_IO_Write>
 800586c:	4603      	mov	r3, r0
 800586e:	461a      	mov	r2, r3
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	4413      	add	r3, r2
 8005874:	617b      	str	r3, [r7, #20]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x6350);
 8005876:	f246 3150 	movw	r1, #25424	; 0x6350
 800587a:	2002      	movs	r0, #2
 800587c:	f000 fcc4 	bl	8006208 <CODEC_IO_Write>
 8005880:	4603      	mov	r3, r0
 8005882:	461a      	mov	r2, r3
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	4413      	add	r3, r2
 8005888:	617b      	str	r3, [r7, #20]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(0x606, 0x0002);
 800588a:	2102      	movs	r1, #2
 800588c:	f240 6006 	movw	r0, #1542	; 0x606
 8005890:	f000 fcba 	bl	8006208 <CODEC_IO_Write>
 8005894:	4603      	mov	r3, r0
 8005896:	461a      	mov	r2, r3
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(0x607, 0x0002);
 800589e:	2102      	movs	r1, #2
 80058a0:	f240 6007 	movw	r0, #1543	; 0x607
 80058a4:	f000 fcb0 	bl	8006208 <CODEC_IO_Write>
 80058a8:	4603      	mov	r3, r0
 80058aa:	461a      	mov	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4413      	add	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000D);
 80058b2:	210d      	movs	r1, #13
 80058b4:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80058b8:	f000 fca6 	bl	8006208 <CODEC_IO_Write>
 80058bc:	4603      	mov	r3, r0
 80058be:	461a      	mov	r2, r3
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	4413      	add	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]
      break;
 80058c6:	e09e      	b.n	8005a06 <wm8994_Init+0x586>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x030C);
 80058c8:	f44f 7143 	mov.w	r1, #780	; 0x30c
 80058cc:	2004      	movs	r0, #4
 80058ce:	f000 fc9b 	bl	8006208 <CODEC_IO_Write>
 80058d2:	4603      	mov	r3, r0
 80058d4:	461a      	mov	r2, r3
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	4413      	add	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(0x440, 0x00DB);
 80058dc:	21db      	movs	r1, #219	; 0xdb
 80058de:	f44f 6088 	mov.w	r0, #1088	; 0x440
 80058e2:	f000 fc91 	bl	8006208 <CODEC_IO_Write>
 80058e6:	4603      	mov	r3, r0
 80058e8:	461a      	mov	r2, r3
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x6350);
 80058f0:	f246 3150 	movw	r1, #25424	; 0x6350
 80058f4:	2002      	movs	r0, #2
 80058f6:	f000 fc87 	bl	8006208 <CODEC_IO_Write>
 80058fa:	4603      	mov	r3, r0
 80058fc:	461a      	mov	r2, r3
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	4413      	add	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(0x606, 0x0002);
 8005904:	2102      	movs	r1, #2
 8005906:	f240 6006 	movw	r0, #1542	; 0x606
 800590a:	f000 fc7d 	bl	8006208 <CODEC_IO_Write>
 800590e:	4603      	mov	r3, r0
 8005910:	461a      	mov	r2, r3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	4413      	add	r3, r2
 8005916:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(0x607, 0x0002);
 8005918:	2102      	movs	r1, #2
 800591a:	f240 6007 	movw	r0, #1543	; 0x607
 800591e:	f000 fc73 	bl	8006208 <CODEC_IO_Write>
 8005922:	4603      	mov	r3, r0
 8005924:	461a      	mov	r2, r3
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	4413      	add	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000D);
 800592c:	210d      	movs	r1, #13
 800592e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8005932:	f000 fc69 	bl	8006208 <CODEC_IO_Write>
 8005936:	4603      	mov	r3, r0
 8005938:	461a      	mov	r2, r3
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	4413      	add	r3, r2
 800593e:	617b      	str	r3, [r7, #20]
      break;
 8005940:	e061      	b.n	8005a06 <wm8994_Init+0x586>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(0x04, 0x0F3C);
 8005942:	f640 713c 	movw	r1, #3900	; 0xf3c
 8005946:	2004      	movs	r0, #4
 8005948:	f000 fc5e 	bl	8006208 <CODEC_IO_Write>
 800594c:	4603      	mov	r3, r0
 800594e:	461a      	mov	r2, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	4413      	add	r3, r2
 8005954:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(0x450, 0x00DB);
 8005956:	21db      	movs	r1, #219	; 0xdb
 8005958:	f44f 608a 	mov.w	r0, #1104	; 0x450
 800595c:	f000 fc54 	bl	8006208 <CODEC_IO_Write>
 8005960:	4603      	mov	r3, r0
 8005962:	461a      	mov	r2, r3
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	4413      	add	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(0x440, 0x00DB);
 800596a:	21db      	movs	r1, #219	; 0xdb
 800596c:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8005970:	f000 fc4a 	bl	8006208 <CODEC_IO_Write>
 8005974:	4603      	mov	r3, r0
 8005976:	461a      	mov	r2, r3
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4413      	add	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(0x02, 0x63A0);
 800597e:	f246 31a0 	movw	r1, #25504	; 0x63a0
 8005982:	2002      	movs	r0, #2
 8005984:	f000 fc40 	bl	8006208 <CODEC_IO_Write>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	4413      	add	r3, r2
 8005990:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(0x606, 0x0002);
 8005992:	2102      	movs	r1, #2
 8005994:	f240 6006 	movw	r0, #1542	; 0x606
 8005998:	f000 fc36 	bl	8006208 <CODEC_IO_Write>
 800599c:	4603      	mov	r3, r0
 800599e:	461a      	mov	r2, r3
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	4413      	add	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(0x607, 0x0002);
 80059a6:	2102      	movs	r1, #2
 80059a8:	f240 6007 	movw	r0, #1543	; 0x607
 80059ac:	f000 fc2c 	bl	8006208 <CODEC_IO_Write>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461a      	mov	r2, r3
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	4413      	add	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(0x608, 0x0002);
 80059ba:	2102      	movs	r1, #2
 80059bc:	f44f 60c1 	mov.w	r0, #1544	; 0x608
 80059c0:	f000 fc22 	bl	8006208 <CODEC_IO_Write>
 80059c4:	4603      	mov	r3, r0
 80059c6:	461a      	mov	r2, r3
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	4413      	add	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(0x609, 0x0002);
 80059ce:	2102      	movs	r1, #2
 80059d0:	f240 6009 	movw	r0, #1545	; 0x609
 80059d4:	f000 fc18 	bl	8006208 <CODEC_IO_Write>
 80059d8:	4603      	mov	r3, r0
 80059da:	461a      	mov	r2, r3
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	4413      	add	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(0x700, 0x000D);
 80059e2:	210d      	movs	r1, #13
 80059e4:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80059e8:	f000 fc0e 	bl	8006208 <CODEC_IO_Write>
 80059ec:	4603      	mov	r3, r0
 80059ee:	461a      	mov	r2, r3
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	4413      	add	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
      break;
 80059f6:	e006      	b.n	8005a06 <wm8994_Init+0x586>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	3301      	adds	r3, #1
 80059fc:	617b      	str	r3, [r7, #20]
      break;
 80059fe:	e002      	b.n	8005a06 <wm8994_Init+0x586>
    }
  }
  else
  {
    inputEnabled = 0;
 8005a00:	4bb4      	ldr	r3, [pc, #720]	; (8005cd4 <wm8994_Init+0x854>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
  }

  /*  Clock Configurations */
  switch (AudioFreq)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	4ab3      	ldr	r2, [pc, #716]	; (8005cd8 <wm8994_Init+0x858>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d069      	beq.n	8005ae2 <wm8994_Init+0x662>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	4ab1      	ldr	r2, [pc, #708]	; (8005cd8 <wm8994_Init+0x858>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	f200 8091 	bhi.w	8005b3a <wm8994_Init+0x6ba>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d054      	beq.n	8005acc <wm8994_Init+0x64c>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	f200 8086 	bhi.w	8005b3a <wm8994_Init+0x6ba>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d075      	beq.n	8005b24 <wm8994_Init+0x6a4>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d87b      	bhi.n	8005b3a <wm8994_Init+0x6ba>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005a48:	d035      	beq.n	8005ab6 <wm8994_Init+0x636>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005a50:	d873      	bhi.n	8005b3a <wm8994_Init+0x6ba>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	f245 6222 	movw	r2, #22050	; 0x5622
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d058      	beq.n	8005b0e <wm8994_Init+0x68e>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	f245 6222 	movw	r2, #22050	; 0x5622
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d869      	bhi.n	8005b3a <wm8994_Init+0x6ba>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005a6c:	d018      	beq.n	8005aa0 <wm8994_Init+0x620>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005a74:	d861      	bhi.n	8005b3a <wm8994_Init+0x6ba>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005a7c:	d005      	beq.n	8005a8a <wm8994_Init+0x60a>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d037      	beq.n	8005af8 <wm8994_Init+0x678>
 8005a88:	e057      	b.n	8005b3a <wm8994_Init+0x6ba>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0003);
 8005a8a:	2103      	movs	r1, #3
 8005a8c:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005a90:	f000 fbba 	bl	8006208 <CODEC_IO_Write>
 8005a94:	4603      	mov	r3, r0
 8005a96:	461a      	mov	r2, r3
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
    break;
 8005a9e:	e057      	b.n	8005b50 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0033);
 8005aa0:	2133      	movs	r1, #51	; 0x33
 8005aa2:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005aa6:	f000 fbaf 	bl	8006208 <CODEC_IO_Write>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	461a      	mov	r2, r3
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
    break;
 8005ab4:	e04c      	b.n	8005b50 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0063);
 8005ab6:	2163      	movs	r1, #99	; 0x63
 8005ab8:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005abc:	f000 fba4 	bl	8006208 <CODEC_IO_Write>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
    break;
 8005aca:	e041      	b.n	8005b50 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0083);
 8005acc:	2183      	movs	r1, #131	; 0x83
 8005ace:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005ad2:	f000 fb99 	bl	8006208 <CODEC_IO_Write>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	461a      	mov	r2, r3
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	4413      	add	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
    break;
 8005ae0:	e036      	b.n	8005b50 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x00A3);
 8005ae2:	21a3      	movs	r1, #163	; 0xa3
 8005ae4:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005ae8:	f000 fb8e 	bl	8006208 <CODEC_IO_Write>
 8005aec:	4603      	mov	r3, r0
 8005aee:	461a      	mov	r2, r3
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	4413      	add	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
    break;
 8005af6:	e02b      	b.n	8005b50 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0013);
 8005af8:	2113      	movs	r1, #19
 8005afa:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005afe:	f000 fb83 	bl	8006208 <CODEC_IO_Write>
 8005b02:	4603      	mov	r3, r0
 8005b04:	461a      	mov	r2, r3
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	4413      	add	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
    break;
 8005b0c:	e020      	b.n	8005b50 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0043);
 8005b0e:	2143      	movs	r1, #67	; 0x43
 8005b10:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005b14:	f000 fb78 	bl	8006208 <CODEC_IO_Write>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	4413      	add	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]
    break;
 8005b22:	e015      	b.n	8005b50 <wm8994_Init+0x6d0>

  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0073);
 8005b24:	2173      	movs	r1, #115	; 0x73
 8005b26:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005b2a:	f000 fb6d 	bl	8006208 <CODEC_IO_Write>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	461a      	mov	r2, r3
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	4413      	add	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
    break;
 8005b38:	e00a      	b.n	8005b50 <wm8994_Init+0x6d0>

  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    counter += CODEC_IO_Write(0x210, 0x0083);
 8005b3a:	2183      	movs	r1, #131	; 0x83
 8005b3c:	f44f 7004 	mov.w	r0, #528	; 0x210
 8005b40:	f000 fb62 	bl	8006208 <CODEC_IO_Write>
 8005b44:	4603      	mov	r3, r0
 8005b46:	461a      	mov	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
    break;
 8005b4e:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005b50:	89fb      	ldrh	r3, [r7, #14]
 8005b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b56:	d10b      	bne.n	8005b70 <wm8994_Init+0x6f0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(0x300, 0x4018);
 8005b58:	f244 0118 	movw	r1, #16408	; 0x4018
 8005b5c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005b60:	f000 fb52 	bl	8006208 <CODEC_IO_Write>
 8005b64:	4603      	mov	r3, r0
 8005b66:	461a      	mov	r2, r3
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	e00a      	b.n	8005b86 <wm8994_Init+0x706>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(0x300, 0x4010);
 8005b70:	f244 0110 	movw	r1, #16400	; 0x4010
 8005b74:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005b78:	f000 fb46 	bl	8006208 <CODEC_IO_Write>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	461a      	mov	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	4413      	add	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
  }

  /* slave mode */
  counter += CODEC_IO_Write(0x302, 0x0000);
 8005b86:	2100      	movs	r1, #0
 8005b88:	f240 3002 	movw	r0, #770	; 0x302
 8005b8c:	f000 fb3c 	bl	8006208 <CODEC_IO_Write>
 8005b90:	4603      	mov	r3, r0
 8005b92:	461a      	mov	r2, r3
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4413      	add	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]

  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(0x208, 0x000A);
 8005b9a:	210a      	movs	r1, #10
 8005b9c:	f44f 7002 	mov.w	r0, #520	; 0x208
 8005ba0:	f000 fb32 	bl	8006208 <CODEC_IO_Write>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(0x200, 0x0001);
 8005bae:	2101      	movs	r1, #1
 8005bb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005bb4:	f000 fb28 	bl	8006208 <CODEC_IO_Write>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	461a      	mov	r2, r3
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  if (output_device > 0)  /* Audio output selected */
 8005bc2:	8a3b      	ldrh	r3, [r7, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 812c 	beq.w	8005e22 <wm8994_Init+0x9a2>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8005bca:	8a3b      	ldrh	r3, [r7, #16]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d142      	bne.n	8005c56 <wm8994_Init+0x7d6>
    {
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(0x2D, 0x0100);
 8005bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bd4:	202d      	movs	r0, #45	; 0x2d
 8005bd6:	f000 fb17 	bl	8006208 <CODEC_IO_Write>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	461a      	mov	r2, r3
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(0x2E, 0x0100);
 8005be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005be8:	202e      	movs	r0, #46	; 0x2e
 8005bea:	f000 fb0d 	bl	8006208 <CODEC_IO_Write>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]

      /* Startup sequence for Headphone */
      if(ColdStartup)
 8005bf8:	4b38      	ldr	r3, [pc, #224]	; (8005cdc <wm8994_Init+0x85c>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d012      	beq.n	8005c26 <wm8994_Init+0x7a6>
      {
        counter += CODEC_IO_Write(0x110,0x8100);
 8005c00:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8005c04:	f44f 7088 	mov.w	r0, #272	; 0x110
 8005c08:	f000 fafe 	bl	8006208 <CODEC_IO_Write>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	461a      	mov	r2, r3
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	4413      	add	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]

        ColdStartup=0;
 8005c16:	4b31      	ldr	r3, [pc, #196]	; (8005cdc <wm8994_Init+0x85c>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        HAL_Delay(300);
 8005c1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005c20:	f000 fb5c 	bl	80062dc <HAL_Delay>
 8005c24:	e00d      	b.n	8005c42 <wm8994_Init+0x7c2>
      }
      else /* Headphone Warm Start-Up */
      {
        counter += CODEC_IO_Write(0x110,0x8108);
 8005c26:	f248 1108 	movw	r1, #33032	; 0x8108
 8005c2a:	f44f 7088 	mov.w	r0, #272	; 0x110
 8005c2e:	f000 faeb 	bl	8006208 <CODEC_IO_Write>
 8005c32:	4603      	mov	r3, r0
 8005c34:	461a      	mov	r2, r3
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
        /* Add Delay */
        HAL_Delay(50);
 8005c3c:	2032      	movs	r0, #50	; 0x32
 8005c3e:	f000 fb4d 	bl	80062dc <HAL_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(0x420, 0x0000);
 8005c42:	2100      	movs	r1, #0
 8005c44:	f44f 6084 	mov.w	r0, #1056	; 0x420
 8005c48:	f000 fade 	bl	8006208 <CODEC_IO_Write>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	461a      	mov	r2, r3
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	4413      	add	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(0x03, 0x0300);
 8005c56:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005c5a:	2003      	movs	r0, #3
 8005c5c:	f000 fad4 	bl	8006208 <CODEC_IO_Write>
 8005c60:	4603      	mov	r3, r0
 8005c62:	461a      	mov	r2, r3
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	4413      	add	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(0x22, 0x0000);
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	2022      	movs	r0, #34	; 0x22
 8005c6e:	f000 facb 	bl	8006208 <CODEC_IO_Write>
 8005c72:	4603      	mov	r3, r0
 8005c74:	461a      	mov	r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	4413      	add	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(0x23, 0x0000);
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	2023      	movs	r0, #35	; 0x23
 8005c80:	f000 fac2 	bl	8006208 <CODEC_IO_Write>
 8005c84:	4603      	mov	r3, r0
 8005c86:	461a      	mov	r2, r3
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(0x36, 0x0300);
 8005c8e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005c92:	2036      	movs	r0, #54	; 0x36
 8005c94:	f000 fab8 	bl	8006208 <CODEC_IO_Write>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(0x01, 0x3003);
 8005ca2:	f243 0103 	movw	r1, #12291	; 0x3003
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	f000 faae 	bl	8006208 <CODEC_IO_Write>
 8005cac:	4603      	mov	r3, r0
 8005cae:	461a      	mov	r2, r3
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005cb6:	89fb      	ldrh	r3, [r7, #14]
 8005cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cbc:	d110      	bne.n	8005ce0 <wm8994_Init+0x860>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(0x51, 0x0205);
 8005cbe:	f240 2105 	movw	r1, #517	; 0x205
 8005cc2:	2051      	movs	r0, #81	; 0x51
 8005cc4:	f000 faa0 	bl	8006208 <CODEC_IO_Write>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	461a      	mov	r2, r3
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	4413      	add	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	e00e      	b.n	8005cf2 <wm8994_Init+0x872>
 8005cd4:	20041a94 	.word	0x20041a94
 8005cd8:	00017700 	.word	0x00017700
 8005cdc:	20000034 	.word	0x20000034
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(0x51, 0x0005);
 8005ce0:	2105      	movs	r1, #5
 8005ce2:	2051      	movs	r0, #81	; 0x51
 8005ce4:	f000 fa90 	bl	8006208 <CODEC_IO_Write>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	461a      	mov	r2, r3
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	4413      	add	r3, r2
 8005cf0:	617b      	str	r3, [r7, #20]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8005cf2:	8a7b      	ldrh	r3, [r7, #18]
 8005cf4:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8005cf8:	f043 0303 	orr.w	r3, r3, #3
 8005cfc:	827b      	strh	r3, [r7, #18]
    counter += CODEC_IO_Write(0x01, power_mgnt_reg_1);
 8005cfe:	8a7b      	ldrh	r3, [r7, #18]
 8005d00:	4619      	mov	r1, r3
 8005d02:	2001      	movs	r0, #1
 8005d04:	f000 fa80 	bl	8006208 <CODEC_IO_Write>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	4413      	add	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(0x60, 0x0022);
 8005d12:	2122      	movs	r1, #34	; 0x22
 8005d14:	2060      	movs	r0, #96	; 0x60
 8005d16:	f000 fa77 	bl	8006208 <CODEC_IO_Write>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4413      	add	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(0x4C, 0x9F25);
 8005d24:	f649 7125 	movw	r1, #40741	; 0x9f25
 8005d28:	204c      	movs	r0, #76	; 0x4c
 8005d2a:	f000 fa6d 	bl	8006208 <CODEC_IO_Write>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	461a      	mov	r2, r3
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	4413      	add	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]

    /* Add Delay */
    HAL_Delay(15);
 8005d38:	200f      	movs	r0, #15
 8005d3a:	f000 facf 	bl	80062dc <HAL_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(0x2D, 0x0001);
 8005d3e:	2101      	movs	r1, #1
 8005d40:	202d      	movs	r0, #45	; 0x2d
 8005d42:	f000 fa61 	bl	8006208 <CODEC_IO_Write>
 8005d46:	4603      	mov	r3, r0
 8005d48:	461a      	mov	r2, r3
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(0x2E, 0x0001);
 8005d50:	2101      	movs	r1, #1
 8005d52:	202e      	movs	r0, #46	; 0x2e
 8005d54:	f000 fa58 	bl	8006208 <CODEC_IO_Write>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	4413      	add	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(0x03, 0x0030 | 0x0300);
 8005d62:	f44f 714c 	mov.w	r1, #816	; 0x330
 8005d66:	2003      	movs	r0, #3
 8005d68:	f000 fa4e 	bl	8006208 <CODEC_IO_Write>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	461a      	mov	r2, r3
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	4413      	add	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(0x54, 0x0033);
 8005d76:	2133      	movs	r1, #51	; 0x33
 8005d78:	2054      	movs	r0, #84	; 0x54
 8005d7a:	f000 fa45 	bl	8006208 <CODEC_IO_Write>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	461a      	mov	r2, r3
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4413      	add	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]

    /* Add Delay */
    HAL_Delay(257);
 8005d88:	f240 1001 	movw	r0, #257	; 0x101
 8005d8c:	f000 faa6 	bl	80062dc <HAL_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(0x60, 0x00EE);
 8005d90:	21ee      	movs	r1, #238	; 0xee
 8005d92:	2060      	movs	r0, #96	; 0x60
 8005d94:	f000 fa38 	bl	8006208 <CODEC_IO_Write>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	4413      	add	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(0x610, 0x00C0);
 8005da2:	21c0      	movs	r1, #192	; 0xc0
 8005da4:	f44f 60c2 	mov.w	r0, #1552	; 0x610
 8005da8:	f000 fa2e 	bl	8006208 <CODEC_IO_Write>
 8005dac:	4603      	mov	r3, r0
 8005dae:	461a      	mov	r2, r3
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	4413      	add	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(0x611, 0x00C0);
 8005db6:	21c0      	movs	r1, #192	; 0xc0
 8005db8:	f240 6011 	movw	r0, #1553	; 0x611
 8005dbc:	f000 fa24 	bl	8006208 <CODEC_IO_Write>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(0x420, 0x0010);
 8005dca:	2110      	movs	r1, #16
 8005dcc:	f44f 6084 	mov.w	r0, #1056	; 0x420
 8005dd0:	f000 fa1a 	bl	8006208 <CODEC_IO_Write>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	4413      	add	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(0x612, 0x00C0);
 8005dde:	21c0      	movs	r1, #192	; 0xc0
 8005de0:	f240 6012 	movw	r0, #1554	; 0x612
 8005de4:	f000 fa10 	bl	8006208 <CODEC_IO_Write>
 8005de8:	4603      	mov	r3, r0
 8005dea:	461a      	mov	r2, r3
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	4413      	add	r3, r2
 8005df0:	617b      	str	r3, [r7, #20]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(0x613, 0x00C0);
 8005df2:	21c0      	movs	r1, #192	; 0xc0
 8005df4:	f240 6013 	movw	r0, #1555	; 0x613
 8005df8:	f000 fa06 	bl	8006208 <CODEC_IO_Write>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	461a      	mov	r2, r3
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	4413      	add	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(0x422, 0x0010);
 8005e06:	2110      	movs	r1, #16
 8005e08:	f240 4022 	movw	r0, #1058	; 0x422
 8005e0c:	f000 f9fc 	bl	8006208 <CODEC_IO_Write>
 8005e10:	4603      	mov	r3, r0
 8005e12:	461a      	mov	r2, r3
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	4413      	add	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]

    /* Volume Control */
    wm8994_SetVolume(Volume);
 8005e1a:	797b      	ldrb	r3, [r7, #5]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 f899 	bl	8005f54 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8005e22:	89fb      	ldrh	r3, [r7, #14]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8088 	beq.w	8005f3a <wm8994_Init+0xaba>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8005e2a:	89fb      	ldrh	r3, [r7, #14]
 8005e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e30:	d003      	beq.n	8005e3a <wm8994_Init+0x9ba>
 8005e32:	89fb      	ldrh	r3, [r7, #14]
 8005e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e38:	d123      	bne.n	8005e82 <wm8994_Init+0xa02>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005e3a:	8a7b      	ldrh	r3, [r7, #18]
 8005e3c:	f043 0313 	orr.w	r3, r3, #19
 8005e40:	827b      	strh	r3, [r7, #18]
      counter += CODEC_IO_Write(0x01, power_mgnt_reg_1);
 8005e42:	8a7b      	ldrh	r3, [r7, #18]
 8005e44:	4619      	mov	r1, r3
 8005e46:	2001      	movs	r0, #1
 8005e48:	f000 f9de 	bl	8006208 <CODEC_IO_Write>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	461a      	mov	r2, r3
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	4413      	add	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(0x620, 0x0002);
 8005e56:	2102      	movs	r1, #2
 8005e58:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8005e5c:	f000 f9d4 	bl	8006208 <CODEC_IO_Write>
 8005e60:	4603      	mov	r3, r0
 8005e62:	461a      	mov	r2, r3
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	4413      	add	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(0x411, 0x3800);
 8005e6a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8005e6e:	f240 4011 	movw	r0, #1041	; 0x411
 8005e72:	f000 f9c9 	bl	8006208 <CODEC_IO_Write>
 8005e76:	4603      	mov	r3, r0
 8005e78:	461a      	mov	r2, r3
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	e057      	b.n	8005f32 <wm8994_Init+0xab2>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005e82:	89fb      	ldrh	r3, [r7, #14]
 8005e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e88:	d12e      	bne.n	8005ee8 <wm8994_Init+0xa68>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005e8a:	8a7b      	ldrh	r3, [r7, #18]
 8005e8c:	f043 0313 	orr.w	r3, r3, #19
 8005e90:	827b      	strh	r3, [r7, #18]
      counter += CODEC_IO_Write(0x01, power_mgnt_reg_1);
 8005e92:	8a7b      	ldrh	r3, [r7, #18]
 8005e94:	4619      	mov	r1, r3
 8005e96:	2001      	movs	r0, #1
 8005e98:	f000 f9b6 	bl	8006208 <CODEC_IO_Write>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(0x620, 0x0002);
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8005eac:	f000 f9ac 	bl	8006208 <CODEC_IO_Write>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(0x410, 0x1800);
 8005eba:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ebe:	f44f 6082 	mov.w	r0, #1040	; 0x410
 8005ec2:	f000 f9a1 	bl	8006208 <CODEC_IO_Write>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	461a      	mov	r2, r3
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	4413      	add	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(0x411, 0x1800);
 8005ed0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ed4:	f240 4011 	movw	r0, #1041	; 0x411
 8005ed8:	f000 f996 	bl	8006208 <CODEC_IO_Write>
 8005edc:	4603      	mov	r3, r0
 8005ede:	461a      	mov	r2, r3
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	e024      	b.n	8005f32 <wm8994_Init+0xab2>
    }
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8005ee8:	89fb      	ldrh	r3, [r7, #14]
 8005eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eee:	d003      	beq.n	8005ef8 <wm8994_Init+0xa78>
 8005ef0:	89fb      	ldrh	r3, [r7, #14]
 8005ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef6:	d11c      	bne.n	8005f32 <wm8994_Init+0xab2>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(0x18, 0x000B);
 8005ef8:	210b      	movs	r1, #11
 8005efa:	2018      	movs	r0, #24
 8005efc:	f000 f984 	bl	8006208 <CODEC_IO_Write>
 8005f00:	4603      	mov	r3, r0
 8005f02:	461a      	mov	r2, r3
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	4413      	add	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(0x1A, 0x000B);
 8005f0a:	210b      	movs	r1, #11
 8005f0c:	201a      	movs	r0, #26
 8005f0e:	f000 f97b 	bl	8006208 <CODEC_IO_Write>
 8005f12:	4603      	mov	r3, r0
 8005f14:	461a      	mov	r2, r3
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	4413      	add	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(0x410, 0x1800);
 8005f1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f20:	f44f 6082 	mov.w	r0, #1040	; 0x410
 8005f24:	f000 f970 	bl	8006208 <CODEC_IO_Write>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4413      	add	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]
    }
    /* Volume Control */
    wm8994_SetVolume(Volume);
 8005f32:	797b      	ldrb	r3, [r7, #5]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 f80d 	bl	8005f54 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;
 8005f3a:	697b      	ldr	r3, [r7, #20]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <wm8994_ReadID>:
/**
  * @brief  Get the WM8994 ID.
  * @retval The WM8994 ID
  */
uint32_t wm8994_ReadID()
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* Initialize the Control interface of the Audio Codec */
  //AUDIO_IO_Init(); // done in main.c

  return ((uint32_t)AUDIO_I2C_Read(WM8994_CHIPID_ADDR));
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f7fe fccf 	bl	80048ec <AUDIO_I2C_Read>
 8005f4e:	4603      	mov	r3, r0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint8_t Volume)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	2b64      	cmp	r3, #100	; 0x64
 8005f66:	d80b      	bhi.n	8005f80 <wm8994_SetVolume+0x2c>
 8005f68:	79fa      	ldrb	r2, [r7, #7]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	019b      	lsls	r3, r3, #6
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	4a75      	ldr	r2, [pc, #468]	; (8006148 <wm8994_SetVolume+0x1f4>)
 8005f72:	fb82 1203 	smull	r1, r2, r2, r3
 8005f76:	1152      	asrs	r2, r2, #5
 8005f78:	17db      	asrs	r3, r3, #31
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	e000      	b.n	8005f82 <wm8994_SetVolume+0x2e>
 8005f80:	233f      	movs	r3, #63	; 0x3f
 8005f82:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8005f84:	4b71      	ldr	r3, [pc, #452]	; (800614c <wm8994_SetVolume+0x1f8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 8081 	beq.w	8006090 <wm8994_SetVolume+0x13c>
  {
    if(convertedvol > 0x3E)
 8005f8e:	7afb      	ldrb	r3, [r7, #11]
 8005f90:	2b3e      	cmp	r3, #62	; 0x3e
 8005f92:	d92f      	bls.n	8005ff4 <wm8994_SetVolume+0xa0>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(AUDIO_MUTE_OFF);
 8005f94:	2000      	movs	r0, #0
 8005f96:	f000 f8dd 	bl	8006154 <wm8994_SetMute>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(0x1C, 0x3F | 0x140);
 8005fa2:	f240 117f 	movw	r1, #383	; 0x17f
 8005fa6:	201c      	movs	r0, #28
 8005fa8:	f000 f92e 	bl	8006208 <CODEC_IO_Write>
 8005fac:	4603      	mov	r3, r0
 8005fae:	461a      	mov	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(0x1D, 0x3F | 0x140);
 8005fb6:	f240 117f 	movw	r1, #383	; 0x17f
 8005fba:	201d      	movs	r0, #29
 8005fbc:	f000 f924 	bl	8006208 <CODEC_IO_Write>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(0x26, 0x3F | 0x140);
 8005fca:	f240 117f 	movw	r1, #383	; 0x17f
 8005fce:	2026      	movs	r0, #38	; 0x26
 8005fd0:	f000 f91a 	bl	8006208 <CODEC_IO_Write>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(0x27, 0x3F | 0x140);
 8005fde:	f240 117f 	movw	r1, #383	; 0x17f
 8005fe2:	2027      	movs	r0, #39	; 0x27
 8005fe4:	f000 f910 	bl	8006208 <CODEC_IO_Write>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e04d      	b.n	8006090 <wm8994_SetVolume+0x13c>
    }
    else if (Volume == 0)
 8005ff4:	79fb      	ldrb	r3, [r7, #7]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d107      	bne.n	800600a <wm8994_SetVolume+0xb6>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(AUDIO_MUTE_ON);
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	f000 f8aa 	bl	8006154 <wm8994_SetMute>
 8006000:	4602      	mov	r2, r0
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	e042      	b.n	8006090 <wm8994_SetVolume+0x13c>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(AUDIO_MUTE_OFF);
 800600a:	2000      	movs	r0, #0
 800600c:	f000 f8a2 	bl	8006154 <wm8994_SetMute>
 8006010:	4602      	mov	r2, r0
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4413      	add	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(0x1C, convertedvol | 0x140);
 8006018:	7afb      	ldrb	r3, [r7, #11]
 800601a:	b21b      	sxth	r3, r3
 800601c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006020:	b21b      	sxth	r3, r3
 8006022:	b29b      	uxth	r3, r3
 8006024:	4619      	mov	r1, r3
 8006026:	201c      	movs	r0, #28
 8006028:	f000 f8ee 	bl	8006208 <CODEC_IO_Write>
 800602c:	4603      	mov	r3, r0
 800602e:	461a      	mov	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(0x1D, convertedvol | 0x140);
 8006036:	7afb      	ldrb	r3, [r7, #11]
 8006038:	b21b      	sxth	r3, r3
 800603a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800603e:	b21b      	sxth	r3, r3
 8006040:	b29b      	uxth	r3, r3
 8006042:	4619      	mov	r1, r3
 8006044:	201d      	movs	r0, #29
 8006046:	f000 f8df 	bl	8006208 <CODEC_IO_Write>
 800604a:	4603      	mov	r3, r0
 800604c:	461a      	mov	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4413      	add	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(0x26, convertedvol | 0x140);
 8006054:	7afb      	ldrb	r3, [r7, #11]
 8006056:	b21b      	sxth	r3, r3
 8006058:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800605c:	b21b      	sxth	r3, r3
 800605e:	b29b      	uxth	r3, r3
 8006060:	4619      	mov	r1, r3
 8006062:	2026      	movs	r0, #38	; 0x26
 8006064:	f000 f8d0 	bl	8006208 <CODEC_IO_Write>
 8006068:	4603      	mov	r3, r0
 800606a:	461a      	mov	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(0x27, convertedvol | 0x140);
 8006072:	7afb      	ldrb	r3, [r7, #11]
 8006074:	b21b      	sxth	r3, r3
 8006076:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800607a:	b21b      	sxth	r3, r3
 800607c:	b29b      	uxth	r3, r3
 800607e:	4619      	mov	r1, r3
 8006080:	2027      	movs	r0, #39	; 0x27
 8006082:	f000 f8c1 	bl	8006208 <CODEC_IO_Write>
 8006086:	4603      	mov	r3, r0
 8006088:	461a      	mov	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4413      	add	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8006090:	4b2f      	ldr	r3, [pc, #188]	; (8006150 <wm8994_SetVolume+0x1fc>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d051      	beq.n	800613c <wm8994_SetVolume+0x1e8>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	2b63      	cmp	r3, #99	; 0x63
 800609c:	d80c      	bhi.n	80060b8 <wm8994_SetVolume+0x164>
 800609e:	79fa      	ldrb	r2, [r7, #7]
 80060a0:	4613      	mov	r3, r2
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	4a27      	ldr	r2, [pc, #156]	; (8006148 <wm8994_SetVolume+0x1f4>)
 80060aa:	fb82 1203 	smull	r1, r2, r2, r3
 80060ae:	1152      	asrs	r2, r2, #5
 80060b0:	17db      	asrs	r3, r3, #31
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e000      	b.n	80060ba <wm8994_SetVolume+0x166>
 80060b8:	23ef      	movs	r3, #239	; 0xef
 80060ba:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(0x400, convertedvol | 0x100);
 80060bc:	7afb      	ldrb	r3, [r7, #11]
 80060be:	b21b      	sxth	r3, r3
 80060c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c4:	b21b      	sxth	r3, r3
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	4619      	mov	r1, r3
 80060ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80060ce:	f000 f89b 	bl	8006208 <CODEC_IO_Write>
 80060d2:	4603      	mov	r3, r0
 80060d4:	461a      	mov	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(0x401, convertedvol | 0x100);
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	b21b      	sxth	r3, r3
 80060e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e4:	b21b      	sxth	r3, r3
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4619      	mov	r1, r3
 80060ea:	f240 4001 	movw	r0, #1025	; 0x401
 80060ee:	f000 f88b 	bl	8006208 <CODEC_IO_Write>
 80060f2:	4603      	mov	r3, r0
 80060f4:	461a      	mov	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4413      	add	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(0x404, convertedvol | 0x100);
 80060fc:	7afb      	ldrb	r3, [r7, #11]
 80060fe:	b21b      	sxth	r3, r3
 8006100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006104:	b21b      	sxth	r3, r3
 8006106:	b29b      	uxth	r3, r3
 8006108:	4619      	mov	r1, r3
 800610a:	f240 4004 	movw	r0, #1028	; 0x404
 800610e:	f000 f87b 	bl	8006208 <CODEC_IO_Write>
 8006112:	4603      	mov	r3, r0
 8006114:	461a      	mov	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(0x405, convertedvol | 0x100);
 800611c:	7afb      	ldrb	r3, [r7, #11]
 800611e:	b21b      	sxth	r3, r3
 8006120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006124:	b21b      	sxth	r3, r3
 8006126:	b29b      	uxth	r3, r3
 8006128:	4619      	mov	r1, r3
 800612a:	f240 4005 	movw	r0, #1029	; 0x405
 800612e:	f000 f86b 	bl	8006208 <CODEC_IO_Write>
 8006132:	4603      	mov	r3, r0
 8006134:	461a      	mov	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800613c:	68fb      	ldr	r3, [r7, #12]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	51eb851f 	.word	0x51eb851f
 800614c:	20041a90 	.word	0x20041a90
 8006150:	20041a94 	.word	0x20041a94

08006154 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint32_t Cmd)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8006160:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <wm8994_SetMute+0x7c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d02d      	beq.n	80061c4 <wm8994_SetMute+0x70>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d116      	bne.n	800619c <wm8994_SetMute+0x48>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(0x420, 0x0200);
 800616e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006172:	f44f 6084 	mov.w	r0, #1056	; 0x420
 8006176:	f000 f847 	bl	8006208 <CODEC_IO_Write>
 800617a:	4603      	mov	r3, r0
 800617c:	461a      	mov	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(0x422, 0x0200);
 8006184:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006188:	f240 4022 	movw	r0, #1058	; 0x422
 800618c:	f000 f83c 	bl	8006208 <CODEC_IO_Write>
 8006190:	4603      	mov	r3, r0
 8006192:	461a      	mov	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	e013      	b.n	80061c4 <wm8994_SetMute+0x70>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(0x420, 0x0010);
 800619c:	2110      	movs	r1, #16
 800619e:	f44f 6084 	mov.w	r0, #1056	; 0x420
 80061a2:	f000 f831 	bl	8006208 <CODEC_IO_Write>
 80061a6:	4603      	mov	r3, r0
 80061a8:	461a      	mov	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(0x422, 0x0010);
 80061b0:	2110      	movs	r1, #16
 80061b2:	f240 4022 	movw	r0, #1058	; 0x422
 80061b6:	f000 f827 	bl	8006208 <CODEC_IO_Write>
 80061ba:	4603      	mov	r3, r0
 80061bc:	461a      	mov	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4413      	add	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80061c4:	68fb      	ldr	r3, [r7, #12]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20041a90 	.word	0x20041a90

080061d4 <wm8994_Reset>:
/**
  * @brief Resets wm8994 registers.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset()
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 80061da:	2300      	movs	r3, #0
 80061dc:	607b      	str	r3, [r7, #4]

  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(0x0000, 0x0000);
 80061de:	2100      	movs	r1, #0
 80061e0:	2000      	movs	r0, #0
 80061e2:	f000 f811 	bl	8006208 <CODEC_IO_Write>
 80061e6:	4603      	mov	r3, r0
 80061e8:	607b      	str	r3, [r7, #4]
  outputEnabled = 0;
 80061ea:	4b05      	ldr	r3, [pc, #20]	; (8006200 <wm8994_Reset+0x2c>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80061f0:	4b04      	ldr	r3, [pc, #16]	; (8006204 <wm8994_Reset+0x30>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]

  return counter;
 80061f6:	687b      	ldr	r3, [r7, #4]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20041a90 	.word	0x20041a90
 8006204:	20041a94 	.word	0x20041a94

08006208 <CODEC_IO_Write>:
  * @brief  Writes/Read a single data to the onboard WM8994 audio Codec
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint16_t Reg, uint16_t Value){
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	4603      	mov	r3, r0
 8006210:	460a      	mov	r2, r1
 8006212:	80fb      	strh	r3, [r7, #6]
 8006214:	4613      	mov	r3, r2
 8006216:	80bb      	strh	r3, [r7, #4]

  AUDIO_I2C_Write(Reg, Value);
 8006218:	88ba      	ldrh	r2, [r7, #4]
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	4611      	mov	r1, r2
 800621e:	4618      	mov	r0, r3
 8006220:	f7fe fb3c 	bl	800489c <AUDIO_I2C_Write>

#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  return (AUDIO_I2C_Read(Reg) == Value)? 0:1;
#else
  return 0;
 8006224:	2300      	movs	r3, #0
#endif /* VERIFY_WRITTENDATA */
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006268 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006234:	480d      	ldr	r0, [pc, #52]	; (800626c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006236:	490e      	ldr	r1, [pc, #56]	; (8006270 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006238:	4a0e      	ldr	r2, [pc, #56]	; (8006274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800623a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800623c:	e002      	b.n	8006244 <LoopCopyDataInit>

0800623e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800623e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006242:	3304      	adds	r3, #4

08006244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006248:	d3f9      	bcc.n	800623e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800624a:	4a0b      	ldr	r2, [pc, #44]	; (8006278 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800624c:	4c0b      	ldr	r4, [pc, #44]	; (800627c <LoopFillZerobss+0x26>)
  movs r3, #0
 800624e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006250:	e001      	b.n	8006256 <LoopFillZerobss>

08006252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006254:	3204      	adds	r2, #4

08006256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006258:	d3fb      	bcc.n	8006252 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800625a:	f7fe f9bb 	bl	80045d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800625e:	f013 fe27 	bl	8019eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006262:	f7fb fc97 	bl	8001b94 <main>
  bx  lr    
 8006266:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006268:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800626c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006270:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8006274:	08032220 	.word	0x08032220
  ldr r2, =_sbss
 8006278:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 800627c:	2004a2fc 	.word	0x2004a2fc

08006280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006280:	e7fe      	b.n	8006280 <ADC_IRQHandler>

08006282 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006286:	2003      	movs	r0, #3
 8006288:	f000 fbb1 	bl	80069ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800628c:	2000      	movs	r0, #0
 800628e:	f7fe f879 	bl	8004384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006292:	f7fc ffc3 	bl	800321c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062a0:	4b06      	ldr	r3, [pc, #24]	; (80062bc <HAL_IncTick+0x20>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <HAL_IncTick+0x24>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4413      	add	r3, r2
 80062ac:	4a04      	ldr	r2, [pc, #16]	; (80062c0 <HAL_IncTick+0x24>)
 80062ae:	6013      	str	r3, [r2, #0]
}
 80062b0:	bf00      	nop
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	2000004c 	.word	0x2000004c
 80062c0:	20041a98 	.word	0x20041a98

080062c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  return uwTick;
 80062c8:	4b03      	ldr	r3, [pc, #12]	; (80062d8 <HAL_GetTick+0x14>)
 80062ca:	681b      	ldr	r3, [r3, #0]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	20041a98 	.word	0x20041a98

080062dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062e4:	f7ff ffee 	bl	80062c4 <HAL_GetTick>
 80062e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d005      	beq.n	8006302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062f6:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <HAL_Delay+0x44>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006302:	bf00      	nop
 8006304:	f7ff ffde 	bl	80062c4 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	429a      	cmp	r2, r3
 8006312:	d8f7      	bhi.n	8006304 <HAL_Delay+0x28>
  {
  }
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	2000004c 	.word	0x2000004c

08006324 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e031      	b.n	800639e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d109      	bne.n	8006356 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fc ff92 	bl	800326c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	f003 0310 	and.w	r3, r3, #16
 800635e:	2b00      	cmp	r3, #0
 8006360:	d116      	bne.n	8006390 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006366:	4b10      	ldr	r3, [pc, #64]	; (80063a8 <HAL_ADC_Init+0x84>)
 8006368:	4013      	ands	r3, r2
 800636a:	f043 0202 	orr.w	r2, r3, #2
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f970 	bl	8006658 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	f043 0201 	orr.w	r2, r3, #1
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	641a      	str	r2, [r3, #64]	; 0x40
 800638e:	e001      	b.n	8006394 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	ffffeefd 	.word	0xffffeefd

080063ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_ADC_ConfigChannel+0x1c>
 80063c4:	2302      	movs	r3, #2
 80063c6:	e136      	b.n	8006636 <HAL_ADC_ConfigChannel+0x28a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b09      	cmp	r3, #9
 80063d6:	d93a      	bls.n	800644e <HAL_ADC_ConfigChannel+0xa2>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e0:	d035      	beq.n	800644e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68d9      	ldr	r1, [r3, #12]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	4613      	mov	r3, r2
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	4413      	add	r3, r2
 80063f6:	3b1e      	subs	r3, #30
 80063f8:	2207      	movs	r2, #7
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	43da      	mvns	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	400a      	ands	r2, r1
 8006406:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a8d      	ldr	r2, [pc, #564]	; (8006644 <HAL_ADC_ConfigChannel+0x298>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d10a      	bne.n	8006428 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68d9      	ldr	r1, [r3, #12]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	061a      	lsls	r2, r3, #24
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006426:	e035      	b.n	8006494 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68d9      	ldr	r1, [r3, #12]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	b29b      	uxth	r3, r3
 8006438:	4618      	mov	r0, r3
 800643a:	4603      	mov	r3, r0
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	4403      	add	r3, r0
 8006440:	3b1e      	subs	r3, #30
 8006442:	409a      	lsls	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800644c:	e022      	b.n	8006494 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6919      	ldr	r1, [r3, #16]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	461a      	mov	r2, r3
 800645c:	4613      	mov	r3, r2
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	4413      	add	r3, r2
 8006462:	2207      	movs	r2, #7
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	43da      	mvns	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	400a      	ands	r2, r1
 8006470:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6919      	ldr	r1, [r3, #16]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	b29b      	uxth	r3, r3
 8006482:	4618      	mov	r0, r3
 8006484:	4603      	mov	r3, r0
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4403      	add	r3, r0
 800648a:	409a      	lsls	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2b06      	cmp	r3, #6
 800649a:	d824      	bhi.n	80064e6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	3b05      	subs	r3, #5
 80064ae:	221f      	movs	r2, #31
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	43da      	mvns	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	400a      	ands	r2, r1
 80064bc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	4618      	mov	r0, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	3b05      	subs	r3, #5
 80064d8:	fa00 f203 	lsl.w	r2, r0, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	635a      	str	r2, [r3, #52]	; 0x34
 80064e4:	e04c      	b.n	8006580 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b0c      	cmp	r3, #12
 80064ec:	d824      	bhi.n	8006538 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	3b23      	subs	r3, #35	; 0x23
 8006500:	221f      	movs	r2, #31
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	43da      	mvns	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	400a      	ands	r2, r1
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	b29b      	uxth	r3, r3
 800651c:	4618      	mov	r0, r3
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	3b23      	subs	r3, #35	; 0x23
 800652a:	fa00 f203 	lsl.w	r2, r0, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	631a      	str	r2, [r3, #48]	; 0x30
 8006536:	e023      	b.n	8006580 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	3b41      	subs	r3, #65	; 0x41
 800654a:	221f      	movs	r2, #31
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	43da      	mvns	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	400a      	ands	r2, r1
 8006558:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	4618      	mov	r0, r3
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	3b41      	subs	r3, #65	; 0x41
 8006574:	fa00 f203 	lsl.w	r2, r0, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a30      	ldr	r2, [pc, #192]	; (8006648 <HAL_ADC_ConfigChannel+0x29c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d10a      	bne.n	80065a0 <HAL_ADC_ConfigChannel+0x1f4>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006592:	d105      	bne.n	80065a0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006594:	4b2d      	ldr	r3, [pc, #180]	; (800664c <HAL_ADC_ConfigChannel+0x2a0>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	4a2c      	ldr	r2, [pc, #176]	; (800664c <HAL_ADC_ConfigChannel+0x2a0>)
 800659a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800659e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a28      	ldr	r2, [pc, #160]	; (8006648 <HAL_ADC_ConfigChannel+0x29c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d10f      	bne.n	80065ca <HAL_ADC_ConfigChannel+0x21e>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b12      	cmp	r3, #18
 80065b0:	d10b      	bne.n	80065ca <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80065b2:	4b26      	ldr	r3, [pc, #152]	; (800664c <HAL_ADC_ConfigChannel+0x2a0>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	4a25      	ldr	r2, [pc, #148]	; (800664c <HAL_ADC_ConfigChannel+0x2a0>)
 80065b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80065bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80065be:	4b23      	ldr	r3, [pc, #140]	; (800664c <HAL_ADC_ConfigChannel+0x2a0>)
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	4a22      	ldr	r2, [pc, #136]	; (800664c <HAL_ADC_ConfigChannel+0x2a0>)
 80065c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1e      	ldr	r2, [pc, #120]	; (8006648 <HAL_ADC_ConfigChannel+0x29c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d12b      	bne.n	800662c <HAL_ADC_ConfigChannel+0x280>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1a      	ldr	r2, [pc, #104]	; (8006644 <HAL_ADC_ConfigChannel+0x298>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d003      	beq.n	80065e6 <HAL_ADC_ConfigChannel+0x23a>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b11      	cmp	r3, #17
 80065e4:	d122      	bne.n	800662c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80065e6:	4b19      	ldr	r3, [pc, #100]	; (800664c <HAL_ADC_ConfigChannel+0x2a0>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	4a18      	ldr	r2, [pc, #96]	; (800664c <HAL_ADC_ConfigChannel+0x2a0>)
 80065ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80065f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80065f2:	4b16      	ldr	r3, [pc, #88]	; (800664c <HAL_ADC_ConfigChannel+0x2a0>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	4a15      	ldr	r2, [pc, #84]	; (800664c <HAL_ADC_ConfigChannel+0x2a0>)
 80065f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a10      	ldr	r2, [pc, #64]	; (8006644 <HAL_ADC_ConfigChannel+0x298>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d111      	bne.n	800662c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <HAL_ADC_ConfigChannel+0x2a4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a11      	ldr	r2, [pc, #68]	; (8006654 <HAL_ADC_ConfigChannel+0x2a8>)
 800660e:	fba2 2303 	umull	r2, r3, r2, r3
 8006612:	0c9a      	lsrs	r2, r3, #18
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800661e:	e002      	b.n	8006626 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3b01      	subs	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1f9      	bne.n	8006620 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	10000012 	.word	0x10000012
 8006648:	40012000 	.word	0x40012000
 800664c:	40012300 	.word	0x40012300
 8006650:	2000002c 	.word	0x2000002c
 8006654:	431bde83 	.word	0x431bde83

08006658 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006660:	4b78      	ldr	r3, [pc, #480]	; (8006844 <ADC_Init+0x1ec>)
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	4a77      	ldr	r2, [pc, #476]	; (8006844 <ADC_Init+0x1ec>)
 8006666:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800666a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800666c:	4b75      	ldr	r3, [pc, #468]	; (8006844 <ADC_Init+0x1ec>)
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	4973      	ldr	r1, [pc, #460]	; (8006844 <ADC_Init+0x1ec>)
 8006676:	4313      	orrs	r3, r2
 8006678:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6859      	ldr	r1, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	021a      	lsls	r2, r3, #8
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80066ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6859      	ldr	r1, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6899      	ldr	r1, [r3, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e6:	4a58      	ldr	r2, [pc, #352]	; (8006848 <ADC_Init+0x1f0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d022      	beq.n	8006732 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6899      	ldr	r1, [r3, #8]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800671c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6899      	ldr	r1, [r3, #8]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	609a      	str	r2, [r3, #8]
 8006730:	e00f      	b.n	8006752 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006750:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0202 	bic.w	r2, r2, #2
 8006760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6899      	ldr	r1, [r3, #8]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	005a      	lsls	r2, r3, #1
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01b      	beq.n	80067b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800678e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800679e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6859      	ldr	r1, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	3b01      	subs	r3, #1
 80067ac:	035a      	lsls	r2, r3, #13
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	e007      	b.n	80067c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80067d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	051a      	lsls	r2, r3, #20
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6899      	ldr	r1, [r3, #8]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800680a:	025a      	lsls	r2, r3, #9
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6899      	ldr	r1, [r3, #8]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	029a      	lsls	r2, r3, #10
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	609a      	str	r2, [r3, #8]
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	40012300 	.word	0x40012300
 8006848:	0f000001 	.word	0x0f000001

0800684c <__NVIC_SetPriorityGrouping>:
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800685c:	4b0b      	ldr	r3, [pc, #44]	; (800688c <__NVIC_SetPriorityGrouping+0x40>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006868:	4013      	ands	r3, r2
 800686a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006874:	4b06      	ldr	r3, [pc, #24]	; (8006890 <__NVIC_SetPriorityGrouping+0x44>)
 8006876:	4313      	orrs	r3, r2
 8006878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800687a:	4a04      	ldr	r2, [pc, #16]	; (800688c <__NVIC_SetPriorityGrouping+0x40>)
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	60d3      	str	r3, [r2, #12]
}
 8006880:	bf00      	nop
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	e000ed00 	.word	0xe000ed00
 8006890:	05fa0000 	.word	0x05fa0000

08006894 <__NVIC_GetPriorityGrouping>:
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006898:	4b04      	ldr	r3, [pc, #16]	; (80068ac <__NVIC_GetPriorityGrouping+0x18>)
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	0a1b      	lsrs	r3, r3, #8
 800689e:	f003 0307 	and.w	r3, r3, #7
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	e000ed00 	.word	0xe000ed00

080068b0 <__NVIC_EnableIRQ>:
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	db0b      	blt.n	80068da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	f003 021f 	and.w	r2, r3, #31
 80068c8:	4907      	ldr	r1, [pc, #28]	; (80068e8 <__NVIC_EnableIRQ+0x38>)
 80068ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	2001      	movs	r0, #1
 80068d2:	fa00 f202 	lsl.w	r2, r0, r2
 80068d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	e000e100 	.word	0xe000e100

080068ec <__NVIC_DisableIRQ>:
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	db12      	blt.n	8006924 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	f003 021f 	and.w	r2, r3, #31
 8006904:	490a      	ldr	r1, [pc, #40]	; (8006930 <__NVIC_DisableIRQ+0x44>)
 8006906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	2001      	movs	r0, #1
 800690e:	fa00 f202 	lsl.w	r2, r0, r2
 8006912:	3320      	adds	r3, #32
 8006914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006918:	f3bf 8f4f 	dsb	sy
}
 800691c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800691e:	f3bf 8f6f 	isb	sy
}
 8006922:	bf00      	nop
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	e000e100 	.word	0xe000e100

08006934 <__NVIC_SetPriority>:
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	6039      	str	r1, [r7, #0]
 800693e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006944:	2b00      	cmp	r3, #0
 8006946:	db0a      	blt.n	800695e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	b2da      	uxtb	r2, r3
 800694c:	490c      	ldr	r1, [pc, #48]	; (8006980 <__NVIC_SetPriority+0x4c>)
 800694e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006952:	0112      	lsls	r2, r2, #4
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	440b      	add	r3, r1
 8006958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800695c:	e00a      	b.n	8006974 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	4908      	ldr	r1, [pc, #32]	; (8006984 <__NVIC_SetPriority+0x50>)
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	3b04      	subs	r3, #4
 800696c:	0112      	lsls	r2, r2, #4
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	440b      	add	r3, r1
 8006972:	761a      	strb	r2, [r3, #24]
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	e000e100 	.word	0xe000e100
 8006984:	e000ed00 	.word	0xe000ed00

08006988 <NVIC_EncodePriority>:
{
 8006988:	b480      	push	{r7}
 800698a:	b089      	sub	sp, #36	; 0x24
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	f1c3 0307 	rsb	r3, r3, #7
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	bf28      	it	cs
 80069a6:	2304      	movcs	r3, #4
 80069a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	3304      	adds	r3, #4
 80069ae:	2b06      	cmp	r3, #6
 80069b0:	d902      	bls.n	80069b8 <NVIC_EncodePriority+0x30>
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	3b03      	subs	r3, #3
 80069b6:	e000      	b.n	80069ba <NVIC_EncodePriority+0x32>
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069bc:	f04f 32ff 	mov.w	r2, #4294967295
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	43da      	mvns	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	401a      	ands	r2, r3
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069d0:	f04f 31ff 	mov.w	r1, #4294967295
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	fa01 f303 	lsl.w	r3, r1, r3
 80069da:	43d9      	mvns	r1, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069e0:	4313      	orrs	r3, r2
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3724      	adds	r7, #36	; 0x24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b082      	sub	sp, #8
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff ff28 	bl	800684c <__NVIC_SetPriorityGrouping>
}
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a16:	f7ff ff3d 	bl	8006894 <__NVIC_GetPriorityGrouping>
 8006a1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	68b9      	ldr	r1, [r7, #8]
 8006a20:	6978      	ldr	r0, [r7, #20]
 8006a22:	f7ff ffb1 	bl	8006988 <NVIC_EncodePriority>
 8006a26:	4602      	mov	r2, r0
 8006a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff ff80 	bl	8006934 <__NVIC_SetPriority>
}
 8006a34:	bf00      	nop
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	4603      	mov	r3, r0
 8006a44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7ff ff30 	bl	80068b0 <__NVIC_EnableIRQ>
}
 8006a50:	bf00      	nop
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4603      	mov	r3, r0
 8006a60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff ff40 	bl	80068ec <__NVIC_DisableIRQ>
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e054      	b.n	8006b30 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	7f5b      	ldrb	r3, [r3, #29]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d105      	bne.n	8006a9c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fc fc42 	bl	8003320 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	791b      	ldrb	r3, [r3, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10c      	bne.n	8006ac4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a22      	ldr	r2, [pc, #136]	; (8006b38 <HAL_CRC_Init+0xc4>)
 8006ab0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0218 	bic.w	r2, r2, #24
 8006ac0:	609a      	str	r2, [r3, #8]
 8006ac2:	e00c      	b.n	8006ade <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6899      	ldr	r1, [r3, #8]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	461a      	mov	r2, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f834 	bl	8006b3c <HAL_CRCEx_Polynomial_Set>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e028      	b.n	8006b30 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	795b      	ldrb	r3, [r3, #5]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d105      	bne.n	8006af2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f04f 32ff 	mov.w	r2, #4294967295
 8006aee:	611a      	str	r2, [r3, #16]
 8006af0:	e004      	b.n	8006afc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6912      	ldr	r2, [r2, #16]
 8006afa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695a      	ldr	r2, [r3, #20]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	430a      	orrs	r2, r1
 8006b26:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	04c11db7 	.word	0x04c11db7

08006b3c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006b4c:	231f      	movs	r3, #31
 8006b4e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006b50:	bf00      	nop
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1e5a      	subs	r2, r3, #1
 8006b56:	613a      	str	r2, [r7, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d009      	beq.n	8006b70 <HAL_CRCEx_Polynomial_Set+0x34>
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f003 031f 	and.w	r3, r3, #31
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0f0      	beq.n	8006b52 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b18      	cmp	r3, #24
 8006b74:	d846      	bhi.n	8006c04 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006b76:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <HAL_CRCEx_Polynomial_Set+0x40>)
 8006b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7c:	08006c0b 	.word	0x08006c0b
 8006b80:	08006c05 	.word	0x08006c05
 8006b84:	08006c05 	.word	0x08006c05
 8006b88:	08006c05 	.word	0x08006c05
 8006b8c:	08006c05 	.word	0x08006c05
 8006b90:	08006c05 	.word	0x08006c05
 8006b94:	08006c05 	.word	0x08006c05
 8006b98:	08006c05 	.word	0x08006c05
 8006b9c:	08006bf9 	.word	0x08006bf9
 8006ba0:	08006c05 	.word	0x08006c05
 8006ba4:	08006c05 	.word	0x08006c05
 8006ba8:	08006c05 	.word	0x08006c05
 8006bac:	08006c05 	.word	0x08006c05
 8006bb0:	08006c05 	.word	0x08006c05
 8006bb4:	08006c05 	.word	0x08006c05
 8006bb8:	08006c05 	.word	0x08006c05
 8006bbc:	08006bed 	.word	0x08006bed
 8006bc0:	08006c05 	.word	0x08006c05
 8006bc4:	08006c05 	.word	0x08006c05
 8006bc8:	08006c05 	.word	0x08006c05
 8006bcc:	08006c05 	.word	0x08006c05
 8006bd0:	08006c05 	.word	0x08006c05
 8006bd4:	08006c05 	.word	0x08006c05
 8006bd8:	08006c05 	.word	0x08006c05
 8006bdc:	08006be1 	.word	0x08006be1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b06      	cmp	r3, #6
 8006be4:	d913      	bls.n	8006c0e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006bea:	e010      	b.n	8006c0e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	2b07      	cmp	r3, #7
 8006bf0:	d90f      	bls.n	8006c12 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006bf6:	e00c      	b.n	8006c12 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b0f      	cmp	r3, #15
 8006bfc:	d90b      	bls.n	8006c16 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c02:	e008      	b.n	8006c16 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	75fb      	strb	r3, [r7, #23]
      break;
 8006c08:	e006      	b.n	8006c18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c0a:	bf00      	nop
 8006c0c:	e004      	b.n	8006c18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c0e:	bf00      	nop
 8006c10:	e002      	b.n	8006c18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c12:	bf00      	nop
 8006c14:	e000      	b.n	8006c18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c16:	bf00      	nop
  }
  if (status == HAL_OK)
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10d      	bne.n	8006c3a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f023 0118 	bic.w	r1, r3, #24
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e069      	b.n	8006d2e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d102      	bne.n	8006c6c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fc fb7a 	bl	8003360 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6819      	ldr	r1, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	4b2a      	ldr	r3, [pc, #168]	; (8006d38 <HAL_DCMI_Init+0xf0>)
 8006c8e:	400b      	ands	r3, r1
 8006c90:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6819      	ldr	r1, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006ca6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006cb2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006cbe:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006cca:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006cd6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b10      	cmp	r3, #16
 8006ce6:	d112      	bne.n	8006d0e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	7f1b      	ldrb	r3, [r3, #28]
 8006cec:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	7f5b      	ldrb	r3, [r3, #29]
 8006cf2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006cf4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	7f9b      	ldrb	r3, [r3, #30]
 8006cfa:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006cfc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	7fdb      	ldrb	r3, [r3, #31]
 8006d04:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006d0a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006d0c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 021e 	orr.w	r2, r2, #30
 8006d1c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	ffe0f007 	.word	0xffe0f007

08006d3c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f003 0304 	and.w	r3, r3, #4
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d016      	beq.n	8006d84 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d62:	f043 0202 	orr.w	r2, r3, #2
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d76:	4a35      	ldr	r2, [pc, #212]	; (8006e4c <HAL_DCMI_IRQHandler+0x110>)
 8006d78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fa2a 	bl	80071d8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d01e      	beq.n	8006dcc <HAL_DCMI_IRQHandler+0x90>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2202      	movs	r2, #2
 8006d94:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9a:	f043 0201 	orr.w	r2, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2204      	movs	r2, #4
 8006da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dae:	4a27      	ldr	r2, [pc, #156]	; (8006e4c <HAL_DCMI_IRQHandler+0x110>)
 8006db0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fa0e 	bl	80071d8 <HAL_DMA_Abort_IT>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <HAL_DCMI_IRQHandler+0x90>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 f86a 	bl	8006ea0 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d006      	beq.n	8006de4 <HAL_DCMI_IRQHandler+0xa8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2210      	movs	r2, #16
 8006ddc:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f840 	bl	8006e64 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f003 0308 	and.w	r3, r3, #8
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d006      	beq.n	8006dfc <HAL_DCMI_IRQHandler+0xc0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2208      	movs	r2, #8
 8006df4:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f83e 	bl	8006e78 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d01d      	beq.n	8006e42 <HAL_DCMI_IRQHandler+0x106>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d107      	bne.n	8006e24 <HAL_DCMI_IRQHandler+0xe8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 021e 	bic.w	r2, r2, #30
 8006e22:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0201 	bic.w	r2, r2, #1
 8006e32:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f825 	bl	8006e8c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08006ea1 	.word	0x08006ea1

08006e50 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d009      	beq.n	8006ecc <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f7ff ffbf 	bl	8006e50 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006ee8:	f7ff f9ec 	bl	80062c4 <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e099      	b.n	800702c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0201 	bic.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f18:	e00f      	b.n	8006f3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f1a:	f7ff f9d3 	bl	80062c4 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b05      	cmp	r3, #5
 8006f26:	d908      	bls.n	8006f3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2203      	movs	r2, #3
 8006f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e078      	b.n	800702c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e8      	bne.n	8006f1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4b38      	ldr	r3, [pc, #224]	; (8007034 <HAL_DMA_Init+0x158>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d107      	bne.n	8006fa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f023 0307 	bic.w	r3, r3, #7
 8006fba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d117      	bne.n	8006ffe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00e      	beq.n	8006ffe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fb15 	bl	8007610 <DMA_CheckFifoParam>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d008      	beq.n	8006ffe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2240      	movs	r2, #64	; 0x40
 8006ff0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e016      	b.n	800702c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 facc 	bl	80075a4 <DMA_CalcBaseAndBitshift>
 800700c:	4603      	mov	r3, r0
 800700e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007014:	223f      	movs	r2, #63	; 0x3f
 8007016:	409a      	lsls	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	f010803f 	.word	0xf010803f

08007038 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <HAL_DMA_Start_IT+0x26>
 800705a:	2302      	movs	r3, #2
 800705c:	e048      	b.n	80070f0 <HAL_DMA_Start_IT+0xb8>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b01      	cmp	r3, #1
 8007070:	d137      	bne.n	80070e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2202      	movs	r2, #2
 8007076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 fa5e 	bl	8007548 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007090:	223f      	movs	r2, #63	; 0x3f
 8007092:	409a      	lsls	r2, r3
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0216 	orr.w	r2, r2, #22
 80070a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695a      	ldr	r2, [r3, #20]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070b6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0208 	orr.w	r2, r2, #8
 80070ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	e005      	b.n	80070ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80070ea:	2302      	movs	r3, #2
 80070ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007104:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007106:	f7ff f8dd 	bl	80062c4 <HAL_GetTick>
 800710a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	d008      	beq.n	800712a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2280      	movs	r2, #128	; 0x80
 800711c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e052      	b.n	80071d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0216 	bic.w	r2, r2, #22
 8007138:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	695a      	ldr	r2, [r3, #20]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007148:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	2b00      	cmp	r3, #0
 8007150:	d103      	bne.n	800715a <HAL_DMA_Abort+0x62>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007156:	2b00      	cmp	r3, #0
 8007158:	d007      	beq.n	800716a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0208 	bic.w	r2, r2, #8
 8007168:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0201 	bic.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800717a:	e013      	b.n	80071a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800717c:	f7ff f8a2 	bl	80062c4 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b05      	cmp	r3, #5
 8007188:	d90c      	bls.n	80071a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2220      	movs	r2, #32
 800718e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2203      	movs	r2, #3
 8007194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e015      	b.n	80071d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e4      	bne.n	800717c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b6:	223f      	movs	r2, #63	; 0x3f
 80071b8:	409a      	lsls	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d004      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2280      	movs	r2, #128	; 0x80
 80071f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e00c      	b.n	8007210 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2205      	movs	r2, #5
 80071fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0201 	bic.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007228:	4b8e      	ldr	r3, [pc, #568]	; (8007464 <HAL_DMA_IRQHandler+0x248>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a8e      	ldr	r2, [pc, #568]	; (8007468 <HAL_DMA_IRQHandler+0x24c>)
 800722e:	fba2 2303 	umull	r2, r3, r2, r3
 8007232:	0a9b      	lsrs	r3, r3, #10
 8007234:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007246:	2208      	movs	r2, #8
 8007248:	409a      	lsls	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4013      	ands	r3, r2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d01a      	beq.n	8007288 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d013      	beq.n	8007288 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0204 	bic.w	r2, r2, #4
 800726e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007274:	2208      	movs	r2, #8
 8007276:	409a      	lsls	r2, r3
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007280:	f043 0201 	orr.w	r2, r3, #1
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728c:	2201      	movs	r2, #1
 800728e:	409a      	lsls	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4013      	ands	r3, r2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d012      	beq.n	80072be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00b      	beq.n	80072be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072aa:	2201      	movs	r2, #1
 80072ac:	409a      	lsls	r2, r3
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b6:	f043 0202 	orr.w	r2, r3, #2
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c2:	2204      	movs	r2, #4
 80072c4:	409a      	lsls	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4013      	ands	r3, r2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d012      	beq.n	80072f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e0:	2204      	movs	r2, #4
 80072e2:	409a      	lsls	r2, r3
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ec:	f043 0204 	orr.w	r2, r3, #4
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f8:	2210      	movs	r2, #16
 80072fa:	409a      	lsls	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4013      	ands	r3, r2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d043      	beq.n	800738c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d03c      	beq.n	800738c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007316:	2210      	movs	r2, #16
 8007318:	409a      	lsls	r2, r3
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d018      	beq.n	800735e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d108      	bne.n	800734c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d024      	beq.n	800738c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	4798      	blx	r3
 800734a:	e01f      	b.n	800738c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007350:	2b00      	cmp	r3, #0
 8007352:	d01b      	beq.n	800738c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	4798      	blx	r3
 800735c:	e016      	b.n	800738c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007368:	2b00      	cmp	r3, #0
 800736a:	d107      	bne.n	800737c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0208 	bic.w	r2, r2, #8
 800737a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007390:	2220      	movs	r2, #32
 8007392:	409a      	lsls	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4013      	ands	r3, r2
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 808f 	beq.w	80074bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0310 	and.w	r3, r3, #16
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 8087 	beq.w	80074bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b2:	2220      	movs	r2, #32
 80073b4:	409a      	lsls	r2, r3
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b05      	cmp	r3, #5
 80073c4:	d136      	bne.n	8007434 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0216 	bic.w	r2, r2, #22
 80073d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	695a      	ldr	r2, [r3, #20]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d103      	bne.n	80073f6 <HAL_DMA_IRQHandler+0x1da>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0208 	bic.w	r2, r2, #8
 8007404:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740a:	223f      	movs	r2, #63	; 0x3f
 800740c:	409a      	lsls	r2, r3
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007426:	2b00      	cmp	r3, #0
 8007428:	d07e      	beq.n	8007528 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
        }
        return;
 8007432:	e079      	b.n	8007528 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d01d      	beq.n	800747e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10d      	bne.n	800746c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007454:	2b00      	cmp	r3, #0
 8007456:	d031      	beq.n	80074bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4798      	blx	r3
 8007460:	e02c      	b.n	80074bc <HAL_DMA_IRQHandler+0x2a0>
 8007462:	bf00      	nop
 8007464:	2000002c 	.word	0x2000002c
 8007468:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007470:	2b00      	cmp	r3, #0
 8007472:	d023      	beq.n	80074bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	4798      	blx	r3
 800747c:	e01e      	b.n	80074bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10f      	bne.n	80074ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0210 	bic.w	r2, r2, #16
 800749a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d032      	beq.n	800752a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d022      	beq.n	8007516 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2205      	movs	r2, #5
 80074d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0201 	bic.w	r2, r2, #1
 80074e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	3301      	adds	r3, #1
 80074ec:	60bb      	str	r3, [r7, #8]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d307      	bcc.n	8007504 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1f2      	bne.n	80074e8 <HAL_DMA_IRQHandler+0x2cc>
 8007502:	e000      	b.n	8007506 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007504:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
 8007526:	e000      	b.n	800752a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007528:	bf00      	nop
    }
  }
}
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007564:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	2b40      	cmp	r3, #64	; 0x40
 8007574:	d108      	bne.n	8007588 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007586:	e007      	b.n	8007598 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	60da      	str	r2, [r3, #12]
}
 8007598:	bf00      	nop
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	3b10      	subs	r3, #16
 80075b4:	4a13      	ldr	r2, [pc, #76]	; (8007604 <DMA_CalcBaseAndBitshift+0x60>)
 80075b6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ba:	091b      	lsrs	r3, r3, #4
 80075bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075be:	4a12      	ldr	r2, [pc, #72]	; (8007608 <DMA_CalcBaseAndBitshift+0x64>)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d908      	bls.n	80075e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	4b0c      	ldr	r3, [pc, #48]	; (800760c <DMA_CalcBaseAndBitshift+0x68>)
 80075da:	4013      	ands	r3, r2
 80075dc:	1d1a      	adds	r2, r3, #4
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	659a      	str	r2, [r3, #88]	; 0x58
 80075e2:	e006      	b.n	80075f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	4b08      	ldr	r3, [pc, #32]	; (800760c <DMA_CalcBaseAndBitshift+0x68>)
 80075ec:	4013      	ands	r3, r2
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	aaaaaaab 	.word	0xaaaaaaab
 8007608:	0801eb28 	.word	0x0801eb28
 800760c:	fffffc00 	.word	0xfffffc00

08007610 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007620:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d11f      	bne.n	800766a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b03      	cmp	r3, #3
 800762e:	d856      	bhi.n	80076de <DMA_CheckFifoParam+0xce>
 8007630:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <DMA_CheckFifoParam+0x28>)
 8007632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007636:	bf00      	nop
 8007638:	08007649 	.word	0x08007649
 800763c:	0800765b 	.word	0x0800765b
 8007640:	08007649 	.word	0x08007649
 8007644:	080076df 	.word	0x080076df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d046      	beq.n	80076e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007658:	e043      	b.n	80076e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007662:	d140      	bne.n	80076e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007668:	e03d      	b.n	80076e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007672:	d121      	bne.n	80076b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b03      	cmp	r3, #3
 8007678:	d837      	bhi.n	80076ea <DMA_CheckFifoParam+0xda>
 800767a:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <DMA_CheckFifoParam+0x70>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	08007691 	.word	0x08007691
 8007684:	08007697 	.word	0x08007697
 8007688:	08007691 	.word	0x08007691
 800768c:	080076a9 	.word	0x080076a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
      break;
 8007694:	e030      	b.n	80076f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d025      	beq.n	80076ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076a6:	e022      	b.n	80076ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076b0:	d11f      	bne.n	80076f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80076b6:	e01c      	b.n	80076f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d903      	bls.n	80076c6 <DMA_CheckFifoParam+0xb6>
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d003      	beq.n	80076cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80076c4:	e018      	b.n	80076f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	73fb      	strb	r3, [r7, #15]
      break;
 80076ca:	e015      	b.n	80076f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00e      	beq.n	80076f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	73fb      	strb	r3, [r7, #15]
      break;
 80076dc:	e00b      	b.n	80076f6 <DMA_CheckFifoParam+0xe6>
      break;
 80076de:	bf00      	nop
 80076e0:	e00a      	b.n	80076f8 <DMA_CheckFifoParam+0xe8>
      break;
 80076e2:	bf00      	nop
 80076e4:	e008      	b.n	80076f8 <DMA_CheckFifoParam+0xe8>
      break;
 80076e6:	bf00      	nop
 80076e8:	e006      	b.n	80076f8 <DMA_CheckFifoParam+0xe8>
      break;
 80076ea:	bf00      	nop
 80076ec:	e004      	b.n	80076f8 <DMA_CheckFifoParam+0xe8>
      break;
 80076ee:	bf00      	nop
 80076f0:	e002      	b.n	80076f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80076f2:	bf00      	nop
 80076f4:	e000      	b.n	80076f8 <DMA_CheckFifoParam+0xe8>
      break;
 80076f6:	bf00      	nop
    }
  } 
  
  return status; 
 80076f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop

08007708 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e039      	b.n	800778e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d106      	bne.n	8007734 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fb ff10 	bl	8003554 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007758:	f023 0107 	bic.w	r1, r3, #7
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800776e:	4b0a      	ldr	r3, [pc, #40]	; (8007798 <HAL_DMA2D_Init+0x90>)
 8007770:	4013      	ands	r3, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	68d1      	ldr	r1, [r2, #12]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6812      	ldr	r2, [r2, #0]
 800777a:	430b      	orrs	r3, r1
 800777c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	ffffc000 	.word	0xffffc000

0800779c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d101      	bne.n	80077b8 <HAL_DMA2D_Start+0x1c>
 80077b4:	2302      	movs	r3, #2
 80077b6:	e018      	b.n	80077ea <HAL_DMA2D_Start+0x4e>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 fa98 	bl	8007d08 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0201 	orr.w	r2, r2, #1
 80077e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b086      	sub	sp, #24
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d056      	beq.n	80078bc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800780e:	f7fe fd59 	bl	80062c4 <HAL_GetTick>
 8007812:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007814:	e04b      	b.n	80078ae <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007824:	2b00      	cmp	r3, #0
 8007826:	d023      	beq.n	8007870 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f003 0320 	and.w	r3, r3, #32
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007836:	f043 0202 	orr.w	r2, r3, #2
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784c:	f043 0201 	orr.w	r2, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2221      	movs	r2, #33	; 0x21
 800785a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2204      	movs	r2, #4
 8007860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e0a5      	b.n	80079bc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007876:	d01a      	beq.n	80078ae <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007878:	f7fe fd24 	bl	80062c4 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	429a      	cmp	r2, r3
 8007886:	d302      	bcc.n	800788e <HAL_DMA2D_PollForTransfer+0x9c>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10f      	bne.n	80078ae <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007892:	f043 0220 	orr.w	r2, r3, #32
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2203      	movs	r2, #3
 800789e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e086      	b.n	80079bc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0ac      	beq.n	8007816 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	f003 0320 	and.w	r3, r3, #32
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d061      	beq.n	80079a2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80078de:	f7fe fcf1 	bl	80062c4 <HAL_GetTick>
 80078e2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80078e4:	e056      	b.n	8007994 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d02e      	beq.n	8007956 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f003 0308 	and.w	r3, r3, #8
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007906:	f043 0204 	orr.w	r2, r3, #4
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f003 0320 	and.w	r3, r3, #32
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791c:	f043 0202 	orr.w	r2, r3, #2
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007932:	f043 0201 	orr.w	r2, r3, #1
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2229      	movs	r2, #41	; 0x29
 8007940:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2204      	movs	r2, #4
 8007946:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e032      	b.n	80079bc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795c:	d01a      	beq.n	8007994 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800795e:	f7fe fcb1 	bl	80062c4 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	429a      	cmp	r2, r3
 800796c:	d302      	bcc.n	8007974 <HAL_DMA2D_PollForTransfer+0x182>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10f      	bne.n	8007994 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007978:	f043 0220 	orr.w	r2, r3, #32
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2203      	movs	r2, #3
 8007984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e013      	b.n	80079bc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f003 0310 	and.w	r3, r3, #16
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0a1      	beq.n	80078e6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2212      	movs	r2, #18
 80079a8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d026      	beq.n	8007a34 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d021      	beq.n	8007a34 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079fe:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a04:	f043 0201 	orr.w	r2, r3, #1
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2201      	movs	r2, #1
 8007a12:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2204      	movs	r2, #4
 8007a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d026      	beq.n	8007a8c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d021      	beq.n	8007a8c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a56:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a64:	f043 0202 	orr.w	r2, r3, #2
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2204      	movs	r2, #4
 8007a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f003 0308 	and.w	r3, r3, #8
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d026      	beq.n	8007ae4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d021      	beq.n	8007ae4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007aae:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2208      	movs	r2, #8
 8007ab6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abc:	f043 0204 	orr.w	r2, r3, #4
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2204      	movs	r2, #4
 8007ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f003 0304 	and.w	r3, r3, #4
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d013      	beq.n	8007b16 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00e      	beq.n	8007b16 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b06:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2204      	movs	r2, #4
 8007b0e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f853 	bl	8007bbc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d024      	beq.n	8007b6a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d01f      	beq.n	8007b6a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007b38:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d01f      	beq.n	8007bb4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d01a      	beq.n	8007bb4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b8c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2210      	movs	r2, #16
 8007b94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f80e 	bl	8007bd0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007bb4:	bf00      	nop
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_DMA2D_ConfigLayer+0x20>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e079      	b.n	8007cf8 <HAL_DMA2D_ConfigLayer+0x114>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	3318      	adds	r3, #24
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	041b      	lsls	r3, r3, #16
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007c2e:	4b35      	ldr	r3, [pc, #212]	; (8007d04 <HAL_DMA2D_ConfigLayer+0x120>)
 8007c30:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b0a      	cmp	r3, #10
 8007c38:	d003      	beq.n	8007c42 <HAL_DMA2D_ConfigLayer+0x5e>
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2b09      	cmp	r3, #9
 8007c40:	d107      	bne.n	8007c52 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	e005      	b.n	8007c5e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	061b      	lsls	r3, r3, #24
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d120      	bne.n	8007ca6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	ea02 0103 	and.w	r1, r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	6812      	ldr	r2, [r2, #0]
 8007c84:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b0a      	cmp	r3, #10
 8007c8c:	d003      	beq.n	8007c96 <HAL_DMA2D_ConfigLayer+0xb2>
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b09      	cmp	r3, #9
 8007c94:	d127      	bne.n	8007ce6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ca2:	629a      	str	r2, [r3, #40]	; 0x28
 8007ca4:	e01f      	b.n	8007ce6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69da      	ldr	r2, [r3, #28]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	43db      	mvns	r3, r3
 8007cb0:	ea02 0103 	and.w	r1, r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	6812      	ldr	r2, [r2, #0]
 8007cc6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	2b0a      	cmp	r3, #10
 8007cce:	d003      	beq.n	8007cd8 <HAL_DMA2D_ConfigLayer+0xf4>
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	2b09      	cmp	r3, #9
 8007cd6:	d106      	bne.n	8007ce6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ce4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	371c      	adds	r7, #28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	ff03000f 	.word	0xff03000f

08007d08 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b08b      	sub	sp, #44	; 0x2c
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	041a      	lsls	r2, r3, #16
 8007d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d26:	431a      	orrs	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d40:	d174      	bne.n	8007e2c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007d48:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d50:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d58:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d108      	bne.n	8007d7a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
 8007d78:	e053      	b.n	8007e22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d106      	bne.n	8007d90 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d8e:	e048      	b.n	8007e22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d111      	bne.n	8007dbc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	0cdb      	lsrs	r3, r3, #19
 8007d9c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	0a9b      	lsrs	r3, r3, #10
 8007da2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	08db      	lsrs	r3, r3, #3
 8007da8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	02db      	lsls	r3, r3, #11
 8007db2:	4313      	orrs	r3, r2
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
 8007dba:	e032      	b.n	8007e22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d117      	bne.n	8007df4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	0fdb      	lsrs	r3, r3, #31
 8007dc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	0cdb      	lsrs	r3, r3, #19
 8007dce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	0adb      	lsrs	r3, r3, #11
 8007dd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	08db      	lsrs	r3, r3, #3
 8007dda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	029b      	lsls	r3, r3, #10
 8007de4:	431a      	orrs	r2, r3
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	03db      	lsls	r3, r3, #15
 8007dea:	4313      	orrs	r3, r2
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24
 8007df2:	e016      	b.n	8007e22 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	0f1b      	lsrs	r3, r3, #28
 8007df8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	0d1b      	lsrs	r3, r3, #20
 8007dfe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	0b1b      	lsrs	r3, r3, #12
 8007e04:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	091b      	lsrs	r3, r3, #4
 8007e0a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	011a      	lsls	r2, r3, #4
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	021b      	lsls	r3, r3, #8
 8007e14:	431a      	orrs	r2, r3
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	031b      	lsls	r3, r3, #12
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e28:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007e2a:	e003      	b.n	8007e34 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	60da      	str	r2, [r3, #12]
}
 8007e34:	bf00      	nop
 8007e36:	372c      	adds	r7, #44	; 0x2c
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b089      	sub	sp, #36	; 0x24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007e52:	2300      	movs	r3, #0
 8007e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61fb      	str	r3, [r7, #28]
 8007e5e:	e175      	b.n	800814c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007e60:	2201      	movs	r2, #1
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	fa02 f303 	lsl.w	r3, r2, r3
 8007e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	4013      	ands	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	f040 8164 	bne.w	8008146 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d005      	beq.n	8007e96 <HAL_GPIO_Init+0x56>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d130      	bne.n	8007ef8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	2203      	movs	r2, #3
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	43db      	mvns	r3, r3
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ecc:	2201      	movs	r2, #1
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed4:	43db      	mvns	r3, r3
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	4013      	ands	r3, r2
 8007eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	091b      	lsrs	r3, r3, #4
 8007ee2:	f003 0201 	and.w	r2, r3, #1
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d017      	beq.n	8007f34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	2203      	movs	r2, #3
 8007f10:	fa02 f303 	lsl.w	r3, r2, r3
 8007f14:	43db      	mvns	r3, r3
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	fa02 f303 	lsl.w	r3, r2, r3
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d123      	bne.n	8007f88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	08da      	lsrs	r2, r3, #3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3208      	adds	r2, #8
 8007f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	f003 0307 	and.w	r3, r3, #7
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	220f      	movs	r2, #15
 8007f58:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5c:	43db      	mvns	r3, r3
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	4013      	ands	r3, r2
 8007f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	fa02 f303 	lsl.w	r3, r2, r3
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	08da      	lsrs	r2, r3, #3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3208      	adds	r2, #8
 8007f82:	69b9      	ldr	r1, [r7, #24]
 8007f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	2203      	movs	r2, #3
 8007f94:	fa02 f303 	lsl.w	r3, r2, r3
 8007f98:	43db      	mvns	r3, r3
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f003 0203 	and.w	r2, r3, #3
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 80be 	beq.w	8008146 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fca:	4b66      	ldr	r3, [pc, #408]	; (8008164 <HAL_GPIO_Init+0x324>)
 8007fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fce:	4a65      	ldr	r2, [pc, #404]	; (8008164 <HAL_GPIO_Init+0x324>)
 8007fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8007fd6:	4b63      	ldr	r3, [pc, #396]	; (8008164 <HAL_GPIO_Init+0x324>)
 8007fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007fe2:	4a61      	ldr	r2, [pc, #388]	; (8008168 <HAL_GPIO_Init+0x328>)
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	089b      	lsrs	r3, r3, #2
 8007fe8:	3302      	adds	r3, #2
 8007fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	220f      	movs	r2, #15
 8007ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffe:	43db      	mvns	r3, r3
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	4013      	ands	r3, r2
 8008004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a58      	ldr	r2, [pc, #352]	; (800816c <HAL_GPIO_Init+0x32c>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d037      	beq.n	800807e <HAL_GPIO_Init+0x23e>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a57      	ldr	r2, [pc, #348]	; (8008170 <HAL_GPIO_Init+0x330>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d031      	beq.n	800807a <HAL_GPIO_Init+0x23a>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a56      	ldr	r2, [pc, #344]	; (8008174 <HAL_GPIO_Init+0x334>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d02b      	beq.n	8008076 <HAL_GPIO_Init+0x236>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a55      	ldr	r2, [pc, #340]	; (8008178 <HAL_GPIO_Init+0x338>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d025      	beq.n	8008072 <HAL_GPIO_Init+0x232>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a54      	ldr	r2, [pc, #336]	; (800817c <HAL_GPIO_Init+0x33c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d01f      	beq.n	800806e <HAL_GPIO_Init+0x22e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a53      	ldr	r2, [pc, #332]	; (8008180 <HAL_GPIO_Init+0x340>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d019      	beq.n	800806a <HAL_GPIO_Init+0x22a>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a52      	ldr	r2, [pc, #328]	; (8008184 <HAL_GPIO_Init+0x344>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d013      	beq.n	8008066 <HAL_GPIO_Init+0x226>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a51      	ldr	r2, [pc, #324]	; (8008188 <HAL_GPIO_Init+0x348>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d00d      	beq.n	8008062 <HAL_GPIO_Init+0x222>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a50      	ldr	r2, [pc, #320]	; (800818c <HAL_GPIO_Init+0x34c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d007      	beq.n	800805e <HAL_GPIO_Init+0x21e>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a4f      	ldr	r2, [pc, #316]	; (8008190 <HAL_GPIO_Init+0x350>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d101      	bne.n	800805a <HAL_GPIO_Init+0x21a>
 8008056:	2309      	movs	r3, #9
 8008058:	e012      	b.n	8008080 <HAL_GPIO_Init+0x240>
 800805a:	230a      	movs	r3, #10
 800805c:	e010      	b.n	8008080 <HAL_GPIO_Init+0x240>
 800805e:	2308      	movs	r3, #8
 8008060:	e00e      	b.n	8008080 <HAL_GPIO_Init+0x240>
 8008062:	2307      	movs	r3, #7
 8008064:	e00c      	b.n	8008080 <HAL_GPIO_Init+0x240>
 8008066:	2306      	movs	r3, #6
 8008068:	e00a      	b.n	8008080 <HAL_GPIO_Init+0x240>
 800806a:	2305      	movs	r3, #5
 800806c:	e008      	b.n	8008080 <HAL_GPIO_Init+0x240>
 800806e:	2304      	movs	r3, #4
 8008070:	e006      	b.n	8008080 <HAL_GPIO_Init+0x240>
 8008072:	2303      	movs	r3, #3
 8008074:	e004      	b.n	8008080 <HAL_GPIO_Init+0x240>
 8008076:	2302      	movs	r3, #2
 8008078:	e002      	b.n	8008080 <HAL_GPIO_Init+0x240>
 800807a:	2301      	movs	r3, #1
 800807c:	e000      	b.n	8008080 <HAL_GPIO_Init+0x240>
 800807e:	2300      	movs	r3, #0
 8008080:	69fa      	ldr	r2, [r7, #28]
 8008082:	f002 0203 	and.w	r2, r2, #3
 8008086:	0092      	lsls	r2, r2, #2
 8008088:	4093      	lsls	r3, r2
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	4313      	orrs	r3, r2
 800808e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008090:	4935      	ldr	r1, [pc, #212]	; (8008168 <HAL_GPIO_Init+0x328>)
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	089b      	lsrs	r3, r3, #2
 8008096:	3302      	adds	r3, #2
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800809e:	4b3d      	ldr	r3, [pc, #244]	; (8008194 <HAL_GPIO_Init+0x354>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	43db      	mvns	r3, r3
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	4013      	ands	r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	4313      	orrs	r3, r2
 80080c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80080c2:	4a34      	ldr	r2, [pc, #208]	; (8008194 <HAL_GPIO_Init+0x354>)
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80080c8:	4b32      	ldr	r3, [pc, #200]	; (8008194 <HAL_GPIO_Init+0x354>)
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	43db      	mvns	r3, r3
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	4013      	ands	r3, r2
 80080d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080ec:	4a29      	ldr	r2, [pc, #164]	; (8008194 <HAL_GPIO_Init+0x354>)
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80080f2:	4b28      	ldr	r3, [pc, #160]	; (8008194 <HAL_GPIO_Init+0x354>)
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	43db      	mvns	r3, r3
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	4013      	ands	r3, r2
 8008100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008116:	4a1f      	ldr	r2, [pc, #124]	; (8008194 <HAL_GPIO_Init+0x354>)
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800811c:	4b1d      	ldr	r3, [pc, #116]	; (8008194 <HAL_GPIO_Init+0x354>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	43db      	mvns	r3, r3
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	4013      	ands	r3, r2
 800812a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008140:	4a14      	ldr	r2, [pc, #80]	; (8008194 <HAL_GPIO_Init+0x354>)
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	3301      	adds	r3, #1
 800814a:	61fb      	str	r3, [r7, #28]
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	2b0f      	cmp	r3, #15
 8008150:	f67f ae86 	bls.w	8007e60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop
 8008158:	3724      	adds	r7, #36	; 0x24
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	40023800 	.word	0x40023800
 8008168:	40013800 	.word	0x40013800
 800816c:	40020000 	.word	0x40020000
 8008170:	40020400 	.word	0x40020400
 8008174:	40020800 	.word	0x40020800
 8008178:	40020c00 	.word	0x40020c00
 800817c:	40021000 	.word	0x40021000
 8008180:	40021400 	.word	0x40021400
 8008184:	40021800 	.word	0x40021800
 8008188:	40021c00 	.word	0x40021c00
 800818c:	40022000 	.word	0x40022000
 8008190:	40022400 	.word	0x40022400
 8008194:	40013c00 	.word	0x40013c00

08008198 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80081a2:	2300      	movs	r3, #0
 80081a4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80081a6:	2300      	movs	r3, #0
 80081a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80081aa:	2300      	movs	r3, #0
 80081ac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80081ae:	2300      	movs	r3, #0
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	e0d9      	b.n	8008368 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80081b4:	2201      	movs	r2, #1
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	fa02 f303 	lsl.w	r3, r2, r3
 80081bc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	4013      	ands	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	f040 80c9 	bne.w	8008362 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80081d0:	4a6b      	ldr	r2, [pc, #428]	; (8008380 <HAL_GPIO_DeInit+0x1e8>)
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	089b      	lsrs	r3, r3, #2
 80081d6:	3302      	adds	r3, #2
 80081d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081dc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	220f      	movs	r2, #15
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	4013      	ands	r3, r2
 80081f0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a63      	ldr	r2, [pc, #396]	; (8008384 <HAL_GPIO_DeInit+0x1ec>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d037      	beq.n	800826a <HAL_GPIO_DeInit+0xd2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a62      	ldr	r2, [pc, #392]	; (8008388 <HAL_GPIO_DeInit+0x1f0>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d031      	beq.n	8008266 <HAL_GPIO_DeInit+0xce>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a61      	ldr	r2, [pc, #388]	; (800838c <HAL_GPIO_DeInit+0x1f4>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d02b      	beq.n	8008262 <HAL_GPIO_DeInit+0xca>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a60      	ldr	r2, [pc, #384]	; (8008390 <HAL_GPIO_DeInit+0x1f8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d025      	beq.n	800825e <HAL_GPIO_DeInit+0xc6>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a5f      	ldr	r2, [pc, #380]	; (8008394 <HAL_GPIO_DeInit+0x1fc>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d01f      	beq.n	800825a <HAL_GPIO_DeInit+0xc2>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a5e      	ldr	r2, [pc, #376]	; (8008398 <HAL_GPIO_DeInit+0x200>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d019      	beq.n	8008256 <HAL_GPIO_DeInit+0xbe>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a5d      	ldr	r2, [pc, #372]	; (800839c <HAL_GPIO_DeInit+0x204>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d013      	beq.n	8008252 <HAL_GPIO_DeInit+0xba>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a5c      	ldr	r2, [pc, #368]	; (80083a0 <HAL_GPIO_DeInit+0x208>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d00d      	beq.n	800824e <HAL_GPIO_DeInit+0xb6>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a5b      	ldr	r2, [pc, #364]	; (80083a4 <HAL_GPIO_DeInit+0x20c>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d007      	beq.n	800824a <HAL_GPIO_DeInit+0xb2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a5a      	ldr	r2, [pc, #360]	; (80083a8 <HAL_GPIO_DeInit+0x210>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d101      	bne.n	8008246 <HAL_GPIO_DeInit+0xae>
 8008242:	2309      	movs	r3, #9
 8008244:	e012      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 8008246:	230a      	movs	r3, #10
 8008248:	e010      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 800824a:	2308      	movs	r3, #8
 800824c:	e00e      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 800824e:	2307      	movs	r3, #7
 8008250:	e00c      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 8008252:	2306      	movs	r3, #6
 8008254:	e00a      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 8008256:	2305      	movs	r3, #5
 8008258:	e008      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 800825a:	2304      	movs	r3, #4
 800825c:	e006      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 800825e:	2303      	movs	r3, #3
 8008260:	e004      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 8008262:	2302      	movs	r3, #2
 8008264:	e002      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 800826a:	2300      	movs	r3, #0
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	f002 0203 	and.w	r2, r2, #3
 8008272:	0092      	lsls	r2, r2, #2
 8008274:	4093      	lsls	r3, r2
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	429a      	cmp	r2, r3
 800827a:	d132      	bne.n	80082e2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800827c:	4b4b      	ldr	r3, [pc, #300]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	43db      	mvns	r3, r3
 8008284:	4949      	ldr	r1, [pc, #292]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 8008286:	4013      	ands	r3, r2
 8008288:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800828a:	4b48      	ldr	r3, [pc, #288]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	43db      	mvns	r3, r3
 8008292:	4946      	ldr	r1, [pc, #280]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 8008294:	4013      	ands	r3, r2
 8008296:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008298:	4b44      	ldr	r3, [pc, #272]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	43db      	mvns	r3, r3
 80082a0:	4942      	ldr	r1, [pc, #264]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 80082a2:	4013      	ands	r3, r2
 80082a4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80082a6:	4b41      	ldr	r3, [pc, #260]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 80082a8:	689a      	ldr	r2, [r3, #8]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	43db      	mvns	r3, r3
 80082ae:	493f      	ldr	r1, [pc, #252]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 80082b0:	4013      	ands	r3, r2
 80082b2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	220f      	movs	r2, #15
 80082be:	fa02 f303 	lsl.w	r3, r2, r3
 80082c2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80082c4:	4a2e      	ldr	r2, [pc, #184]	; (8008380 <HAL_GPIO_DeInit+0x1e8>)
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	089b      	lsrs	r3, r3, #2
 80082ca:	3302      	adds	r3, #2
 80082cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	43da      	mvns	r2, r3
 80082d4:	482a      	ldr	r0, [pc, #168]	; (8008380 <HAL_GPIO_DeInit+0x1e8>)
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	089b      	lsrs	r3, r3, #2
 80082da:	400a      	ands	r2, r1
 80082dc:	3302      	adds	r3, #2
 80082de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	2103      	movs	r1, #3
 80082ec:	fa01 f303 	lsl.w	r3, r1, r3
 80082f0:	43db      	mvns	r3, r3
 80082f2:	401a      	ands	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	08da      	lsrs	r2, r3, #3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3208      	adds	r2, #8
 8008300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f003 0307 	and.w	r3, r3, #7
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	220f      	movs	r2, #15
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	43db      	mvns	r3, r3
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	08d2      	lsrs	r2, r2, #3
 8008318:	4019      	ands	r1, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3208      	adds	r2, #8
 800831e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68da      	ldr	r2, [r3, #12]
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	2103      	movs	r1, #3
 800832c:	fa01 f303 	lsl.w	r3, r1, r3
 8008330:	43db      	mvns	r3, r3
 8008332:	401a      	ands	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	2101      	movs	r1, #1
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	fa01 f303 	lsl.w	r3, r1, r3
 8008344:	43db      	mvns	r3, r3
 8008346:	401a      	ands	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	2103      	movs	r1, #3
 8008356:	fa01 f303 	lsl.w	r3, r1, r3
 800835a:	43db      	mvns	r3, r3
 800835c:	401a      	ands	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	3301      	adds	r3, #1
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2b0f      	cmp	r3, #15
 800836c:	f67f af22 	bls.w	80081b4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008370:	bf00      	nop
 8008372:	bf00      	nop
 8008374:	371c      	adds	r7, #28
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	40013800 	.word	0x40013800
 8008384:	40020000 	.word	0x40020000
 8008388:	40020400 	.word	0x40020400
 800838c:	40020800 	.word	0x40020800
 8008390:	40020c00 	.word	0x40020c00
 8008394:	40021000 	.word	0x40021000
 8008398:	40021400 	.word	0x40021400
 800839c:	40021800 	.word	0x40021800
 80083a0:	40021c00 	.word	0x40021c00
 80083a4:	40022000 	.word	0x40022000
 80083a8:	40022400 	.word	0x40022400
 80083ac:	40013c00 	.word	0x40013c00

080083b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	691a      	ldr	r2, [r3, #16]
 80083c0:	887b      	ldrh	r3, [r7, #2]
 80083c2:	4013      	ands	r3, r2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80083c8:	2301      	movs	r3, #1
 80083ca:	73fb      	strb	r3, [r7, #15]
 80083cc:	e001      	b.n	80083d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	807b      	strh	r3, [r7, #2]
 80083ec:	4613      	mov	r3, r2
 80083ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80083f0:	787b      	ldrb	r3, [r7, #1]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80083f6:	887a      	ldrh	r2, [r7, #2]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80083fc:	e003      	b.n	8008406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80083fe:	887b      	ldrh	r3, [r7, #2]
 8008400:	041a      	lsls	r2, r3, #16
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	619a      	str	r2, [r3, #24]
}
 8008406:	bf00      	nop
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008424:	887a      	ldrh	r2, [r7, #2]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4013      	ands	r3, r2
 800842a:	041a      	lsls	r2, r3, #16
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	43d9      	mvns	r1, r3
 8008430:	887b      	ldrh	r3, [r7, #2]
 8008432:	400b      	ands	r3, r1
 8008434:	431a      	orrs	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	619a      	str	r2, [r3, #24]
}
 800843a:	bf00      	nop
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
	...

08008448 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	4603      	mov	r3, r0
 8008450:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008452:	4b08      	ldr	r3, [pc, #32]	; (8008474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008454:	695a      	ldr	r2, [r3, #20]
 8008456:	88fb      	ldrh	r3, [r7, #6]
 8008458:	4013      	ands	r3, r2
 800845a:	2b00      	cmp	r3, #0
 800845c:	d006      	beq.n	800846c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800845e:	4a05      	ldr	r2, [pc, #20]	; (8008474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008460:	88fb      	ldrh	r3, [r7, #6]
 8008462:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 f806 	bl	8008478 <HAL_GPIO_EXTI_Callback>
  }
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	40013c00 	.word	0x40013c00

08008478 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800848e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008490:	b08f      	sub	sp, #60	; 0x3c
 8008492:	af0a      	add	r7, sp, #40	; 0x28
 8008494:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e054      	b.n	800854a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d106      	bne.n	80084c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f010 f868 	bl	8018590 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2203      	movs	r2, #3
 80084c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d102      	bne.n	80084da <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4618      	mov	r0, r3
 80084e0:	f009 fda9 	bl	8012036 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	603b      	str	r3, [r7, #0]
 80084ea:	687e      	ldr	r6, [r7, #4]
 80084ec:	466d      	mov	r5, sp
 80084ee:	f106 0410 	add.w	r4, r6, #16
 80084f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80084fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8008502:	1d33      	adds	r3, r6, #4
 8008504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008506:	6838      	ldr	r0, [r7, #0]
 8008508:	f009 fd2c 	bl	8011f64 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2101      	movs	r1, #1
 8008512:	4618      	mov	r0, r3
 8008514:	f009 fda0 	bl	8012058 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	603b      	str	r3, [r7, #0]
 800851e:	687e      	ldr	r6, [r7, #4]
 8008520:	466d      	mov	r5, sp
 8008522:	f106 0410 	add.w	r4, r6, #16
 8008526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800852a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800852c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800852e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008532:	e885 0003 	stmia.w	r5, {r0, r1}
 8008536:	1d33      	adds	r3, r6, #4
 8008538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800853a:	6838      	ldr	r0, [r7, #0]
 800853c:	f009 ff48 	bl	80123d0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008552 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008552:	b590      	push	{r4, r7, lr}
 8008554:	b089      	sub	sp, #36	; 0x24
 8008556:	af04      	add	r7, sp, #16
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	4608      	mov	r0, r1
 800855c:	4611      	mov	r1, r2
 800855e:	461a      	mov	r2, r3
 8008560:	4603      	mov	r3, r0
 8008562:	70fb      	strb	r3, [r7, #3]
 8008564:	460b      	mov	r3, r1
 8008566:	70bb      	strb	r3, [r7, #2]
 8008568:	4613      	mov	r3, r2
 800856a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008572:	2b01      	cmp	r3, #1
 8008574:	d101      	bne.n	800857a <HAL_HCD_HC_Init+0x28>
 8008576:	2302      	movs	r3, #2
 8008578:	e076      	b.n	8008668 <HAL_HCD_HC_Init+0x116>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	212c      	movs	r1, #44	; 0x2c
 8008588:	fb01 f303 	mul.w	r3, r1, r3
 800858c:	4413      	add	r3, r2
 800858e:	333d      	adds	r3, #61	; 0x3d
 8008590:	2200      	movs	r2, #0
 8008592:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	212c      	movs	r1, #44	; 0x2c
 800859a:	fb01 f303 	mul.w	r3, r1, r3
 800859e:	4413      	add	r3, r2
 80085a0:	3338      	adds	r3, #56	; 0x38
 80085a2:	787a      	ldrb	r2, [r7, #1]
 80085a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	212c      	movs	r1, #44	; 0x2c
 80085ac:	fb01 f303 	mul.w	r3, r1, r3
 80085b0:	4413      	add	r3, r2
 80085b2:	3340      	adds	r3, #64	; 0x40
 80085b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80085b6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80085b8:	78fb      	ldrb	r3, [r7, #3]
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	212c      	movs	r1, #44	; 0x2c
 80085be:	fb01 f303 	mul.w	r3, r1, r3
 80085c2:	4413      	add	r3, r2
 80085c4:	3339      	adds	r3, #57	; 0x39
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80085ca:	78fb      	ldrb	r3, [r7, #3]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	212c      	movs	r1, #44	; 0x2c
 80085d0:	fb01 f303 	mul.w	r3, r1, r3
 80085d4:	4413      	add	r3, r2
 80085d6:	333f      	adds	r3, #63	; 0x3f
 80085d8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80085dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	78ba      	ldrb	r2, [r7, #2]
 80085e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80085e6:	b2d0      	uxtb	r0, r2
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	212c      	movs	r1, #44	; 0x2c
 80085ec:	fb01 f303 	mul.w	r3, r1, r3
 80085f0:	4413      	add	r3, r2
 80085f2:	333a      	adds	r3, #58	; 0x3a
 80085f4:	4602      	mov	r2, r0
 80085f6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80085f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	da09      	bge.n	8008614 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	212c      	movs	r1, #44	; 0x2c
 8008606:	fb01 f303 	mul.w	r3, r1, r3
 800860a:	4413      	add	r3, r2
 800860c:	333b      	adds	r3, #59	; 0x3b
 800860e:	2201      	movs	r2, #1
 8008610:	701a      	strb	r2, [r3, #0]
 8008612:	e008      	b.n	8008626 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	212c      	movs	r1, #44	; 0x2c
 800861a:	fb01 f303 	mul.w	r3, r1, r3
 800861e:	4413      	add	r3, r2
 8008620:	333b      	adds	r3, #59	; 0x3b
 8008622:	2200      	movs	r2, #0
 8008624:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8008626:	78fb      	ldrb	r3, [r7, #3]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	212c      	movs	r1, #44	; 0x2c
 800862c:	fb01 f303 	mul.w	r3, r1, r3
 8008630:	4413      	add	r3, r2
 8008632:	333c      	adds	r3, #60	; 0x3c
 8008634:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008638:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	787c      	ldrb	r4, [r7, #1]
 8008640:	78ba      	ldrb	r2, [r7, #2]
 8008642:	78f9      	ldrb	r1, [r7, #3]
 8008644:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008646:	9302      	str	r3, [sp, #8]
 8008648:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800864c:	9301      	str	r3, [sp, #4]
 800864e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	4623      	mov	r3, r4
 8008656:	f00a f835 	bl	80126c4 <USB_HC_Init>
 800865a:	4603      	mov	r3, r0
 800865c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8008666:	7bfb      	ldrb	r3, [r7, #15]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	bd90      	pop	{r4, r7, pc}

08008670 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008686:	2b01      	cmp	r3, #1
 8008688:	d101      	bne.n	800868e <HAL_HCD_HC_Halt+0x1e>
 800868a:	2302      	movs	r3, #2
 800868c:	e00f      	b.n	80086ae <HAL_HCD_HC_Halt+0x3e>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	4611      	mov	r1, r2
 800869e:	4618      	mov	r0, r3
 80086a0:	f00a fa85 	bl	8012bae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	4608      	mov	r0, r1
 80086c2:	4611      	mov	r1, r2
 80086c4:	461a      	mov	r2, r3
 80086c6:	4603      	mov	r3, r0
 80086c8:	70fb      	strb	r3, [r7, #3]
 80086ca:	460b      	mov	r3, r1
 80086cc:	70bb      	strb	r3, [r7, #2]
 80086ce:	4613      	mov	r3, r2
 80086d0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	212c      	movs	r1, #44	; 0x2c
 80086d8:	fb01 f303 	mul.w	r3, r1, r3
 80086dc:	4413      	add	r3, r2
 80086de:	333b      	adds	r3, #59	; 0x3b
 80086e0:	78ba      	ldrb	r2, [r7, #2]
 80086e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80086e4:	78fb      	ldrb	r3, [r7, #3]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	212c      	movs	r1, #44	; 0x2c
 80086ea:	fb01 f303 	mul.w	r3, r1, r3
 80086ee:	4413      	add	r3, r2
 80086f0:	333f      	adds	r3, #63	; 0x3f
 80086f2:	787a      	ldrb	r2, [r7, #1]
 80086f4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80086f6:	7c3b      	ldrb	r3, [r7, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d112      	bne.n	8008722 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80086fc:	78fb      	ldrb	r3, [r7, #3]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	212c      	movs	r1, #44	; 0x2c
 8008702:	fb01 f303 	mul.w	r3, r1, r3
 8008706:	4413      	add	r3, r2
 8008708:	3342      	adds	r3, #66	; 0x42
 800870a:	2203      	movs	r2, #3
 800870c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800870e:	78fb      	ldrb	r3, [r7, #3]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	212c      	movs	r1, #44	; 0x2c
 8008714:	fb01 f303 	mul.w	r3, r1, r3
 8008718:	4413      	add	r3, r2
 800871a:	333d      	adds	r3, #61	; 0x3d
 800871c:	7f3a      	ldrb	r2, [r7, #28]
 800871e:	701a      	strb	r2, [r3, #0]
 8008720:	e008      	b.n	8008734 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008722:	78fb      	ldrb	r3, [r7, #3]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	212c      	movs	r1, #44	; 0x2c
 8008728:	fb01 f303 	mul.w	r3, r1, r3
 800872c:	4413      	add	r3, r2
 800872e:	3342      	adds	r3, #66	; 0x42
 8008730:	2202      	movs	r2, #2
 8008732:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8008734:	787b      	ldrb	r3, [r7, #1]
 8008736:	2b03      	cmp	r3, #3
 8008738:	f200 80c6 	bhi.w	80088c8 <HAL_HCD_HC_SubmitRequest+0x210>
 800873c:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800873e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008742:	bf00      	nop
 8008744:	08008755 	.word	0x08008755
 8008748:	080088b5 	.word	0x080088b5
 800874c:	080087b9 	.word	0x080087b9
 8008750:	08008837 	.word	0x08008837
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8008754:	7c3b      	ldrb	r3, [r7, #16]
 8008756:	2b01      	cmp	r3, #1
 8008758:	f040 80b8 	bne.w	80088cc <HAL_HCD_HC_SubmitRequest+0x214>
 800875c:	78bb      	ldrb	r3, [r7, #2]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f040 80b4 	bne.w	80088cc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8008764:	8b3b      	ldrh	r3, [r7, #24]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d108      	bne.n	800877c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	212c      	movs	r1, #44	; 0x2c
 8008770:	fb01 f303 	mul.w	r3, r1, r3
 8008774:	4413      	add	r3, r2
 8008776:	3355      	adds	r3, #85	; 0x55
 8008778:	2201      	movs	r2, #1
 800877a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800877c:	78fb      	ldrb	r3, [r7, #3]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	212c      	movs	r1, #44	; 0x2c
 8008782:	fb01 f303 	mul.w	r3, r1, r3
 8008786:	4413      	add	r3, r2
 8008788:	3355      	adds	r3, #85	; 0x55
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d109      	bne.n	80087a4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	212c      	movs	r1, #44	; 0x2c
 8008796:	fb01 f303 	mul.w	r3, r1, r3
 800879a:	4413      	add	r3, r2
 800879c:	3342      	adds	r3, #66	; 0x42
 800879e:	2200      	movs	r2, #0
 80087a0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80087a2:	e093      	b.n	80088cc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	212c      	movs	r1, #44	; 0x2c
 80087aa:	fb01 f303 	mul.w	r3, r1, r3
 80087ae:	4413      	add	r3, r2
 80087b0:	3342      	adds	r3, #66	; 0x42
 80087b2:	2202      	movs	r2, #2
 80087b4:	701a      	strb	r2, [r3, #0]
      break;
 80087b6:	e089      	b.n	80088cc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80087b8:	78bb      	ldrb	r3, [r7, #2]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d11d      	bne.n	80087fa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80087be:	78fb      	ldrb	r3, [r7, #3]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	212c      	movs	r1, #44	; 0x2c
 80087c4:	fb01 f303 	mul.w	r3, r1, r3
 80087c8:	4413      	add	r3, r2
 80087ca:	3355      	adds	r3, #85	; 0x55
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d109      	bne.n	80087e6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80087d2:	78fb      	ldrb	r3, [r7, #3]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	212c      	movs	r1, #44	; 0x2c
 80087d8:	fb01 f303 	mul.w	r3, r1, r3
 80087dc:	4413      	add	r3, r2
 80087de:	3342      	adds	r3, #66	; 0x42
 80087e0:	2200      	movs	r2, #0
 80087e2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80087e4:	e073      	b.n	80088ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80087e6:	78fb      	ldrb	r3, [r7, #3]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	212c      	movs	r1, #44	; 0x2c
 80087ec:	fb01 f303 	mul.w	r3, r1, r3
 80087f0:	4413      	add	r3, r2
 80087f2:	3342      	adds	r3, #66	; 0x42
 80087f4:	2202      	movs	r2, #2
 80087f6:	701a      	strb	r2, [r3, #0]
      break;
 80087f8:	e069      	b.n	80088ce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	212c      	movs	r1, #44	; 0x2c
 8008800:	fb01 f303 	mul.w	r3, r1, r3
 8008804:	4413      	add	r3, r2
 8008806:	3354      	adds	r3, #84	; 0x54
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800880e:	78fb      	ldrb	r3, [r7, #3]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	212c      	movs	r1, #44	; 0x2c
 8008814:	fb01 f303 	mul.w	r3, r1, r3
 8008818:	4413      	add	r3, r2
 800881a:	3342      	adds	r3, #66	; 0x42
 800881c:	2200      	movs	r2, #0
 800881e:	701a      	strb	r2, [r3, #0]
      break;
 8008820:	e055      	b.n	80088ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	212c      	movs	r1, #44	; 0x2c
 8008828:	fb01 f303 	mul.w	r3, r1, r3
 800882c:	4413      	add	r3, r2
 800882e:	3342      	adds	r3, #66	; 0x42
 8008830:	2202      	movs	r2, #2
 8008832:	701a      	strb	r2, [r3, #0]
      break;
 8008834:	e04b      	b.n	80088ce <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8008836:	78bb      	ldrb	r3, [r7, #2]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d11d      	bne.n	8008878 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	212c      	movs	r1, #44	; 0x2c
 8008842:	fb01 f303 	mul.w	r3, r1, r3
 8008846:	4413      	add	r3, r2
 8008848:	3355      	adds	r3, #85	; 0x55
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d109      	bne.n	8008864 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	212c      	movs	r1, #44	; 0x2c
 8008856:	fb01 f303 	mul.w	r3, r1, r3
 800885a:	4413      	add	r3, r2
 800885c:	3342      	adds	r3, #66	; 0x42
 800885e:	2200      	movs	r2, #0
 8008860:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8008862:	e034      	b.n	80088ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008864:	78fb      	ldrb	r3, [r7, #3]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	212c      	movs	r1, #44	; 0x2c
 800886a:	fb01 f303 	mul.w	r3, r1, r3
 800886e:	4413      	add	r3, r2
 8008870:	3342      	adds	r3, #66	; 0x42
 8008872:	2202      	movs	r2, #2
 8008874:	701a      	strb	r2, [r3, #0]
      break;
 8008876:	e02a      	b.n	80088ce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	212c      	movs	r1, #44	; 0x2c
 800887e:	fb01 f303 	mul.w	r3, r1, r3
 8008882:	4413      	add	r3, r2
 8008884:	3354      	adds	r3, #84	; 0x54
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d109      	bne.n	80088a0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800888c:	78fb      	ldrb	r3, [r7, #3]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	212c      	movs	r1, #44	; 0x2c
 8008892:	fb01 f303 	mul.w	r3, r1, r3
 8008896:	4413      	add	r3, r2
 8008898:	3342      	adds	r3, #66	; 0x42
 800889a:	2200      	movs	r2, #0
 800889c:	701a      	strb	r2, [r3, #0]
      break;
 800889e:	e016      	b.n	80088ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80088a0:	78fb      	ldrb	r3, [r7, #3]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	212c      	movs	r1, #44	; 0x2c
 80088a6:	fb01 f303 	mul.w	r3, r1, r3
 80088aa:	4413      	add	r3, r2
 80088ac:	3342      	adds	r3, #66	; 0x42
 80088ae:	2202      	movs	r2, #2
 80088b0:	701a      	strb	r2, [r3, #0]
      break;
 80088b2:	e00c      	b.n	80088ce <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80088b4:	78fb      	ldrb	r3, [r7, #3]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	212c      	movs	r1, #44	; 0x2c
 80088ba:	fb01 f303 	mul.w	r3, r1, r3
 80088be:	4413      	add	r3, r2
 80088c0:	3342      	adds	r3, #66	; 0x42
 80088c2:	2200      	movs	r2, #0
 80088c4:	701a      	strb	r2, [r3, #0]
      break;
 80088c6:	e002      	b.n	80088ce <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80088c8:	bf00      	nop
 80088ca:	e000      	b.n	80088ce <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80088cc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80088ce:	78fb      	ldrb	r3, [r7, #3]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	212c      	movs	r1, #44	; 0x2c
 80088d4:	fb01 f303 	mul.w	r3, r1, r3
 80088d8:	4413      	add	r3, r2
 80088da:	3344      	adds	r3, #68	; 0x44
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	8b3a      	ldrh	r2, [r7, #24]
 80088e4:	6879      	ldr	r1, [r7, #4]
 80088e6:	202c      	movs	r0, #44	; 0x2c
 80088e8:	fb00 f303 	mul.w	r3, r0, r3
 80088ec:	440b      	add	r3, r1
 80088ee:	334c      	adds	r3, #76	; 0x4c
 80088f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80088f2:	78fb      	ldrb	r3, [r7, #3]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	212c      	movs	r1, #44	; 0x2c
 80088f8:	fb01 f303 	mul.w	r3, r1, r3
 80088fc:	4413      	add	r3, r2
 80088fe:	3360      	adds	r3, #96	; 0x60
 8008900:	2200      	movs	r2, #0
 8008902:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	212c      	movs	r1, #44	; 0x2c
 800890a:	fb01 f303 	mul.w	r3, r1, r3
 800890e:	4413      	add	r3, r2
 8008910:	3350      	adds	r3, #80	; 0x50
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8008916:	78fb      	ldrb	r3, [r7, #3]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	212c      	movs	r1, #44	; 0x2c
 800891c:	fb01 f303 	mul.w	r3, r1, r3
 8008920:	4413      	add	r3, r2
 8008922:	3339      	adds	r3, #57	; 0x39
 8008924:	78fa      	ldrb	r2, [r7, #3]
 8008926:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8008928:	78fb      	ldrb	r3, [r7, #3]
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	212c      	movs	r1, #44	; 0x2c
 800892e:	fb01 f303 	mul.w	r3, r1, r3
 8008932:	4413      	add	r3, r2
 8008934:	3361      	adds	r3, #97	; 0x61
 8008936:	2200      	movs	r2, #0
 8008938:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	78fb      	ldrb	r3, [r7, #3]
 8008940:	222c      	movs	r2, #44	; 0x2c
 8008942:	fb02 f303 	mul.w	r3, r2, r3
 8008946:	3338      	adds	r3, #56	; 0x38
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	18d1      	adds	r1, r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	b2db      	uxtb	r3, r3
 8008952:	461a      	mov	r2, r3
 8008954:	f009 ffd8 	bl	8012908 <USB_HC_StartXfer>
 8008958:	4603      	mov	r3, r0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop

08008964 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4618      	mov	r0, r3
 800897c:	f009 fce6 	bl	801234c <USB_GetMode>
 8008980:	4603      	mov	r3, r0
 8008982:	2b01      	cmp	r3, #1
 8008984:	f040 80f6 	bne.w	8008b74 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4618      	mov	r0, r3
 800898e:	f009 fca9 	bl	80122e4 <USB_ReadInterrupts>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 80ec 	beq.w	8008b72 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f009 fca0 	bl	80122e4 <USB_ReadInterrupts>
 80089a4:	4603      	mov	r3, r0
 80089a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089ae:	d104      	bne.n	80089ba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80089b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f009 fc90 	bl	80122e4 <USB_ReadInterrupts>
 80089c4:	4603      	mov	r3, r0
 80089c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089ce:	d104      	bne.n	80089da <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4618      	mov	r0, r3
 80089e0:	f009 fc80 	bl	80122e4 <USB_ReadInterrupts>
 80089e4:	4603      	mov	r3, r0
 80089e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089ee:	d104      	bne.n	80089fa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80089f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f009 fc70 	bl	80122e4 <USB_ReadInterrupts>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d103      	bne.n	8008a16 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2202      	movs	r2, #2
 8008a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f009 fc62 	bl	80122e4 <USB_ReadInterrupts>
 8008a20:	4603      	mov	r3, r0
 8008a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a2a:	d11c      	bne.n	8008a66 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008a34:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10f      	bne.n	8008a66 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8008a46:	2110      	movs	r1, #16
 8008a48:	6938      	ldr	r0, [r7, #16]
 8008a4a:	f009 fb51 	bl	80120f0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8008a4e:	6938      	ldr	r0, [r7, #16]
 8008a50:	f009 fb82 	bl	8012158 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2101      	movs	r1, #1
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f009 fd6c 	bl	8012538 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f00f fe07 	bl	8018674 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f009 fc3a 	bl	80122e4 <USB_ReadInterrupts>
 8008a70:	4603      	mov	r3, r0
 8008a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a7a:	d102      	bne.n	8008a82 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f001 f9ce 	bl	8009e1e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f009 fc2c 	bl	80122e4 <USB_ReadInterrupts>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	f003 0308 	and.w	r3, r3, #8
 8008a92:	2b08      	cmp	r3, #8
 8008a94:	d106      	bne.n	8008aa4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f00f fdd0 	bl	801863c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2208      	movs	r2, #8
 8008aa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f009 fc1b 	bl	80122e4 <USB_ReadInterrupts>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2b10      	cmp	r3, #16
 8008ab6:	d101      	bne.n	8008abc <HAL_HCD_IRQHandler+0x158>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e000      	b.n	8008abe <HAL_HCD_IRQHandler+0x15a>
 8008abc:	2300      	movs	r3, #0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d012      	beq.n	8008ae8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	699a      	ldr	r2, [r3, #24]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f022 0210 	bic.w	r2, r2, #16
 8008ad0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f001 f8d1 	bl	8009c7a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	699a      	ldr	r2, [r3, #24]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f042 0210 	orr.w	r2, r2, #16
 8008ae6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f009 fbf9 	bl	80122e4 <USB_ReadInterrupts>
 8008af2:	4603      	mov	r3, r0
 8008af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008af8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008afc:	d13a      	bne.n	8008b74 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f00a f842 	bl	8012b8c <USB_HC_ReadInterrupt>
 8008b08:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	617b      	str	r3, [r7, #20]
 8008b0e:	e025      	b.n	8008b5c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f003 030f 	and.w	r3, r3, #15
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	fa22 f303 	lsr.w	r3, r2, r3
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d018      	beq.n	8008b56 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b3a:	d106      	bne.n	8008b4a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f8ab 	bl	8008c9e <HCD_HC_IN_IRQHandler>
 8008b48:	e005      	b.n	8008b56 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fcc6 	bl	80094e2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d3d4      	bcc.n	8008b10 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008b6e:	615a      	str	r2, [r3, #20]
 8008b70:	e000      	b.n	8008b74 <HAL_HCD_IRQHandler+0x210>
      return;
 8008b72:	bf00      	nop
    }
  }
}
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d101      	bne.n	8008b90 <HAL_HCD_Start+0x16>
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e013      	b.n	8008bb8 <HAL_HCD_Start+0x3e>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f009 fd2e 	bl	8012600 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f009 fa33 	bl	8012014 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d101      	bne.n	8008bd6 <HAL_HCD_Stop+0x16>
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	e00d      	b.n	8008bf2 <HAL_HCD_Stop+0x32>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f00a f91c 	bl	8012e20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b082      	sub	sp, #8
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f009 fcd0 	bl	80125ac <USB_ResetPort>
 8008c0c:	4603      	mov	r3, r0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b083      	sub	sp, #12
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8008c22:	78fb      	ldrb	r3, [r7, #3]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	212c      	movs	r1, #44	; 0x2c
 8008c28:	fb01 f303 	mul.w	r3, r1, r3
 8008c2c:	4413      	add	r3, r2
 8008c2e:	3360      	adds	r3, #96	; 0x60
 8008c30:	781b      	ldrb	r3, [r3, #0]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b083      	sub	sp, #12
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8008c4a:	78fb      	ldrb	r3, [r7, #3]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	212c      	movs	r1, #44	; 0x2c
 8008c50:	fb01 f303 	mul.w	r3, r1, r3
 8008c54:	4413      	add	r3, r2
 8008c56:	3350      	adds	r3, #80	; 0x50
 8008c58:	681b      	ldr	r3, [r3, #0]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f009 fd14 	bl	80126a0 <USB_GetCurrentFrame>
 8008c78:	4603      	mov	r3, r0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b082      	sub	sp, #8
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f009 fcef 	bl	8012672 <USB_GetHostSpeed>
 8008c94:	4603      	mov	r3, r0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b086      	sub	sp, #24
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8008cb4:	78fb      	ldrb	r3, [r7, #3]
 8008cb6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	b2d2      	uxtb	r2, r2
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f009 fb21 	bl	801230a <USB_ReadChInterrupts>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	f003 0304 	and.w	r3, r3, #4
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d11a      	bne.n	8008d08 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cde:	461a      	mov	r2, r3
 8008ce0:	2304      	movs	r3, #4
 8008ce2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	212c      	movs	r1, #44	; 0x2c
 8008cea:	fb01 f303 	mul.w	r3, r1, r3
 8008cee:	4413      	add	r3, r2
 8008cf0:	3361      	adds	r3, #97	; 0x61
 8008cf2:	2207      	movs	r2, #7
 8008cf4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	b2d2      	uxtb	r2, r2
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f009 ff54 	bl	8012bae <USB_HC_Halt>
 8008d06:	e0a2      	b.n	8008e4e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	4611      	mov	r1, r2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f009 faf9 	bl	801230a <USB_ReadChInterrupts>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d22:	d11b      	bne.n	8008d5c <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d30:	461a      	mov	r2, r3
 8008d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	212c      	movs	r1, #44	; 0x2c
 8008d3e:	fb01 f303 	mul.w	r3, r1, r3
 8008d42:	4413      	add	r3, r2
 8008d44:	3361      	adds	r3, #97	; 0x61
 8008d46:	2208      	movs	r2, #8
 8008d48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	b2d2      	uxtb	r2, r2
 8008d52:	4611      	mov	r1, r2
 8008d54:	4618      	mov	r0, r3
 8008d56:	f009 ff2a 	bl	8012bae <USB_HC_Halt>
 8008d5a:	e078      	b.n	8008e4e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	b2d2      	uxtb	r2, r2
 8008d64:	4611      	mov	r1, r2
 8008d66:	4618      	mov	r0, r3
 8008d68:	f009 facf 	bl	801230a <USB_ReadChInterrupts>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f003 0308 	and.w	r3, r3, #8
 8008d72:	2b08      	cmp	r3, #8
 8008d74:	d11a      	bne.n	8008dac <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	015a      	lsls	r2, r3, #5
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d82:	461a      	mov	r2, r3
 8008d84:	2308      	movs	r3, #8
 8008d86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	212c      	movs	r1, #44	; 0x2c
 8008d8e:	fb01 f303 	mul.w	r3, r1, r3
 8008d92:	4413      	add	r3, r2
 8008d94:	3361      	adds	r3, #97	; 0x61
 8008d96:	2206      	movs	r2, #6
 8008d98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	4611      	mov	r1, r2
 8008da4:	4618      	mov	r0, r3
 8008da6:	f009 ff02 	bl	8012bae <USB_HC_Halt>
 8008daa:	e050      	b.n	8008e4e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	b2d2      	uxtb	r2, r2
 8008db4:	4611      	mov	r1, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f009 faa7 	bl	801230a <USB_ReadChInterrupts>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc6:	d11b      	bne.n	8008e00 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	212c      	movs	r1, #44	; 0x2c
 8008de2:	fb01 f303 	mul.w	r3, r1, r3
 8008de6:	4413      	add	r3, r2
 8008de8:	3361      	adds	r3, #97	; 0x61
 8008dea:	2209      	movs	r2, #9
 8008dec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	b2d2      	uxtb	r2, r2
 8008df6:	4611      	mov	r1, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f009 fed8 	bl	8012bae <USB_HC_Halt>
 8008dfe:	e026      	b.n	8008e4e <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	b2d2      	uxtb	r2, r2
 8008e08:	4611      	mov	r1, r2
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f009 fa7d 	bl	801230a <USB_ReadChInterrupts>
 8008e10:	4603      	mov	r3, r0
 8008e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e16:	2b80      	cmp	r3, #128	; 0x80
 8008e18:	d119      	bne.n	8008e4e <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e26:	461a      	mov	r2, r3
 8008e28:	2380      	movs	r3, #128	; 0x80
 8008e2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	212c      	movs	r1, #44	; 0x2c
 8008e32:	fb01 f303 	mul.w	r3, r1, r3
 8008e36:	4413      	add	r3, r2
 8008e38:	3361      	adds	r3, #97	; 0x61
 8008e3a:	2207      	movs	r2, #7
 8008e3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	b2d2      	uxtb	r2, r2
 8008e46:	4611      	mov	r1, r2
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f009 feb0 	bl	8012bae <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	b2d2      	uxtb	r2, r2
 8008e56:	4611      	mov	r1, r2
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f009 fa56 	bl	801230a <USB_ReadChInterrupts>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e68:	d112      	bne.n	8008e90 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	b2d2      	uxtb	r2, r2
 8008e72:	4611      	mov	r1, r2
 8008e74:	4618      	mov	r0, r3
 8008e76:	f009 fe9a 	bl	8012bae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e86:	461a      	mov	r2, r3
 8008e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e8c:	6093      	str	r3, [r2, #8]
 8008e8e:	e325      	b.n	80094dc <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f009 fa35 	bl	801230a <USB_ReadChInterrupts>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	f040 80e8 	bne.w	800907c <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eb8:	461a      	mov	r2, r3
 8008eba:	2320      	movs	r3, #32
 8008ebc:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d019      	beq.n	8008efa <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	212c      	movs	r1, #44	; 0x2c
 8008ecc:	fb01 f303 	mul.w	r3, r1, r3
 8008ed0:	4413      	add	r3, r2
 8008ed2:	3348      	adds	r3, #72	; 0x48
 8008ed4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	0159      	lsls	r1, r3, #5
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	440b      	add	r3, r1
 8008ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8008ee8:	1ad2      	subs	r2, r2, r3
 8008eea:	6879      	ldr	r1, [r7, #4]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	202c      	movs	r0, #44	; 0x2c
 8008ef0:	fb00 f303 	mul.w	r3, r0, r3
 8008ef4:	440b      	add	r3, r1
 8008ef6:	3350      	adds	r3, #80	; 0x50
 8008ef8:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	212c      	movs	r1, #44	; 0x2c
 8008f00:	fb01 f303 	mul.w	r3, r1, r3
 8008f04:	4413      	add	r3, r2
 8008f06:	3361      	adds	r3, #97	; 0x61
 8008f08:	2201      	movs	r2, #1
 8008f0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	212c      	movs	r1, #44	; 0x2c
 8008f12:	fb01 f303 	mul.w	r3, r1, r3
 8008f16:	4413      	add	r3, r2
 8008f18:	335c      	adds	r3, #92	; 0x5c
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	015a      	lsls	r2, r3, #5
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	212c      	movs	r1, #44	; 0x2c
 8008f36:	fb01 f303 	mul.w	r3, r1, r3
 8008f3a:	4413      	add	r3, r2
 8008f3c:	333f      	adds	r3, #63	; 0x3f
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d009      	beq.n	8008f58 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	212c      	movs	r1, #44	; 0x2c
 8008f4a:	fb01 f303 	mul.w	r3, r1, r3
 8008f4e:	4413      	add	r3, r2
 8008f50:	333f      	adds	r3, #63	; 0x3f
 8008f52:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d111      	bne.n	8008f7c <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	4611      	mov	r1, r2
 8008f62:	4618      	mov	r0, r3
 8008f64:	f009 fe23 	bl	8012bae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f74:	461a      	mov	r2, r3
 8008f76:	2310      	movs	r3, #16
 8008f78:	6093      	str	r3, [r2, #8]
 8008f7a:	e03a      	b.n	8008ff2 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	212c      	movs	r1, #44	; 0x2c
 8008f82:	fb01 f303 	mul.w	r3, r1, r3
 8008f86:	4413      	add	r3, r2
 8008f88:	333f      	adds	r3, #63	; 0x3f
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d009      	beq.n	8008fa4 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	212c      	movs	r1, #44	; 0x2c
 8008f96:	fb01 f303 	mul.w	r3, r1, r3
 8008f9a:	4413      	add	r3, r2
 8008f9c:	333f      	adds	r3, #63	; 0x3f
 8008f9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d126      	bne.n	8008ff2 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	0151      	lsls	r1, r2, #5
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	440a      	add	r2, r1
 8008fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fc2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	212c      	movs	r1, #44	; 0x2c
 8008fca:	fb01 f303 	mul.w	r3, r1, r3
 8008fce:	4413      	add	r3, r2
 8008fd0:	3360      	adds	r3, #96	; 0x60
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	b2d9      	uxtb	r1, r3
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	202c      	movs	r0, #44	; 0x2c
 8008fe0:	fb00 f303 	mul.w	r3, r0, r3
 8008fe4:	4413      	add	r3, r2
 8008fe6:	3360      	adds	r3, #96	; 0x60
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f00f fb4f 	bl	8018690 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d12b      	bne.n	8009052 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	212c      	movs	r1, #44	; 0x2c
 8009000:	fb01 f303 	mul.w	r3, r1, r3
 8009004:	4413      	add	r3, r2
 8009006:	3348      	adds	r3, #72	; 0x48
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	6879      	ldr	r1, [r7, #4]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	202c      	movs	r0, #44	; 0x2c
 8009010:	fb00 f202 	mul.w	r2, r0, r2
 8009014:	440a      	add	r2, r1
 8009016:	3240      	adds	r2, #64	; 0x40
 8009018:	8812      	ldrh	r2, [r2, #0]
 800901a:	fbb3 f3f2 	udiv	r3, r3, r2
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 825a 	beq.w	80094dc <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	212c      	movs	r1, #44	; 0x2c
 800902e:	fb01 f303 	mul.w	r3, r1, r3
 8009032:	4413      	add	r3, r2
 8009034:	3354      	adds	r3, #84	; 0x54
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	f083 0301 	eor.w	r3, r3, #1
 800903c:	b2d8      	uxtb	r0, r3
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	212c      	movs	r1, #44	; 0x2c
 8009044:	fb01 f303 	mul.w	r3, r1, r3
 8009048:	4413      	add	r3, r2
 800904a:	3354      	adds	r3, #84	; 0x54
 800904c:	4602      	mov	r2, r0
 800904e:	701a      	strb	r2, [r3, #0]
 8009050:	e244      	b.n	80094dc <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	212c      	movs	r1, #44	; 0x2c
 8009058:	fb01 f303 	mul.w	r3, r1, r3
 800905c:	4413      	add	r3, r2
 800905e:	3354      	adds	r3, #84	; 0x54
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	f083 0301 	eor.w	r3, r3, #1
 8009066:	b2d8      	uxtb	r0, r3
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	212c      	movs	r1, #44	; 0x2c
 800906e:	fb01 f303 	mul.w	r3, r1, r3
 8009072:	4413      	add	r3, r2
 8009074:	3354      	adds	r3, #84	; 0x54
 8009076:	4602      	mov	r2, r0
 8009078:	701a      	strb	r2, [r3, #0]
 800907a:	e22f      	b.n	80094dc <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	b2d2      	uxtb	r2, r2
 8009084:	4611      	mov	r1, r2
 8009086:	4618      	mov	r0, r3
 8009088:	f009 f93f 	bl	801230a <USB_ReadChInterrupts>
 800908c:	4603      	mov	r3, r0
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b20      	cmp	r3, #32
 8009094:	d109      	bne.n	80090aa <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	4413      	add	r3, r2
 800909e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090a2:	461a      	mov	r2, r3
 80090a4:	2320      	movs	r3, #32
 80090a6:	6093      	str	r3, [r2, #8]
 80090a8:	e218      	b.n	80094dc <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	b2d2      	uxtb	r2, r2
 80090b2:	4611      	mov	r1, r2
 80090b4:	4618      	mov	r0, r3
 80090b6:	f009 f928 	bl	801230a <USB_ReadChInterrupts>
 80090ba:	4603      	mov	r3, r0
 80090bc:	f003 0302 	and.w	r3, r3, #2
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	f040 816b 	bne.w	800939c <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	015a      	lsls	r2, r3, #5
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	4413      	add	r3, r2
 80090ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090d2:	461a      	mov	r2, r3
 80090d4:	2302      	movs	r3, #2
 80090d6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	212c      	movs	r1, #44	; 0x2c
 80090de:	fb01 f303 	mul.w	r3, r1, r3
 80090e2:	4413      	add	r3, r2
 80090e4:	3361      	adds	r3, #97	; 0x61
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d112      	bne.n	8009112 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	212c      	movs	r1, #44	; 0x2c
 80090f2:	fb01 f303 	mul.w	r3, r1, r3
 80090f6:	4413      	add	r3, r2
 80090f8:	3361      	adds	r3, #97	; 0x61
 80090fa:	2202      	movs	r2, #2
 80090fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	212c      	movs	r1, #44	; 0x2c
 8009104:	fb01 f303 	mul.w	r3, r1, r3
 8009108:	4413      	add	r3, r2
 800910a:	3360      	adds	r3, #96	; 0x60
 800910c:	2201      	movs	r2, #1
 800910e:	701a      	strb	r2, [r3, #0]
 8009110:	e135      	b.n	800937e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	212c      	movs	r1, #44	; 0x2c
 8009118:	fb01 f303 	mul.w	r3, r1, r3
 800911c:	4413      	add	r3, r2
 800911e:	3361      	adds	r3, #97	; 0x61
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	2b06      	cmp	r3, #6
 8009124:	d112      	bne.n	800914c <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	212c      	movs	r1, #44	; 0x2c
 800912c:	fb01 f303 	mul.w	r3, r1, r3
 8009130:	4413      	add	r3, r2
 8009132:	3361      	adds	r3, #97	; 0x61
 8009134:	2202      	movs	r2, #2
 8009136:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	212c      	movs	r1, #44	; 0x2c
 800913e:	fb01 f303 	mul.w	r3, r1, r3
 8009142:	4413      	add	r3, r2
 8009144:	3360      	adds	r3, #96	; 0x60
 8009146:	2205      	movs	r2, #5
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	e118      	b.n	800937e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	212c      	movs	r1, #44	; 0x2c
 8009152:	fb01 f303 	mul.w	r3, r1, r3
 8009156:	4413      	add	r3, r2
 8009158:	3361      	adds	r3, #97	; 0x61
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b07      	cmp	r3, #7
 800915e:	d009      	beq.n	8009174 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	212c      	movs	r1, #44	; 0x2c
 8009166:	fb01 f303 	mul.w	r3, r1, r3
 800916a:	4413      	add	r3, r2
 800916c:	3361      	adds	r3, #97	; 0x61
 800916e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009170:	2b09      	cmp	r3, #9
 8009172:	d159      	bne.n	8009228 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	212c      	movs	r1, #44	; 0x2c
 800917a:	fb01 f303 	mul.w	r3, r1, r3
 800917e:	4413      	add	r3, r2
 8009180:	3361      	adds	r3, #97	; 0x61
 8009182:	2202      	movs	r2, #2
 8009184:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	212c      	movs	r1, #44	; 0x2c
 800918c:	fb01 f303 	mul.w	r3, r1, r3
 8009190:	4413      	add	r3, r2
 8009192:	335c      	adds	r3, #92	; 0x5c
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	6879      	ldr	r1, [r7, #4]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	202c      	movs	r0, #44	; 0x2c
 800919e:	fb00 f303 	mul.w	r3, r0, r3
 80091a2:	440b      	add	r3, r1
 80091a4:	335c      	adds	r3, #92	; 0x5c
 80091a6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	212c      	movs	r1, #44	; 0x2c
 80091ae:	fb01 f303 	mul.w	r3, r1, r3
 80091b2:	4413      	add	r3, r2
 80091b4:	335c      	adds	r3, #92	; 0x5c
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d912      	bls.n	80091e2 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	212c      	movs	r1, #44	; 0x2c
 80091c2:	fb01 f303 	mul.w	r3, r1, r3
 80091c6:	4413      	add	r3, r2
 80091c8:	335c      	adds	r3, #92	; 0x5c
 80091ca:	2200      	movs	r2, #0
 80091cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	212c      	movs	r1, #44	; 0x2c
 80091d4:	fb01 f303 	mul.w	r3, r1, r3
 80091d8:	4413      	add	r3, r2
 80091da:	3360      	adds	r3, #96	; 0x60
 80091dc:	2204      	movs	r2, #4
 80091de:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80091e0:	e0cd      	b.n	800937e <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	212c      	movs	r1, #44	; 0x2c
 80091e8:	fb01 f303 	mul.w	r3, r1, r3
 80091ec:	4413      	add	r3, r2
 80091ee:	3360      	adds	r3, #96	; 0x60
 80091f0:	2202      	movs	r2, #2
 80091f2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800920a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009212:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	4413      	add	r3, r2
 800921c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009220:	461a      	mov	r2, r3
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009226:	e0aa      	b.n	800937e <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	212c      	movs	r1, #44	; 0x2c
 800922e:	fb01 f303 	mul.w	r3, r1, r3
 8009232:	4413      	add	r3, r2
 8009234:	3361      	adds	r3, #97	; 0x61
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b05      	cmp	r3, #5
 800923a:	d109      	bne.n	8009250 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	212c      	movs	r1, #44	; 0x2c
 8009242:	fb01 f303 	mul.w	r3, r1, r3
 8009246:	4413      	add	r3, r2
 8009248:	3361      	adds	r3, #97	; 0x61
 800924a:	2202      	movs	r2, #2
 800924c:	701a      	strb	r2, [r3, #0]
 800924e:	e096      	b.n	800937e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	212c      	movs	r1, #44	; 0x2c
 8009256:	fb01 f303 	mul.w	r3, r1, r3
 800925a:	4413      	add	r3, r2
 800925c:	3361      	adds	r3, #97	; 0x61
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b03      	cmp	r3, #3
 8009262:	d109      	bne.n	8009278 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	212c      	movs	r1, #44	; 0x2c
 800926a:	fb01 f303 	mul.w	r3, r1, r3
 800926e:	4413      	add	r3, r2
 8009270:	3361      	adds	r3, #97	; 0x61
 8009272:	2202      	movs	r2, #2
 8009274:	701a      	strb	r2, [r3, #0]
 8009276:	e082      	b.n	800937e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	212c      	movs	r1, #44	; 0x2c
 800927e:	fb01 f303 	mul.w	r3, r1, r3
 8009282:	4413      	add	r3, r2
 8009284:	3361      	adds	r3, #97	; 0x61
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	2b04      	cmp	r3, #4
 800928a:	d13f      	bne.n	800930c <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	212c      	movs	r1, #44	; 0x2c
 8009292:	fb01 f303 	mul.w	r3, r1, r3
 8009296:	4413      	add	r3, r2
 8009298:	3361      	adds	r3, #97	; 0x61
 800929a:	2202      	movs	r2, #2
 800929c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	212c      	movs	r1, #44	; 0x2c
 80092a4:	fb01 f303 	mul.w	r3, r1, r3
 80092a8:	4413      	add	r3, r2
 80092aa:	3360      	adds	r3, #96	; 0x60
 80092ac:	2202      	movs	r2, #2
 80092ae:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	212c      	movs	r1, #44	; 0x2c
 80092b6:	fb01 f303 	mul.w	r3, r1, r3
 80092ba:	4413      	add	r3, r2
 80092bc:	333f      	adds	r3, #63	; 0x3f
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d009      	beq.n	80092d8 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	212c      	movs	r1, #44	; 0x2c
 80092ca:	fb01 f303 	mul.w	r3, r1, r3
 80092ce:	4413      	add	r3, r2
 80092d0:	333f      	adds	r3, #63	; 0x3f
 80092d2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d152      	bne.n	800937e <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092ee:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092f6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	015a      	lsls	r2, r3, #5
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009304:	461a      	mov	r2, r3
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	e038      	b.n	800937e <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	212c      	movs	r1, #44	; 0x2c
 8009312:	fb01 f303 	mul.w	r3, r1, r3
 8009316:	4413      	add	r3, r2
 8009318:	3361      	adds	r3, #97	; 0x61
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b08      	cmp	r3, #8
 800931e:	d123      	bne.n	8009368 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	212c      	movs	r1, #44	; 0x2c
 8009326:	fb01 f303 	mul.w	r3, r1, r3
 800932a:	4413      	add	r3, r2
 800932c:	3361      	adds	r3, #97	; 0x61
 800932e:	2202      	movs	r2, #2
 8009330:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	212c      	movs	r1, #44	; 0x2c
 8009338:	fb01 f303 	mul.w	r3, r1, r3
 800933c:	4413      	add	r3, r2
 800933e:	335c      	adds	r3, #92	; 0x5c
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	202c      	movs	r0, #44	; 0x2c
 800934a:	fb00 f303 	mul.w	r3, r0, r3
 800934e:	440b      	add	r3, r1
 8009350:	335c      	adds	r3, #92	; 0x5c
 8009352:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	212c      	movs	r1, #44	; 0x2c
 800935a:	fb01 f303 	mul.w	r3, r1, r3
 800935e:	4413      	add	r3, r2
 8009360:	3360      	adds	r3, #96	; 0x60
 8009362:	2204      	movs	r2, #4
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	e00a      	b.n	800937e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	212c      	movs	r1, #44	; 0x2c
 800936e:	fb01 f303 	mul.w	r3, r1, r3
 8009372:	4413      	add	r3, r2
 8009374:	3361      	adds	r3, #97	; 0x61
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	2b02      	cmp	r3, #2
 800937a:	f000 80ae 	beq.w	80094da <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	b2d9      	uxtb	r1, r3
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	202c      	movs	r0, #44	; 0x2c
 8009388:	fb00 f303 	mul.w	r3, r0, r3
 800938c:	4413      	add	r3, r2
 800938e:	3360      	adds	r3, #96	; 0x60
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f00f f97b 	bl	8018690 <HAL_HCD_HC_NotifyURBChange_Callback>
 800939a:	e09f      	b.n	80094dc <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	b2d2      	uxtb	r2, r2
 80093a4:	4611      	mov	r1, r2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f008 ffaf 	bl	801230a <USB_ReadChInterrupts>
 80093ac:	4603      	mov	r3, r0
 80093ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b2:	2b40      	cmp	r3, #64	; 0x40
 80093b4:	d123      	bne.n	80093fe <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c2:	461a      	mov	r2, r3
 80093c4:	2340      	movs	r3, #64	; 0x40
 80093c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	212c      	movs	r1, #44	; 0x2c
 80093ce:	fb01 f303 	mul.w	r3, r1, r3
 80093d2:	4413      	add	r3, r2
 80093d4:	3361      	adds	r3, #97	; 0x61
 80093d6:	2205      	movs	r2, #5
 80093d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	212c      	movs	r1, #44	; 0x2c
 80093e0:	fb01 f303 	mul.w	r3, r1, r3
 80093e4:	4413      	add	r3, r2
 80093e6:	335c      	adds	r3, #92	; 0x5c
 80093e8:	2200      	movs	r2, #0
 80093ea:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	b2d2      	uxtb	r2, r2
 80093f4:	4611      	mov	r1, r2
 80093f6:	4618      	mov	r0, r3
 80093f8:	f009 fbd9 	bl	8012bae <USB_HC_Halt>
 80093fc:	e06e      	b.n	80094dc <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	b2d2      	uxtb	r2, r2
 8009406:	4611      	mov	r1, r2
 8009408:	4618      	mov	r0, r3
 800940a:	f008 ff7e 	bl	801230a <USB_ReadChInterrupts>
 800940e:	4603      	mov	r3, r0
 8009410:	f003 0310 	and.w	r3, r3, #16
 8009414:	2b10      	cmp	r3, #16
 8009416:	d161      	bne.n	80094dc <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	212c      	movs	r1, #44	; 0x2c
 800941e:	fb01 f303 	mul.w	r3, r1, r3
 8009422:	4413      	add	r3, r2
 8009424:	333f      	adds	r3, #63	; 0x3f
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	2b03      	cmp	r3, #3
 800942a:	d11a      	bne.n	8009462 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	212c      	movs	r1, #44	; 0x2c
 8009432:	fb01 f303 	mul.w	r3, r1, r3
 8009436:	4413      	add	r3, r2
 8009438:	335c      	adds	r3, #92	; 0x5c
 800943a:	2200      	movs	r2, #0
 800943c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	212c      	movs	r1, #44	; 0x2c
 8009444:	fb01 f303 	mul.w	r3, r1, r3
 8009448:	4413      	add	r3, r2
 800944a:	3361      	adds	r3, #97	; 0x61
 800944c:	2204      	movs	r2, #4
 800944e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	b2d2      	uxtb	r2, r2
 8009458:	4611      	mov	r1, r2
 800945a:	4618      	mov	r0, r3
 800945c:	f009 fba7 	bl	8012bae <USB_HC_Halt>
 8009460:	e031      	b.n	80094c6 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	212c      	movs	r1, #44	; 0x2c
 8009468:	fb01 f303 	mul.w	r3, r1, r3
 800946c:	4413      	add	r3, r2
 800946e:	333f      	adds	r3, #63	; 0x3f
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d009      	beq.n	800948a <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	212c      	movs	r1, #44	; 0x2c
 800947c:	fb01 f303 	mul.w	r3, r1, r3
 8009480:	4413      	add	r3, r2
 8009482:	333f      	adds	r3, #63	; 0x3f
 8009484:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8009486:	2b02      	cmp	r3, #2
 8009488:	d11d      	bne.n	80094c6 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	212c      	movs	r1, #44	; 0x2c
 8009490:	fb01 f303 	mul.w	r3, r1, r3
 8009494:	4413      	add	r3, r2
 8009496:	335c      	adds	r3, #92	; 0x5c
 8009498:	2200      	movs	r2, #0
 800949a:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d110      	bne.n	80094c6 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	212c      	movs	r1, #44	; 0x2c
 80094aa:	fb01 f303 	mul.w	r3, r1, r3
 80094ae:	4413      	add	r3, r2
 80094b0:	3361      	adds	r3, #97	; 0x61
 80094b2:	2204      	movs	r2, #4
 80094b4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	b2d2      	uxtb	r2, r2
 80094be:	4611      	mov	r1, r2
 80094c0:	4618      	mov	r0, r3
 80094c2:	f009 fb74 	bl	8012bae <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094d2:	461a      	mov	r2, r3
 80094d4:	2310      	movs	r3, #16
 80094d6:	6093      	str	r3, [r2, #8]
 80094d8:	e000      	b.n	80094dc <HCD_HC_IN_IRQHandler+0x83e>
        return;
 80094da:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b088      	sub	sp, #32
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	460b      	mov	r3, r1
 80094ec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	b2d2      	uxtb	r2, r2
 8009504:	4611      	mov	r1, r2
 8009506:	4618      	mov	r0, r3
 8009508:	f008 feff 	bl	801230a <USB_ReadChInterrupts>
 800950c:	4603      	mov	r3, r0
 800950e:	f003 0304 	and.w	r3, r3, #4
 8009512:	2b04      	cmp	r3, #4
 8009514:	d11a      	bne.n	800954c <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	4413      	add	r3, r2
 800951e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009522:	461a      	mov	r2, r3
 8009524:	2304      	movs	r3, #4
 8009526:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	212c      	movs	r1, #44	; 0x2c
 800952e:	fb01 f303 	mul.w	r3, r1, r3
 8009532:	4413      	add	r3, r2
 8009534:	3361      	adds	r3, #97	; 0x61
 8009536:	2207      	movs	r2, #7
 8009538:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	b2d2      	uxtb	r2, r2
 8009542:	4611      	mov	r1, r2
 8009544:	4618      	mov	r0, r3
 8009546:	f009 fb32 	bl	8012bae <USB_HC_Halt>
 800954a:	e393      	b.n	8009c74 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	b2d2      	uxtb	r2, r2
 8009554:	4611      	mov	r1, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f008 fed7 	bl	801230a <USB_ReadChInterrupts>
 800955c:	4603      	mov	r3, r0
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b20      	cmp	r3, #32
 8009564:	d137      	bne.n	80095d6 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	4413      	add	r3, r2
 800956e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009572:	461a      	mov	r2, r3
 8009574:	2320      	movs	r3, #32
 8009576:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	212c      	movs	r1, #44	; 0x2c
 800957e:	fb01 f303 	mul.w	r3, r1, r3
 8009582:	4413      	add	r3, r2
 8009584:	333d      	adds	r3, #61	; 0x3d
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b01      	cmp	r3, #1
 800958a:	f040 8373 	bne.w	8009c74 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	212c      	movs	r1, #44	; 0x2c
 8009594:	fb01 f303 	mul.w	r3, r1, r3
 8009598:	4413      	add	r3, r2
 800959a:	333d      	adds	r3, #61	; 0x3d
 800959c:	2200      	movs	r2, #0
 800959e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	212c      	movs	r1, #44	; 0x2c
 80095a6:	fb01 f303 	mul.w	r3, r1, r3
 80095aa:	4413      	add	r3, r2
 80095ac:	3360      	adds	r3, #96	; 0x60
 80095ae:	2202      	movs	r2, #2
 80095b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	212c      	movs	r1, #44	; 0x2c
 80095b8:	fb01 f303 	mul.w	r3, r1, r3
 80095bc:	4413      	add	r3, r2
 80095be:	3361      	adds	r3, #97	; 0x61
 80095c0:	2203      	movs	r2, #3
 80095c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	b2d2      	uxtb	r2, r2
 80095cc:	4611      	mov	r1, r2
 80095ce:	4618      	mov	r0, r3
 80095d0:	f009 faed 	bl	8012bae <USB_HC_Halt>
 80095d4:	e34e      	b.n	8009c74 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	b2d2      	uxtb	r2, r2
 80095de:	4611      	mov	r1, r2
 80095e0:	4618      	mov	r0, r3
 80095e2:	f008 fe92 	bl	801230a <USB_ReadChInterrupts>
 80095e6:	4603      	mov	r3, r0
 80095e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095f0:	d112      	bne.n	8009618 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	015a      	lsls	r2, r3, #5
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095fe:	461a      	mov	r2, r3
 8009600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009604:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	b2d2      	uxtb	r2, r2
 800960e:	4611      	mov	r1, r2
 8009610:	4618      	mov	r0, r3
 8009612:	f009 facc 	bl	8012bae <USB_HC_Halt>
 8009616:	e32d      	b.n	8009c74 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	b2d2      	uxtb	r2, r2
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f008 fe71 	bl	801230a <USB_ReadChInterrupts>
 8009628:	4603      	mov	r3, r0
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	2b01      	cmp	r3, #1
 8009630:	d142      	bne.n	80096b8 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	212c      	movs	r1, #44	; 0x2c
 8009638:	fb01 f303 	mul.w	r3, r1, r3
 800963c:	4413      	add	r3, r2
 800963e:	335c      	adds	r3, #92	; 0x5c
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	b2d2      	uxtb	r2, r2
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f008 fe5b 	bl	801230a <USB_ReadChInterrupts>
 8009654:	4603      	mov	r3, r0
 8009656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965a:	2b40      	cmp	r3, #64	; 0x40
 800965c:	d111      	bne.n	8009682 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	212c      	movs	r1, #44	; 0x2c
 8009664:	fb01 f303 	mul.w	r3, r1, r3
 8009668:	4413      	add	r3, r2
 800966a:	333d      	adds	r3, #61	; 0x3d
 800966c:	2201      	movs	r2, #1
 800966e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	015a      	lsls	r2, r3, #5
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	4413      	add	r3, r2
 8009678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800967c:	461a      	mov	r2, r3
 800967e:	2340      	movs	r3, #64	; 0x40
 8009680:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	015a      	lsls	r2, r3, #5
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	4413      	add	r3, r2
 800968a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800968e:	461a      	mov	r2, r3
 8009690:	2301      	movs	r3, #1
 8009692:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	212c      	movs	r1, #44	; 0x2c
 800969a:	fb01 f303 	mul.w	r3, r1, r3
 800969e:	4413      	add	r3, r2
 80096a0:	3361      	adds	r3, #97	; 0x61
 80096a2:	2201      	movs	r2, #1
 80096a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	b2d2      	uxtb	r2, r2
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f009 fa7c 	bl	8012bae <USB_HC_Halt>
 80096b6:	e2dd      	b.n	8009c74 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	b2d2      	uxtb	r2, r2
 80096c0:	4611      	mov	r1, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f008 fe21 	bl	801230a <USB_ReadChInterrupts>
 80096c8:	4603      	mov	r3, r0
 80096ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ce:	2b40      	cmp	r3, #64	; 0x40
 80096d0:	d12c      	bne.n	800972c <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	212c      	movs	r1, #44	; 0x2c
 80096d8:	fb01 f303 	mul.w	r3, r1, r3
 80096dc:	4413      	add	r3, r2
 80096de:	3361      	adds	r3, #97	; 0x61
 80096e0:	2205      	movs	r2, #5
 80096e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	212c      	movs	r1, #44	; 0x2c
 80096ea:	fb01 f303 	mul.w	r3, r1, r3
 80096ee:	4413      	add	r3, r2
 80096f0:	333d      	adds	r3, #61	; 0x3d
 80096f2:	2201      	movs	r2, #1
 80096f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	212c      	movs	r1, #44	; 0x2c
 80096fc:	fb01 f303 	mul.w	r3, r1, r3
 8009700:	4413      	add	r3, r2
 8009702:	335c      	adds	r3, #92	; 0x5c
 8009704:	2200      	movs	r2, #0
 8009706:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	b2d2      	uxtb	r2, r2
 8009710:	4611      	mov	r1, r2
 8009712:	4618      	mov	r0, r3
 8009714:	f009 fa4b 	bl	8012bae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	4413      	add	r3, r2
 8009720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009724:	461a      	mov	r2, r3
 8009726:	2340      	movs	r3, #64	; 0x40
 8009728:	6093      	str	r3, [r2, #8]
 800972a:	e2a3      	b.n	8009c74 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	b2d2      	uxtb	r2, r2
 8009734:	4611      	mov	r1, r2
 8009736:	4618      	mov	r0, r3
 8009738:	f008 fde7 	bl	801230a <USB_ReadChInterrupts>
 800973c:	4603      	mov	r3, r0
 800973e:	f003 0308 	and.w	r3, r3, #8
 8009742:	2b08      	cmp	r3, #8
 8009744:	d11a      	bne.n	800977c <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	015a      	lsls	r2, r3, #5
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	4413      	add	r3, r2
 800974e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009752:	461a      	mov	r2, r3
 8009754:	2308      	movs	r3, #8
 8009756:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	212c      	movs	r1, #44	; 0x2c
 800975e:	fb01 f303 	mul.w	r3, r1, r3
 8009762:	4413      	add	r3, r2
 8009764:	3361      	adds	r3, #97	; 0x61
 8009766:	2206      	movs	r2, #6
 8009768:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	b2d2      	uxtb	r2, r2
 8009772:	4611      	mov	r1, r2
 8009774:	4618      	mov	r0, r3
 8009776:	f009 fa1a 	bl	8012bae <USB_HC_Halt>
 800977a:	e27b      	b.n	8009c74 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	b2d2      	uxtb	r2, r2
 8009784:	4611      	mov	r1, r2
 8009786:	4618      	mov	r0, r3
 8009788:	f008 fdbf 	bl	801230a <USB_ReadChInterrupts>
 800978c:	4603      	mov	r3, r0
 800978e:	f003 0310 	and.w	r3, r3, #16
 8009792:	2b10      	cmp	r3, #16
 8009794:	d140      	bne.n	8009818 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	212c      	movs	r1, #44	; 0x2c
 800979c:	fb01 f303 	mul.w	r3, r1, r3
 80097a0:	4413      	add	r3, r2
 80097a2:	335c      	adds	r3, #92	; 0x5c
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	212c      	movs	r1, #44	; 0x2c
 80097ae:	fb01 f303 	mul.w	r3, r1, r3
 80097b2:	4413      	add	r3, r2
 80097b4:	3361      	adds	r3, #97	; 0x61
 80097b6:	2204      	movs	r2, #4
 80097b8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	212c      	movs	r1, #44	; 0x2c
 80097c0:	fb01 f303 	mul.w	r3, r1, r3
 80097c4:	4413      	add	r3, r2
 80097c6:	333d      	adds	r3, #61	; 0x3d
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d112      	bne.n	80097f4 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	212c      	movs	r1, #44	; 0x2c
 80097d4:	fb01 f303 	mul.w	r3, r1, r3
 80097d8:	4413      	add	r3, r2
 80097da:	333c      	adds	r3, #60	; 0x3c
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d108      	bne.n	80097f4 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	212c      	movs	r1, #44	; 0x2c
 80097e8:	fb01 f303 	mul.w	r3, r1, r3
 80097ec:	4413      	add	r3, r2
 80097ee:	333d      	adds	r3, #61	; 0x3d
 80097f0:	2201      	movs	r2, #1
 80097f2:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	b2d2      	uxtb	r2, r2
 80097fc:	4611      	mov	r1, r2
 80097fe:	4618      	mov	r0, r3
 8009800:	f009 f9d5 	bl	8012bae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	015a      	lsls	r2, r3, #5
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	4413      	add	r3, r2
 800980c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009810:	461a      	mov	r2, r3
 8009812:	2310      	movs	r3, #16
 8009814:	6093      	str	r3, [r2, #8]
 8009816:	e22d      	b.n	8009c74 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	b2d2      	uxtb	r2, r2
 8009820:	4611      	mov	r1, r2
 8009822:	4618      	mov	r0, r3
 8009824:	f008 fd71 	bl	801230a <USB_ReadChInterrupts>
 8009828:	4603      	mov	r3, r0
 800982a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800982e:	2b80      	cmp	r3, #128	; 0x80
 8009830:	d164      	bne.n	80098fc <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d111      	bne.n	800985e <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	212c      	movs	r1, #44	; 0x2c
 8009840:	fb01 f303 	mul.w	r3, r1, r3
 8009844:	4413      	add	r3, r2
 8009846:	3361      	adds	r3, #97	; 0x61
 8009848:	2207      	movs	r2, #7
 800984a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	b2d2      	uxtb	r2, r2
 8009854:	4611      	mov	r1, r2
 8009856:	4618      	mov	r0, r3
 8009858:	f009 f9a9 	bl	8012bae <USB_HC_Halt>
 800985c:	e044      	b.n	80098e8 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	212c      	movs	r1, #44	; 0x2c
 8009864:	fb01 f303 	mul.w	r3, r1, r3
 8009868:	4413      	add	r3, r2
 800986a:	335c      	adds	r3, #92	; 0x5c
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	6879      	ldr	r1, [r7, #4]
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	202c      	movs	r0, #44	; 0x2c
 8009876:	fb00 f303 	mul.w	r3, r0, r3
 800987a:	440b      	add	r3, r1
 800987c:	335c      	adds	r3, #92	; 0x5c
 800987e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	212c      	movs	r1, #44	; 0x2c
 8009886:	fb01 f303 	mul.w	r3, r1, r3
 800988a:	4413      	add	r3, r2
 800988c:	335c      	adds	r3, #92	; 0x5c
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b02      	cmp	r3, #2
 8009892:	d920      	bls.n	80098d6 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	212c      	movs	r1, #44	; 0x2c
 800989a:	fb01 f303 	mul.w	r3, r1, r3
 800989e:	4413      	add	r3, r2
 80098a0:	335c      	adds	r3, #92	; 0x5c
 80098a2:	2200      	movs	r2, #0
 80098a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	212c      	movs	r1, #44	; 0x2c
 80098ac:	fb01 f303 	mul.w	r3, r1, r3
 80098b0:	4413      	add	r3, r2
 80098b2:	3360      	adds	r3, #96	; 0x60
 80098b4:	2204      	movs	r2, #4
 80098b6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	b2d9      	uxtb	r1, r3
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	202c      	movs	r0, #44	; 0x2c
 80098c2:	fb00 f303 	mul.w	r3, r0, r3
 80098c6:	4413      	add	r3, r2
 80098c8:	3360      	adds	r3, #96	; 0x60
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	461a      	mov	r2, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f00e fede 	bl	8018690 <HAL_HCD_HC_NotifyURBChange_Callback>
 80098d4:	e008      	b.n	80098e8 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	212c      	movs	r1, #44	; 0x2c
 80098dc:	fb01 f303 	mul.w	r3, r1, r3
 80098e0:	4413      	add	r3, r2
 80098e2:	3360      	adds	r3, #96	; 0x60
 80098e4:	2202      	movs	r2, #2
 80098e6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098f4:	461a      	mov	r2, r3
 80098f6:	2380      	movs	r3, #128	; 0x80
 80098f8:	6093      	str	r3, [r2, #8]
 80098fa:	e1bb      	b.n	8009c74 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	4611      	mov	r1, r2
 8009906:	4618      	mov	r0, r3
 8009908:	f008 fcff 	bl	801230a <USB_ReadChInterrupts>
 800990c:	4603      	mov	r3, r0
 800990e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009916:	d11b      	bne.n	8009950 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	212c      	movs	r1, #44	; 0x2c
 800991e:	fb01 f303 	mul.w	r3, r1, r3
 8009922:	4413      	add	r3, r2
 8009924:	3361      	adds	r3, #97	; 0x61
 8009926:	2209      	movs	r2, #9
 8009928:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	b2d2      	uxtb	r2, r2
 8009932:	4611      	mov	r1, r2
 8009934:	4618      	mov	r0, r3
 8009936:	f009 f93a 	bl	8012bae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	015a      	lsls	r2, r3, #5
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	4413      	add	r3, r2
 8009942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009946:	461a      	mov	r2, r3
 8009948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800994c:	6093      	str	r3, [r2, #8]
 800994e:	e191      	b.n	8009c74 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	b2d2      	uxtb	r2, r2
 8009958:	4611      	mov	r1, r2
 800995a:	4618      	mov	r0, r3
 800995c:	f008 fcd5 	bl	801230a <USB_ReadChInterrupts>
 8009960:	4603      	mov	r3, r0
 8009962:	f003 0302 	and.w	r3, r3, #2
 8009966:	2b02      	cmp	r3, #2
 8009968:	f040 8184 	bne.w	8009c74 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	4413      	add	r3, r2
 8009974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009978:	461a      	mov	r2, r3
 800997a:	2302      	movs	r3, #2
 800997c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	212c      	movs	r1, #44	; 0x2c
 8009984:	fb01 f303 	mul.w	r3, r1, r3
 8009988:	4413      	add	r3, r2
 800998a:	3361      	adds	r3, #97	; 0x61
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	2b01      	cmp	r3, #1
 8009990:	f040 8087 	bne.w	8009aa2 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	212c      	movs	r1, #44	; 0x2c
 800999a:	fb01 f303 	mul.w	r3, r1, r3
 800999e:	4413      	add	r3, r2
 80099a0:	3361      	adds	r3, #97	; 0x61
 80099a2:	2202      	movs	r2, #2
 80099a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	212c      	movs	r1, #44	; 0x2c
 80099ac:	fb01 f303 	mul.w	r3, r1, r3
 80099b0:	4413      	add	r3, r2
 80099b2:	3360      	adds	r3, #96	; 0x60
 80099b4:	2201      	movs	r2, #1
 80099b6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	212c      	movs	r1, #44	; 0x2c
 80099be:	fb01 f303 	mul.w	r3, r1, r3
 80099c2:	4413      	add	r3, r2
 80099c4:	333f      	adds	r3, #63	; 0x3f
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d00a      	beq.n	80099e2 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	212c      	movs	r1, #44	; 0x2c
 80099d2:	fb01 f303 	mul.w	r3, r1, r3
 80099d6:	4413      	add	r3, r2
 80099d8:	333f      	adds	r3, #63	; 0x3f
 80099da:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80099dc:	2b03      	cmp	r3, #3
 80099de:	f040 8139 	bne.w	8009c54 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d113      	bne.n	8009a12 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	212c      	movs	r1, #44	; 0x2c
 80099f0:	fb01 f303 	mul.w	r3, r1, r3
 80099f4:	4413      	add	r3, r2
 80099f6:	3355      	adds	r3, #85	; 0x55
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	f083 0301 	eor.w	r3, r3, #1
 80099fe:	b2d8      	uxtb	r0, r3
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	212c      	movs	r1, #44	; 0x2c
 8009a06:	fb01 f303 	mul.w	r3, r1, r3
 8009a0a:	4413      	add	r3, r2
 8009a0c:	3355      	adds	r3, #85	; 0x55
 8009a0e:	4602      	mov	r2, r0
 8009a10:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	f040 811c 	bne.w	8009c54 <HCD_HC_OUT_IRQHandler+0x772>
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	212c      	movs	r1, #44	; 0x2c
 8009a22:	fb01 f303 	mul.w	r3, r1, r3
 8009a26:	4413      	add	r3, r2
 8009a28:	334c      	adds	r3, #76	; 0x4c
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 8111 	beq.w	8009c54 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	212c      	movs	r1, #44	; 0x2c
 8009a38:	fb01 f303 	mul.w	r3, r1, r3
 8009a3c:	4413      	add	r3, r2
 8009a3e:	334c      	adds	r3, #76	; 0x4c
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6879      	ldr	r1, [r7, #4]
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	202c      	movs	r0, #44	; 0x2c
 8009a48:	fb00 f202 	mul.w	r2, r0, r2
 8009a4c:	440a      	add	r2, r1
 8009a4e:	3240      	adds	r2, #64	; 0x40
 8009a50:	8812      	ldrh	r2, [r2, #0]
 8009a52:	4413      	add	r3, r2
 8009a54:	3b01      	subs	r3, #1
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	202c      	movs	r0, #44	; 0x2c
 8009a5c:	fb00 f202 	mul.w	r2, r0, r2
 8009a60:	440a      	add	r2, r1
 8009a62:	3240      	adds	r2, #64	; 0x40
 8009a64:	8812      	ldrh	r2, [r2, #0]
 8009a66:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a6a:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f003 0301 	and.w	r3, r3, #1
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 80ee 	beq.w	8009c54 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	212c      	movs	r1, #44	; 0x2c
 8009a7e:	fb01 f303 	mul.w	r3, r1, r3
 8009a82:	4413      	add	r3, r2
 8009a84:	3355      	adds	r3, #85	; 0x55
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	f083 0301 	eor.w	r3, r3, #1
 8009a8c:	b2d8      	uxtb	r0, r3
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	212c      	movs	r1, #44	; 0x2c
 8009a94:	fb01 f303 	mul.w	r3, r1, r3
 8009a98:	4413      	add	r3, r2
 8009a9a:	3355      	adds	r3, #85	; 0x55
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	701a      	strb	r2, [r3, #0]
 8009aa0:	e0d8      	b.n	8009c54 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	212c      	movs	r1, #44	; 0x2c
 8009aa8:	fb01 f303 	mul.w	r3, r1, r3
 8009aac:	4413      	add	r3, r2
 8009aae:	3361      	adds	r3, #97	; 0x61
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d109      	bne.n	8009aca <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	212c      	movs	r1, #44	; 0x2c
 8009abc:	fb01 f303 	mul.w	r3, r1, r3
 8009ac0:	4413      	add	r3, r2
 8009ac2:	3361      	adds	r3, #97	; 0x61
 8009ac4:	2202      	movs	r2, #2
 8009ac6:	701a      	strb	r2, [r3, #0]
 8009ac8:	e0c4      	b.n	8009c54 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	212c      	movs	r1, #44	; 0x2c
 8009ad0:	fb01 f303 	mul.w	r3, r1, r3
 8009ad4:	4413      	add	r3, r2
 8009ad6:	3361      	adds	r3, #97	; 0x61
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2b04      	cmp	r3, #4
 8009adc:	d112      	bne.n	8009b04 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	212c      	movs	r1, #44	; 0x2c
 8009ae4:	fb01 f303 	mul.w	r3, r1, r3
 8009ae8:	4413      	add	r3, r2
 8009aea:	3361      	adds	r3, #97	; 0x61
 8009aec:	2202      	movs	r2, #2
 8009aee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	212c      	movs	r1, #44	; 0x2c
 8009af6:	fb01 f303 	mul.w	r3, r1, r3
 8009afa:	4413      	add	r3, r2
 8009afc:	3360      	adds	r3, #96	; 0x60
 8009afe:	2202      	movs	r2, #2
 8009b00:	701a      	strb	r2, [r3, #0]
 8009b02:	e0a7      	b.n	8009c54 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	212c      	movs	r1, #44	; 0x2c
 8009b0a:	fb01 f303 	mul.w	r3, r1, r3
 8009b0e:	4413      	add	r3, r2
 8009b10:	3361      	adds	r3, #97	; 0x61
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2b05      	cmp	r3, #5
 8009b16:	d112      	bne.n	8009b3e <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	212c      	movs	r1, #44	; 0x2c
 8009b1e:	fb01 f303 	mul.w	r3, r1, r3
 8009b22:	4413      	add	r3, r2
 8009b24:	3361      	adds	r3, #97	; 0x61
 8009b26:	2202      	movs	r2, #2
 8009b28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	212c      	movs	r1, #44	; 0x2c
 8009b30:	fb01 f303 	mul.w	r3, r1, r3
 8009b34:	4413      	add	r3, r2
 8009b36:	3360      	adds	r3, #96	; 0x60
 8009b38:	2202      	movs	r2, #2
 8009b3a:	701a      	strb	r2, [r3, #0]
 8009b3c:	e08a      	b.n	8009c54 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	212c      	movs	r1, #44	; 0x2c
 8009b44:	fb01 f303 	mul.w	r3, r1, r3
 8009b48:	4413      	add	r3, r2
 8009b4a:	3361      	adds	r3, #97	; 0x61
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	2b06      	cmp	r3, #6
 8009b50:	d112      	bne.n	8009b78 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	212c      	movs	r1, #44	; 0x2c
 8009b58:	fb01 f303 	mul.w	r3, r1, r3
 8009b5c:	4413      	add	r3, r2
 8009b5e:	3361      	adds	r3, #97	; 0x61
 8009b60:	2202      	movs	r2, #2
 8009b62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	212c      	movs	r1, #44	; 0x2c
 8009b6a:	fb01 f303 	mul.w	r3, r1, r3
 8009b6e:	4413      	add	r3, r2
 8009b70:	3360      	adds	r3, #96	; 0x60
 8009b72:	2205      	movs	r2, #5
 8009b74:	701a      	strb	r2, [r3, #0]
 8009b76:	e06d      	b.n	8009c54 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	212c      	movs	r1, #44	; 0x2c
 8009b7e:	fb01 f303 	mul.w	r3, r1, r3
 8009b82:	4413      	add	r3, r2
 8009b84:	3361      	adds	r3, #97	; 0x61
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	2b07      	cmp	r3, #7
 8009b8a:	d009      	beq.n	8009ba0 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	212c      	movs	r1, #44	; 0x2c
 8009b92:	fb01 f303 	mul.w	r3, r1, r3
 8009b96:	4413      	add	r3, r2
 8009b98:	3361      	adds	r3, #97	; 0x61
 8009b9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8009b9c:	2b09      	cmp	r3, #9
 8009b9e:	d168      	bne.n	8009c72 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	212c      	movs	r1, #44	; 0x2c
 8009ba6:	fb01 f303 	mul.w	r3, r1, r3
 8009baa:	4413      	add	r3, r2
 8009bac:	3361      	adds	r3, #97	; 0x61
 8009bae:	2202      	movs	r2, #2
 8009bb0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	212c      	movs	r1, #44	; 0x2c
 8009bb8:	fb01 f303 	mul.w	r3, r1, r3
 8009bbc:	4413      	add	r3, r2
 8009bbe:	335c      	adds	r3, #92	; 0x5c
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	1c5a      	adds	r2, r3, #1
 8009bc4:	6879      	ldr	r1, [r7, #4]
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	202c      	movs	r0, #44	; 0x2c
 8009bca:	fb00 f303 	mul.w	r3, r0, r3
 8009bce:	440b      	add	r3, r1
 8009bd0:	335c      	adds	r3, #92	; 0x5c
 8009bd2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	212c      	movs	r1, #44	; 0x2c
 8009bda:	fb01 f303 	mul.w	r3, r1, r3
 8009bde:	4413      	add	r3, r2
 8009be0:	335c      	adds	r3, #92	; 0x5c
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d912      	bls.n	8009c0e <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	212c      	movs	r1, #44	; 0x2c
 8009bee:	fb01 f303 	mul.w	r3, r1, r3
 8009bf2:	4413      	add	r3, r2
 8009bf4:	335c      	adds	r3, #92	; 0x5c
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	212c      	movs	r1, #44	; 0x2c
 8009c00:	fb01 f303 	mul.w	r3, r1, r3
 8009c04:	4413      	add	r3, r2
 8009c06:	3360      	adds	r3, #96	; 0x60
 8009c08:	2204      	movs	r2, #4
 8009c0a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009c0c:	e021      	b.n	8009c52 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	212c      	movs	r1, #44	; 0x2c
 8009c14:	fb01 f303 	mul.w	r3, r1, r3
 8009c18:	4413      	add	r3, r2
 8009c1a:	3360      	adds	r3, #96	; 0x60
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c36:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c3e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8009c52:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	b2d9      	uxtb	r1, r3
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	202c      	movs	r0, #44	; 0x2c
 8009c5e:	fb00 f303 	mul.w	r3, r0, r3
 8009c62:	4413      	add	r3, r2
 8009c64:	3360      	adds	r3, #96	; 0x60
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f00e fd10 	bl	8018690 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009c70:	e000      	b.n	8009c74 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8009c72:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8009c74:	3720      	adds	r7, #32
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b08a      	sub	sp, #40	; 0x28
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	f003 030f 	and.w	r3, r3, #15
 8009c9a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	0c5b      	lsrs	r3, r3, #17
 8009ca0:	f003 030f 	and.w	r3, r3, #15
 8009ca4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	091b      	lsrs	r3, r3, #4
 8009caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d004      	beq.n	8009cc0 <HCD_RXQLVL_IRQHandler+0x46>
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	2b05      	cmp	r3, #5
 8009cba:	f000 80a9 	beq.w	8009e10 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009cbe:	e0aa      	b.n	8009e16 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 80a6 	beq.w	8009e14 <HCD_RXQLVL_IRQHandler+0x19a>
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	212c      	movs	r1, #44	; 0x2c
 8009cce:	fb01 f303 	mul.w	r3, r1, r3
 8009cd2:	4413      	add	r3, r2
 8009cd4:	3344      	adds	r3, #68	; 0x44
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 809b 	beq.w	8009e14 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	212c      	movs	r1, #44	; 0x2c
 8009ce4:	fb01 f303 	mul.w	r3, r1, r3
 8009ce8:	4413      	add	r3, r2
 8009cea:	3350      	adds	r3, #80	; 0x50
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	441a      	add	r2, r3
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	202c      	movs	r0, #44	; 0x2c
 8009cf8:	fb00 f303 	mul.w	r3, r0, r3
 8009cfc:	440b      	add	r3, r1
 8009cfe:	334c      	adds	r3, #76	; 0x4c
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d87a      	bhi.n	8009dfc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6818      	ldr	r0, [r3, #0]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	212c      	movs	r1, #44	; 0x2c
 8009d10:	fb01 f303 	mul.w	r3, r1, r3
 8009d14:	4413      	add	r3, r2
 8009d16:	3344      	adds	r3, #68	; 0x44
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	b292      	uxth	r2, r2
 8009d1e:	4619      	mov	r1, r3
 8009d20:	f008 fa88 	bl	8012234 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	212c      	movs	r1, #44	; 0x2c
 8009d2a:	fb01 f303 	mul.w	r3, r1, r3
 8009d2e:	4413      	add	r3, r2
 8009d30:	3344      	adds	r3, #68	; 0x44
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	441a      	add	r2, r3
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	202c      	movs	r0, #44	; 0x2c
 8009d3e:	fb00 f303 	mul.w	r3, r0, r3
 8009d42:	440b      	add	r3, r1
 8009d44:	3344      	adds	r3, #68	; 0x44
 8009d46:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	212c      	movs	r1, #44	; 0x2c
 8009d4e:	fb01 f303 	mul.w	r3, r1, r3
 8009d52:	4413      	add	r3, r2
 8009d54:	3350      	adds	r3, #80	; 0x50
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	441a      	add	r2, r3
 8009d5c:	6879      	ldr	r1, [r7, #4]
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	202c      	movs	r0, #44	; 0x2c
 8009d62:	fb00 f303 	mul.w	r3, r0, r3
 8009d66:	440b      	add	r3, r1
 8009d68:	3350      	adds	r3, #80	; 0x50
 8009d6a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	0cdb      	lsrs	r3, r3, #19
 8009d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d80:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	212c      	movs	r1, #44	; 0x2c
 8009d88:	fb01 f303 	mul.w	r3, r1, r3
 8009d8c:	4413      	add	r3, r2
 8009d8e:	3340      	adds	r3, #64	; 0x40
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	461a      	mov	r2, r3
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d13c      	bne.n	8009e14 <HCD_RXQLVL_IRQHandler+0x19a>
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d039      	beq.n	8009e14 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	015a      	lsls	r2, r3, #5
 8009da4:	6a3b      	ldr	r3, [r7, #32]
 8009da6:	4413      	add	r3, r2
 8009da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009db6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009dbe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dcc:	461a      	mov	r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	69bb      	ldr	r3, [r7, #24]
 8009dd6:	212c      	movs	r1, #44	; 0x2c
 8009dd8:	fb01 f303 	mul.w	r3, r1, r3
 8009ddc:	4413      	add	r3, r2
 8009dde:	3354      	adds	r3, #84	; 0x54
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	f083 0301 	eor.w	r3, r3, #1
 8009de6:	b2d8      	uxtb	r0, r3
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	212c      	movs	r1, #44	; 0x2c
 8009dee:	fb01 f303 	mul.w	r3, r1, r3
 8009df2:	4413      	add	r3, r2
 8009df4:	3354      	adds	r3, #84	; 0x54
 8009df6:	4602      	mov	r2, r0
 8009df8:	701a      	strb	r2, [r3, #0]
      break;
 8009dfa:	e00b      	b.n	8009e14 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	212c      	movs	r1, #44	; 0x2c
 8009e02:	fb01 f303 	mul.w	r3, r1, r3
 8009e06:	4413      	add	r3, r2
 8009e08:	3360      	adds	r3, #96	; 0x60
 8009e0a:	2204      	movs	r2, #4
 8009e0c:	701a      	strb	r2, [r3, #0]
      break;
 8009e0e:	e001      	b.n	8009e14 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8009e10:	bf00      	nop
 8009e12:	e000      	b.n	8009e16 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8009e14:	bf00      	nop
  }
}
 8009e16:	bf00      	nop
 8009e18:	3728      	adds	r7, #40	; 0x28
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b086      	sub	sp, #24
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009e4a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f003 0302 	and.w	r3, r3, #2
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d10b      	bne.n	8009e6e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f003 0301 	and.w	r3, r3, #1
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d102      	bne.n	8009e66 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f00e fbf9 	bl	8018658 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	f043 0302 	orr.w	r3, r3, #2
 8009e6c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f003 0308 	and.w	r3, r3, #8
 8009e74:	2b08      	cmp	r3, #8
 8009e76:	d132      	bne.n	8009ede <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	f043 0308 	orr.w	r3, r3, #8
 8009e7e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f003 0304 	and.w	r3, r3, #4
 8009e86:	2b04      	cmp	r3, #4
 8009e88:	d126      	bne.n	8009ed8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d113      	bne.n	8009eba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8009e98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e9c:	d106      	bne.n	8009eac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2102      	movs	r1, #2
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f008 fb47 	bl	8012538 <USB_InitFSLSPClkSel>
 8009eaa:	e011      	b.n	8009ed0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f008 fb40 	bl	8012538 <USB_InitFSLSPClkSel>
 8009eb8:	e00a      	b.n	8009ed0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d106      	bne.n	8009ed0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ec8:	461a      	mov	r2, r3
 8009eca:	f64e 2360 	movw	r3, #60000	; 0xea60
 8009ece:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f00e fbef 	bl	80186b4 <HAL_HCD_PortEnabled_Callback>
 8009ed6:	e002      	b.n	8009ede <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f00e fbf9 	bl	80186d0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f003 0320 	and.w	r3, r3, #32
 8009ee4:	2b20      	cmp	r3, #32
 8009ee6:	d103      	bne.n	8009ef0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	f043 0320 	orr.w	r3, r3, #32
 8009eee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	6013      	str	r3, [r2, #0]
}
 8009efc:	bf00      	nop
 8009efe:	3718      	adds	r7, #24
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e07f      	b.n	800a016 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d106      	bne.n	8009f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7f9 fb38 	bl	80035a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2224      	movs	r2, #36	; 0x24
 8009f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f022 0201 	bic.w	r2, r2, #1
 8009f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009f54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689a      	ldr	r2, [r3, #8]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d107      	bne.n	8009f7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	689a      	ldr	r2, [r3, #8]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f7a:	609a      	str	r2, [r3, #8]
 8009f7c:	e006      	b.n	8009f8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	689a      	ldr	r2, [r3, #8]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009f8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d104      	bne.n	8009f9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	6859      	ldr	r1, [r3, #4]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	4b1d      	ldr	r3, [pc, #116]	; (800a020 <HAL_I2C_Init+0x11c>)
 8009faa:	430b      	orrs	r3, r1
 8009fac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68da      	ldr	r2, [r3, #12]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009fbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	691a      	ldr	r2, [r3, #16]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	695b      	ldr	r3, [r3, #20]
 8009fc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	69d9      	ldr	r1, [r3, #28]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a1a      	ldr	r2, [r3, #32]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f042 0201 	orr.w	r2, r2, #1
 8009ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2220      	movs	r2, #32
 800a002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	02008000 	.word	0x02008000

0800a024 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d101      	bne.n	800a036 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e021      	b.n	800a07a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2224      	movs	r2, #36	; 0x24
 800a03a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f022 0201 	bic.w	r2, r2, #1
 800a04c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7f9 fb4e 	bl	80036f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
	...

0800a084 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af02      	add	r7, sp, #8
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	4608      	mov	r0, r1
 800a08e:	4611      	mov	r1, r2
 800a090:	461a      	mov	r2, r3
 800a092:	4603      	mov	r3, r0
 800a094:	817b      	strh	r3, [r7, #10]
 800a096:	460b      	mov	r3, r1
 800a098:	813b      	strh	r3, [r7, #8]
 800a09a:	4613      	mov	r3, r2
 800a09c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	2b20      	cmp	r3, #32
 800a0a8:	f040 80f9 	bne.w	800a29e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d002      	beq.n	800a0b8 <HAL_I2C_Mem_Write+0x34>
 800a0b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d105      	bne.n	800a0c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e0ed      	b.n	800a2a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d101      	bne.n	800a0d2 <HAL_I2C_Mem_Write+0x4e>
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	e0e6      	b.n	800a2a0 <HAL_I2C_Mem_Write+0x21c>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a0da:	f7fc f8f3 	bl	80062c4 <HAL_GetTick>
 800a0de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	2319      	movs	r3, #25
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 fac3 	bl	800a678 <I2C_WaitOnFlagUntilTimeout>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e0d1      	b.n	800a2a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2221      	movs	r2, #33	; 0x21
 800a100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2240      	movs	r2, #64	; 0x40
 800a108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6a3a      	ldr	r2, [r7, #32]
 800a116:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a11c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a124:	88f8      	ldrh	r0, [r7, #6]
 800a126:	893a      	ldrh	r2, [r7, #8]
 800a128:	8979      	ldrh	r1, [r7, #10]
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	4603      	mov	r3, r0
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f000 f9d3 	bl	800a4e0 <I2C_RequestMemoryWrite>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d005      	beq.n	800a14c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e0a9      	b.n	800a2a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a150:	b29b      	uxth	r3, r3
 800a152:	2bff      	cmp	r3, #255	; 0xff
 800a154:	d90e      	bls.n	800a174 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	22ff      	movs	r2, #255	; 0xff
 800a15a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a160:	b2da      	uxtb	r2, r3
 800a162:	8979      	ldrh	r1, [r7, #10]
 800a164:	2300      	movs	r3, #0
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 fc1f 	bl	800a9b0 <I2C_TransferConfig>
 800a172:	e00f      	b.n	800a194 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a178:	b29a      	uxth	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a182:	b2da      	uxtb	r2, r3
 800a184:	8979      	ldrh	r1, [r7, #10]
 800a186:	2300      	movs	r3, #0
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 fc0e 	bl	800a9b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f000 faad 	bl	800a6f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e07b      	b.n	800a2a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ac:	781a      	ldrb	r2, [r3, #0]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	1c5a      	adds	r2, r3, #1
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d034      	beq.n	800a24c <HAL_I2C_Mem_Write+0x1c8>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d130      	bne.n	800a24c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	2180      	movs	r1, #128	; 0x80
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f000 fa3f 	bl	800a678 <I2C_WaitOnFlagUntilTimeout>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d001      	beq.n	800a204 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	e04d      	b.n	800a2a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a208:	b29b      	uxth	r3, r3
 800a20a:	2bff      	cmp	r3, #255	; 0xff
 800a20c:	d90e      	bls.n	800a22c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	22ff      	movs	r2, #255	; 0xff
 800a212:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	8979      	ldrh	r1, [r7, #10]
 800a21c:	2300      	movs	r3, #0
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 fbc3 	bl	800a9b0 <I2C_TransferConfig>
 800a22a:	e00f      	b.n	800a24c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a230:	b29a      	uxth	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	8979      	ldrh	r1, [r7, #10]
 800a23e:	2300      	movs	r3, #0
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f000 fbb2 	bl	800a9b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a250:	b29b      	uxth	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	d19e      	bne.n	800a194 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f000 fa8c 	bl	800a778 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e01a      	b.n	800a2a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2220      	movs	r2, #32
 800a270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6859      	ldr	r1, [r3, #4]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	4b0a      	ldr	r3, [pc, #40]	; (800a2a8 <HAL_I2C_Mem_Write+0x224>)
 800a27e:	400b      	ands	r3, r1
 800a280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2220      	movs	r2, #32
 800a286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	e000      	b.n	800a2a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a29e:	2302      	movs	r3, #2
  }
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3718      	adds	r7, #24
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	fe00e800 	.word	0xfe00e800

0800a2ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b088      	sub	sp, #32
 800a2b0:	af02      	add	r7, sp, #8
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	817b      	strh	r3, [r7, #10]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	813b      	strh	r3, [r7, #8]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b20      	cmp	r3, #32
 800a2d0:	f040 80fd 	bne.w	800a4ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <HAL_I2C_Mem_Read+0x34>
 800a2da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d105      	bne.n	800a2ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e0f1      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d101      	bne.n	800a2fa <HAL_I2C_Mem_Read+0x4e>
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	e0ea      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x224>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a302:	f7fb ffdf 	bl	80062c4 <HAL_GetTick>
 800a306:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	2319      	movs	r3, #25
 800a30e:	2201      	movs	r2, #1
 800a310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f000 f9af 	bl	800a678 <I2C_WaitOnFlagUntilTimeout>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d001      	beq.n	800a324 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e0d5      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2222      	movs	r2, #34	; 0x22
 800a328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2240      	movs	r2, #64	; 0x40
 800a330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6a3a      	ldr	r2, [r7, #32]
 800a33e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a34c:	88f8      	ldrh	r0, [r7, #6]
 800a34e:	893a      	ldrh	r2, [r7, #8]
 800a350:	8979      	ldrh	r1, [r7, #10]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	9301      	str	r3, [sp, #4]
 800a356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	4603      	mov	r3, r0
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 f913 	bl	800a588 <I2C_RequestMemoryRead>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d005      	beq.n	800a374 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e0ad      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a378:	b29b      	uxth	r3, r3
 800a37a:	2bff      	cmp	r3, #255	; 0xff
 800a37c:	d90e      	bls.n	800a39c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	22ff      	movs	r2, #255	; 0xff
 800a382:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	8979      	ldrh	r1, [r7, #10]
 800a38c:	4b52      	ldr	r3, [pc, #328]	; (800a4d8 <HAL_I2C_Mem_Read+0x22c>)
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f000 fb0b 	bl	800a9b0 <I2C_TransferConfig>
 800a39a:	e00f      	b.n	800a3bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	8979      	ldrh	r1, [r7, #10]
 800a3ae:	4b4a      	ldr	r3, [pc, #296]	; (800a4d8 <HAL_I2C_Mem_Read+0x22c>)
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f000 fafa 	bl	800a9b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2104      	movs	r1, #4
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 f956 	bl	800a678 <I2C_WaitOnFlagUntilTimeout>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e07c      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	b2d2      	uxtb	r2, r2
 800a3e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	3b01      	subs	r3, #1
 800a402:	b29a      	uxth	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d034      	beq.n	800a47c <HAL_I2C_Mem_Read+0x1d0>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a416:	2b00      	cmp	r3, #0
 800a418:	d130      	bne.n	800a47c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a420:	2200      	movs	r2, #0
 800a422:	2180      	movs	r1, #128	; 0x80
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f000 f927 	bl	800a678 <I2C_WaitOnFlagUntilTimeout>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d001      	beq.n	800a434 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e04d      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a438:	b29b      	uxth	r3, r3
 800a43a:	2bff      	cmp	r3, #255	; 0xff
 800a43c:	d90e      	bls.n	800a45c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	22ff      	movs	r2, #255	; 0xff
 800a442:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	8979      	ldrh	r1, [r7, #10]
 800a44c:	2300      	movs	r3, #0
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f000 faab 	bl	800a9b0 <I2C_TransferConfig>
 800a45a:	e00f      	b.n	800a47c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a460:	b29a      	uxth	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	8979      	ldrh	r1, [r7, #10]
 800a46e:	2300      	movs	r3, #0
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f000 fa9a 	bl	800a9b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a480:	b29b      	uxth	r3, r3
 800a482:	2b00      	cmp	r3, #0
 800a484:	d19a      	bne.n	800a3bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f000 f974 	bl	800a778 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d001      	beq.n	800a49a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	e01a      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6859      	ldr	r1, [r3, #4]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	4b0b      	ldr	r3, [pc, #44]	; (800a4dc <HAL_I2C_Mem_Read+0x230>)
 800a4ae:	400b      	ands	r3, r1
 800a4b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e000      	b.n	800a4d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a4ce:	2302      	movs	r3, #2
  }
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3718      	adds	r7, #24
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	80002400 	.word	0x80002400
 800a4dc:	fe00e800 	.word	0xfe00e800

0800a4e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af02      	add	r7, sp, #8
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	4608      	mov	r0, r1
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	817b      	strh	r3, [r7, #10]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	813b      	strh	r3, [r7, #8]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a4fa:	88fb      	ldrh	r3, [r7, #6]
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	8979      	ldrh	r1, [r7, #10]
 800a500:	4b20      	ldr	r3, [pc, #128]	; (800a584 <I2C_RequestMemoryWrite+0xa4>)
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 fa51 	bl	800a9b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a50e:	69fa      	ldr	r2, [r7, #28]
 800a510:	69b9      	ldr	r1, [r7, #24]
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 f8f0 	bl	800a6f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e02c      	b.n	800a57c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a522:	88fb      	ldrh	r3, [r7, #6]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d105      	bne.n	800a534 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a528:	893b      	ldrh	r3, [r7, #8]
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	629a      	str	r2, [r3, #40]	; 0x28
 800a532:	e015      	b.n	800a560 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a534:	893b      	ldrh	r3, [r7, #8]
 800a536:	0a1b      	lsrs	r3, r3, #8
 800a538:	b29b      	uxth	r3, r3
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a542:	69fa      	ldr	r2, [r7, #28]
 800a544:	69b9      	ldr	r1, [r7, #24]
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f000 f8d6 	bl	800a6f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d001      	beq.n	800a556 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e012      	b.n	800a57c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a556:	893b      	ldrh	r3, [r7, #8]
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	2200      	movs	r2, #0
 800a568:	2180      	movs	r1, #128	; 0x80
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f000 f884 	bl	800a678 <I2C_WaitOnFlagUntilTimeout>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e000      	b.n	800a57c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	80002000 	.word	0x80002000

0800a588 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af02      	add	r7, sp, #8
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	4608      	mov	r0, r1
 800a592:	4611      	mov	r1, r2
 800a594:	461a      	mov	r2, r3
 800a596:	4603      	mov	r3, r0
 800a598:	817b      	strh	r3, [r7, #10]
 800a59a:	460b      	mov	r3, r1
 800a59c:	813b      	strh	r3, [r7, #8]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a5a2:	88fb      	ldrh	r3, [r7, #6]
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	8979      	ldrh	r1, [r7, #10]
 800a5a8:	4b20      	ldr	r3, [pc, #128]	; (800a62c <I2C_RequestMemoryRead+0xa4>)
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f000 f9fe 	bl	800a9b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5b4:	69fa      	ldr	r2, [r7, #28]
 800a5b6:	69b9      	ldr	r1, [r7, #24]
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f000 f89d 	bl	800a6f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d001      	beq.n	800a5c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e02c      	b.n	800a622 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a5c8:	88fb      	ldrh	r3, [r7, #6]
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d105      	bne.n	800a5da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5ce:	893b      	ldrh	r3, [r7, #8]
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	629a      	str	r2, [r3, #40]	; 0x28
 800a5d8:	e015      	b.n	800a606 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a5da:	893b      	ldrh	r3, [r7, #8]
 800a5dc:	0a1b      	lsrs	r3, r3, #8
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5e8:	69fa      	ldr	r2, [r7, #28]
 800a5ea:	69b9      	ldr	r1, [r7, #24]
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f000 f883 	bl	800a6f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e012      	b.n	800a622 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5fc:	893b      	ldrh	r3, [r7, #8]
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	2200      	movs	r2, #0
 800a60e:	2140      	movs	r1, #64	; 0x40
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f000 f831 	bl	800a678 <I2C_WaitOnFlagUntilTimeout>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e000      	b.n	800a622 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	80002000 	.word	0x80002000

0800a630 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	699b      	ldr	r3, [r3, #24]
 800a63e:	f003 0302 	and.w	r3, r3, #2
 800a642:	2b02      	cmp	r3, #2
 800a644:	d103      	bne.n	800a64e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2200      	movs	r2, #0
 800a64c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	699b      	ldr	r3, [r3, #24]
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d007      	beq.n	800a66c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	699a      	ldr	r2, [r3, #24]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f042 0201 	orr.w	r2, r2, #1
 800a66a:	619a      	str	r2, [r3, #24]
  }
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	603b      	str	r3, [r7, #0]
 800a684:	4613      	mov	r3, r2
 800a686:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a688:	e022      	b.n	800a6d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a690:	d01e      	beq.n	800a6d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a692:	f7fb fe17 	bl	80062c4 <HAL_GetTick>
 800a696:	4602      	mov	r2, r0
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d302      	bcc.n	800a6a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d113      	bne.n	800a6d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ac:	f043 0220 	orr.w	r2, r3, #32
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2220      	movs	r2, #32
 800a6b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e00f      	b.n	800a6f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	699a      	ldr	r2, [r3, #24]
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	4013      	ands	r3, r2
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	bf0c      	ite	eq
 800a6e0:	2301      	moveq	r3, #1
 800a6e2:	2300      	movne	r3, #0
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	79fb      	ldrb	r3, [r7, #7]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d0cd      	beq.n	800a68a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a704:	e02c      	b.n	800a760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	68b9      	ldr	r1, [r7, #8]
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 f870 	bl	800a7f0 <I2C_IsErrorOccurred>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e02a      	b.n	800a770 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a720:	d01e      	beq.n	800a760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a722:	f7fb fdcf 	bl	80062c4 <HAL_GetTick>
 800a726:	4602      	mov	r2, r0
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d302      	bcc.n	800a738 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d113      	bne.n	800a760 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a73c:	f043 0220 	orr.w	r2, r3, #32
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2220      	movs	r2, #32
 800a748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e007      	b.n	800a770 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	f003 0302 	and.w	r3, r3, #2
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d1cb      	bne.n	800a706 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a784:	e028      	b.n	800a7d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	68b9      	ldr	r1, [r7, #8]
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f000 f830 	bl	800a7f0 <I2C_IsErrorOccurred>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e026      	b.n	800a7e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a79a:	f7fb fd93 	bl	80062c4 <HAL_GetTick>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d302      	bcc.n	800a7b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d113      	bne.n	800a7d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7b4:	f043 0220 	orr.w	r2, r3, #32
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2220      	movs	r2, #32
 800a7c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e007      	b.n	800a7e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	f003 0320 	and.w	r3, r3, #32
 800a7e2:	2b20      	cmp	r3, #32
 800a7e4:	d1cf      	bne.n	800a786 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08a      	sub	sp, #40	; 0x28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	f003 0310 	and.w	r3, r3, #16
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d068      	beq.n	800a8ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2210      	movs	r2, #16
 800a822:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a824:	e049      	b.n	800a8ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82c:	d045      	beq.n	800a8ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a82e:	f7fb fd49 	bl	80062c4 <HAL_GetTick>
 800a832:	4602      	mov	r2, r0
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	68ba      	ldr	r2, [r7, #8]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d302      	bcc.n	800a844 <I2C_IsErrorOccurred+0x54>
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d13a      	bne.n	800a8ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a84e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a856:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a866:	d121      	bne.n	800a8ac <I2C_IsErrorOccurred+0xbc>
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a86e:	d01d      	beq.n	800a8ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a870:	7cfb      	ldrb	r3, [r7, #19]
 800a872:	2b20      	cmp	r3, #32
 800a874:	d01a      	beq.n	800a8ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a884:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a886:	f7fb fd1d 	bl	80062c4 <HAL_GetTick>
 800a88a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a88c:	e00e      	b.n	800a8ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a88e:	f7fb fd19 	bl	80062c4 <HAL_GetTick>
 800a892:	4602      	mov	r2, r0
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	2b19      	cmp	r3, #25
 800a89a:	d907      	bls.n	800a8ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800a89c:	6a3b      	ldr	r3, [r7, #32]
 800a89e:	f043 0320 	orr.w	r3, r3, #32
 800a8a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a8aa:	e006      	b.n	800a8ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	f003 0320 	and.w	r3, r3, #32
 800a8b6:	2b20      	cmp	r3, #32
 800a8b8:	d1e9      	bne.n	800a88e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	f003 0320 	and.w	r3, r3, #32
 800a8c4:	2b20      	cmp	r3, #32
 800a8c6:	d003      	beq.n	800a8d0 <I2C_IsErrorOccurred+0xe0>
 800a8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d0aa      	beq.n	800a826 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d103      	bne.n	800a8e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2220      	movs	r2, #32
 800a8de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	f043 0304 	orr.w	r3, r3, #4
 800a8e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	699b      	ldr	r3, [r3, #24]
 800a8f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00b      	beq.n	800a918 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	f043 0301 	orr.w	r3, r3, #1
 800a906:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a910:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00b      	beq.n	800a93a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	f043 0308 	orr.w	r3, r3, #8
 800a928:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a932:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00b      	beq.n	800a95c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a944:	6a3b      	ldr	r3, [r7, #32]
 800a946:	f043 0302 	orr.w	r3, r3, #2
 800a94a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a954:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a95c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01c      	beq.n	800a99e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f7ff fe63 	bl	800a630 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6859      	ldr	r1, [r3, #4]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	4b0d      	ldr	r3, [pc, #52]	; (800a9ac <I2C_IsErrorOccurred+0x1bc>)
 800a976:	400b      	ands	r3, r1
 800a978:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a97e:	6a3b      	ldr	r3, [r7, #32]
 800a980:	431a      	orrs	r2, r3
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2220      	movs	r2, #32
 800a98a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a99e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3728      	adds	r7, #40	; 0x28
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	fe00e800 	.word	0xfe00e800

0800a9b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	607b      	str	r3, [r7, #4]
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	817b      	strh	r3, [r7, #10]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a9c2:	897b      	ldrh	r3, [r7, #10]
 800a9c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a9c8:	7a7b      	ldrb	r3, [r7, #9]
 800a9ca:	041b      	lsls	r3, r3, #16
 800a9cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a9d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	6a3b      	ldr	r3, [r7, #32]
 800a9e8:	0d5b      	lsrs	r3, r3, #21
 800a9ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a9ee:	4b08      	ldr	r3, [pc, #32]	; (800aa10 <I2C_TransferConfig+0x60>)
 800a9f0:	430b      	orrs	r3, r1
 800a9f2:	43db      	mvns	r3, r3
 800a9f4:	ea02 0103 	and.w	r1, r2, r3
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	430a      	orrs	r2, r1
 800aa00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800aa02:	bf00      	nop
 800aa04:	371c      	adds	r7, #28
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	03ff63ff 	.word	0x03ff63ff

0800aa14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b20      	cmp	r3, #32
 800aa28:	d138      	bne.n	800aa9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d101      	bne.n	800aa38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aa34:	2302      	movs	r3, #2
 800aa36:	e032      	b.n	800aa9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2224      	movs	r2, #36	; 0x24
 800aa44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f022 0201 	bic.w	r2, r2, #1
 800aa56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aa66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6819      	ldr	r1, [r3, #0]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	430a      	orrs	r2, r1
 800aa76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f042 0201 	orr.w	r2, r2, #1
 800aa86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2220      	movs	r2, #32
 800aa8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	e000      	b.n	800aa9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aa9c:	2302      	movs	r3, #2
  }
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b085      	sub	sp, #20
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b20      	cmp	r3, #32
 800aabe:	d139      	bne.n	800ab34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d101      	bne.n	800aace <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800aaca:	2302      	movs	r3, #2
 800aacc:	e033      	b.n	800ab36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2201      	movs	r2, #1
 800aad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2224      	movs	r2, #36	; 0x24
 800aada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f022 0201 	bic.w	r2, r2, #1
 800aaec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800aafc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	021b      	lsls	r3, r3, #8
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f042 0201 	orr.w	r2, r2, #1
 800ab1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2220      	movs	r2, #32
 800ab24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	e000      	b.n	800ab36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ab34:	2302      	movs	r3, #2
  }
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
	...

0800ab44 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d101      	bne.n	800ab56 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e0bf      	b.n	800acd6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d106      	bne.n	800ab70 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7f8 fdfc 	bl	8003768 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2202      	movs	r2, #2
 800ab74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	699a      	ldr	r2, [r3, #24]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800ab86:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6999      	ldr	r1, [r3, #24]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	685a      	ldr	r2, [r3, #4]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ab9c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	430a      	orrs	r2, r1
 800abaa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6899      	ldr	r1, [r3, #8]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	4b4a      	ldr	r3, [pc, #296]	; (800ace0 <HAL_LTDC_Init+0x19c>)
 800abb8:	400b      	ands	r3, r1
 800abba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	041b      	lsls	r3, r3, #16
 800abc2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	6899      	ldr	r1, [r3, #8]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	699a      	ldr	r2, [r3, #24]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	431a      	orrs	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	430a      	orrs	r2, r1
 800abd8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68d9      	ldr	r1, [r3, #12]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	4b3e      	ldr	r3, [pc, #248]	; (800ace0 <HAL_LTDC_Init+0x19c>)
 800abe6:	400b      	ands	r3, r1
 800abe8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	041b      	lsls	r3, r3, #16
 800abf0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68d9      	ldr	r1, [r3, #12]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a1a      	ldr	r2, [r3, #32]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	431a      	orrs	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	430a      	orrs	r2, r1
 800ac06:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6919      	ldr	r1, [r3, #16]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	4b33      	ldr	r3, [pc, #204]	; (800ace0 <HAL_LTDC_Init+0x19c>)
 800ac14:	400b      	ands	r3, r1
 800ac16:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1c:	041b      	lsls	r3, r3, #16
 800ac1e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6919      	ldr	r1, [r3, #16]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	431a      	orrs	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	430a      	orrs	r2, r1
 800ac34:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	6959      	ldr	r1, [r3, #20]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	4b27      	ldr	r3, [pc, #156]	; (800ace0 <HAL_LTDC_Init+0x19c>)
 800ac42:	400b      	ands	r3, r1
 800ac44:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4a:	041b      	lsls	r3, r3, #16
 800ac4c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	6959      	ldr	r1, [r3, #20]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	431a      	orrs	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	430a      	orrs	r2, r1
 800ac62:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ac6a:	021b      	lsls	r3, r3, #8
 800ac6c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ac74:	041b      	lsls	r3, r3, #16
 800ac76:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800ac86:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800ac9a:	431a      	orrs	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	430a      	orrs	r2, r1
 800aca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f042 0206 	orr.w	r2, r2, #6
 800acb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	699a      	ldr	r2, [r3, #24]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f042 0201 	orr.w	r2, r2, #1
 800acc2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	f000f800 	.word	0xf000f800

0800ace4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ace4:	b5b0      	push	{r4, r5, r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d101      	bne.n	800acfe <HAL_LTDC_ConfigLayer+0x1a>
 800acfa:	2302      	movs	r3, #2
 800acfc:	e02c      	b.n	800ad58 <HAL_LTDC_ConfigLayer+0x74>
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2201      	movs	r2, #1
 800ad02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2202      	movs	r2, #2
 800ad0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2134      	movs	r1, #52	; 0x34
 800ad14:	fb01 f303 	mul.w	r3, r1, r3
 800ad18:	4413      	add	r3, r2
 800ad1a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	4614      	mov	r4, r2
 800ad22:	461d      	mov	r5, r3
 800ad24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	68b9      	ldr	r1, [r7, #8]
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 f847 	bl	800adcc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2201      	movs	r2, #1
 800ad44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bdb0      	pop	{r4, r5, r7, pc}

0800ad60 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d101      	bne.n	800ad7a <HAL_LTDC_SetAddress+0x1a>
 800ad76:	2302      	movs	r3, #2
 800ad78:	e024      	b.n	800adc4 <HAL_LTDC_SetAddress+0x64>
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2202      	movs	r2, #2
 800ad86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2234      	movs	r2, #52	; 0x34
 800ad8e:	fb02 f303 	mul.w	r3, r2, r3
 800ad92:	3338      	adds	r3, #56	; 0x38
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	4413      	add	r3, r2
 800ad98:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	6979      	ldr	r1, [r7, #20]
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f000 f811 	bl	800adcc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2201      	movs	r2, #1
 800adb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2201      	movs	r2, #1
 800adb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3718      	adds	r7, #24
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800adcc:	b480      	push	{r7}
 800adce:	b089      	sub	sp, #36	; 0x24
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	0c1b      	lsrs	r3, r3, #16
 800ade4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ade8:	4413      	add	r3, r2
 800adea:	041b      	lsls	r3, r3, #16
 800adec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	01db      	lsls	r3, r3, #7
 800adf8:	4413      	add	r3, r2
 800adfa:	3384      	adds	r3, #132	; 0x84
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	6812      	ldr	r2, [r2, #0]
 800ae02:	4611      	mov	r1, r2
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	01d2      	lsls	r2, r2, #7
 800ae08:	440a      	add	r2, r1
 800ae0a:	3284      	adds	r2, #132	; 0x84
 800ae0c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ae10:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	0c1b      	lsrs	r3, r3, #16
 800ae1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ae22:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ae24:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	01db      	lsls	r3, r3, #7
 800ae30:	440b      	add	r3, r1
 800ae32:	3384      	adds	r3, #132	; 0x84
 800ae34:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ae3a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	68da      	ldr	r2, [r3, #12]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ae4a:	4413      	add	r3, r2
 800ae4c:	041b      	lsls	r3, r3, #16
 800ae4e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	461a      	mov	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	01db      	lsls	r3, r3, #7
 800ae5a:	4413      	add	r3, r2
 800ae5c:	3384      	adds	r3, #132	; 0x84
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	6812      	ldr	r2, [r2, #0]
 800ae64:	4611      	mov	r1, r2
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	01d2      	lsls	r2, r2, #7
 800ae6a:	440a      	add	r2, r1
 800ae6c:	3284      	adds	r2, #132	; 0x84
 800ae6e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ae72:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	689a      	ldr	r2, [r3, #8]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ae82:	4413      	add	r3, r2
 800ae84:	1c5a      	adds	r2, r3, #1
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	01db      	lsls	r3, r3, #7
 800ae90:	440b      	add	r3, r1
 800ae92:	3384      	adds	r3, #132	; 0x84
 800ae94:	4619      	mov	r1, r3
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	461a      	mov	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	01db      	lsls	r3, r3, #7
 800aea6:	4413      	add	r3, r2
 800aea8:	3384      	adds	r3, #132	; 0x84
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	6812      	ldr	r2, [r2, #0]
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	01d2      	lsls	r2, r2, #7
 800aeb6:	440a      	add	r2, r1
 800aeb8:	3284      	adds	r2, #132	; 0x84
 800aeba:	f023 0307 	bic.w	r3, r3, #7
 800aebe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	461a      	mov	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	01db      	lsls	r3, r3, #7
 800aeca:	4413      	add	r3, r2
 800aecc:	3384      	adds	r3, #132	; 0x84
 800aece:	461a      	mov	r2, r3
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aedc:	021b      	lsls	r3, r3, #8
 800aede:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800aee6:	041b      	lsls	r3, r3, #16
 800aee8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	699b      	ldr	r3, [r3, #24]
 800aeee:	061b      	lsls	r3, r3, #24
 800aef0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	461a      	mov	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	01db      	lsls	r3, r3, #7
 800aefc:	4413      	add	r3, r2
 800aefe:	3384      	adds	r3, #132	; 0x84
 800af00:	699b      	ldr	r3, [r3, #24]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	01db      	lsls	r3, r3, #7
 800af0c:	4413      	add	r3, r2
 800af0e:	3384      	adds	r3, #132	; 0x84
 800af10:	461a      	mov	r2, r3
 800af12:	2300      	movs	r3, #0
 800af14:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af1c:	461a      	mov	r2, r3
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	431a      	orrs	r2, r3
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	431a      	orrs	r2, r3
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4619      	mov	r1, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	01db      	lsls	r3, r3, #7
 800af30:	440b      	add	r3, r1
 800af32:	3384      	adds	r3, #132	; 0x84
 800af34:	4619      	mov	r1, r3
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	4313      	orrs	r3, r2
 800af3a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	461a      	mov	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	01db      	lsls	r3, r3, #7
 800af46:	4413      	add	r3, r2
 800af48:	3384      	adds	r3, #132	; 0x84
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	6812      	ldr	r2, [r2, #0]
 800af50:	4611      	mov	r1, r2
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	01d2      	lsls	r2, r2, #7
 800af56:	440a      	add	r2, r1
 800af58:	3284      	adds	r2, #132	; 0x84
 800af5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800af5e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	461a      	mov	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	01db      	lsls	r3, r3, #7
 800af6a:	4413      	add	r3, r2
 800af6c:	3384      	adds	r3, #132	; 0x84
 800af6e:	461a      	mov	r2, r3
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	695b      	ldr	r3, [r3, #20]
 800af74:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	01db      	lsls	r3, r3, #7
 800af80:	4413      	add	r3, r2
 800af82:	3384      	adds	r3, #132	; 0x84
 800af84:	69da      	ldr	r2, [r3, #28]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4619      	mov	r1, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	01db      	lsls	r3, r3, #7
 800af90:	440b      	add	r3, r1
 800af92:	3384      	adds	r3, #132	; 0x84
 800af94:	4619      	mov	r1, r3
 800af96:	4b58      	ldr	r3, [pc, #352]	; (800b0f8 <LTDC_SetConfig+0x32c>)
 800af98:	4013      	ands	r3, r2
 800af9a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	69da      	ldr	r2, [r3, #28]
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	6a1b      	ldr	r3, [r3, #32]
 800afa4:	68f9      	ldr	r1, [r7, #12]
 800afa6:	6809      	ldr	r1, [r1, #0]
 800afa8:	4608      	mov	r0, r1
 800afaa:	6879      	ldr	r1, [r7, #4]
 800afac:	01c9      	lsls	r1, r1, #7
 800afae:	4401      	add	r1, r0
 800afb0:	3184      	adds	r1, #132	; 0x84
 800afb2:	4313      	orrs	r3, r2
 800afb4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	01db      	lsls	r3, r3, #7
 800afc0:	4413      	add	r3, r2
 800afc2:	3384      	adds	r3, #132	; 0x84
 800afc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	01db      	lsls	r3, r3, #7
 800afd0:	4413      	add	r3, r2
 800afd2:	3384      	adds	r3, #132	; 0x84
 800afd4:	461a      	mov	r2, r3
 800afd6:	2300      	movs	r3, #0
 800afd8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	461a      	mov	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	01db      	lsls	r3, r3, #7
 800afe4:	4413      	add	r3, r2
 800afe6:	3384      	adds	r3, #132	; 0x84
 800afe8:	461a      	mov	r2, r3
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afee:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d102      	bne.n	800affe <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800aff8:	2304      	movs	r3, #4
 800affa:	61fb      	str	r3, [r7, #28]
 800affc:	e01b      	b.n	800b036 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d102      	bne.n	800b00c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800b006:	2303      	movs	r3, #3
 800b008:	61fb      	str	r3, [r7, #28]
 800b00a:	e014      	b.n	800b036 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	2b04      	cmp	r3, #4
 800b012:	d00b      	beq.n	800b02c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d007      	beq.n	800b02c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b020:	2b03      	cmp	r3, #3
 800b022:	d003      	beq.n	800b02c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b028:	2b07      	cmp	r3, #7
 800b02a:	d102      	bne.n	800b032 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800b02c:	2302      	movs	r3, #2
 800b02e:	61fb      	str	r3, [r7, #28]
 800b030:	e001      	b.n	800b036 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800b032:	2301      	movs	r3, #1
 800b034:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	461a      	mov	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	01db      	lsls	r3, r3, #7
 800b040:	4413      	add	r3, r2
 800b042:	3384      	adds	r3, #132	; 0x84
 800b044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	6812      	ldr	r2, [r2, #0]
 800b04a:	4611      	mov	r1, r2
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	01d2      	lsls	r2, r2, #7
 800b050:	440a      	add	r2, r1
 800b052:	3284      	adds	r2, #132	; 0x84
 800b054:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800b058:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05e:	69fa      	ldr	r2, [r7, #28]
 800b060:	fb02 f303 	mul.w	r3, r2, r3
 800b064:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	6859      	ldr	r1, [r3, #4]
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	1acb      	subs	r3, r1, r3
 800b070:	69f9      	ldr	r1, [r7, #28]
 800b072:	fb01 f303 	mul.w	r3, r1, r3
 800b076:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b078:	68f9      	ldr	r1, [r7, #12]
 800b07a:	6809      	ldr	r1, [r1, #0]
 800b07c:	4608      	mov	r0, r1
 800b07e:	6879      	ldr	r1, [r7, #4]
 800b080:	01c9      	lsls	r1, r1, #7
 800b082:	4401      	add	r1, r0
 800b084:	3184      	adds	r1, #132	; 0x84
 800b086:	4313      	orrs	r3, r2
 800b088:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	461a      	mov	r2, r3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	01db      	lsls	r3, r3, #7
 800b094:	4413      	add	r3, r2
 800b096:	3384      	adds	r3, #132	; 0x84
 800b098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4619      	mov	r1, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	01db      	lsls	r3, r3, #7
 800b0a4:	440b      	add	r3, r1
 800b0a6:	3384      	adds	r3, #132	; 0x84
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	4b14      	ldr	r3, [pc, #80]	; (800b0fc <LTDC_SetConfig+0x330>)
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	01db      	lsls	r3, r3, #7
 800b0ba:	4413      	add	r3, r2
 800b0bc:	3384      	adds	r3, #132	; 0x84
 800b0be:	461a      	mov	r2, r3
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	01db      	lsls	r3, r3, #7
 800b0d0:	4413      	add	r3, r2
 800b0d2:	3384      	adds	r3, #132	; 0x84
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	6812      	ldr	r2, [r2, #0]
 800b0da:	4611      	mov	r1, r2
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	01d2      	lsls	r2, r2, #7
 800b0e0:	440a      	add	r2, r1
 800b0e2:	3284      	adds	r2, #132	; 0x84
 800b0e4:	f043 0301 	orr.w	r3, r3, #1
 800b0e8:	6013      	str	r3, [r2, #0]
}
 800b0ea:	bf00      	nop
 800b0ec:	3724      	adds	r7, #36	; 0x24
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	fffff8f8 	.word	0xfffff8f8
 800b0fc:	fffff800 	.word	0xfffff800

0800b100 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b100:	b480      	push	{r7}
 800b102:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b104:	4b05      	ldr	r3, [pc, #20]	; (800b11c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a04      	ldr	r2, [pc, #16]	; (800b11c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b10a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b10e:	6013      	str	r3, [r2, #0]
}
 800b110:	bf00      	nop
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop
 800b11c:	40007000 	.word	0x40007000

0800b120 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b12a:	4b23      	ldr	r3, [pc, #140]	; (800b1b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	4a22      	ldr	r2, [pc, #136]	; (800b1b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800b130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b134:	6413      	str	r3, [r2, #64]	; 0x40
 800b136:	4b20      	ldr	r3, [pc, #128]	; (800b1b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800b138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b13e:	603b      	str	r3, [r7, #0]
 800b140:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b142:	4b1e      	ldr	r3, [pc, #120]	; (800b1bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a1d      	ldr	r2, [pc, #116]	; (800b1bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800b148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b14c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b14e:	f7fb f8b9 	bl	80062c4 <HAL_GetTick>
 800b152:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b154:	e009      	b.n	800b16a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b156:	f7fb f8b5 	bl	80062c4 <HAL_GetTick>
 800b15a:	4602      	mov	r2, r0
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b164:	d901      	bls.n	800b16a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b166:	2303      	movs	r3, #3
 800b168:	e022      	b.n	800b1b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b16a:	4b14      	ldr	r3, [pc, #80]	; (800b1bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b176:	d1ee      	bne.n	800b156 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b178:	4b10      	ldr	r3, [pc, #64]	; (800b1bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a0f      	ldr	r2, [pc, #60]	; (800b1bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800b17e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b182:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b184:	f7fb f89e 	bl	80062c4 <HAL_GetTick>
 800b188:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b18a:	e009      	b.n	800b1a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b18c:	f7fb f89a 	bl	80062c4 <HAL_GetTick>
 800b190:	4602      	mov	r2, r0
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b19a:	d901      	bls.n	800b1a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b19c:	2303      	movs	r3, #3
 800b19e:	e007      	b.n	800b1b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b1a0:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1ac:	d1ee      	bne.n	800b18c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	40023800 	.word	0x40023800
 800b1bc:	40007000 	.word	0x40007000

0800b1c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af02      	add	r7, sp, #8
 800b1c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b1c8:	f7fb f87c 	bl	80062c4 <HAL_GetTick>
 800b1cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e067      	b.n	800b2a8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d10b      	bne.n	800b1fc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7f8 fb7b 	bl	80038e8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b1f2:	f241 3188 	movw	r1, #5000	; 0x1388
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fdc0 	bl	800bd7c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	3b01      	subs	r3, #1
 800b20c:	021a      	lsls	r2, r3, #8
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	430a      	orrs	r2, r1
 800b214:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	2120      	movs	r1, #32
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fdeb 	bl	800bdfe <QSPI_WaitFlagStateUntilTimeout>
 800b228:	4603      	mov	r3, r0
 800b22a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b22c:	7afb      	ldrb	r3, [r7, #11]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d135      	bne.n	800b29e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	4b1d      	ldr	r3, [pc, #116]	; (800b2b0 <HAL_QSPI_Init+0xf0>)
 800b23a:	4013      	ands	r3, r2
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	6852      	ldr	r2, [r2, #4]
 800b240:	0611      	lsls	r1, r2, #24
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	68d2      	ldr	r2, [r2, #12]
 800b246:	4311      	orrs	r1, r2
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	69d2      	ldr	r2, [r2, #28]
 800b24c:	4311      	orrs	r1, r2
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	6a12      	ldr	r2, [r2, #32]
 800b252:	4311      	orrs	r1, r2
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	6812      	ldr	r2, [r2, #0]
 800b258:	430b      	orrs	r3, r1
 800b25a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	4b14      	ldr	r3, [pc, #80]	; (800b2b4 <HAL_QSPI_Init+0xf4>)
 800b264:	4013      	ands	r3, r2
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	6912      	ldr	r2, [r2, #16]
 800b26a:	0411      	lsls	r1, r2, #16
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	6952      	ldr	r2, [r2, #20]
 800b270:	4311      	orrs	r1, r2
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	6992      	ldr	r2, [r2, #24]
 800b276:	4311      	orrs	r1, r2
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	6812      	ldr	r2, [r2, #0]
 800b27c:	430b      	orrs	r3, r1
 800b27e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f042 0201 	orr.w	r2, r2, #1
 800b28e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2201      	movs	r2, #1
 800b29a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b2a6:	7afb      	ldrb	r3, [r7, #11]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	00ffff2f 	.word	0x00ffff2f
 800b2b4:	ffe0f8fe 	.word	0xffe0f8fe

0800b2b8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	f003 0304 	and.w	r3, r3, #4
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d064      	beq.n	800b3a4 <HAL_QSPI_IRQHandler+0xec>
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d05f      	beq.n	800b3a4 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3320      	adds	r3, #32
 800b2ea:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	2b12      	cmp	r3, #18
 800b2f6:	d125      	bne.n	800b344 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b2f8:	e01c      	b.n	800b334 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00f      	beq.n	800b322 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b306:	781a      	ldrb	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b310:	1c5a      	adds	r2, r3, #1
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31a:	1e5a      	subs	r2, r3, #1
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	62da      	str	r2, [r3, #44]	; 0x2c
 800b320:	e008      	b.n	800b334 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b330:	601a      	str	r2, [r3, #0]
          break;
 800b332:	e033      	b.n	800b39c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	f003 0304 	and.w	r3, r3, #4
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1db      	bne.n	800b2fa <HAL_QSPI_IRQHandler+0x42>
 800b342:	e02b      	b.n	800b39c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b22      	cmp	r3, #34	; 0x22
 800b34e:	d125      	bne.n	800b39c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b350:	e01d      	b.n	800b38e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b356:	2b00      	cmp	r3, #0
 800b358:	d010      	beq.n	800b37c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	7812      	ldrb	r2, [r2, #0]
 800b362:	b2d2      	uxtb	r2, r2
 800b364:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b374:	1e5a      	subs	r2, r3, #1
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	639a      	str	r2, [r3, #56]	; 0x38
 800b37a:	e008      	b.n	800b38e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b38a:	601a      	str	r2, [r3, #0]
          break;
 800b38c:	e006      	b.n	800b39c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	f003 0304 	and.w	r3, r3, #4
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1da      	bne.n	800b352 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 fbed 	bl	800bb7c <HAL_QSPI_FifoThresholdCallback>
 800b3a2:	e142      	b.n	800b62a <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	f003 0302 	and.w	r3, r3, #2
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f000 80b6 	beq.w	800b51c <HAL_QSPI_IRQHandler+0x264>
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f000 80b0 	beq.w	800b51c <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2202      	movs	r2, #2
 800b3c2:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800b3d2:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	2b12      	cmp	r3, #18
 800b3de:	d123      	bne.n	800b428 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 0304 	and.w	r3, r3, #4
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d011      	beq.n	800b412 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f022 0204 	bic.w	r2, r2, #4
 800b3fc:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f022 0201 	bic.w	r2, r2, #1
 800b410:	601a      	str	r2, [r3, #0]
      }

#if  defined(QSPI1_V1_0)
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fc4a 	bl	800bcac <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fba1 	bl	800bb68 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b426:	e0fd      	b.n	800b624 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	2b22      	cmp	r3, #34	; 0x22
 800b432:	d146      	bne.n	800b4c2 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 0304 	and.w	r3, r3, #4
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d012      	beq.n	800b468 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f022 0204 	bic.w	r2, r2, #4
 800b450:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f022 0201 	bic.w	r2, r2, #1
 800b464:	601a      	str	r2, [r3, #0]
 800b466:	e021      	b.n	800b4ac <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	3320      	adds	r3, #32
 800b46e:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800b470:	e013      	b.n	800b49a <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b476:	2b00      	cmp	r3, #0
 800b478:	d017      	beq.n	800b4aa <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	7812      	ldrb	r2, [r2, #0]
 800b482:	b2d2      	uxtb	r2, r2
 800b484:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48a:	1c5a      	adds	r2, r3, #1
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b494:	1e5a      	subs	r2, r3, #1
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1e4      	bne.n	800b472 <HAL_QSPI_IRQHandler+0x1ba>
 800b4a8:	e000      	b.n	800b4ac <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800b4aa:	bf00      	nop
        }
      }

#if  defined(QSPI1_V1_0)
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fbfd 	bl	800bcac <HAL_QSPI_Abort_IT>
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fb4a 	bl	800bb54 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b4c0:	e0b0      	b.n	800b624 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	d107      	bne.n	800b4de <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fb32 	bl	800bb40 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b4dc:	e0a2      	b.n	800b624 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b08      	cmp	r3, #8
 800b4e8:	f040 809c 	bne.w	800b624 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	695a      	ldr	r2, [r3, #20]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b4fa:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d103      	bne.n	800b514 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 fb0d 	bl	800bb2c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b512:	e087      	b.n	800b624 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 faff 	bl	800bb18 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b51a:	e083      	b.n	800b624 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	f003 0308 	and.w	r3, r3, #8
 800b522:	2b00      	cmp	r3, #0
 800b524:	d01f      	beq.n	800b566 <HAL_QSPI_IRQHandler+0x2ae>
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d01a      	beq.n	800b566 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2208      	movs	r2, #8
 800b536:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00b      	beq.n	800b55e <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800b554:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 fb16 	bl	800bb90 <HAL_QSPI_StatusMatchCallback>
 800b564:	e061      	b.n	800b62a <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d047      	beq.n	800b600 <HAL_QSPI_IRQHandler+0x348>
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b576:	2b00      	cmp	r3, #0
 800b578:	d042      	beq.n	800b600 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2201      	movs	r2, #1
 800b580:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800b590:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b596:	f043 0202 	orr.w	r2, r3, #2
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 0304 	and.w	r3, r3, #4
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d021      	beq.n	800b5f0 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f022 0204 	bic.w	r2, r2, #4
 800b5ba:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c0:	4a1c      	ldr	r2, [pc, #112]	; (800b634 <HAL_QSPI_IRQHandler+0x37c>)
 800b5c2:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fb fe05 	bl	80071d8 <HAL_DMA_Abort_IT>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d029      	beq.n	800b628 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d8:	f043 0204 	orr.w	r2, r3, #4
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 fa95 	bl	800bb18 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b5ee:	e01b      	b.n	800b628 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 fa8d 	bl	800bb18 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b5fe:	e013      	b.n	800b628 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	f003 0310 	and.w	r3, r3, #16
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00f      	beq.n	800b62a <HAL_QSPI_IRQHandler+0x372>
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b610:	2b00      	cmp	r3, #0
 800b612:	d00a      	beq.n	800b62a <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2210      	movs	r2, #16
 800b61a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 fac1 	bl	800bba4 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800b622:	e002      	b.n	800b62a <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800b624:	bf00      	nop
 800b626:	e000      	b.n	800b62a <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800b628:	bf00      	nop
}
 800b62a:	bf00      	nop
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	0800bd99 	.word	0x0800bd99

0800b638 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b088      	sub	sp, #32
 800b63c:	af02      	add	r7, sp, #8
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b644:	f7fa fe3e 	bl	80062c4 <HAL_GetTick>
 800b648:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b650:	b2db      	uxtb	r3, r3
 800b652:	2b01      	cmp	r3, #1
 800b654:	d101      	bne.n	800b65a <HAL_QSPI_Command+0x22>
 800b656:	2302      	movs	r3, #2
 800b658:	e048      	b.n	800b6ec <HAL_QSPI_Command+0xb4>
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d137      	bne.n	800b6de <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2202      	movs	r2, #2
 800b678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	2200      	movs	r2, #0
 800b684:	2120      	movs	r1, #32
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f000 fbb9 	bl	800bdfe <QSPI_WaitFlagStateUntilTimeout>
 800b68c:	4603      	mov	r3, r0
 800b68e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b690:	7dfb      	ldrb	r3, [r7, #23]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d125      	bne.n	800b6e2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b696:	2200      	movs	r2, #0
 800b698:	68b9      	ldr	r1, [r7, #8]
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f000 fbe6 	bl	800be6c <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d115      	bne.n	800b6d4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	2102      	movs	r1, #2
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f000 fba3 	bl	800bdfe <QSPI_WaitFlagStateUntilTimeout>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10f      	bne.n	800b6e2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2202      	movs	r2, #2
 800b6c8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6d2:	e006      	b.n	800b6e2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6dc:	e001      	b.n	800b6e2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800b6de:	2302      	movs	r3, #2
 800b6e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08a      	sub	sp, #40	; 0x28
 800b6f8:	af02      	add	r7, sp, #8
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b704:	f7fa fdde 	bl	80062c4 <HAL_GetTick>
 800b708:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	3320      	adds	r3, #32
 800b710:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d101      	bne.n	800b722 <HAL_QSPI_Transmit+0x2e>
 800b71e:	2302      	movs	r3, #2
 800b720:	e07b      	b.n	800b81a <HAL_QSPI_Transmit+0x126>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2201      	movs	r2, #1
 800b726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b730:	b2db      	uxtb	r3, r3
 800b732:	2b01      	cmp	r3, #1
 800b734:	d16a      	bne.n	800b80c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d05b      	beq.n	800b7fa <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2212      	movs	r2, #18
 800b746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	1c5a      	adds	r2, r3, #1
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	1c5a      	adds	r2, r3, #1
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	695a      	ldr	r2, [r3, #20]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b776:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800b778:	e01b      	b.n	800b7b2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	2201      	movs	r2, #1
 800b782:	2104      	movs	r1, #4
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f000 fb3a 	bl	800bdfe <QSPI_WaitFlagStateUntilTimeout>
 800b78a:	4603      	mov	r3, r0
 800b78c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800b78e:	7ffb      	ldrb	r3, [r7, #31]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d113      	bne.n	800b7bc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b798:	781a      	ldrb	r2, [r3, #0]
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ac:	1e5a      	subs	r2, r3, #1
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1df      	bne.n	800b77a <HAL_QSPI_Transmit+0x86>
 800b7ba:	e000      	b.n	800b7be <HAL_QSPI_Transmit+0xca>
          break;
 800b7bc:	bf00      	nop
      }

      if (status == HAL_OK)
 800b7be:	7ffb      	ldrb	r3, [r7, #31]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d115      	bne.n	800b7f0 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	9300      	str	r3, [sp, #0]
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	2102      	movs	r1, #2
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f000 fb15 	bl	800bdfe <QSPI_WaitFlagStateUntilTimeout>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800b7d8:	7ffb      	ldrb	r3, [r7, #31]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d108      	bne.n	800b7f0 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2202      	movs	r2, #2
 800b7e4:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f000 f9e6 	bl	800bbb8 <HAL_QSPI_Abort>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7f8:	e00a      	b.n	800b810 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fe:	f043 0208 	orr.w	r2, r3, #8
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	77fb      	strb	r3, [r7, #31]
 800b80a:	e001      	b.n	800b810 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b80c:	2302      	movs	r3, #2
 800b80e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2200      	movs	r2, #0
 800b814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b818:	7ffb      	ldrb	r3, [r7, #31]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3720      	adds	r7, #32
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b08a      	sub	sp, #40	; 0x28
 800b826:	af02      	add	r7, sp, #8
 800b828:	60f8      	str	r0, [r7, #12]
 800b82a:	60b9      	str	r1, [r7, #8]
 800b82c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800b832:	f7fa fd47 	bl	80062c4 <HAL_GetTick>
 800b836:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3320      	adds	r3, #32
 800b846:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	2b01      	cmp	r3, #1
 800b852:	d101      	bne.n	800b858 <HAL_QSPI_Receive+0x36>
 800b854:	2302      	movs	r3, #2
 800b856:	e082      	b.n	800b95e <HAL_QSPI_Receive+0x13c>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d171      	bne.n	800b950 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d062      	beq.n	800b93e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2222      	movs	r2, #34	; 0x22
 800b87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	1c5a      	adds	r2, r3, #1
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	691b      	ldr	r3, [r3, #16]
 800b892:	1c5a      	adds	r2, r3, #1
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	695b      	ldr	r3, [r3, #20]
 800b8a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b8b0:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800b8ba:	e01c      	b.n	800b8f6 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	9300      	str	r3, [sp, #0]
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	2106      	movs	r1, #6
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f000 fa99 	bl	800bdfe <QSPI_WaitFlagStateUntilTimeout>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800b8d0:	7ffb      	ldrb	r3, [r7, #31]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d114      	bne.n	800b900 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	7812      	ldrb	r2, [r2, #0]
 800b8de:	b2d2      	uxtb	r2, r2
 800b8e0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e6:	1c5a      	adds	r2, r3, #1
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f0:	1e5a      	subs	r2, r3, #1
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d1de      	bne.n	800b8bc <HAL_QSPI_Receive+0x9a>
 800b8fe:	e000      	b.n	800b902 <HAL_QSPI_Receive+0xe0>
          break;
 800b900:	bf00      	nop
      }

      if (status == HAL_OK)
 800b902:	7ffb      	ldrb	r3, [r7, #31]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d115      	bne.n	800b934 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	2201      	movs	r2, #1
 800b910:	2102      	movs	r1, #2
 800b912:	68f8      	ldr	r0, [r7, #12]
 800b914:	f000 fa73 	bl	800bdfe <QSPI_WaitFlagStateUntilTimeout>
 800b918:	4603      	mov	r3, r0
 800b91a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800b91c:	7ffb      	ldrb	r3, [r7, #31]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d108      	bne.n	800b934 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2202      	movs	r2, #2
 800b928:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f000 f944 	bl	800bbb8 <HAL_QSPI_Abort>
 800b930:	4603      	mov	r3, r0
 800b932:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2201      	movs	r2, #1
 800b938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b93c:	e00a      	b.n	800b954 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b942:	f043 0208 	orr.w	r2, r3, #8
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	77fb      	strb	r3, [r7, #31]
 800b94e:	e001      	b.n	800b954 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 800b950:	2302      	movs	r3, #2
 800b952:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800b95c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3720      	adds	r7, #32
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b088      	sub	sp, #32
 800b96a:	af02      	add	r7, sp, #8
 800b96c:	60f8      	str	r0, [r7, #12]
 800b96e:	60b9      	str	r1, [r7, #8]
 800b970:	607a      	str	r2, [r7, #4]
 800b972:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b974:	f7fa fca6 	bl	80062c4 <HAL_GetTick>
 800b978:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b01      	cmp	r3, #1
 800b984:	d101      	bne.n	800b98a <HAL_QSPI_AutoPolling+0x24>
 800b986:	2302      	movs	r3, #2
 800b988:	e060      	b.n	800ba4c <HAL_QSPI_AutoPolling+0xe6>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d14f      	bne.n	800ba3e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2242      	movs	r2, #66	; 0x42
 800b9a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2120      	movs	r1, #32
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f000 fa21 	bl	800bdfe <QSPI_WaitFlagStateUntilTimeout>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d13d      	bne.n	800ba42 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	6812      	ldr	r2, [r2, #0]
 800b9ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	6852      	ldr	r2, [r2, #4]
 800b9d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	6892      	ldr	r2, [r2, #8]
 800b9e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	431a      	orrs	r2, r3
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800b9fc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68da      	ldr	r2, [r3, #12]
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ba06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ba0a:	68b9      	ldr	r1, [r7, #8]
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f000 fa2d 	bl	800be6c <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	9300      	str	r3, [sp, #0]
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	2108      	movs	r1, #8
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f000 f9ee 	bl	800bdfe <QSPI_WaitFlagStateUntilTimeout>
 800ba22:	4603      	mov	r3, r0
 800ba24:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10a      	bne.n	800ba42 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2208      	movs	r2, #8
 800ba32:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba3c:	e001      	b.n	800ba42 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800ba3e:	2302      	movs	r3, #2
 800ba40:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800ba4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ba60:	f7fa fc30 	bl	80062c4 <HAL_GetTick>
 800ba64:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d101      	bne.n	800ba76 <HAL_QSPI_MemoryMapped+0x22>
 800ba72:	2302      	movs	r3, #2
 800ba74:	e04c      	b.n	800bb10 <HAL_QSPI_MemoryMapped+0xbc>
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d13b      	bne.n	800bb02 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2282      	movs	r2, #130	; 0x82
 800ba94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba9c:	9300      	str	r3, [sp, #0]
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	2200      	movs	r2, #0
 800baa2:	2120      	movs	r1, #32
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f000 f9aa 	bl	800bdfe <QSPI_WaitFlagStateUntilTimeout>
 800baaa:	4603      	mov	r3, r0
 800baac:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800baae:	7dfb      	ldrb	r3, [r7, #23]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d128      	bne.n	800bb06 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f023 0108 	bic.w	r1, r3, #8
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	685a      	ldr	r2, [r3, #4]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	430a      	orrs	r2, r1
 800bac8:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	2b08      	cmp	r3, #8
 800bad0:	d110      	bne.n	800baf4 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	6812      	ldr	r2, [r2, #0]
 800bada:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2210      	movs	r2, #16
 800bae2:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800baf2:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800baf4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800baf8:	68b9      	ldr	r1, [r7, #8]
 800bafa:	68f8      	ldr	r0, [r7, #12]
 800bafc:	f000 f9b6 	bl	800be6c <QSPI_Config>
 800bb00:	e001      	b.n	800bb06 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800bb02:	2302      	movs	r3, #2
 800bb04:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800bb0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3718      	adds	r7, #24
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800bb20:	bf00      	nop
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b083      	sub	sp, #12
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800bb98:	bf00      	nop
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af02      	add	r7, sp, #8
 800bbbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800bbc4:	f7fa fb7e 	bl	80062c4 <HAL_GetTick>
 800bbc8:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	f003 0302 	and.w	r3, r3, #2
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d062      	beq.n	800bca0 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 0304 	and.w	r3, r3, #4
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d017      	beq.n	800bc20 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f022 0204 	bic.w	r2, r2, #4
 800bbfe:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fb fa77 	bl	80070f8 <HAL_DMA_Abort>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800bc0e:	7bfb      	ldrb	r3, [r7, #15]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d005      	beq.n	800bc20 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc18:	f043 0204 	orr.w	r2, r3, #4
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	f003 0320 	and.w	r3, r3, #32
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d034      	beq.n	800bc98 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f042 0202 	orr.w	r2, r2, #2
 800bc3c:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2201      	movs	r2, #1
 800bc48:	2102      	movs	r1, #2
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f8d7 	bl	800bdfe <QSPI_WaitFlagStateUntilTimeout>
 800bc50:	4603      	mov	r3, r0
 800bc52:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800bc54:	7bfb      	ldrb	r3, [r7, #15]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10e      	bne.n	800bc78 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2202      	movs	r2, #2
 800bc60:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	2120      	movs	r1, #32
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f8c5 	bl	800bdfe <QSPI_WaitFlagStateUntilTimeout>
 800bc74:	4603      	mov	r3, r0
 800bc76:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800bc78:	7bfb      	ldrb	r3, [r7, #15]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d110      	bne.n	800bca0 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	695a      	ldr	r2, [r3, #20]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800bc8c:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc96:	e003      	b.n	800bca0 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800bca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	f003 0302 	and.w	r3, r3, #2
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d052      	beq.n	800bd6e <HAL_QSPI_Abort_IT+0xc2>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2208      	movs	r2, #8
 800bcd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800bce6:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 0304 	and.w	r3, r3, #4
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d01b      	beq.n	800bd2e <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f022 0204 	bic.w	r2, r2, #4
 800bd04:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd0a:	4a1b      	ldr	r2, [pc, #108]	; (800bd78 <HAL_QSPI_Abort_IT+0xcc>)
 800bd0c:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fb fa60 	bl	80071d8 <HAL_DMA_Abort_IT>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d027      	beq.n	800bd6e <HAL_QSPI_Abort_IT+0xc2>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7ff ff00 	bl	800bb2c <HAL_QSPI_AbortCpltCallback>
 800bd2c:	e01f      	b.n	800bd6e <HAL_QSPI_Abort_IT+0xc2>
#endif
      }
    }
    else
    {
      if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	f003 0320 	and.w	r3, r3, #32
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d014      	beq.n	800bd66 <HAL_QSPI_Abort_IT+0xba>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2202      	movs	r2, #2
 800bd42:	60da      	str	r2, [r3, #12]
        
        /* Enable the QSPI Transfer Complete Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bd52:	601a      	str	r2, [r3, #0]
        
        /* Configure QSPI: CR register with Abort request */
        SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f042 0202 	orr.w	r2, r2, #2
 800bd62:	601a      	str	r2, [r3, #0]
 800bd64:	e003      	b.n	800bd6e <HAL_QSPI_Abort_IT+0xc2>
      }    
      else
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      }
    }
  }
  return status;
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	0800bd99 	.word	0x0800bd99

0800bd7c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	683a      	ldr	r2, [r7, #0]
 800bd8a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800bd8c:	bf00      	nop
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda4:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	2b08      	cmp	r3, #8
 800bdbc:	d114      	bne.n	800bde8 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2202      	movs	r2, #2
 800bdc4:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bdd4:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f042 0202 	orr.w	r2, r2, #2
 800bde4:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800bde6:	e006      	b.n	800bdf6 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f7ff fe91 	bl	800bb18 <HAL_QSPI_ErrorCallback>
}
 800bdf6:	bf00      	nop
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800bdfe:	b580      	push	{r7, lr}
 800be00:	b084      	sub	sp, #16
 800be02:	af00      	add	r7, sp, #0
 800be04:	60f8      	str	r0, [r7, #12]
 800be06:	60b9      	str	r1, [r7, #8]
 800be08:	603b      	str	r3, [r7, #0]
 800be0a:	4613      	mov	r3, r2
 800be0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800be0e:	e01a      	b.n	800be46 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be16:	d016      	beq.n	800be46 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be18:	f7fa fa54 	bl	80062c4 <HAL_GetTick>
 800be1c:	4602      	mov	r2, r0
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	1ad3      	subs	r3, r2, r3
 800be22:	69ba      	ldr	r2, [r7, #24]
 800be24:	429a      	cmp	r2, r3
 800be26:	d302      	bcc.n	800be2e <QSPI_WaitFlagStateUntilTimeout+0x30>
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10b      	bne.n	800be46 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2204      	movs	r2, #4
 800be32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be3a:	f043 0201 	orr.w	r2, r3, #1
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e00e      	b.n	800be64 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	689a      	ldr	r2, [r3, #8]
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	4013      	ands	r3, r2
 800be50:	2b00      	cmp	r3, #0
 800be52:	bf14      	ite	ne
 800be54:	2301      	movne	r3, #1
 800be56:	2300      	moveq	r3, #0
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	461a      	mov	r2, r3
 800be5c:	79fb      	ldrb	r3, [r7, #7]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d1d6      	bne.n	800be10 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d009      	beq.n	800be94 <QSPI_Config+0x28>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800be86:	d005      	beq.n	800be94 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	3a01      	subs	r2, #1
 800be92:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	699b      	ldr	r3, [r3, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f000 80b9 	beq.w	800c010 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	6a1b      	ldr	r3, [r3, #32]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d05f      	beq.n	800bf66 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	6892      	ldr	r2, [r2, #8]
 800beae:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	69db      	ldr	r3, [r3, #28]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d031      	beq.n	800bf1c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec0:	431a      	orrs	r2, r3
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec6:	431a      	orrs	r2, r3
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800becc:	431a      	orrs	r2, r3
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	049b      	lsls	r3, r3, #18
 800bed4:	431a      	orrs	r2, r3
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	431a      	orrs	r2, r3
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	6a1b      	ldr	r3, [r3, #32]
 800bee0:	431a      	orrs	r2, r3
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	431a      	orrs	r2, r3
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	69db      	ldr	r3, [r3, #28]
 800beec:	431a      	orrs	r2, r3
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	699b      	ldr	r3, [r3, #24]
 800bef2:	431a      	orrs	r2, r3
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	ea42 0103 	orr.w	r1, r2, r3
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	430a      	orrs	r2, r1
 800bf04:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bf0c:	f000 812e 	beq.w	800c16c <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	6852      	ldr	r2, [r2, #4]
 800bf18:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800bf1a:	e127      	b.n	800c16c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf24:	431a      	orrs	r2, r3
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf2a:	431a      	orrs	r2, r3
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf30:	431a      	orrs	r2, r3
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	049b      	lsls	r3, r3, #18
 800bf38:	431a      	orrs	r2, r3
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	431a      	orrs	r2, r3
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	6a1b      	ldr	r3, [r3, #32]
 800bf44:	431a      	orrs	r2, r3
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	69db      	ldr	r3, [r3, #28]
 800bf4a:	431a      	orrs	r2, r3
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	431a      	orrs	r2, r3
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	ea42 0103 	orr.w	r1, r2, r3
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	430a      	orrs	r2, r1
 800bf62:	615a      	str	r2, [r3, #20]
}
 800bf64:	e102      	b.n	800c16c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	69db      	ldr	r3, [r3, #28]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d02e      	beq.n	800bfcc <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf76:	431a      	orrs	r2, r3
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf7c:	431a      	orrs	r2, r3
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf82:	431a      	orrs	r2, r3
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	695b      	ldr	r3, [r3, #20]
 800bf88:	049b      	lsls	r3, r3, #18
 800bf8a:	431a      	orrs	r2, r3
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	6a1b      	ldr	r3, [r3, #32]
 800bf90:	431a      	orrs	r2, r3
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	431a      	orrs	r2, r3
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	69db      	ldr	r3, [r3, #28]
 800bf9c:	431a      	orrs	r2, r3
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	431a      	orrs	r2, r3
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	ea42 0103 	orr.w	r1, r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	430a      	orrs	r2, r1
 800bfb4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bfbc:	f000 80d6 	beq.w	800c16c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	6852      	ldr	r2, [r2, #4]
 800bfc8:	619a      	str	r2, [r3, #24]
}
 800bfca:	e0cf      	b.n	800c16c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd4:	431a      	orrs	r2, r3
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfda:	431a      	orrs	r2, r3
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe0:	431a      	orrs	r2, r3
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	695b      	ldr	r3, [r3, #20]
 800bfe6:	049b      	lsls	r3, r3, #18
 800bfe8:	431a      	orrs	r2, r3
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	6a1b      	ldr	r3, [r3, #32]
 800bfee:	431a      	orrs	r2, r3
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	69db      	ldr	r3, [r3, #28]
 800bff4:	431a      	orrs	r2, r3
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	699b      	ldr	r3, [r3, #24]
 800bffa:	431a      	orrs	r2, r3
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	ea42 0103 	orr.w	r1, r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	430a      	orrs	r2, r1
 800c00c:	615a      	str	r2, [r3, #20]
}
 800c00e:	e0ad      	b.n	800c16c <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	6a1b      	ldr	r3, [r3, #32]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d058      	beq.n	800c0ca <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	6892      	ldr	r2, [r2, #8]
 800c020:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	69db      	ldr	r3, [r3, #28]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d02d      	beq.n	800c086 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c032:	431a      	orrs	r2, r3
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c038:	431a      	orrs	r2, r3
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03e:	431a      	orrs	r2, r3
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	695b      	ldr	r3, [r3, #20]
 800c044:	049b      	lsls	r3, r3, #18
 800c046:	431a      	orrs	r2, r3
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	431a      	orrs	r2, r3
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	6a1b      	ldr	r3, [r3, #32]
 800c052:	431a      	orrs	r2, r3
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	431a      	orrs	r2, r3
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	69db      	ldr	r3, [r3, #28]
 800c05e:	431a      	orrs	r2, r3
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	699b      	ldr	r3, [r3, #24]
 800c064:	ea42 0103 	orr.w	r1, r2, r3
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	430a      	orrs	r2, r1
 800c070:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c078:	d078      	beq.n	800c16c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	6852      	ldr	r2, [r2, #4]
 800c082:	619a      	str	r2, [r3, #24]
}
 800c084:	e072      	b.n	800c16c <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08e:	431a      	orrs	r2, r3
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c094:	431a      	orrs	r2, r3
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c09a:	431a      	orrs	r2, r3
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	695b      	ldr	r3, [r3, #20]
 800c0a0:	049b      	lsls	r3, r3, #18
 800c0a2:	431a      	orrs	r2, r3
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	431a      	orrs	r2, r3
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	69db      	ldr	r3, [r3, #28]
 800c0b4:	431a      	orrs	r2, r3
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	699b      	ldr	r3, [r3, #24]
 800c0ba:	ea42 0103 	orr.w	r1, r2, r3
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	430a      	orrs	r2, r1
 800c0c6:	615a      	str	r2, [r3, #20]
}
 800c0c8:	e050      	b.n	800c16c <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	69db      	ldr	r3, [r3, #28]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d02a      	beq.n	800c128 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0da:	431a      	orrs	r2, r3
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0e0:	431a      	orrs	r2, r3
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e6:	431a      	orrs	r2, r3
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	695b      	ldr	r3, [r3, #20]
 800c0ec:	049b      	lsls	r3, r3, #18
 800c0ee:	431a      	orrs	r2, r3
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	6a1b      	ldr	r3, [r3, #32]
 800c0f4:	431a      	orrs	r2, r3
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	431a      	orrs	r2, r3
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	69db      	ldr	r3, [r3, #28]
 800c100:	431a      	orrs	r2, r3
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	699b      	ldr	r3, [r3, #24]
 800c106:	ea42 0103 	orr.w	r1, r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	430a      	orrs	r2, r1
 800c112:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c11a:	d027      	beq.n	800c16c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	6852      	ldr	r2, [r2, #4]
 800c124:	619a      	str	r2, [r3, #24]
}
 800c126:	e021      	b.n	800c16c <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d01d      	beq.n	800c16c <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c138:	431a      	orrs	r2, r3
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c13e:	431a      	orrs	r2, r3
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c144:	431a      	orrs	r2, r3
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	049b      	lsls	r3, r3, #18
 800c14c:	431a      	orrs	r2, r3
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	6a1b      	ldr	r3, [r3, #32]
 800c152:	431a      	orrs	r2, r3
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	69db      	ldr	r3, [r3, #28]
 800c158:	431a      	orrs	r2, r3
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	699b      	ldr	r3, [r3, #24]
 800c15e:	ea42 0103 	orr.w	r1, r2, r3
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	430a      	orrs	r2, r1
 800c16a:	615a      	str	r2, [r3, #20]
}
 800c16c:	bf00      	nop
 800c16e:	3714      	adds	r7, #20
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c180:	2300      	movs	r3, #0
 800c182:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d101      	bne.n	800c18e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	e291      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f003 0301 	and.w	r3, r3, #1
 800c196:	2b00      	cmp	r3, #0
 800c198:	f000 8087 	beq.w	800c2aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c19c:	4b96      	ldr	r3, [pc, #600]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	f003 030c 	and.w	r3, r3, #12
 800c1a4:	2b04      	cmp	r3, #4
 800c1a6:	d00c      	beq.n	800c1c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c1a8:	4b93      	ldr	r3, [pc, #588]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	f003 030c 	and.w	r3, r3, #12
 800c1b0:	2b08      	cmp	r3, #8
 800c1b2:	d112      	bne.n	800c1da <HAL_RCC_OscConfig+0x62>
 800c1b4:	4b90      	ldr	r3, [pc, #576]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1c0:	d10b      	bne.n	800c1da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1c2:	4b8d      	ldr	r3, [pc, #564]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d06c      	beq.n	800c2a8 <HAL_RCC_OscConfig+0x130>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d168      	bne.n	800c2a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e26b      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1e2:	d106      	bne.n	800c1f2 <HAL_RCC_OscConfig+0x7a>
 800c1e4:	4b84      	ldr	r3, [pc, #528]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a83      	ldr	r2, [pc, #524]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c1ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1ee:	6013      	str	r3, [r2, #0]
 800c1f0:	e02e      	b.n	800c250 <HAL_RCC_OscConfig+0xd8>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10c      	bne.n	800c214 <HAL_RCC_OscConfig+0x9c>
 800c1fa:	4b7f      	ldr	r3, [pc, #508]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a7e      	ldr	r2, [pc, #504]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	4b7c      	ldr	r3, [pc, #496]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a7b      	ldr	r2, [pc, #492]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c20c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c210:	6013      	str	r3, [r2, #0]
 800c212:	e01d      	b.n	800c250 <HAL_RCC_OscConfig+0xd8>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c21c:	d10c      	bne.n	800c238 <HAL_RCC_OscConfig+0xc0>
 800c21e:	4b76      	ldr	r3, [pc, #472]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a75      	ldr	r2, [pc, #468]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c228:	6013      	str	r3, [r2, #0]
 800c22a:	4b73      	ldr	r3, [pc, #460]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a72      	ldr	r2, [pc, #456]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c234:	6013      	str	r3, [r2, #0]
 800c236:	e00b      	b.n	800c250 <HAL_RCC_OscConfig+0xd8>
 800c238:	4b6f      	ldr	r3, [pc, #444]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a6e      	ldr	r2, [pc, #440]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c23e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c242:	6013      	str	r3, [r2, #0]
 800c244:	4b6c      	ldr	r3, [pc, #432]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4a6b      	ldr	r2, [pc, #428]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c24a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c24e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d013      	beq.n	800c280 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c258:	f7fa f834 	bl	80062c4 <HAL_GetTick>
 800c25c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c25e:	e008      	b.n	800c272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c260:	f7fa f830 	bl	80062c4 <HAL_GetTick>
 800c264:	4602      	mov	r2, r0
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	2b64      	cmp	r3, #100	; 0x64
 800c26c:	d901      	bls.n	800c272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c26e:	2303      	movs	r3, #3
 800c270:	e21f      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c272:	4b61      	ldr	r3, [pc, #388]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d0f0      	beq.n	800c260 <HAL_RCC_OscConfig+0xe8>
 800c27e:	e014      	b.n	800c2aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c280:	f7fa f820 	bl	80062c4 <HAL_GetTick>
 800c284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c286:	e008      	b.n	800c29a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c288:	f7fa f81c 	bl	80062c4 <HAL_GetTick>
 800c28c:	4602      	mov	r2, r0
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	1ad3      	subs	r3, r2, r3
 800c292:	2b64      	cmp	r3, #100	; 0x64
 800c294:	d901      	bls.n	800c29a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c296:	2303      	movs	r3, #3
 800c298:	e20b      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c29a:	4b57      	ldr	r3, [pc, #348]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1f0      	bne.n	800c288 <HAL_RCC_OscConfig+0x110>
 800c2a6:	e000      	b.n	800c2aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f003 0302 	and.w	r3, r3, #2
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d069      	beq.n	800c38a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c2b6:	4b50      	ldr	r3, [pc, #320]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	f003 030c 	and.w	r3, r3, #12
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00b      	beq.n	800c2da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c2c2:	4b4d      	ldr	r3, [pc, #308]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	f003 030c 	and.w	r3, r3, #12
 800c2ca:	2b08      	cmp	r3, #8
 800c2cc:	d11c      	bne.n	800c308 <HAL_RCC_OscConfig+0x190>
 800c2ce:	4b4a      	ldr	r3, [pc, #296]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d116      	bne.n	800c308 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c2da:	4b47      	ldr	r3, [pc, #284]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f003 0302 	and.w	r3, r3, #2
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d005      	beq.n	800c2f2 <HAL_RCC_OscConfig+0x17a>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d001      	beq.n	800c2f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e1df      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2f2:	4b41      	ldr	r3, [pc, #260]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	691b      	ldr	r3, [r3, #16]
 800c2fe:	00db      	lsls	r3, r3, #3
 800c300:	493d      	ldr	r1, [pc, #244]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c302:	4313      	orrs	r3, r2
 800c304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c306:	e040      	b.n	800c38a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d023      	beq.n	800c358 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c310:	4b39      	ldr	r3, [pc, #228]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a38      	ldr	r2, [pc, #224]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c316:	f043 0301 	orr.w	r3, r3, #1
 800c31a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c31c:	f7f9 ffd2 	bl	80062c4 <HAL_GetTick>
 800c320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c322:	e008      	b.n	800c336 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c324:	f7f9 ffce 	bl	80062c4 <HAL_GetTick>
 800c328:	4602      	mov	r2, r0
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d901      	bls.n	800c336 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800c332:	2303      	movs	r3, #3
 800c334:	e1bd      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c336:	4b30      	ldr	r3, [pc, #192]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f003 0302 	and.w	r3, r3, #2
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d0f0      	beq.n	800c324 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c342:	4b2d      	ldr	r3, [pc, #180]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	4929      	ldr	r1, [pc, #164]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c352:	4313      	orrs	r3, r2
 800c354:	600b      	str	r3, [r1, #0]
 800c356:	e018      	b.n	800c38a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c358:	4b27      	ldr	r3, [pc, #156]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a26      	ldr	r2, [pc, #152]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c35e:	f023 0301 	bic.w	r3, r3, #1
 800c362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c364:	f7f9 ffae 	bl	80062c4 <HAL_GetTick>
 800c368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c36a:	e008      	b.n	800c37e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c36c:	f7f9 ffaa 	bl	80062c4 <HAL_GetTick>
 800c370:	4602      	mov	r2, r0
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	1ad3      	subs	r3, r2, r3
 800c376:	2b02      	cmp	r3, #2
 800c378:	d901      	bls.n	800c37e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c37a:	2303      	movs	r3, #3
 800c37c:	e199      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c37e:	4b1e      	ldr	r3, [pc, #120]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f003 0302 	and.w	r3, r3, #2
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1f0      	bne.n	800c36c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f003 0308 	and.w	r3, r3, #8
 800c392:	2b00      	cmp	r3, #0
 800c394:	d038      	beq.n	800c408 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	695b      	ldr	r3, [r3, #20]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d019      	beq.n	800c3d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c39e:	4b16      	ldr	r3, [pc, #88]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c3a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3a2:	4a15      	ldr	r2, [pc, #84]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c3a4:	f043 0301 	orr.w	r3, r3, #1
 800c3a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3aa:	f7f9 ff8b 	bl	80062c4 <HAL_GetTick>
 800c3ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c3b0:	e008      	b.n	800c3c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c3b2:	f7f9 ff87 	bl	80062c4 <HAL_GetTick>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	1ad3      	subs	r3, r2, r3
 800c3bc:	2b02      	cmp	r3, #2
 800c3be:	d901      	bls.n	800c3c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	e176      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c3c4:	4b0c      	ldr	r3, [pc, #48]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c3c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3c8:	f003 0302 	and.w	r3, r3, #2
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d0f0      	beq.n	800c3b2 <HAL_RCC_OscConfig+0x23a>
 800c3d0:	e01a      	b.n	800c408 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c3d2:	4b09      	ldr	r3, [pc, #36]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c3d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3d6:	4a08      	ldr	r2, [pc, #32]	; (800c3f8 <HAL_RCC_OscConfig+0x280>)
 800c3d8:	f023 0301 	bic.w	r3, r3, #1
 800c3dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3de:	f7f9 ff71 	bl	80062c4 <HAL_GetTick>
 800c3e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3e4:	e00a      	b.n	800c3fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c3e6:	f7f9 ff6d 	bl	80062c4 <HAL_GetTick>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	1ad3      	subs	r3, r2, r3
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	d903      	bls.n	800c3fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c3f4:	2303      	movs	r3, #3
 800c3f6:	e15c      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
 800c3f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3fc:	4b91      	ldr	r3, [pc, #580]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c3fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c400:	f003 0302 	and.w	r3, r3, #2
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1ee      	bne.n	800c3e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f003 0304 	and.w	r3, r3, #4
 800c410:	2b00      	cmp	r3, #0
 800c412:	f000 80a4 	beq.w	800c55e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c416:	4b8b      	ldr	r3, [pc, #556]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c41a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10d      	bne.n	800c43e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800c422:	4b88      	ldr	r3, [pc, #544]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c426:	4a87      	ldr	r2, [pc, #540]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c42c:	6413      	str	r3, [r2, #64]	; 0x40
 800c42e:	4b85      	ldr	r3, [pc, #532]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c436:	60bb      	str	r3, [r7, #8]
 800c438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c43a:	2301      	movs	r3, #1
 800c43c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c43e:	4b82      	ldr	r3, [pc, #520]	; (800c648 <HAL_RCC_OscConfig+0x4d0>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c446:	2b00      	cmp	r3, #0
 800c448:	d118      	bne.n	800c47c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800c44a:	4b7f      	ldr	r3, [pc, #508]	; (800c648 <HAL_RCC_OscConfig+0x4d0>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a7e      	ldr	r2, [pc, #504]	; (800c648 <HAL_RCC_OscConfig+0x4d0>)
 800c450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c456:	f7f9 ff35 	bl	80062c4 <HAL_GetTick>
 800c45a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c45c:	e008      	b.n	800c470 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c45e:	f7f9 ff31 	bl	80062c4 <HAL_GetTick>
 800c462:	4602      	mov	r2, r0
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	2b64      	cmp	r3, #100	; 0x64
 800c46a:	d901      	bls.n	800c470 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800c46c:	2303      	movs	r3, #3
 800c46e:	e120      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c470:	4b75      	ldr	r3, [pc, #468]	; (800c648 <HAL_RCC_OscConfig+0x4d0>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d0f0      	beq.n	800c45e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	2b01      	cmp	r3, #1
 800c482:	d106      	bne.n	800c492 <HAL_RCC_OscConfig+0x31a>
 800c484:	4b6f      	ldr	r3, [pc, #444]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c488:	4a6e      	ldr	r2, [pc, #440]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c48a:	f043 0301 	orr.w	r3, r3, #1
 800c48e:	6713      	str	r3, [r2, #112]	; 0x70
 800c490:	e02d      	b.n	800c4ee <HAL_RCC_OscConfig+0x376>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10c      	bne.n	800c4b4 <HAL_RCC_OscConfig+0x33c>
 800c49a:	4b6a      	ldr	r3, [pc, #424]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c49e:	4a69      	ldr	r2, [pc, #420]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c4a0:	f023 0301 	bic.w	r3, r3, #1
 800c4a4:	6713      	str	r3, [r2, #112]	; 0x70
 800c4a6:	4b67      	ldr	r3, [pc, #412]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4aa:	4a66      	ldr	r2, [pc, #408]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c4ac:	f023 0304 	bic.w	r3, r3, #4
 800c4b0:	6713      	str	r3, [r2, #112]	; 0x70
 800c4b2:	e01c      	b.n	800c4ee <HAL_RCC_OscConfig+0x376>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	2b05      	cmp	r3, #5
 800c4ba:	d10c      	bne.n	800c4d6 <HAL_RCC_OscConfig+0x35e>
 800c4bc:	4b61      	ldr	r3, [pc, #388]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c4be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c0:	4a60      	ldr	r2, [pc, #384]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c4c2:	f043 0304 	orr.w	r3, r3, #4
 800c4c6:	6713      	str	r3, [r2, #112]	; 0x70
 800c4c8:	4b5e      	ldr	r3, [pc, #376]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c4ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4cc:	4a5d      	ldr	r2, [pc, #372]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c4ce:	f043 0301 	orr.w	r3, r3, #1
 800c4d2:	6713      	str	r3, [r2, #112]	; 0x70
 800c4d4:	e00b      	b.n	800c4ee <HAL_RCC_OscConfig+0x376>
 800c4d6:	4b5b      	ldr	r3, [pc, #364]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4da:	4a5a      	ldr	r2, [pc, #360]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c4dc:	f023 0301 	bic.w	r3, r3, #1
 800c4e0:	6713      	str	r3, [r2, #112]	; 0x70
 800c4e2:	4b58      	ldr	r3, [pc, #352]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c4e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4e6:	4a57      	ldr	r2, [pc, #348]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c4e8:	f023 0304 	bic.w	r3, r3, #4
 800c4ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d015      	beq.n	800c522 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4f6:	f7f9 fee5 	bl	80062c4 <HAL_GetTick>
 800c4fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4fc:	e00a      	b.n	800c514 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c4fe:	f7f9 fee1 	bl	80062c4 <HAL_GetTick>
 800c502:	4602      	mov	r2, r0
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	1ad3      	subs	r3, r2, r3
 800c508:	f241 3288 	movw	r2, #5000	; 0x1388
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d901      	bls.n	800c514 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800c510:	2303      	movs	r3, #3
 800c512:	e0ce      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c514:	4b4b      	ldr	r3, [pc, #300]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c518:	f003 0302 	and.w	r3, r3, #2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d0ee      	beq.n	800c4fe <HAL_RCC_OscConfig+0x386>
 800c520:	e014      	b.n	800c54c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c522:	f7f9 fecf 	bl	80062c4 <HAL_GetTick>
 800c526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c528:	e00a      	b.n	800c540 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c52a:	f7f9 fecb 	bl	80062c4 <HAL_GetTick>
 800c52e:	4602      	mov	r2, r0
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	1ad3      	subs	r3, r2, r3
 800c534:	f241 3288 	movw	r2, #5000	; 0x1388
 800c538:	4293      	cmp	r3, r2
 800c53a:	d901      	bls.n	800c540 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800c53c:	2303      	movs	r3, #3
 800c53e:	e0b8      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c540:	4b40      	ldr	r3, [pc, #256]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c544:	f003 0302 	and.w	r3, r3, #2
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1ee      	bne.n	800c52a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c54c:	7dfb      	ldrb	r3, [r7, #23]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d105      	bne.n	800c55e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c552:	4b3c      	ldr	r3, [pc, #240]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c556:	4a3b      	ldr	r2, [pc, #236]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c55c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	699b      	ldr	r3, [r3, #24]
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 80a4 	beq.w	800c6b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c568:	4b36      	ldr	r3, [pc, #216]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	f003 030c 	and.w	r3, r3, #12
 800c570:	2b08      	cmp	r3, #8
 800c572:	d06b      	beq.n	800c64c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	699b      	ldr	r3, [r3, #24]
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d149      	bne.n	800c610 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c57c:	4b31      	ldr	r3, [pc, #196]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a30      	ldr	r2, [pc, #192]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c588:	f7f9 fe9c 	bl	80062c4 <HAL_GetTick>
 800c58c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c58e:	e008      	b.n	800c5a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c590:	f7f9 fe98 	bl	80062c4 <HAL_GetTick>
 800c594:	4602      	mov	r2, r0
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	1ad3      	subs	r3, r2, r3
 800c59a:	2b02      	cmp	r3, #2
 800c59c:	d901      	bls.n	800c5a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800c59e:	2303      	movs	r3, #3
 800c5a0:	e087      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5a2:	4b28      	ldr	r3, [pc, #160]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1f0      	bne.n	800c590 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	69da      	ldr	r2, [r3, #28]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a1b      	ldr	r3, [r3, #32]
 800c5b6:	431a      	orrs	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5bc:	019b      	lsls	r3, r3, #6
 800c5be:	431a      	orrs	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c4:	085b      	lsrs	r3, r3, #1
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	041b      	lsls	r3, r3, #16
 800c5ca:	431a      	orrs	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d0:	061b      	lsls	r3, r3, #24
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	4a1b      	ldr	r2, [pc, #108]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c5d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5da:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c5dc:	4b19      	ldr	r3, [pc, #100]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a18      	ldr	r2, [pc, #96]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c5e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c5e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5e8:	f7f9 fe6c 	bl	80062c4 <HAL_GetTick>
 800c5ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c5ee:	e008      	b.n	800c602 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5f0:	f7f9 fe68 	bl	80062c4 <HAL_GetTick>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d901      	bls.n	800c602 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800c5fe:	2303      	movs	r3, #3
 800c600:	e057      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c602:	4b10      	ldr	r3, [pc, #64]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d0f0      	beq.n	800c5f0 <HAL_RCC_OscConfig+0x478>
 800c60e:	e04f      	b.n	800c6b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c610:	4b0c      	ldr	r3, [pc, #48]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a0b      	ldr	r2, [pc, #44]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c61a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c61c:	f7f9 fe52 	bl	80062c4 <HAL_GetTick>
 800c620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c622:	e008      	b.n	800c636 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c624:	f7f9 fe4e 	bl	80062c4 <HAL_GetTick>
 800c628:	4602      	mov	r2, r0
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	1ad3      	subs	r3, r2, r3
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d901      	bls.n	800c636 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800c632:	2303      	movs	r3, #3
 800c634:	e03d      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c636:	4b03      	ldr	r3, [pc, #12]	; (800c644 <HAL_RCC_OscConfig+0x4cc>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1f0      	bne.n	800c624 <HAL_RCC_OscConfig+0x4ac>
 800c642:	e035      	b.n	800c6b0 <HAL_RCC_OscConfig+0x538>
 800c644:	40023800 	.word	0x40023800
 800c648:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800c64c:	4b1b      	ldr	r3, [pc, #108]	; (800c6bc <HAL_RCC_OscConfig+0x544>)
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	699b      	ldr	r3, [r3, #24]
 800c656:	2b01      	cmp	r3, #1
 800c658:	d028      	beq.n	800c6ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c664:	429a      	cmp	r2, r3
 800c666:	d121      	bne.n	800c6ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c672:	429a      	cmp	r2, r3
 800c674:	d11a      	bne.n	800c6ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c67c:	4013      	ands	r3, r2
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c682:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c684:	4293      	cmp	r3, r2
 800c686:	d111      	bne.n	800c6ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c692:	085b      	lsrs	r3, r3, #1
 800c694:	3b01      	subs	r3, #1
 800c696:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c698:	429a      	cmp	r2, r3
 800c69a:	d107      	bne.n	800c6ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d001      	beq.n	800c6b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e000      	b.n	800c6b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3718      	adds	r7, #24
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	40023800 	.word	0x40023800

0800c6c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d101      	bne.n	800c6d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	e0d0      	b.n	800c87a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c6d8:	4b6a      	ldr	r3, [pc, #424]	; (800c884 <HAL_RCC_ClockConfig+0x1c4>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 030f 	and.w	r3, r3, #15
 800c6e0:	683a      	ldr	r2, [r7, #0]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d910      	bls.n	800c708 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6e6:	4b67      	ldr	r3, [pc, #412]	; (800c884 <HAL_RCC_ClockConfig+0x1c4>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f023 020f 	bic.w	r2, r3, #15
 800c6ee:	4965      	ldr	r1, [pc, #404]	; (800c884 <HAL_RCC_ClockConfig+0x1c4>)
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6f6:	4b63      	ldr	r3, [pc, #396]	; (800c884 <HAL_RCC_ClockConfig+0x1c4>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f003 030f 	and.w	r3, r3, #15
 800c6fe:	683a      	ldr	r2, [r7, #0]
 800c700:	429a      	cmp	r2, r3
 800c702:	d001      	beq.n	800c708 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	e0b8      	b.n	800c87a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f003 0302 	and.w	r3, r3, #2
 800c710:	2b00      	cmp	r3, #0
 800c712:	d020      	beq.n	800c756 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f003 0304 	and.w	r3, r3, #4
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d005      	beq.n	800c72c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c720:	4b59      	ldr	r3, [pc, #356]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	4a58      	ldr	r2, [pc, #352]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c72a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f003 0308 	and.w	r3, r3, #8
 800c734:	2b00      	cmp	r3, #0
 800c736:	d005      	beq.n	800c744 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c738:	4b53      	ldr	r3, [pc, #332]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	4a52      	ldr	r2, [pc, #328]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c73e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c742:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c744:	4b50      	ldr	r3, [pc, #320]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	494d      	ldr	r1, [pc, #308]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c752:	4313      	orrs	r3, r2
 800c754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f003 0301 	and.w	r3, r3, #1
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d040      	beq.n	800c7e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	2b01      	cmp	r3, #1
 800c768:	d107      	bne.n	800c77a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c76a:	4b47      	ldr	r3, [pc, #284]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c772:	2b00      	cmp	r3, #0
 800c774:	d115      	bne.n	800c7a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	e07f      	b.n	800c87a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	2b02      	cmp	r3, #2
 800c780:	d107      	bne.n	800c792 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c782:	4b41      	ldr	r3, [pc, #260]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d109      	bne.n	800c7a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c78e:	2301      	movs	r3, #1
 800c790:	e073      	b.n	800c87a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c792:	4b3d      	ldr	r3, [pc, #244]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f003 0302 	and.w	r3, r3, #2
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d101      	bne.n	800c7a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e06b      	b.n	800c87a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c7a2:	4b39      	ldr	r3, [pc, #228]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	f023 0203 	bic.w	r2, r3, #3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	4936      	ldr	r1, [pc, #216]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7b4:	f7f9 fd86 	bl	80062c4 <HAL_GetTick>
 800c7b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7ba:	e00a      	b.n	800c7d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c7bc:	f7f9 fd82 	bl	80062c4 <HAL_GetTick>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d901      	bls.n	800c7d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	e053      	b.n	800c87a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7d2:	4b2d      	ldr	r3, [pc, #180]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	f003 020c 	and.w	r2, r3, #12
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d1eb      	bne.n	800c7bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c7e4:	4b27      	ldr	r3, [pc, #156]	; (800c884 <HAL_RCC_ClockConfig+0x1c4>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f003 030f 	and.w	r3, r3, #15
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d210      	bcs.n	800c814 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7f2:	4b24      	ldr	r3, [pc, #144]	; (800c884 <HAL_RCC_ClockConfig+0x1c4>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f023 020f 	bic.w	r2, r3, #15
 800c7fa:	4922      	ldr	r1, [pc, #136]	; (800c884 <HAL_RCC_ClockConfig+0x1c4>)
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c802:	4b20      	ldr	r3, [pc, #128]	; (800c884 <HAL_RCC_ClockConfig+0x1c4>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f003 030f 	and.w	r3, r3, #15
 800c80a:	683a      	ldr	r2, [r7, #0]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d001      	beq.n	800c814 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	e032      	b.n	800c87a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f003 0304 	and.w	r3, r3, #4
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d008      	beq.n	800c832 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c820:	4b19      	ldr	r3, [pc, #100]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	4916      	ldr	r1, [pc, #88]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c82e:	4313      	orrs	r3, r2
 800c830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f003 0308 	and.w	r3, r3, #8
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d009      	beq.n	800c852 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c83e:	4b12      	ldr	r3, [pc, #72]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	691b      	ldr	r3, [r3, #16]
 800c84a:	00db      	lsls	r3, r3, #3
 800c84c:	490e      	ldr	r1, [pc, #56]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c84e:	4313      	orrs	r3, r2
 800c850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c852:	f000 f821 	bl	800c898 <HAL_RCC_GetSysClockFreq>
 800c856:	4602      	mov	r2, r0
 800c858:	4b0b      	ldr	r3, [pc, #44]	; (800c888 <HAL_RCC_ClockConfig+0x1c8>)
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	091b      	lsrs	r3, r3, #4
 800c85e:	f003 030f 	and.w	r3, r3, #15
 800c862:	490a      	ldr	r1, [pc, #40]	; (800c88c <HAL_RCC_ClockConfig+0x1cc>)
 800c864:	5ccb      	ldrb	r3, [r1, r3]
 800c866:	fa22 f303 	lsr.w	r3, r2, r3
 800c86a:	4a09      	ldr	r2, [pc, #36]	; (800c890 <HAL_RCC_ClockConfig+0x1d0>)
 800c86c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c86e:	4b09      	ldr	r3, [pc, #36]	; (800c894 <HAL_RCC_ClockConfig+0x1d4>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4618      	mov	r0, r3
 800c874:	f7f7 fd86 	bl	8004384 <HAL_InitTick>

  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	40023c00 	.word	0x40023c00
 800c888:	40023800 	.word	0x40023800
 800c88c:	0801cbe4 	.word	0x0801cbe4
 800c890:	2000002c 	.word	0x2000002c
 800c894:	20000048 	.word	0x20000048

0800c898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c89c:	b090      	sub	sp, #64	; 0x40
 800c89e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	637b      	str	r3, [r7, #52]	; 0x34
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c8b0:	4b59      	ldr	r3, [pc, #356]	; (800ca18 <HAL_RCC_GetSysClockFreq+0x180>)
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	f003 030c 	and.w	r3, r3, #12
 800c8b8:	2b08      	cmp	r3, #8
 800c8ba:	d00d      	beq.n	800c8d8 <HAL_RCC_GetSysClockFreq+0x40>
 800c8bc:	2b08      	cmp	r3, #8
 800c8be:	f200 80a1 	bhi.w	800ca04 <HAL_RCC_GetSysClockFreq+0x16c>
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d002      	beq.n	800c8cc <HAL_RCC_GetSysClockFreq+0x34>
 800c8c6:	2b04      	cmp	r3, #4
 800c8c8:	d003      	beq.n	800c8d2 <HAL_RCC_GetSysClockFreq+0x3a>
 800c8ca:	e09b      	b.n	800ca04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c8cc:	4b53      	ldr	r3, [pc, #332]	; (800ca1c <HAL_RCC_GetSysClockFreq+0x184>)
 800c8ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c8d0:	e09b      	b.n	800ca0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c8d2:	4b53      	ldr	r3, [pc, #332]	; (800ca20 <HAL_RCC_GetSysClockFreq+0x188>)
 800c8d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800c8d6:	e098      	b.n	800ca0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c8d8:	4b4f      	ldr	r3, [pc, #316]	; (800ca18 <HAL_RCC_GetSysClockFreq+0x180>)
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8e0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800c8e2:	4b4d      	ldr	r3, [pc, #308]	; (800ca18 <HAL_RCC_GetSysClockFreq+0x180>)
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d028      	beq.n	800c940 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c8ee:	4b4a      	ldr	r3, [pc, #296]	; (800ca18 <HAL_RCC_GetSysClockFreq+0x180>)
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	099b      	lsrs	r3, r3, #6
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	623b      	str	r3, [r7, #32]
 800c8f8:	627a      	str	r2, [r7, #36]	; 0x24
 800c8fa:	6a3b      	ldr	r3, [r7, #32]
 800c8fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800c900:	2100      	movs	r1, #0
 800c902:	4b47      	ldr	r3, [pc, #284]	; (800ca20 <HAL_RCC_GetSysClockFreq+0x188>)
 800c904:	fb03 f201 	mul.w	r2, r3, r1
 800c908:	2300      	movs	r3, #0
 800c90a:	fb00 f303 	mul.w	r3, r0, r3
 800c90e:	4413      	add	r3, r2
 800c910:	4a43      	ldr	r2, [pc, #268]	; (800ca20 <HAL_RCC_GetSysClockFreq+0x188>)
 800c912:	fba0 1202 	umull	r1, r2, r0, r2
 800c916:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c918:	460a      	mov	r2, r1
 800c91a:	62ba      	str	r2, [r7, #40]	; 0x28
 800c91c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c91e:	4413      	add	r3, r2
 800c920:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c924:	2200      	movs	r2, #0
 800c926:	61bb      	str	r3, [r7, #24]
 800c928:	61fa      	str	r2, [r7, #28]
 800c92a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c92e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c932:	f7f4 f9b1 	bl	8000c98 <__aeabi_uldivmod>
 800c936:	4602      	mov	r2, r0
 800c938:	460b      	mov	r3, r1
 800c93a:	4613      	mov	r3, r2
 800c93c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c93e:	e053      	b.n	800c9e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c940:	4b35      	ldr	r3, [pc, #212]	; (800ca18 <HAL_RCC_GetSysClockFreq+0x180>)
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	099b      	lsrs	r3, r3, #6
 800c946:	2200      	movs	r2, #0
 800c948:	613b      	str	r3, [r7, #16]
 800c94a:	617a      	str	r2, [r7, #20]
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800c952:	f04f 0b00 	mov.w	fp, #0
 800c956:	4652      	mov	r2, sl
 800c958:	465b      	mov	r3, fp
 800c95a:	f04f 0000 	mov.w	r0, #0
 800c95e:	f04f 0100 	mov.w	r1, #0
 800c962:	0159      	lsls	r1, r3, #5
 800c964:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c968:	0150      	lsls	r0, r2, #5
 800c96a:	4602      	mov	r2, r0
 800c96c:	460b      	mov	r3, r1
 800c96e:	ebb2 080a 	subs.w	r8, r2, sl
 800c972:	eb63 090b 	sbc.w	r9, r3, fp
 800c976:	f04f 0200 	mov.w	r2, #0
 800c97a:	f04f 0300 	mov.w	r3, #0
 800c97e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c982:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c986:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c98a:	ebb2 0408 	subs.w	r4, r2, r8
 800c98e:	eb63 0509 	sbc.w	r5, r3, r9
 800c992:	f04f 0200 	mov.w	r2, #0
 800c996:	f04f 0300 	mov.w	r3, #0
 800c99a:	00eb      	lsls	r3, r5, #3
 800c99c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c9a0:	00e2      	lsls	r2, r4, #3
 800c9a2:	4614      	mov	r4, r2
 800c9a4:	461d      	mov	r5, r3
 800c9a6:	eb14 030a 	adds.w	r3, r4, sl
 800c9aa:	603b      	str	r3, [r7, #0]
 800c9ac:	eb45 030b 	adc.w	r3, r5, fp
 800c9b0:	607b      	str	r3, [r7, #4]
 800c9b2:	f04f 0200 	mov.w	r2, #0
 800c9b6:	f04f 0300 	mov.w	r3, #0
 800c9ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c9be:	4629      	mov	r1, r5
 800c9c0:	028b      	lsls	r3, r1, #10
 800c9c2:	4621      	mov	r1, r4
 800c9c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	028a      	lsls	r2, r1, #10
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	60bb      	str	r3, [r7, #8]
 800c9d6:	60fa      	str	r2, [r7, #12]
 800c9d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c9dc:	f7f4 f95c 	bl	8000c98 <__aeabi_uldivmod>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800c9e8:	4b0b      	ldr	r3, [pc, #44]	; (800ca18 <HAL_RCC_GetSysClockFreq+0x180>)
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	0c1b      	lsrs	r3, r3, #16
 800c9ee:	f003 0303 	and.w	r3, r3, #3
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	005b      	lsls	r3, r3, #1
 800c9f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800c9f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ca02:	e002      	b.n	800ca0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ca04:	4b05      	ldr	r3, [pc, #20]	; (800ca1c <HAL_RCC_GetSysClockFreq+0x184>)
 800ca06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ca08:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3740      	adds	r7, #64	; 0x40
 800ca10:	46bd      	mov	sp, r7
 800ca12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca16:	bf00      	nop
 800ca18:	40023800 	.word	0x40023800
 800ca1c:	00f42400 	.word	0x00f42400
 800ca20:	017d7840 	.word	0x017d7840

0800ca24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ca24:	b480      	push	{r7}
 800ca26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ca28:	4b03      	ldr	r3, [pc, #12]	; (800ca38 <HAL_RCC_GetHCLKFreq+0x14>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	2000002c 	.word	0x2000002c

0800ca3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ca40:	f7ff fff0 	bl	800ca24 <HAL_RCC_GetHCLKFreq>
 800ca44:	4602      	mov	r2, r0
 800ca46:	4b05      	ldr	r3, [pc, #20]	; (800ca5c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	0a9b      	lsrs	r3, r3, #10
 800ca4c:	f003 0307 	and.w	r3, r3, #7
 800ca50:	4903      	ldr	r1, [pc, #12]	; (800ca60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ca52:	5ccb      	ldrb	r3, [r1, r3]
 800ca54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	40023800 	.word	0x40023800
 800ca60:	0801cbf4 	.word	0x0801cbf4

0800ca64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ca68:	f7ff ffdc 	bl	800ca24 <HAL_RCC_GetHCLKFreq>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	4b05      	ldr	r3, [pc, #20]	; (800ca84 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	0b5b      	lsrs	r3, r3, #13
 800ca74:	f003 0307 	and.w	r3, r3, #7
 800ca78:	4903      	ldr	r1, [pc, #12]	; (800ca88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ca7a:	5ccb      	ldrb	r3, [r1, r3]
 800ca7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	40023800 	.word	0x40023800
 800ca88:	0801cbf4 	.word	0x0801cbf4

0800ca8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	220f      	movs	r2, #15
 800ca9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ca9c:	4b12      	ldr	r3, [pc, #72]	; (800cae8 <HAL_RCC_GetClockConfig+0x5c>)
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	f003 0203 	and.w	r2, r3, #3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800caa8:	4b0f      	ldr	r3, [pc, #60]	; (800cae8 <HAL_RCC_GetClockConfig+0x5c>)
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cab4:	4b0c      	ldr	r3, [pc, #48]	; (800cae8 <HAL_RCC_GetClockConfig+0x5c>)
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800cac0:	4b09      	ldr	r3, [pc, #36]	; (800cae8 <HAL_RCC_GetClockConfig+0x5c>)
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	08db      	lsrs	r3, r3, #3
 800cac6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cace:	4b07      	ldr	r3, [pc, #28]	; (800caec <HAL_RCC_GetClockConfig+0x60>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f003 020f 	and.w	r2, r3, #15
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	601a      	str	r2, [r3, #0]
}
 800cada:	bf00      	nop
 800cadc:	370c      	adds	r7, #12
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	40023800 	.word	0x40023800
 800caec:	40023c00 	.word	0x40023c00

0800caf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b088      	sub	sp, #32
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800caf8:	2300      	movs	r3, #0
 800cafa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800cafc:	2300      	movs	r3, #0
 800cafe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800cb00:	2300      	movs	r3, #0
 800cb02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800cb04:	2300      	movs	r3, #0
 800cb06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f003 0301 	and.w	r3, r3, #1
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d012      	beq.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cb18:	4b69      	ldr	r3, [pc, #420]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	4a68      	ldr	r2, [pc, #416]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cb22:	6093      	str	r3, [r2, #8]
 800cb24:	4b66      	ldr	r3, [pc, #408]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb26:	689a      	ldr	r2, [r3, #8]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb2c:	4964      	ldr	r1, [pc, #400]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d101      	bne.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d017      	beq.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cb4a:	4b5d      	ldr	r3, [pc, #372]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb58:	4959      	ldr	r1, [pc, #356]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb68:	d101      	bne.n	800cb6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d101      	bne.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800cb76:	2301      	movs	r3, #1
 800cb78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d017      	beq.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800cb86:	4b4e      	ldr	r3, [pc, #312]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb94:	494a      	ldr	r1, [pc, #296]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cb96:	4313      	orrs	r3, r2
 800cb98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cba4:	d101      	bne.n	800cbaa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800cba6:	2301      	movs	r3, #1
 800cba8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d101      	bne.n	800cbb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d001      	beq.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f003 0320 	and.w	r3, r3, #32
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f000 808b 	beq.w	800ccea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cbd4:	4b3a      	ldr	r3, [pc, #232]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbd8:	4a39      	ldr	r2, [pc, #228]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbde:	6413      	str	r3, [r2, #64]	; 0x40
 800cbe0:	4b37      	ldr	r3, [pc, #220]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cbe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbe8:	60bb      	str	r3, [r7, #8]
 800cbea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cbec:	4b35      	ldr	r3, [pc, #212]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a34      	ldr	r2, [pc, #208]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cbf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbf8:	f7f9 fb64 	bl	80062c4 <HAL_GetTick>
 800cbfc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cbfe:	e008      	b.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc00:	f7f9 fb60 	bl	80062c4 <HAL_GetTick>
 800cc04:	4602      	mov	r2, r0
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	2b64      	cmp	r3, #100	; 0x64
 800cc0c:	d901      	bls.n	800cc12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800cc0e:	2303      	movs	r3, #3
 800cc10:	e357      	b.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800cc12:	4b2c      	ldr	r3, [pc, #176]	; (800ccc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d0f0      	beq.n	800cc00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cc1e:	4b28      	ldr	r3, [pc, #160]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d035      	beq.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc36:	693a      	ldr	r2, [r7, #16]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d02e      	beq.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cc3c:	4b20      	ldr	r3, [pc, #128]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cc46:	4b1e      	ldr	r3, [pc, #120]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc4a:	4a1d      	ldr	r2, [pc, #116]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cc52:	4b1b      	ldr	r3, [pc, #108]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc56:	4a1a      	ldr	r2, [pc, #104]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800cc5e:	4a18      	ldr	r2, [pc, #96]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cc64:	4b16      	ldr	r3, [pc, #88]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc68:	f003 0301 	and.w	r3, r3, #1
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d114      	bne.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc70:	f7f9 fb28 	bl	80062c4 <HAL_GetTick>
 800cc74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc76:	e00a      	b.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cc78:	f7f9 fb24 	bl	80062c4 <HAL_GetTick>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	1ad3      	subs	r3, r2, r3
 800cc82:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d901      	bls.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800cc8a:	2303      	movs	r3, #3
 800cc8c:	e319      	b.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc8e:	4b0c      	ldr	r3, [pc, #48]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800cc90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc92:	f003 0302 	and.w	r3, r3, #2
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d0ee      	beq.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cca6:	d111      	bne.n	800cccc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800cca8:	4b05      	ldr	r3, [pc, #20]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ccb4:	4b04      	ldr	r3, [pc, #16]	; (800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ccb6:	400b      	ands	r3, r1
 800ccb8:	4901      	ldr	r1, [pc, #4]	; (800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	608b      	str	r3, [r1, #8]
 800ccbe:	e00b      	b.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ccc0:	40023800 	.word	0x40023800
 800ccc4:	40007000 	.word	0x40007000
 800ccc8:	0ffffcff 	.word	0x0ffffcff
 800cccc:	4baa      	ldr	r3, [pc, #680]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	4aa9      	ldr	r2, [pc, #676]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ccd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ccd6:	6093      	str	r3, [r2, #8]
 800ccd8:	4ba7      	ldr	r3, [pc, #668]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ccda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cce4:	49a4      	ldr	r1, [pc, #656]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cce6:	4313      	orrs	r3, r2
 800cce8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f003 0310 	and.w	r3, r3, #16
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d010      	beq.n	800cd18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ccf6:	4ba0      	ldr	r3, [pc, #640]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ccf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccfc:	4a9e      	ldr	r2, [pc, #632]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ccfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800cd06:	4b9c      	ldr	r3, [pc, #624]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd10:	4999      	ldr	r1, [pc, #612]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd12:	4313      	orrs	r3, r2
 800cd14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d00a      	beq.n	800cd3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cd24:	4b94      	ldr	r3, [pc, #592]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd32:	4991      	ldr	r1, [pc, #580]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd34:	4313      	orrs	r3, r2
 800cd36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00a      	beq.n	800cd5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cd46:	4b8c      	ldr	r3, [pc, #560]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd54:	4988      	ldr	r1, [pc, #544]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd56:	4313      	orrs	r3, r2
 800cd58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00a      	beq.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cd68:	4b83      	ldr	r3, [pc, #524]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd76:	4980      	ldr	r1, [pc, #512]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d00a      	beq.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cd8a:	4b7b      	ldr	r3, [pc, #492]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd98:	4977      	ldr	r1, [pc, #476]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00a      	beq.n	800cdc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cdac:	4b72      	ldr	r3, [pc, #456]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cdae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdb2:	f023 0203 	bic.w	r2, r3, #3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdba:	496f      	ldr	r1, [pc, #444]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00a      	beq.n	800cde4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cdce:	4b6a      	ldr	r3, [pc, #424]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cdd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdd4:	f023 020c 	bic.w	r2, r3, #12
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cddc:	4966      	ldr	r1, [pc, #408]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cdde:	4313      	orrs	r3, r2
 800cde0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00a      	beq.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cdf0:	4b61      	ldr	r3, [pc, #388]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cdf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdf6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdfe:	495e      	ldr	r1, [pc, #376]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce00:	4313      	orrs	r3, r2
 800ce02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00a      	beq.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ce12:	4b59      	ldr	r3, [pc, #356]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce20:	4955      	ldr	r1, [pc, #340]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce22:	4313      	orrs	r3, r2
 800ce24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00a      	beq.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ce34:	4b50      	ldr	r3, [pc, #320]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce42:	494d      	ldr	r1, [pc, #308]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce44:	4313      	orrs	r3, r2
 800ce46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00a      	beq.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ce56:	4b48      	ldr	r3, [pc, #288]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce64:	4944      	ldr	r1, [pc, #272]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce66:	4313      	orrs	r3, r2
 800ce68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00a      	beq.n	800ce8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ce78:	4b3f      	ldr	r3, [pc, #252]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce86:	493c      	ldr	r1, [pc, #240]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00a      	beq.n	800ceb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ce9a:	4b37      	ldr	r3, [pc, #220]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ce9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cea0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cea8:	4933      	ldr	r1, [pc, #204]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00a      	beq.n	800ced2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cebc:	4b2e      	ldr	r3, [pc, #184]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cec2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ceca:	492b      	ldr	r1, [pc, #172]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cecc:	4313      	orrs	r3, r2
 800cece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d011      	beq.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800cede:	4b26      	ldr	r3, [pc, #152]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cee4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceec:	4922      	ldr	r1, [pc, #136]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ceee:	4313      	orrs	r3, r2
 800cef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cefc:	d101      	bne.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800cefe:	2301      	movs	r3, #1
 800cf00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f003 0308 	and.w	r3, r3, #8
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d001      	beq.n	800cf12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00a      	beq.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cf1e:	4b16      	ldr	r3, [pc, #88]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf2c:	4912      	ldr	r1, [pc, #72]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00b      	beq.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800cf40:	4b0d      	ldr	r3, [pc, #52]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf50:	4909      	ldr	r1, [pc, #36]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf52:	4313      	orrs	r3, r2
 800cf54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d006      	beq.n	800cf6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	f000 80d9 	beq.w	800d11e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800cf6c:	4b02      	ldr	r3, [pc, #8]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a01      	ldr	r2, [pc, #4]	; (800cf78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800cf72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cf76:	e001      	b.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800cf78:	40023800 	.word	0x40023800
 800cf7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf7e:	f7f9 f9a1 	bl	80062c4 <HAL_GetTick>
 800cf82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cf84:	e008      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800cf86:	f7f9 f99d 	bl	80062c4 <HAL_GetTick>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	2b64      	cmp	r3, #100	; 0x64
 800cf92:	d901      	bls.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cf94:	2303      	movs	r3, #3
 800cf96:	e194      	b.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cf98:	4b6c      	ldr	r3, [pc, #432]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d1f0      	bne.n	800cf86 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f003 0301 	and.w	r3, r3, #1
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d021      	beq.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d11d      	bne.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800cfb8:	4b64      	ldr	r3, [pc, #400]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cfba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfbe:	0c1b      	lsrs	r3, r3, #16
 800cfc0:	f003 0303 	and.w	r3, r3, #3
 800cfc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800cfc6:	4b61      	ldr	r3, [pc, #388]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cfc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfcc:	0e1b      	lsrs	r3, r3, #24
 800cfce:	f003 030f 	and.w	r3, r3, #15
 800cfd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	019a      	lsls	r2, r3, #6
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	041b      	lsls	r3, r3, #16
 800cfde:	431a      	orrs	r2, r3
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	061b      	lsls	r3, r3, #24
 800cfe4:	431a      	orrs	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	071b      	lsls	r3, r3, #28
 800cfec:	4957      	ldr	r1, [pc, #348]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800cfee:	4313      	orrs	r3, r2
 800cff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d004      	beq.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d008:	d00a      	beq.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d012:	2b00      	cmp	r3, #0
 800d014:	d02e      	beq.n	800d074 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d01e:	d129      	bne.n	800d074 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d020:	4b4a      	ldr	r3, [pc, #296]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d026:	0c1b      	lsrs	r3, r3, #16
 800d028:	f003 0303 	and.w	r3, r3, #3
 800d02c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d02e:	4b47      	ldr	r3, [pc, #284]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d034:	0f1b      	lsrs	r3, r3, #28
 800d036:	f003 0307 	and.w	r3, r3, #7
 800d03a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	019a      	lsls	r2, r3, #6
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	041b      	lsls	r3, r3, #16
 800d046:	431a      	orrs	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	061b      	lsls	r3, r3, #24
 800d04e:	431a      	orrs	r2, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	071b      	lsls	r3, r3, #28
 800d054:	493d      	ldr	r1, [pc, #244]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d056:	4313      	orrs	r3, r2
 800d058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d05c:	4b3b      	ldr	r3, [pc, #236]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d05e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d062:	f023 021f 	bic.w	r2, r3, #31
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06a:	3b01      	subs	r3, #1
 800d06c:	4937      	ldr	r1, [pc, #220]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d06e:	4313      	orrs	r3, r2
 800d070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d01d      	beq.n	800d0bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d080:	4b32      	ldr	r3, [pc, #200]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d086:	0e1b      	lsrs	r3, r3, #24
 800d088:	f003 030f 	and.w	r3, r3, #15
 800d08c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d08e:	4b2f      	ldr	r3, [pc, #188]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d094:	0f1b      	lsrs	r3, r3, #28
 800d096:	f003 0307 	and.w	r3, r3, #7
 800d09a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	019a      	lsls	r2, r3, #6
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	691b      	ldr	r3, [r3, #16]
 800d0a6:	041b      	lsls	r3, r3, #16
 800d0a8:	431a      	orrs	r2, r3
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	061b      	lsls	r3, r3, #24
 800d0ae:	431a      	orrs	r2, r3
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	071b      	lsls	r3, r3, #28
 800d0b4:	4925      	ldr	r1, [pc, #148]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d011      	beq.n	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	019a      	lsls	r2, r3, #6
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	041b      	lsls	r3, r3, #16
 800d0d4:	431a      	orrs	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	061b      	lsls	r3, r3, #24
 800d0dc:	431a      	orrs	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	071b      	lsls	r3, r3, #28
 800d0e4:	4919      	ldr	r1, [pc, #100]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d0ec:	4b17      	ldr	r3, [pc, #92]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a16      	ldr	r2, [pc, #88]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d0f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d0f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0f8:	f7f9 f8e4 	bl	80062c4 <HAL_GetTick>
 800d0fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d0fe:	e008      	b.n	800d112 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d100:	f7f9 f8e0 	bl	80062c4 <HAL_GetTick>
 800d104:	4602      	mov	r2, r0
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	1ad3      	subs	r3, r2, r3
 800d10a:	2b64      	cmp	r3, #100	; 0x64
 800d10c:	d901      	bls.n	800d112 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d10e:	2303      	movs	r3, #3
 800d110:	e0d7      	b.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d112:	4b0e      	ldr	r3, [pc, #56]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d0f0      	beq.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	2b01      	cmp	r3, #1
 800d122:	f040 80cd 	bne.w	800d2c0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d126:	4b09      	ldr	r3, [pc, #36]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a08      	ldr	r2, [pc, #32]	; (800d14c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800d12c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d132:	f7f9 f8c7 	bl	80062c4 <HAL_GetTick>
 800d136:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d138:	e00a      	b.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d13a:	f7f9 f8c3 	bl	80062c4 <HAL_GetTick>
 800d13e:	4602      	mov	r2, r0
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	1ad3      	subs	r3, r2, r3
 800d144:	2b64      	cmp	r3, #100	; 0x64
 800d146:	d903      	bls.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d148:	2303      	movs	r3, #3
 800d14a:	e0ba      	b.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800d14c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800d150:	4b5e      	ldr	r3, [pc, #376]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d15c:	d0ed      	beq.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d166:	2b00      	cmp	r3, #0
 800d168:	d003      	beq.n	800d172 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d009      	beq.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d02e      	beq.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d182:	2b00      	cmp	r3, #0
 800d184:	d12a      	bne.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d186:	4b51      	ldr	r3, [pc, #324]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d18c:	0c1b      	lsrs	r3, r3, #16
 800d18e:	f003 0303 	and.w	r3, r3, #3
 800d192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d194:	4b4d      	ldr	r3, [pc, #308]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d19a:	0f1b      	lsrs	r3, r3, #28
 800d19c:	f003 0307 	and.w	r3, r3, #7
 800d1a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	695b      	ldr	r3, [r3, #20]
 800d1a6:	019a      	lsls	r2, r3, #6
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	041b      	lsls	r3, r3, #16
 800d1ac:	431a      	orrs	r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	699b      	ldr	r3, [r3, #24]
 800d1b2:	061b      	lsls	r3, r3, #24
 800d1b4:	431a      	orrs	r2, r3
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	071b      	lsls	r3, r3, #28
 800d1ba:	4944      	ldr	r1, [pc, #272]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800d1c2:	4b42      	ldr	r3, [pc, #264]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d1c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	021b      	lsls	r3, r3, #8
 800d1d4:	493d      	ldr	r1, [pc, #244]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d022      	beq.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1f0:	d11d      	bne.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d1f2:	4b36      	ldr	r3, [pc, #216]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1f8:	0e1b      	lsrs	r3, r3, #24
 800d1fa:	f003 030f 	and.w	r3, r3, #15
 800d1fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800d200:	4b32      	ldr	r3, [pc, #200]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d206:	0f1b      	lsrs	r3, r3, #28
 800d208:	f003 0307 	and.w	r3, r3, #7
 800d20c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	695b      	ldr	r3, [r3, #20]
 800d212:	019a      	lsls	r2, r3, #6
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6a1b      	ldr	r3, [r3, #32]
 800d218:	041b      	lsls	r3, r3, #16
 800d21a:	431a      	orrs	r2, r3
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	061b      	lsls	r3, r3, #24
 800d220:	431a      	orrs	r2, r3
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	071b      	lsls	r3, r3, #28
 800d226:	4929      	ldr	r1, [pc, #164]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d228:	4313      	orrs	r3, r2
 800d22a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f003 0308 	and.w	r3, r3, #8
 800d236:	2b00      	cmp	r3, #0
 800d238:	d028      	beq.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800d23a:	4b24      	ldr	r3, [pc, #144]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d23c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d240:	0e1b      	lsrs	r3, r3, #24
 800d242:	f003 030f 	and.w	r3, r3, #15
 800d246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800d248:	4b20      	ldr	r3, [pc, #128]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d24e:	0c1b      	lsrs	r3, r3, #16
 800d250:	f003 0303 	and.w	r3, r3, #3
 800d254:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	695b      	ldr	r3, [r3, #20]
 800d25a:	019a      	lsls	r2, r3, #6
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	041b      	lsls	r3, r3, #16
 800d260:	431a      	orrs	r2, r3
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	061b      	lsls	r3, r3, #24
 800d266:	431a      	orrs	r2, r3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	69db      	ldr	r3, [r3, #28]
 800d26c:	071b      	lsls	r3, r3, #28
 800d26e:	4917      	ldr	r1, [pc, #92]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d270:	4313      	orrs	r3, r2
 800d272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800d276:	4b15      	ldr	r3, [pc, #84]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d27c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d284:	4911      	ldr	r1, [pc, #68]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d286:	4313      	orrs	r3, r2
 800d288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800d28c:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a0e      	ldr	r2, [pc, #56]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d298:	f7f9 f814 	bl	80062c4 <HAL_GetTick>
 800d29c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d29e:	e008      	b.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800d2a0:	f7f9 f810 	bl	80062c4 <HAL_GetTick>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	2b64      	cmp	r3, #100	; 0x64
 800d2ac:	d901      	bls.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d2ae:	2303      	movs	r3, #3
 800d2b0:	e007      	b.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800d2b2:	4b06      	ldr	r3, [pc, #24]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2be:	d1ef      	bne.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3720      	adds	r7, #32
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	40023800 	.word	0x40023800

0800d2d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b087      	sub	sp, #28
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d2ee:	f040 808c 	bne.w	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d2f2:	4b95      	ldr	r3, [pc, #596]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2f8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d300:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d308:	d07c      	beq.n	800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d310:	d87d      	bhi.n	800d40e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d004      	beq.n	800d322 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d31e:	d039      	beq.n	800d394 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800d320:	e075      	b.n	800d40e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d322:	4b89      	ldr	r3, [pc, #548]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d108      	bne.n	800d340 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d32e:	4b86      	ldr	r3, [pc, #536]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d336:	4a85      	ldr	r2, [pc, #532]	; (800d54c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d338:	fbb2 f3f3 	udiv	r3, r2, r3
 800d33c:	613b      	str	r3, [r7, #16]
 800d33e:	e007      	b.n	800d350 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d340:	4b81      	ldr	r3, [pc, #516]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d348:	4a81      	ldr	r2, [pc, #516]	; (800d550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d34a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d34e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d350:	4b7d      	ldr	r3, [pc, #500]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d356:	0e1b      	lsrs	r3, r3, #24
 800d358:	f003 030f 	and.w	r3, r3, #15
 800d35c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d35e:	4b7a      	ldr	r3, [pc, #488]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d364:	099b      	lsrs	r3, r3, #6
 800d366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d36a:	693a      	ldr	r2, [r7, #16]
 800d36c:	fb03 f202 	mul.w	r2, r3, r2
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	fbb2 f3f3 	udiv	r3, r2, r3
 800d376:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d378:	4b73      	ldr	r3, [pc, #460]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d37a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d37e:	0a1b      	lsrs	r3, r3, #8
 800d380:	f003 031f 	and.w	r3, r3, #31
 800d384:	3301      	adds	r3, #1
 800d386:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d388:	697a      	ldr	r2, [r7, #20]
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d390:	617b      	str	r3, [r7, #20]
        break;
 800d392:	e03d      	b.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d394:	4b6c      	ldr	r3, [pc, #432]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d108      	bne.n	800d3b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d3a0:	4b69      	ldr	r3, [pc, #420]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3a8:	4a68      	ldr	r2, [pc, #416]	; (800d54c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ae:	613b      	str	r3, [r7, #16]
 800d3b0:	e007      	b.n	800d3c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d3b2:	4b65      	ldr	r3, [pc, #404]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3ba:	4a65      	ldr	r2, [pc, #404]	; (800d550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d3bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3c0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d3c2:	4b61      	ldr	r3, [pc, #388]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d3c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3c8:	0e1b      	lsrs	r3, r3, #24
 800d3ca:	f003 030f 	and.w	r3, r3, #15
 800d3ce:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d3d0:	4b5d      	ldr	r3, [pc, #372]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d3d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3d6:	099b      	lsrs	r3, r3, #6
 800d3d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3dc:	693a      	ldr	r2, [r7, #16]
 800d3de:	fb03 f202 	mul.w	r2, r3, r2
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3e8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800d3ea:	4b57      	ldr	r3, [pc, #348]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d3ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3f0:	f003 031f 	and.w	r3, r3, #31
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d3f8:	697a      	ldr	r2, [r7, #20]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d400:	617b      	str	r3, [r7, #20]
        break;
 800d402:	e005      	b.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d404:	4b53      	ldr	r3, [pc, #332]	; (800d554 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d406:	617b      	str	r3, [r7, #20]
        break;
 800d408:	e002      	b.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800d40a:	bf00      	nop
 800d40c:	e000      	b.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800d40e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d416:	f040 808c 	bne.w	800d532 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800d41a:	4b4b      	ldr	r3, [pc, #300]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d41c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d420:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800d428:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d430:	d07c      	beq.n	800d52c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d438:	d87d      	bhi.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d004      	beq.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d446:	d039      	beq.n	800d4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800d448:	e075      	b.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d44a:	4b3f      	ldr	r3, [pc, #252]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d452:	2b00      	cmp	r3, #0
 800d454:	d108      	bne.n	800d468 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d456:	4b3c      	ldr	r3, [pc, #240]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d45e:	4a3b      	ldr	r2, [pc, #236]	; (800d54c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d460:	fbb2 f3f3 	udiv	r3, r2, r3
 800d464:	613b      	str	r3, [r7, #16]
 800d466:	e007      	b.n	800d478 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d468:	4b37      	ldr	r3, [pc, #220]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d470:	4a37      	ldr	r2, [pc, #220]	; (800d550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d472:	fbb2 f3f3 	udiv	r3, r2, r3
 800d476:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800d478:	4b33      	ldr	r3, [pc, #204]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d47e:	0e1b      	lsrs	r3, r3, #24
 800d480:	f003 030f 	and.w	r3, r3, #15
 800d484:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800d486:	4b30      	ldr	r3, [pc, #192]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d48c:	099b      	lsrs	r3, r3, #6
 800d48e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d492:	693a      	ldr	r2, [r7, #16]
 800d494:	fb03 f202 	mul.w	r2, r3, r2
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d49e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800d4a0:	4b29      	ldr	r3, [pc, #164]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d4a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4a6:	0a1b      	lsrs	r3, r3, #8
 800d4a8:	f003 031f 	and.w	r3, r3, #31
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d4b0:	697a      	ldr	r2, [r7, #20]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4b8:	617b      	str	r3, [r7, #20]
        break;
 800d4ba:	e03d      	b.n	800d538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800d4bc:	4b22      	ldr	r3, [pc, #136]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d108      	bne.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800d4c8:	4b1f      	ldr	r3, [pc, #124]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4d0:	4a1e      	ldr	r2, [pc, #120]	; (800d54c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800d4d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4d6:	613b      	str	r3, [r7, #16]
 800d4d8:	e007      	b.n	800d4ea <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800d4da:	4b1b      	ldr	r3, [pc, #108]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4e2:	4a1b      	ldr	r2, [pc, #108]	; (800d550 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800d4e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4e8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800d4ea:	4b17      	ldr	r3, [pc, #92]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4f0:	0e1b      	lsrs	r3, r3, #24
 800d4f2:	f003 030f 	and.w	r3, r3, #15
 800d4f6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800d4f8:	4b13      	ldr	r3, [pc, #76]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d4fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4fe:	099b      	lsrs	r3, r3, #6
 800d500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d504:	693a      	ldr	r2, [r7, #16]
 800d506:	fb03 f202 	mul.w	r2, r3, r2
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d510:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800d512:	4b0d      	ldr	r3, [pc, #52]	; (800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d518:	f003 031f 	and.w	r3, r3, #31
 800d51c:	3301      	adds	r3, #1
 800d51e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800d520:	697a      	ldr	r2, [r7, #20]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	fbb2 f3f3 	udiv	r3, r2, r3
 800d528:	617b      	str	r3, [r7, #20]
        break;
 800d52a:	e005      	b.n	800d538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d52c:	4b09      	ldr	r3, [pc, #36]	; (800d554 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800d52e:	617b      	str	r3, [r7, #20]
        break;
 800d530:	e002      	b.n	800d538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800d532:	bf00      	nop
 800d534:	e000      	b.n	800d538 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800d536:	bf00      	nop

  return frequency;
 800d538:	697b      	ldr	r3, [r7, #20]
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	371c      	adds	r7, #28
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr
 800d546:	bf00      	nop
 800d548:	40023800 	.word	0x40023800
 800d54c:	00f42400 	.word	0x00f42400
 800d550:	017d7840 	.word	0x017d7840
 800d554:	00bb8000 	.word	0x00bb8000

0800d558 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d560:	2301      	movs	r3, #1
 800d562:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d101      	bne.n	800d56e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800d56a:	2301      	movs	r3, #1
 800d56c:	e071      	b.n	800d652 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	7f5b      	ldrb	r3, [r3, #29]
 800d572:	b2db      	uxtb	r3, r3
 800d574:	2b00      	cmp	r3, #0
 800d576:	d105      	bne.n	800d584 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f7f6 fa4a 	bl	8003a18 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2202      	movs	r2, #2
 800d588:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	68db      	ldr	r3, [r3, #12]
 800d590:	f003 0310 	and.w	r3, r3, #16
 800d594:	2b10      	cmp	r3, #16
 800d596:	d053      	beq.n	800d640 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	22ca      	movs	r2, #202	; 0xca
 800d59e:	625a      	str	r2, [r3, #36]	; 0x24
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	2253      	movs	r2, #83	; 0x53
 800d5a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 fac9 	bl	800db40 <RTC_EnterInitMode>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d5b2:	7bfb      	ldrb	r3, [r7, #15]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d12a      	bne.n	800d60e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	6899      	ldr	r1, [r3, #8]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	4b26      	ldr	r3, [pc, #152]	; (800d65c <HAL_RTC_Init+0x104>)
 800d5c4:	400b      	ands	r3, r1
 800d5c6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6899      	ldr	r1, [r3, #8]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	685a      	ldr	r2, [r3, #4]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	691b      	ldr	r3, [r3, #16]
 800d5d6:	431a      	orrs	r2, r3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	695b      	ldr	r3, [r3, #20]
 800d5dc:	431a      	orrs	r2, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	430a      	orrs	r2, r1
 800d5e4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	68d2      	ldr	r2, [r2, #12]
 800d5ee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	6919      	ldr	r1, [r3, #16]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	041a      	lsls	r2, r3, #16
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	430a      	orrs	r2, r1
 800d602:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fad2 	bl	800dbae <RTC_ExitInitMode>
 800d60a:	4603      	mov	r3, r0
 800d60c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d60e:	7bfb      	ldrb	r3, [r7, #15]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d110      	bne.n	800d636 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f022 0208 	bic.w	r2, r2, #8
 800d622:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	699a      	ldr	r2, [r3, #24]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	430a      	orrs	r2, r1
 800d634:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	22ff      	movs	r2, #255	; 0xff
 800d63c:	625a      	str	r2, [r3, #36]	; 0x24
 800d63e:	e001      	b.n	800d644 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800d640:	2300      	movs	r3, #0
 800d642:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d644:	7bfb      	ldrb	r3, [r7, #15]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d102      	bne.n	800d650 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2201      	movs	r2, #1
 800d64e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800d650:	7bfb      	ldrb	r3, [r7, #15]
}
 800d652:	4618      	mov	r0, r3
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	ff8fffbf 	.word	0xff8fffbf

0800d660 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d660:	b590      	push	{r4, r7, lr}
 800d662:	b087      	sub	sp, #28
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d66c:	2300      	movs	r3, #0
 800d66e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	7f1b      	ldrb	r3, [r3, #28]
 800d674:	2b01      	cmp	r3, #1
 800d676:	d101      	bne.n	800d67c <HAL_RTC_SetTime+0x1c>
 800d678:	2302      	movs	r3, #2
 800d67a:	e085      	b.n	800d788 <HAL_RTC_SetTime+0x128>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2201      	movs	r2, #1
 800d680:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2202      	movs	r2, #2
 800d686:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d126      	bne.n	800d6dc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d102      	bne.n	800d6a2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f000 faa6 	bl	800dbf8 <RTC_ByteToBcd2>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	785b      	ldrb	r3, [r3, #1]
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f000 fa9f 	bl	800dbf8 <RTC_ByteToBcd2>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d6be:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	789b      	ldrb	r3, [r3, #2]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f000 fa97 	bl	800dbf8 <RTC_ByteToBcd2>
 800d6ca:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d6cc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	78db      	ldrb	r3, [r3, #3]
 800d6d4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	617b      	str	r3, [r7, #20]
 800d6da:	e018      	b.n	800d70e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d102      	bne.n	800d6f0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	785b      	ldrb	r3, [r3, #1]
 800d6fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d6fc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800d6fe:	68ba      	ldr	r2, [r7, #8]
 800d700:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800d702:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	78db      	ldrb	r3, [r3, #3]
 800d708:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800d70a:	4313      	orrs	r3, r2
 800d70c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	22ca      	movs	r2, #202	; 0xca
 800d714:	625a      	str	r2, [r3, #36]	; 0x24
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2253      	movs	r2, #83	; 0x53
 800d71c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f000 fa0e 	bl	800db40 <RTC_EnterInitMode>
 800d724:	4603      	mov	r3, r0
 800d726:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800d728:	7cfb      	ldrb	r3, [r7, #19]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d11e      	bne.n	800d76c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	6979      	ldr	r1, [r7, #20]
 800d734:	4b16      	ldr	r3, [pc, #88]	; (800d790 <HAL_RTC_SetTime+0x130>)
 800d736:	400b      	ands	r3, r1
 800d738:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	689a      	ldr	r2, [r3, #8]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d748:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	6899      	ldr	r1, [r3, #8]
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	68da      	ldr	r2, [r3, #12]
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	691b      	ldr	r3, [r3, #16]
 800d758:	431a      	orrs	r2, r3
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	430a      	orrs	r2, r1
 800d760:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	f000 fa23 	bl	800dbae <RTC_ExitInitMode>
 800d768:	4603      	mov	r3, r0
 800d76a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800d76c:	7cfb      	ldrb	r3, [r7, #19]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d102      	bne.n	800d778 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2201      	movs	r2, #1
 800d776:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	22ff      	movs	r2, #255	; 0xff
 800d77e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2200      	movs	r2, #0
 800d784:	771a      	strb	r2, [r3, #28]

  return status;
 800d786:	7cfb      	ldrb	r3, [r7, #19]
}
 800d788:	4618      	mov	r0, r3
 800d78a:	371c      	adds	r7, #28
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd90      	pop	{r4, r7, pc}
 800d790:	007f7f7f 	.word	0x007f7f7f

0800d794 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d794:	b590      	push	{r4, r7, lr}
 800d796:	b087      	sub	sp, #28
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	7f1b      	ldrb	r3, [r3, #28]
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d101      	bne.n	800d7b0 <HAL_RTC_SetDate+0x1c>
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	e06f      	b.n	800d890 <HAL_RTC_SetDate+0xfc>
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2202      	movs	r2, #2
 800d7ba:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10e      	bne.n	800d7e0 <HAL_RTC_SetDate+0x4c>
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	785b      	ldrb	r3, [r3, #1]
 800d7c6:	f003 0310 	and.w	r3, r3, #16
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d008      	beq.n	800d7e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	785b      	ldrb	r3, [r3, #1]
 800d7d2:	f023 0310 	bic.w	r3, r3, #16
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	330a      	adds	r3, #10
 800d7da:	b2da      	uxtb	r2, r3
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d11c      	bne.n	800d820 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	78db      	ldrb	r3, [r3, #3]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f000 fa04 	bl	800dbf8 <RTC_ByteToBcd2>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	785b      	ldrb	r3, [r3, #1]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f000 f9fd 	bl	800dbf8 <RTC_ByteToBcd2>
 800d7fe:	4603      	mov	r3, r0
 800d800:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d802:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	789b      	ldrb	r3, [r3, #2]
 800d808:	4618      	mov	r0, r3
 800d80a:	f000 f9f5 	bl	800dbf8 <RTC_ByteToBcd2>
 800d80e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d810:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d81a:	4313      	orrs	r3, r2
 800d81c:	617b      	str	r3, [r7, #20]
 800d81e:	e00e      	b.n	800d83e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	78db      	ldrb	r3, [r3, #3]
 800d824:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	785b      	ldrb	r3, [r3, #1]
 800d82a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d82c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800d82e:	68ba      	ldr	r2, [r7, #8]
 800d830:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d832:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d83a:	4313      	orrs	r3, r2
 800d83c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	22ca      	movs	r2, #202	; 0xca
 800d844:	625a      	str	r2, [r3, #36]	; 0x24
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2253      	movs	r2, #83	; 0x53
 800d84c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f000 f976 	bl	800db40 <RTC_EnterInitMode>
 800d854:	4603      	mov	r3, r0
 800d856:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800d858:	7cfb      	ldrb	r3, [r7, #19]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d10a      	bne.n	800d874 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	6979      	ldr	r1, [r7, #20]
 800d864:	4b0c      	ldr	r3, [pc, #48]	; (800d898 <HAL_RTC_SetDate+0x104>)
 800d866:	400b      	ands	r3, r1
 800d868:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d86a:	68f8      	ldr	r0, [r7, #12]
 800d86c:	f000 f99f 	bl	800dbae <RTC_ExitInitMode>
 800d870:	4603      	mov	r3, r0
 800d872:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800d874:	7cfb      	ldrb	r3, [r7, #19]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d102      	bne.n	800d880 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2201      	movs	r2, #1
 800d87e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	22ff      	movs	r2, #255	; 0xff
 800d886:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2200      	movs	r2, #0
 800d88c:	771a      	strb	r2, [r3, #28]

  return status;
 800d88e:	7cfb      	ldrb	r3, [r7, #19]
}
 800d890:	4618      	mov	r0, r3
 800d892:	371c      	adds	r7, #28
 800d894:	46bd      	mov	sp, r7
 800d896:	bd90      	pop	{r4, r7, pc}
 800d898:	00ffff3f 	.word	0x00ffff3f

0800d89c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800d89c:	b590      	push	{r4, r7, lr}
 800d89e:	b089      	sub	sp, #36	; 0x24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	7f1b      	ldrb	r3, [r3, #28]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d101      	bne.n	800d8c0 <HAL_RTC_SetAlarm+0x24>
 800d8bc:	2302      	movs	r3, #2
 800d8be:	e113      	b.n	800dae8 <HAL_RTC_SetAlarm+0x24c>
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2202      	movs	r2, #2
 800d8ca:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d137      	bne.n	800d942 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d102      	bne.n	800d8e6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f000 f984 	bl	800dbf8 <RTC_ByteToBcd2>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	785b      	ldrb	r3, [r3, #1]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 f97d 	bl	800dbf8 <RTC_ByteToBcd2>
 800d8fe:	4603      	mov	r3, r0
 800d900:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800d902:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	789b      	ldrb	r3, [r3, #2]
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 f975 	bl	800dbf8 <RTC_ByteToBcd2>
 800d90e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800d910:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	78db      	ldrb	r3, [r3, #3]
 800d918:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800d91a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d924:	4618      	mov	r0, r3
 800d926:	f000 f967 	bl	800dbf8 <RTC_ByteToBcd2>
 800d92a:	4603      	mov	r3, r0
 800d92c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800d92e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800d936:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800d93c:	4313      	orrs	r3, r2
 800d93e:	61fb      	str	r3, [r7, #28]
 800d940:	e023      	b.n	800d98a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d102      	bne.n	800d956 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	2200      	movs	r2, #0
 800d954:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	785b      	ldrb	r3, [r3, #1]
 800d960:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800d962:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800d964:	68ba      	ldr	r2, [r7, #8]
 800d966:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800d968:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	78db      	ldrb	r3, [r3, #3]
 800d96e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800d970:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d978:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800d97a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800d980:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800d986:	4313      	orrs	r3, r2
 800d988:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800d992:	4313      	orrs	r3, r2
 800d994:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	22ca      	movs	r2, #202	; 0xca
 800d99c:	625a      	str	r2, [r3, #36]	; 0x24
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2253      	movs	r2, #83	; 0x53
 800d9a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9ae:	d148      	bne.n	800da42 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	689a      	ldr	r2, [r3, #8]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d9be:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	689a      	ldr	r2, [r3, #8]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d9ce:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800d9e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d9e2:	f7f8 fc6f 	bl	80062c4 <HAL_GetTick>
 800d9e6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800d9e8:	e013      	b.n	800da12 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d9ea:	f7f8 fc6b 	bl	80062c4 <HAL_GetTick>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	1ad3      	subs	r3, r2, r3
 800d9f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d9f8:	d90b      	bls.n	800da12 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	22ff      	movs	r2, #255	; 0xff
 800da00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2203      	movs	r2, #3
 800da06:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2200      	movs	r2, #0
 800da0c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800da0e:	2303      	movs	r3, #3
 800da10:	e06a      	b.n	800dae8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	f003 0301 	and.w	r3, r3, #1
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d0e4      	beq.n	800d9ea <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	69fa      	ldr	r2, [r7, #28]
 800da26:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	697a      	ldr	r2, [r7, #20]
 800da2e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	689a      	ldr	r2, [r3, #8]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da3e:	609a      	str	r2, [r3, #8]
 800da40:	e047      	b.n	800dad2 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	689a      	ldr	r2, [r3, #8]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800da50:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	689a      	ldr	r2, [r3, #8]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800da60:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	b2da      	uxtb	r2, r3
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f462 7220 	orn	r2, r2, #640	; 0x280
 800da72:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800da74:	f7f8 fc26 	bl	80062c4 <HAL_GetTick>
 800da78:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800da7a:	e013      	b.n	800daa4 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800da7c:	f7f8 fc22 	bl	80062c4 <HAL_GetTick>
 800da80:	4602      	mov	r2, r0
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da8a:	d90b      	bls.n	800daa4 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	22ff      	movs	r2, #255	; 0xff
 800da92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	2203      	movs	r2, #3
 800da98:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2200      	movs	r2, #0
 800da9e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800daa0:	2303      	movs	r3, #3
 800daa2:	e021      	b.n	800dae8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	f003 0302 	and.w	r3, r3, #2
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d0e4      	beq.n	800da7c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	69fa      	ldr	r2, [r7, #28]
 800dab8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	697a      	ldr	r2, [r7, #20]
 800dac0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	689a      	ldr	r2, [r3, #8]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dad0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	22ff      	movs	r2, #255	; 0xff
 800dad8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2201      	movs	r2, #1
 800dade:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2200      	movs	r2, #0
 800dae4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3724      	adds	r7, #36	; 0x24
 800daec:	46bd      	mov	sp, r7
 800daee:	bd90      	pop	{r4, r7, pc}

0800daf0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800daf8:	2300      	movs	r3, #0
 800dafa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	68da      	ldr	r2, [r3, #12]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800db0a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800db0c:	f7f8 fbda 	bl	80062c4 <HAL_GetTick>
 800db10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800db12:	e009      	b.n	800db28 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800db14:	f7f8 fbd6 	bl	80062c4 <HAL_GetTick>
 800db18:	4602      	mov	r2, r0
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db22:	d901      	bls.n	800db28 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800db24:	2303      	movs	r3, #3
 800db26:	e007      	b.n	800db38 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	f003 0320 	and.w	r3, r3, #32
 800db32:	2b00      	cmp	r3, #0
 800db34:	d0ee      	beq.n	800db14 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800db36:	2300      	movs	r3, #0
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800db48:	2300      	movs	r3, #0
 800db4a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800db4c:	2300      	movs	r3, #0
 800db4e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d122      	bne.n	800dba4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	68da      	ldr	r2, [r3, #12]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800db6c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800db6e:	f7f8 fba9 	bl	80062c4 <HAL_GetTick>
 800db72:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800db74:	e00c      	b.n	800db90 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800db76:	f7f8 fba5 	bl	80062c4 <HAL_GetTick>
 800db7a:	4602      	mov	r2, r0
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	1ad3      	subs	r3, r2, r3
 800db80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db84:	d904      	bls.n	800db90 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2204      	movs	r2, #4
 800db8a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800db8c:	2301      	movs	r3, #1
 800db8e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d102      	bne.n	800dba4 <RTC_EnterInitMode+0x64>
 800db9e:	7bfb      	ldrb	r3, [r7, #15]
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d1e8      	bne.n	800db76 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800dba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b084      	sub	sp, #16
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	68da      	ldr	r2, [r3, #12]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbc8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	f003 0320 	and.w	r3, r3, #32
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d10a      	bne.n	800dbee <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f7ff ff89 	bl	800daf0 <HAL_RTC_WaitForSynchro>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d004      	beq.n	800dbee <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2204      	movs	r2, #4
 800dbe8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800dbea:	2301      	movs	r3, #1
 800dbec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800dbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3710      	adds	r7, #16
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b085      	sub	sp, #20
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	4603      	mov	r3, r0
 800dc00:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dc02:	2300      	movs	r3, #0
 800dc04:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800dc06:	e005      	b.n	800dc14 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800dc0e:	79fb      	ldrb	r3, [r7, #7]
 800dc10:	3b0a      	subs	r3, #10
 800dc12:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800dc14:	79fb      	ldrb	r3, [r7, #7]
 800dc16:	2b09      	cmp	r3, #9
 800dc18:	d8f6      	bhi.n	800dc08 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	011b      	lsls	r3, r3, #4
 800dc20:	b2da      	uxtb	r2, r3
 800dc22:	79fb      	ldrb	r3, [r7, #7]
 800dc24:	4313      	orrs	r3, r2
 800dc26:	b2db      	uxtb	r3, r3
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3714      	adds	r7, #20
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b087      	sub	sp, #28
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800dc40:	2300      	movs	r3, #0
 800dc42:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	7f1b      	ldrb	r3, [r3, #28]
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d101      	bne.n	800dc50 <HAL_RTCEx_SetTimeStamp+0x1c>
 800dc4c:	2302      	movs	r3, #2
 800dc4e:	e050      	b.n	800dcf2 <HAL_RTCEx_SetTimeStamp+0xbe>
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2201      	movs	r2, #1
 800dc54:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2202      	movs	r2, #2
 800dc5a:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f022 0206 	bic.w	r2, r2, #6
 800dc6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	430a      	orrs	r2, r1
 800dc7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	689a      	ldr	r2, [r3, #8]
 800dc82:	4b1f      	ldr	r3, [pc, #124]	; (800dd00 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800dc84:	4013      	ands	r3, r2
 800dc86:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800dc88:	697a      	ldr	r2, [r7, #20]
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	22ca      	movs	r2, #202	; 0xca
 800dc96:	625a      	str	r2, [r3, #36]	; 0x24
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2253      	movs	r2, #83	; 0x53
 800dc9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	697a      	ldr	r2, [r7, #20]
 800dca6:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	b2da      	uxtb	r2, r3
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f462 6208 	orn	r2, r2, #2176	; 0x880
 800dcb8:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	68db      	ldr	r3, [r3, #12]
 800dcc0:	b2da      	uxtb	r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800dcca:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	689a      	ldr	r2, [r3, #8]
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dcda:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	22ff      	movs	r2, #255	; 0xff
 800dce2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2201      	movs	r2, #1
 800dce8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2200      	movs	r2, #0
 800dcee:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800dcf0:	2300      	movs	r3, #0
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	371c      	adds	r7, #28
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfc:	4770      	bx	lr
 800dcfe:	bf00      	nop
 800dd00:	fffff7f7 	.word	0xfffff7f7

0800dd04 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b088      	sub	sp, #32
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800dd10:	2300      	movs	r3, #0
 800dd12:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800dd14:	2300      	movs	r3, #0
 800dd16:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d101      	bne.n	800dd22 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800dd1e:	2301      	movs	r3, #1
 800dd20:	e156      	b.n	800dfd0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d106      	bne.n	800dd3c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f7f6 fa2a 	bl	8004190 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2202      	movs	r2, #2
 800dd40:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 facf 	bl	800e2e8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	d00c      	beq.n	800dd6c <HAL_SAI_Init+0x68>
 800dd52:	2b02      	cmp	r3, #2
 800dd54:	d80d      	bhi.n	800dd72 <HAL_SAI_Init+0x6e>
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d002      	beq.n	800dd60 <HAL_SAI_Init+0x5c>
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d003      	beq.n	800dd66 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800dd5e:	e008      	b.n	800dd72 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800dd60:	2300      	movs	r3, #0
 800dd62:	61fb      	str	r3, [r7, #28]
      break;
 800dd64:	e006      	b.n	800dd74 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800dd66:	2310      	movs	r3, #16
 800dd68:	61fb      	str	r3, [r7, #28]
      break;
 800dd6a:	e003      	b.n	800dd74 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800dd6c:	2320      	movs	r3, #32
 800dd6e:	61fb      	str	r3, [r7, #28]
      break;
 800dd70:	e000      	b.n	800dd74 <HAL_SAI_Init+0x70>
      break;
 800dd72:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	2b03      	cmp	r3, #3
 800dd7a:	d81e      	bhi.n	800ddba <HAL_SAI_Init+0xb6>
 800dd7c:	a201      	add	r2, pc, #4	; (adr r2, 800dd84 <HAL_SAI_Init+0x80>)
 800dd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd82:	bf00      	nop
 800dd84:	0800dd95 	.word	0x0800dd95
 800dd88:	0800dd9b 	.word	0x0800dd9b
 800dd8c:	0800dda3 	.word	0x0800dda3
 800dd90:	0800ddab 	.word	0x0800ddab
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800dd94:	2300      	movs	r3, #0
 800dd96:	617b      	str	r3, [r7, #20]
    }
    break;
 800dd98:	e010      	b.n	800ddbc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800dd9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd9e:	617b      	str	r3, [r7, #20]
    }
    break;
 800dda0:	e00c      	b.n	800ddbc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800dda2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dda6:	617b      	str	r3, [r7, #20]
    }
    break;
 800dda8:	e008      	b.n	800ddbc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ddaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddae:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	f043 0301 	orr.w	r3, r3, #1
 800ddb6:	61fb      	str	r3, [r7, #28]
    }
    break;
 800ddb8:	e000      	b.n	800ddbc <HAL_SAI_Init+0xb8>
    default:
      break;
 800ddba:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a85      	ldr	r2, [pc, #532]	; (800dfd8 <HAL_SAI_Init+0x2d4>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d004      	beq.n	800ddd0 <HAL_SAI_Init+0xcc>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4a84      	ldr	r2, [pc, #528]	; (800dfdc <HAL_SAI_Init+0x2d8>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d103      	bne.n	800ddd8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800ddd0:	4a83      	ldr	r2, [pc, #524]	; (800dfe0 <HAL_SAI_Init+0x2dc>)
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	6013      	str	r3, [r2, #0]
 800ddd6:	e002      	b.n	800ddde <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ddd8:	4a82      	ldr	r2, [pc, #520]	; (800dfe4 <HAL_SAI_Init+0x2e0>)
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	69db      	ldr	r3, [r3, #28]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d04c      	beq.n	800de80 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800dde6:	2300      	movs	r3, #0
 800dde8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4a7a      	ldr	r2, [pc, #488]	; (800dfd8 <HAL_SAI_Init+0x2d4>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d004      	beq.n	800ddfe <HAL_SAI_Init+0xfa>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a78      	ldr	r2, [pc, #480]	; (800dfdc <HAL_SAI_Init+0x2d8>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d104      	bne.n	800de08 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ddfe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800de02:	f7ff fa65 	bl	800d2d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800de06:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	4a76      	ldr	r2, [pc, #472]	; (800dfe8 <HAL_SAI_Init+0x2e4>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d004      	beq.n	800de1c <HAL_SAI_Init+0x118>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4a75      	ldr	r2, [pc, #468]	; (800dfec <HAL_SAI_Init+0x2e8>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d104      	bne.n	800de26 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800de1c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800de20:	f7ff fa56 	bl	800d2d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800de24:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800de26:	693a      	ldr	r2, [r7, #16]
 800de28:	4613      	mov	r3, r2
 800de2a:	009b      	lsls	r3, r3, #2
 800de2c:	4413      	add	r3, r2
 800de2e:	005b      	lsls	r3, r3, #1
 800de30:	461a      	mov	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	69db      	ldr	r3, [r3, #28]
 800de36:	025b      	lsls	r3, r3, #9
 800de38:	fbb2 f3f3 	udiv	r3, r2, r3
 800de3c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	4a6b      	ldr	r2, [pc, #428]	; (800dff0 <HAL_SAI_Init+0x2ec>)
 800de42:	fba2 2303 	umull	r2, r3, r2, r3
 800de46:	08da      	lsrs	r2, r3, #3
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800de4c:	68f9      	ldr	r1, [r7, #12]
 800de4e:	4b68      	ldr	r3, [pc, #416]	; (800dff0 <HAL_SAI_Init+0x2ec>)
 800de50:	fba3 2301 	umull	r2, r3, r3, r1
 800de54:	08da      	lsrs	r2, r3, #3
 800de56:	4613      	mov	r3, r2
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	4413      	add	r3, r2
 800de5c:	005b      	lsls	r3, r3, #1
 800de5e:	1aca      	subs	r2, r1, r3
 800de60:	2a08      	cmp	r2, #8
 800de62:	d904      	bls.n	800de6e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6a1b      	ldr	r3, [r3, #32]
 800de68:	1c5a      	adds	r2, r3, #1
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de72:	2b04      	cmp	r3, #4
 800de74:	d104      	bne.n	800de80 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6a1b      	ldr	r3, [r3, #32]
 800de7a:	085a      	lsrs	r2, r3, #1
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d003      	beq.n	800de90 <HAL_SAI_Init+0x18c>
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	2b02      	cmp	r3, #2
 800de8e:	d109      	bne.n	800dea4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de94:	2b01      	cmp	r3, #1
 800de96:	d101      	bne.n	800de9c <HAL_SAI_Init+0x198>
 800de98:	2300      	movs	r3, #0
 800de9a:	e001      	b.n	800dea0 <HAL_SAI_Init+0x19c>
 800de9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dea0:	61bb      	str	r3, [r7, #24]
 800dea2:	e008      	b.n	800deb6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d102      	bne.n	800deb2 <HAL_SAI_Init+0x1ae>
 800deac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800deb0:	e000      	b.n	800deb4 <HAL_SAI_Init+0x1b0>
 800deb2:	2300      	movs	r3, #0
 800deb4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	6819      	ldr	r1, [r3, #0]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	4b4c      	ldr	r3, [pc, #304]	; (800dff4 <HAL_SAI_Init+0x2f0>)
 800dec2:	400b      	ands	r3, r1
 800dec4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	6819      	ldr	r1, [r3, #0]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	685a      	ldr	r2, [r3, #4]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ded4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800deda:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee0:	431a      	orrs	r2, r3
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800deee:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800defa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6a1b      	ldr	r3, [r3, #32]
 800df00:	051b      	lsls	r3, r3, #20
 800df02:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	430a      	orrs	r2, r1
 800df0a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	6859      	ldr	r1, [r3, #4]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	4b38      	ldr	r3, [pc, #224]	; (800dff8 <HAL_SAI_Init+0x2f4>)
 800df18:	400b      	ands	r3, r1
 800df1a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	6859      	ldr	r1, [r3, #4]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	699a      	ldr	r2, [r3, #24]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df2a:	431a      	orrs	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df30:	431a      	orrs	r2, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	430a      	orrs	r2, r1
 800df38:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	6899      	ldr	r1, [r3, #8]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	4b2d      	ldr	r3, [pc, #180]	; (800dffc <HAL_SAI_Init+0x2f8>)
 800df46:	400b      	ands	r3, r1
 800df48:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	6899      	ldr	r1, [r3, #8]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df54:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800df5a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800df60:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800df66:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df6c:	3b01      	subs	r3, #1
 800df6e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800df70:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	430a      	orrs	r2, r1
 800df78:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	68d9      	ldr	r1, [r3, #12]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	f24f 0320 	movw	r3, #61472	; 0xf020
 800df88:	400b      	ands	r3, r1
 800df8a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	68d9      	ldr	r1, [r3, #12]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df9a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfa0:	041b      	lsls	r3, r3, #16
 800dfa2:	431a      	orrs	r2, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	021b      	lsls	r3, r3, #8
 800dfac:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	430a      	orrs	r2, r1
 800dfb4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800dfce:	2300      	movs	r3, #0
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3720      	adds	r7, #32
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	40015804 	.word	0x40015804
 800dfdc:	40015824 	.word	0x40015824
 800dfe0:	40015800 	.word	0x40015800
 800dfe4:	40015c00 	.word	0x40015c00
 800dfe8:	40015c04 	.word	0x40015c04
 800dfec:	40015c24 	.word	0x40015c24
 800dff0:	cccccccd 	.word	0xcccccccd
 800dff4:	ff05c010 	.word	0xff05c010
 800dff8:	ffff1ff0 	.word	0xffff1ff0
 800dffc:	fff88000 	.word	0xfff88000

0800e000 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b086      	sub	sp, #24
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	4613      	mov	r3, r2
 800e00c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800e00e:	f7f8 f959 	bl	80062c4 <HAL_GetTick>
 800e012:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d002      	beq.n	800e020 <HAL_SAI_Transmit_DMA+0x20>
 800e01a:	88fb      	ldrh	r3, [r7, #6]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d101      	bne.n	800e024 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800e020:	2301      	movs	r3, #1
 800e022:	e093      	b.n	800e14c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	f040 808c 	bne.w	800e14a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d101      	bne.n	800e040 <HAL_SAI_Transmit_DMA+0x40>
 800e03c:	2302      	movs	r3, #2
 800e03e:	e085      	b.n	800e14c <HAL_SAI_Transmit_DMA+0x14c>
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	2201      	movs	r2, #1
 800e044:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	68ba      	ldr	r2, [r7, #8]
 800e04c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	88fa      	ldrh	r2, [r7, #6]
 800e052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	88fa      	ldrh	r2, [r7, #6]
 800e05a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2200      	movs	r2, #0
 800e062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2212      	movs	r2, #18
 800e06a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e072:	4a38      	ldr	r2, [pc, #224]	; (800e154 <HAL_SAI_Transmit_DMA+0x154>)
 800e074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e07a:	4a37      	ldr	r2, [pc, #220]	; (800e158 <HAL_SAI_Transmit_DMA+0x158>)
 800e07c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e082:	4a36      	ldr	r2, [pc, #216]	; (800e15c <HAL_SAI_Transmit_DMA+0x15c>)
 800e084:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e08a:	2200      	movs	r2, #0
 800e08c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e096:	4619      	mov	r1, r3
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	331c      	adds	r3, #28
 800e09e:	461a      	mov	r2, r3
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e0a6:	f7f8 ffc7 	bl	8007038 <HAL_DMA_Start_IT>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d005      	beq.n	800e0bc <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	e047      	b.n	800e14c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e0bc:	2100      	movs	r1, #0
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	f000 f8dc 	bl	800e27c <SAI_InterruptFlag>
 800e0c4:	4601      	mov	r1, r0
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	691a      	ldr	r2, [r3, #16]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	430a      	orrs	r2, r1
 800e0d2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e0e2:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e0e4:	e015      	b.n	800e112 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800e0e6:	f7f8 f8ed 	bl	80062c4 <HAL_GetTick>
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	1ad3      	subs	r3, r2, r3
 800e0f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0f4:	d90d      	bls.n	800e112 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2200      	movs	r2, #0
 800e10a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800e10e:	2303      	movs	r3, #3
 800e110:	e01c      	b.n	800e14c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	695b      	ldr	r3, [r3, #20]
 800e118:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d0e2      	beq.n	800e0e6 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d107      	bne.n	800e13e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e13c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2200      	movs	r2, #0
 800e142:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800e146:	2300      	movs	r3, #0
 800e148:	e000      	b.n	800e14c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800e14a:	2302      	movs	r3, #2
  }
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3718      	adds	r7, #24
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	0800e3b9 	.word	0x0800e3b9
 800e158:	0800e359 	.word	0x0800e359
 800e15c:	0800e451 	.word	0x0800e451

0800e160 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	4613      	mov	r3, r2
 800e16c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d002      	beq.n	800e17a <HAL_SAI_Receive_DMA+0x1a>
 800e174:	88fb      	ldrh	r3, [r7, #6]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d101      	bne.n	800e17e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800e17a:	2301      	movs	r3, #1
 800e17c:	e074      	b.n	800e268 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800e184:	b2db      	uxtb	r3, r3
 800e186:	2b01      	cmp	r3, #1
 800e188:	d16d      	bne.n	800e266 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800e190:	2b01      	cmp	r3, #1
 800e192:	d101      	bne.n	800e198 <HAL_SAI_Receive_DMA+0x38>
 800e194:	2302      	movs	r3, #2
 800e196:	e067      	b.n	800e268 <HAL_SAI_Receive_DMA+0x108>
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2201      	movs	r2, #1
 800e19c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	68ba      	ldr	r2, [r7, #8]
 800e1a4:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	88fa      	ldrh	r2, [r7, #6]
 800e1aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	88fa      	ldrh	r2, [r7, #6]
 800e1b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2222      	movs	r2, #34	; 0x22
 800e1c2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ca:	4a29      	ldr	r2, [pc, #164]	; (800e270 <HAL_SAI_Receive_DMA+0x110>)
 800e1cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1d2:	4a28      	ldr	r2, [pc, #160]	; (800e274 <HAL_SAI_Receive_DMA+0x114>)
 800e1d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1da:	4a27      	ldr	r2, [pc, #156]	; (800e278 <HAL_SAI_Receive_DMA+0x118>)
 800e1dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	331c      	adds	r3, #28
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e1fe:	f7f8 ff1b 	bl	8007038 <HAL_DMA_Start_IT>
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d005      	beq.n	800e214 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2200      	movs	r2, #0
 800e20c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800e210:	2301      	movs	r3, #1
 800e212:	e029      	b.n	800e268 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e214:	2100      	movs	r1, #0
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f000 f830 	bl	800e27c <SAI_InterruptFlag>
 800e21c:	4601      	mov	r1, r0
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	691a      	ldr	r2, [r3, #16]
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	430a      	orrs	r2, r1
 800e22a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e23a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e246:	2b00      	cmp	r3, #0
 800e248:	d107      	bne.n	800e25a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e258:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2200      	movs	r2, #0
 800e25e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800e262:	2300      	movs	r3, #0
 800e264:	e000      	b.n	800e268 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800e266:	2302      	movs	r3, #2
  }
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3710      	adds	r7, #16
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}
 800e270:	0800e435 	.word	0x0800e435
 800e274:	0800e3d5 	.word	0x0800e3d5
 800e278:	0800e451 	.word	0x0800e451

0800e27c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b085      	sub	sp, #20
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800e286:	2301      	movs	r3, #1
 800e288:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d103      	bne.n	800e298 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f043 0308 	orr.w	r3, r3, #8
 800e296:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e29c:	2b08      	cmp	r3, #8
 800e29e:	d10b      	bne.n	800e2b8 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e2a4:	2b03      	cmp	r3, #3
 800e2a6:	d003      	beq.n	800e2b0 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d103      	bne.n	800e2b8 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f043 0310 	orr.w	r3, r3, #16
 800e2b6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	2b03      	cmp	r3, #3
 800e2be:	d003      	beq.n	800e2c8 <SAI_InterruptFlag+0x4c>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	2b02      	cmp	r3, #2
 800e2c6:	d104      	bne.n	800e2d2 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e2ce:	60fb      	str	r3, [r7, #12]
 800e2d0:	e003      	b.n	800e2da <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f043 0304 	orr.w	r3, r3, #4
 800e2d8:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800e2da:	68fb      	ldr	r3, [r7, #12]
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3714      	adds	r7, #20
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800e2f0:	4b17      	ldr	r3, [pc, #92]	; (800e350 <SAI_Disable+0x68>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4a17      	ldr	r2, [pc, #92]	; (800e354 <SAI_Disable+0x6c>)
 800e2f6:	fba2 2303 	umull	r2, r3, r2, r3
 800e2fa:	0b1b      	lsrs	r3, r3, #12
 800e2fc:	009b      	lsls	r3, r3, #2
 800e2fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800e300:	2300      	movs	r3, #0
 800e302:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e312:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	1e5a      	subs	r2, r3, #1
 800e318:	60fa      	str	r2, [r7, #12]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d10a      	bne.n	800e334 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e324:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800e32e:	2303      	movs	r3, #3
 800e330:	72fb      	strb	r3, [r7, #11]
      break;
 800e332:	e006      	b.n	800e342 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d1e8      	bne.n	800e314 <SAI_Disable+0x2c>

  return status;
 800e342:	7afb      	ldrb	r3, [r7, #11]
}
 800e344:	4618      	mov	r0, r3
 800e346:	3714      	adds	r7, #20
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr
 800e350:	2000002c 	.word	0x2000002c
 800e354:	95cbec1b 	.word	0x95cbec1b

0800e358 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e364:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	69db      	ldr	r3, [r3, #28]
 800e36a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e36e:	d01c      	beq.n	800e3aa <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	2200      	movs	r2, #0
 800e374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e386:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e388:	2100      	movs	r1, #0
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f7ff ff76 	bl	800e27c <SAI_InterruptFlag>
 800e390:	4603      	mov	r3, r0
 800e392:	43d9      	mvns	r1, r3
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	691a      	ldr	r2, [r3, #16]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	400a      	ands	r2, r1
 800e3a0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	f7f6 ffba 	bl	8005324 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e3b0:	bf00      	nop
 800e3b2:	3710      	adds	r7, #16
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	f7f6 ffb6 	bl	8005338 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e3cc:	bf00      	nop
 800e3ce:	3710      	adds	r7, #16
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3e0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	69db      	ldr	r3, [r3, #28]
 800e3e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3ea:	d01c      	beq.n	800e426 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e3fa:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2200      	movs	r2, #0
 800e400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e404:	2100      	movs	r1, #0
 800e406:	68f8      	ldr	r0, [r7, #12]
 800e408:	f7ff ff38 	bl	800e27c <SAI_InterruptFlag>
 800e40c:	4603      	mov	r3, r0
 800e40e:	43d9      	mvns	r1, r3
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	691a      	ldr	r2, [r3, #16]
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	400a      	ands	r2, r1
 800e41c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2201      	movs	r2, #1
 800e422:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800e426:	68f8      	ldr	r0, [r7, #12]
 800e428:	f7f2 ff38 	bl	800129c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e42c:	bf00      	nop
 800e42e:	3710      	adds	r7, #16
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e440:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f7f2 ff40 	bl	80012c8 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e448:	bf00      	nop
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e45c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e464:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e474:	2b01      	cmp	r3, #1
 800e476:	d004      	beq.n	800e482 <SAI_DMAError+0x32>
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e47c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d112      	bne.n	800e4a8 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e490:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800e492:	68f8      	ldr	r0, [r7, #12]
 800e494:	f7ff ff28 	bl	800e2e8 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2201      	movs	r2, #1
 800e49c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f7f6 ff4f 	bl	800534c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800e4ae:	bf00      	nop
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b082      	sub	sp, #8
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d101      	bne.n	800e4c8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	e022      	b.n	800e50e <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d105      	bne.n	800e4e0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f7f5 faca 	bl	8003a74 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2203      	movs	r2, #3
 800e4e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 f815 	bl	800e518 <HAL_SD_InitCard>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d001      	beq.n	800e4f8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e00a      	b.n	800e50e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2200      	movs	r2, #0
 800e502:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2201      	movs	r2, #1
 800e508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e50c:	2300      	movs	r3, #0
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3708      	adds	r7, #8
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
	...

0800e518 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e518:	b5b0      	push	{r4, r5, r7, lr}
 800e51a:	b08e      	sub	sp, #56	; 0x38
 800e51c:	af04      	add	r7, sp, #16
 800e51e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800e520:	2300      	movs	r3, #0
 800e522:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800e524:	2300      	movs	r3, #0
 800e526:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e528:	2300      	movs	r3, #0
 800e52a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800e52c:	2300      	movs	r3, #0
 800e52e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e530:	2300      	movs	r3, #0
 800e532:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800e534:	2376      	movs	r3, #118	; 0x76
 800e536:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681d      	ldr	r5, [r3, #0]
 800e53c:	466c      	mov	r4, sp
 800e53e:	f107 0314 	add.w	r3, r7, #20
 800e542:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e54a:	f107 0308 	add.w	r3, r7, #8
 800e54e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e550:	4628      	mov	r0, r5
 800e552:	f002 ffa1 	bl	8011498 <SDMMC_Init>
 800e556:	4603      	mov	r3, r0
 800e558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800e55c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e560:	2b00      	cmp	r3, #0
 800e562:	d001      	beq.n	800e568 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800e564:	2301      	movs	r3, #1
 800e566:	e059      	b.n	800e61c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	685a      	ldr	r2, [r3, #4]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e576:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4618      	mov	r0, r3
 800e57e:	f002 ffc4 	bl	801150a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	685a      	ldr	r2, [r3, #4]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e590:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800e592:	2002      	movs	r0, #2
 800e594:	f7f7 fea2 	bl	80062dc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 fe0f 	bl	800f1bc <SD_PowerON>
 800e59e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5a0:	6a3b      	ldr	r3, [r7, #32]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d00b      	beq.n	800e5be <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5b2:	6a3b      	ldr	r3, [r7, #32]
 800e5b4:	431a      	orrs	r2, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e02e      	b.n	800e61c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 fd2e 	bl	800f020 <SD_InitCard>
 800e5c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5c6:	6a3b      	ldr	r3, [r7, #32]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d00b      	beq.n	800e5e4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5d8:	6a3b      	ldr	r3, [r7, #32]
 800e5da:	431a      	orrs	r2, r3
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	e01b      	b.n	800e61c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f003 f81f 	bl	8011630 <SDMMC_CmdBlockLength>
 800e5f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5f4:	6a3b      	ldr	r3, [r7, #32]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00f      	beq.n	800e61a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a09      	ldr	r2, [pc, #36]	; (800e624 <HAL_SD_InitCard+0x10c>)
 800e600:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e606:	6a3b      	ldr	r3, [r7, #32]
 800e608:	431a      	orrs	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2201      	movs	r2, #1
 800e612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e616:	2301      	movs	r3, #1
 800e618:	e000      	b.n	800e61c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800e61a:	2300      	movs	r3, #0
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3728      	adds	r7, #40	; 0x28
 800e620:	46bd      	mov	sp, r7
 800e622:	bdb0      	pop	{r4, r5, r7, pc}
 800e624:	004005ff 	.word	0x004005ff

0800e628 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b08c      	sub	sp, #48	; 0x30
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	607a      	str	r2, [r7, #4]
 800e634:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d107      	bne.n	800e650 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e644:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e64c:	2301      	movs	r3, #1
 800e64e:	e0c3      	b.n	800e7d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e656:	b2db      	uxtb	r3, r3
 800e658:	2b01      	cmp	r3, #1
 800e65a:	f040 80bc 	bne.w	800e7d6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2200      	movs	r2, #0
 800e662:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	441a      	add	r2, r3
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e66e:	429a      	cmp	r2, r3
 800e670:	d907      	bls.n	800e682 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e676:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e67e:	2301      	movs	r3, #1
 800e680:	e0aa      	b.n	800e7d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2203      	movs	r2, #3
 800e686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2200      	movs	r2, #0
 800e690:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e6a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6a6:	4a4e      	ldr	r2, [pc, #312]	; (800e7e0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800e6a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ae:	4a4d      	ldr	r2, [pc, #308]	; (800e7e4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800e6b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6be:	2200      	movs	r2, #0
 800e6c0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d2:	689a      	ldr	r2, [r3, #8]
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	430a      	orrs	r2, r1
 800e6dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	3380      	adds	r3, #128	; 0x80
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	025b      	lsls	r3, r3, #9
 800e6f0:	089b      	lsrs	r3, r3, #2
 800e6f2:	f7f8 fca1 	bl	8007038 <HAL_DMA_Start_IT>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d017      	beq.n	800e72c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800e70a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a35      	ldr	r2, [pc, #212]	; (800e7e8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800e712:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e718:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2201      	movs	r2, #1
 800e724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e728:	2301      	movs	r3, #1
 800e72a:	e055      	b.n	800e7d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f042 0208 	orr.w	r2, r2, #8
 800e73a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e740:	2b01      	cmp	r3, #1
 800e742:	d002      	beq.n	800e74a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800e744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e746:	025b      	lsls	r3, r3, #9
 800e748:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e74a:	f04f 33ff 	mov.w	r3, #4294967295
 800e74e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	025b      	lsls	r3, r3, #9
 800e754:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e756:	2390      	movs	r3, #144	; 0x90
 800e758:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e75a:	2302      	movs	r3, #2
 800e75c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e75e:	2300      	movs	r3, #0
 800e760:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800e762:	2301      	movs	r3, #1
 800e764:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f107 0210 	add.w	r2, r7, #16
 800e76e:	4611      	mov	r1, r2
 800e770:	4618      	mov	r0, r3
 800e772:	f002 ff31 	bl	80115d8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	2b01      	cmp	r3, #1
 800e77a:	d90a      	bls.n	800e792 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2282      	movs	r2, #130	; 0x82
 800e780:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e788:	4618      	mov	r0, r3
 800e78a:	f002 ff95 	bl	80116b8 <SDMMC_CmdReadMultiBlock>
 800e78e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e790:	e009      	b.n	800e7a6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2281      	movs	r2, #129	; 0x81
 800e796:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f002 ff68 	bl	8011674 <SDMMC_CmdReadSingleBlock>
 800e7a4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800e7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d012      	beq.n	800e7d2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4a0d      	ldr	r2, [pc, #52]	; (800e7e8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800e7b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ba:	431a      	orrs	r2, r3
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	e002      	b.n	800e7d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	e000      	b.n	800e7d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800e7d6:	2302      	movs	r3, #2
  }
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3730      	adds	r7, #48	; 0x30
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	0800ef0b 	.word	0x0800ef0b
 800e7e4:	0800ef7d 	.word	0x0800ef7d
 800e7e8:	004005ff 	.word	0x004005ff

0800e7ec <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b08c      	sub	sp, #48	; 0x30
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	607a      	str	r2, [r7, #4]
 800e7f8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d107      	bne.n	800e814 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e808:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e810:	2301      	movs	r3, #1
 800e812:	e0c6      	b.n	800e9a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	f040 80bf 	bne.w	800e9a0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2200      	movs	r2, #0
 800e826:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	441a      	add	r2, r3
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e832:	429a      	cmp	r2, r3
 800e834:	d907      	bls.n	800e846 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e83a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e842:	2301      	movs	r3, #1
 800e844:	e0ad      	b.n	800e9a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2203      	movs	r2, #3
 800e84a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	2200      	movs	r2, #0
 800e854:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f042 021a 	orr.w	r2, r2, #26
 800e864:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e86a:	4a50      	ldr	r2, [pc, #320]	; (800e9ac <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800e86c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e872:	4a4f      	ldr	r2, [pc, #316]	; (800e9b0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800e874:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e87a:	2200      	movs	r2, #0
 800e87c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e882:	2b01      	cmp	r3, #1
 800e884:	d002      	beq.n	800e88c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800e886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e888:	025b      	lsls	r3, r3, #9
 800e88a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d90a      	bls.n	800e8a8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	22a0      	movs	r2, #160	; 0xa0
 800e896:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f002 ff4e 	bl	8011740 <SDMMC_CmdWriteMultiBlock>
 800e8a4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e8a6:	e009      	b.n	800e8bc <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2290      	movs	r2, #144	; 0x90
 800e8ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f002 ff21 	bl	80116fc <SDMMC_CmdWriteSingleBlock>
 800e8ba:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d012      	beq.n	800e8e8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a3b      	ldr	r2, [pc, #236]	; (800e9b4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800e8c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d0:	431a      	orrs	r2, r3
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	e05c      	b.n	800e9a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f042 0208 	orr.w	r2, r2, #8
 800e8f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8fc:	2240      	movs	r2, #64	; 0x40
 800e8fe:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e910:	689a      	ldr	r2, [r3, #8]
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	430a      	orrs	r2, r1
 800e91a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e920:	68b9      	ldr	r1, [r7, #8]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	3380      	adds	r3, #128	; 0x80
 800e928:	461a      	mov	r2, r3
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	025b      	lsls	r3, r3, #9
 800e92e:	089b      	lsrs	r3, r3, #2
 800e930:	f7f8 fb82 	bl	8007038 <HAL_DMA_Start_IT>
 800e934:	4603      	mov	r3, r0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d01a      	beq.n	800e970 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f022 021a 	bic.w	r2, r2, #26
 800e948:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4a19      	ldr	r2, [pc, #100]	; (800e9b4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800e950:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e956:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2201      	movs	r2, #1
 800e962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2200      	movs	r2, #0
 800e96a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e96c:	2301      	movs	r3, #1
 800e96e:	e018      	b.n	800e9a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e970:	f04f 33ff 	mov.w	r3, #4294967295
 800e974:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	025b      	lsls	r3, r3, #9
 800e97a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e97c:	2390      	movs	r3, #144	; 0x90
 800e97e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e980:	2300      	movs	r3, #0
 800e982:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e984:	2300      	movs	r3, #0
 800e986:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800e988:	2301      	movs	r3, #1
 800e98a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	f107 0210 	add.w	r2, r7, #16
 800e994:	4611      	mov	r1, r2
 800e996:	4618      	mov	r0, r3
 800e998:	f002 fe1e 	bl	80115d8 <SDMMC_ConfigData>

      return HAL_OK;
 800e99c:	2300      	movs	r3, #0
 800e99e:	e000      	b.n	800e9a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800e9a0:	2302      	movs	r3, #2
  }
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3730      	adds	r7, #48	; 0x30
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	0800eee1 	.word	0x0800eee1
 800e9b0:	0800ef7d 	.word	0x0800ef7d
 800e9b4:	004005ff 	.word	0x004005ff

0800e9b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e9c0:	bf00      	nop
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9da:	0f9b      	lsrs	r3, r3, #30
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9e6:	0e9b      	lsrs	r3, r3, #26
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	f003 030f 	and.w	r3, r3, #15
 800e9ee:	b2da      	uxtb	r2, r3
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9f8:	0e1b      	lsrs	r3, r3, #24
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	f003 0303 	and.w	r3, r3, #3
 800ea00:	b2da      	uxtb	r2, r3
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea0a:	0c1b      	lsrs	r3, r3, #16
 800ea0c:	b2da      	uxtb	r2, r3
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea16:	0a1b      	lsrs	r3, r3, #8
 800ea18:	b2da      	uxtb	r2, r3
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea22:	b2da      	uxtb	r2, r3
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea2c:	0d1b      	lsrs	r3, r3, #20
 800ea2e:	b29a      	uxth	r2, r3
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea38:	0c1b      	lsrs	r3, r3, #16
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	f003 030f 	and.w	r3, r3, #15
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea4a:	0bdb      	lsrs	r3, r3, #15
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	f003 0301 	and.w	r3, r3, #1
 800ea52:	b2da      	uxtb	r2, r3
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea5c:	0b9b      	lsrs	r3, r3, #14
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	f003 0301 	and.w	r3, r3, #1
 800ea64:	b2da      	uxtb	r2, r3
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea6e:	0b5b      	lsrs	r3, r3, #13
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	f003 0301 	and.w	r3, r3, #1
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea80:	0b1b      	lsrs	r3, r3, #12
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	f003 0301 	and.w	r3, r3, #1
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	2200      	movs	r2, #0
 800ea92:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d163      	bne.n	800eb64 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaa0:	009a      	lsls	r2, r3, #2
 800eaa2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800eaa6:	4013      	ands	r3, r2
 800eaa8:	687a      	ldr	r2, [r7, #4]
 800eaaa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800eaac:	0f92      	lsrs	r2, r2, #30
 800eaae:	431a      	orrs	r2, r3
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eab8:	0edb      	lsrs	r3, r3, #27
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	f003 0307 	and.w	r3, r3, #7
 800eac0:	b2da      	uxtb	r2, r3
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaca:	0e1b      	lsrs	r3, r3, #24
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	f003 0307 	and.w	r3, r3, #7
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eadc:	0d5b      	lsrs	r3, r3, #21
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	f003 0307 	and.w	r3, r3, #7
 800eae4:	b2da      	uxtb	r2, r3
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaee:	0c9b      	lsrs	r3, r3, #18
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	f003 0307 	and.w	r3, r3, #7
 800eaf6:	b2da      	uxtb	r2, r3
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb00:	0bdb      	lsrs	r3, r3, #15
 800eb02:	b2db      	uxtb	r3, r3
 800eb04:	f003 0307 	and.w	r3, r3, #7
 800eb08:	b2da      	uxtb	r2, r3
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	691b      	ldr	r3, [r3, #16]
 800eb12:	1c5a      	adds	r2, r3, #1
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	7e1b      	ldrb	r3, [r3, #24]
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	f003 0307 	and.w	r3, r3, #7
 800eb22:	3302      	adds	r3, #2
 800eb24:	2201      	movs	r2, #1
 800eb26:	fa02 f303 	lsl.w	r3, r2, r3
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800eb2e:	fb03 f202 	mul.w	r2, r3, r2
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	7a1b      	ldrb	r3, [r3, #8]
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	f003 030f 	and.w	r3, r3, #15
 800eb40:	2201      	movs	r2, #1
 800eb42:	409a      	lsls	r2, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800eb50:	0a52      	lsrs	r2, r2, #9
 800eb52:	fb03 f202 	mul.w	r2, r3, r2
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb60:	661a      	str	r2, [r3, #96]	; 0x60
 800eb62:	e031      	b.n	800ebc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d11d      	bne.n	800eba8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb70:	041b      	lsls	r3, r3, #16
 800eb72:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb7a:	0c1b      	lsrs	r3, r3, #16
 800eb7c:	431a      	orrs	r2, r3
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	691b      	ldr	r3, [r3, #16]
 800eb86:	3301      	adds	r3, #1
 800eb88:	029a      	lsls	r2, r3, #10
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb9c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	661a      	str	r2, [r3, #96]	; 0x60
 800eba6:	e00f      	b.n	800ebc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	4a58      	ldr	r2, [pc, #352]	; (800ed10 <HAL_SD_GetCardCSD+0x344>)
 800ebae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	e09d      	b.n	800ed04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebcc:	0b9b      	lsrs	r3, r3, #14
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	f003 0301 	and.w	r3, r3, #1
 800ebd4:	b2da      	uxtb	r2, r3
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebde:	09db      	lsrs	r3, r3, #7
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebe6:	b2da      	uxtb	r2, r3
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebf6:	b2da      	uxtb	r2, r3
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec00:	0fdb      	lsrs	r3, r3, #31
 800ec02:	b2da      	uxtb	r2, r3
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec0c:	0f5b      	lsrs	r3, r3, #29
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	f003 0303 	and.w	r3, r3, #3
 800ec14:	b2da      	uxtb	r2, r3
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec1e:	0e9b      	lsrs	r3, r3, #26
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	f003 0307 	and.w	r3, r3, #7
 800ec26:	b2da      	uxtb	r2, r3
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec30:	0d9b      	lsrs	r3, r3, #22
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	f003 030f 	and.w	r3, r3, #15
 800ec38:	b2da      	uxtb	r2, r3
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec42:	0d5b      	lsrs	r3, r3, #21
 800ec44:	b2db      	uxtb	r3, r3
 800ec46:	f003 0301 	and.w	r3, r3, #1
 800ec4a:	b2da      	uxtb	r2, r3
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	2200      	movs	r2, #0
 800ec56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec5e:	0c1b      	lsrs	r3, r3, #16
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	f003 0301 	and.w	r3, r3, #1
 800ec66:	b2da      	uxtb	r2, r3
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec72:	0bdb      	lsrs	r3, r3, #15
 800ec74:	b2db      	uxtb	r3, r3
 800ec76:	f003 0301 	and.w	r3, r3, #1
 800ec7a:	b2da      	uxtb	r2, r3
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec86:	0b9b      	lsrs	r3, r3, #14
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	f003 0301 	and.w	r3, r3, #1
 800ec8e:	b2da      	uxtb	r2, r3
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec9a:	0b5b      	lsrs	r3, r3, #13
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	f003 0301 	and.w	r3, r3, #1
 800eca2:	b2da      	uxtb	r2, r3
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecae:	0b1b      	lsrs	r3, r3, #12
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	f003 0301 	and.w	r3, r3, #1
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecc2:	0a9b      	lsrs	r3, r3, #10
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	f003 0303 	and.w	r3, r3, #3
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecd6:	0a1b      	lsrs	r3, r3, #8
 800ecd8:	b2db      	uxtb	r3, r3
 800ecda:	f003 0303 	and.w	r3, r3, #3
 800ecde:	b2da      	uxtb	r2, r3
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecea:	085b      	lsrs	r3, r3, #1
 800ecec:	b2db      	uxtb	r3, r3
 800ecee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecf2:	b2da      	uxtb	r2, r3
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ed02:	2300      	movs	r3, #0
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	370c      	adds	r7, #12
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr
 800ed10:	004005ff 	.word	0x004005ff

0800ed14 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ed5e:	2300      	movs	r3, #0
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	370c      	adds	r7, #12
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr

0800ed6c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ed6c:	b5b0      	push	{r4, r5, r7, lr}
 800ed6e:	b08e      	sub	sp, #56	; 0x38
 800ed70:	af04      	add	r7, sp, #16
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ed76:	2300      	movs	r3, #0
 800ed78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2203      	movs	r2, #3
 800ed80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed88:	2b03      	cmp	r3, #3
 800ed8a:	d02e      	beq.n	800edea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed92:	d106      	bne.n	800eda2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	639a      	str	r2, [r3, #56]	; 0x38
 800eda0:	e029      	b.n	800edf6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eda8:	d10a      	bne.n	800edc0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f000 fabc 	bl	800f328 <SD_WideBus_Enable>
 800edb0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edb6:	6a3b      	ldr	r3, [r7, #32]
 800edb8:	431a      	orrs	r2, r3
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	639a      	str	r2, [r3, #56]	; 0x38
 800edbe:	e01a      	b.n	800edf6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d10a      	bne.n	800eddc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 faf9 	bl	800f3be <SD_WideBus_Disable>
 800edcc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800edd2:	6a3b      	ldr	r3, [r7, #32]
 800edd4:	431a      	orrs	r2, r3
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	639a      	str	r2, [r3, #56]	; 0x38
 800edda:	e00c      	b.n	800edf6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ede0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	639a      	str	r2, [r3, #56]	; 0x38
 800ede8:	e005      	b.n	800edf6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00b      	beq.n	800ee16 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4a26      	ldr	r2, [pc, #152]	; (800ee9c <HAL_SD_ConfigWideBusOperation+0x130>)
 800ee04:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ee0e:	2301      	movs	r3, #1
 800ee10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee14:	e01f      	b.n	800ee56 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	695b      	ldr	r3, [r3, #20]
 800ee30:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	699b      	ldr	r3, [r3, #24]
 800ee36:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681d      	ldr	r5, [r3, #0]
 800ee3c:	466c      	mov	r4, sp
 800ee3e:	f107 0314 	add.w	r3, r7, #20
 800ee42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ee46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ee4a:	f107 0308 	add.w	r3, r7, #8
 800ee4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee50:	4628      	mov	r0, r5
 800ee52:	f002 fb21 	bl	8011498 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f002 fbe6 	bl	8011630 <SDMMC_CmdBlockLength>
 800ee64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ee66:	6a3b      	ldr	r3, [r7, #32]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00c      	beq.n	800ee86 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a0a      	ldr	r2, [pc, #40]	; (800ee9c <HAL_SD_ConfigWideBusOperation+0x130>)
 800ee72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee78:	6a3b      	ldr	r3, [r7, #32]
 800ee7a:	431a      	orrs	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ee80:	2301      	movs	r3, #1
 800ee82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ee8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3728      	adds	r7, #40	; 0x28
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bdb0      	pop	{r4, r5, r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	004005ff 	.word	0x004005ff

0800eea0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b086      	sub	sp, #24
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800eeac:	f107 030c 	add.w	r3, r7, #12
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 fa10 	bl	800f2d8 <SD_SendStatus>
 800eeb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d005      	beq.n	800eecc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	431a      	orrs	r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	0a5b      	lsrs	r3, r3, #9
 800eed0:	f003 030f 	and.w	r3, r3, #15
 800eed4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800eed6:	693b      	ldr	r3, [r7, #16]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3718      	adds	r7, #24
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b085      	sub	sp, #20
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeec:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eefc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800eefe:	bf00      	nop
 800ef00:	3714      	adds	r7, #20
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr

0800ef0a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ef0a:	b580      	push	{r7, lr}
 800ef0c:	b084      	sub	sp, #16
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef16:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef1c:	2b82      	cmp	r3, #130	; 0x82
 800ef1e:	d111      	bne.n	800ef44 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4618      	mov	r0, r3
 800ef26:	f002 fc2d 	bl	8011784 <SDMMC_CmdStopTransfer>
 800ef2a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d008      	beq.n	800ef44 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	431a      	orrs	r2, r3
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ef3e:	68f8      	ldr	r0, [r7, #12]
 800ef40:	f7ff fd3a 	bl	800e9b8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f022 0208 	bic.w	r2, r2, #8
 800ef52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f240 523a 	movw	r2, #1338	; 0x53a
 800ef5c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2201      	movs	r2, #1
 800ef62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ef6c:	68f8      	ldr	r0, [r7, #12]
 800ef6e:	f004 f873 	bl	8013058 <HAL_SD_RxCpltCallback>
#endif
}
 800ef72:	bf00      	nop
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
	...

0800ef7c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b086      	sub	sp, #24
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef88:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f7f8 fad0 	bl	8007530 <HAL_DMA_GetError>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b02      	cmp	r3, #2
 800ef94:	d03e      	beq.n	800f014 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef9c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efa4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d002      	beq.n	800efb2 <SD_DMAError+0x36>
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d12d      	bne.n	800f00e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a19      	ldr	r2, [pc, #100]	; (800f01c <SD_DMAError+0xa0>)
 800efb8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800efc0:	697b      	ldr	r3, [r7, #20]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800efc8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800efd6:	6978      	ldr	r0, [r7, #20]
 800efd8:	f7ff ff62 	bl	800eea0 <HAL_SD_GetCardState>
 800efdc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	2b06      	cmp	r3, #6
 800efe2:	d002      	beq.n	800efea <SD_DMAError+0x6e>
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	2b05      	cmp	r3, #5
 800efe8:	d10a      	bne.n	800f000 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4618      	mov	r0, r3
 800eff0:	f002 fbc8 	bl	8011784 <SDMMC_CmdStopTransfer>
 800eff4:	4602      	mov	r2, r0
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800effa:	431a      	orrs	r2, r3
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	2201      	movs	r2, #1
 800f004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	2200      	movs	r2, #0
 800f00c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800f00e:	6978      	ldr	r0, [r7, #20]
 800f010:	f7ff fcd2 	bl	800e9b8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800f014:	bf00      	nop
 800f016:	3718      	adds	r7, #24
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	004005ff 	.word	0x004005ff

0800f020 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800f020:	b5b0      	push	{r4, r5, r7, lr}
 800f022:	b094      	sub	sp, #80	; 0x50
 800f024:	af04      	add	r7, sp, #16
 800f026:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800f028:	2301      	movs	r3, #1
 800f02a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4618      	mov	r0, r3
 800f032:	f002 fa78 	bl	8011526 <SDMMC_GetPowerState>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d102      	bne.n	800f042 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f03c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800f040:	e0b8      	b.n	800f1b4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f046:	2b03      	cmp	r3, #3
 800f048:	d02f      	beq.n	800f0aa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4618      	mov	r0, r3
 800f050:	f002 fca3 	bl	801199a <SDMMC_CmdSendCID>
 800f054:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d001      	beq.n	800f060 <SD_InitCard+0x40>
    {
      return errorstate;
 800f05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f05e:	e0a9      	b.n	800f1b4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	2100      	movs	r1, #0
 800f066:	4618      	mov	r0, r3
 800f068:	f002 faa3 	bl	80115b2 <SDMMC_GetResponse>
 800f06c:	4602      	mov	r2, r0
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2104      	movs	r1, #4
 800f078:	4618      	mov	r0, r3
 800f07a:	f002 fa9a 	bl	80115b2 <SDMMC_GetResponse>
 800f07e:	4602      	mov	r2, r0
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2108      	movs	r1, #8
 800f08a:	4618      	mov	r0, r3
 800f08c:	f002 fa91 	bl	80115b2 <SDMMC_GetResponse>
 800f090:	4602      	mov	r2, r0
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	210c      	movs	r1, #12
 800f09c:	4618      	mov	r0, r3
 800f09e:	f002 fa88 	bl	80115b2 <SDMMC_GetResponse>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0ae:	2b03      	cmp	r3, #3
 800f0b0:	d00d      	beq.n	800f0ce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f107 020e 	add.w	r2, r7, #14
 800f0ba:	4611      	mov	r1, r2
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f002 fca9 	bl	8011a14 <SDMMC_CmdSetRelAdd>
 800f0c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d001      	beq.n	800f0ce <SD_InitCard+0xae>
    {
      return errorstate;
 800f0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0cc:	e072      	b.n	800f1b4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0d2:	2b03      	cmp	r3, #3
 800f0d4:	d036      	beq.n	800f144 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800f0d6:	89fb      	ldrh	r3, [r7, #14]
 800f0d8:	461a      	mov	r2, r3
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0e6:	041b      	lsls	r3, r3, #16
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	4610      	mov	r0, r2
 800f0ec:	f002 fc73 	bl	80119d6 <SDMMC_CmdSendCSD>
 800f0f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800f0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d001      	beq.n	800f0fc <SD_InitCard+0xdc>
    {
      return errorstate;
 800f0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0fa:	e05b      	b.n	800f1b4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2100      	movs	r1, #0
 800f102:	4618      	mov	r0, r3
 800f104:	f002 fa55 	bl	80115b2 <SDMMC_GetResponse>
 800f108:	4602      	mov	r2, r0
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	2104      	movs	r1, #4
 800f114:	4618      	mov	r0, r3
 800f116:	f002 fa4c 	bl	80115b2 <SDMMC_GetResponse>
 800f11a:	4602      	mov	r2, r0
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	2108      	movs	r1, #8
 800f126:	4618      	mov	r0, r3
 800f128:	f002 fa43 	bl	80115b2 <SDMMC_GetResponse>
 800f12c:	4602      	mov	r2, r0
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	210c      	movs	r1, #12
 800f138:	4618      	mov	r0, r3
 800f13a:	f002 fa3a 	bl	80115b2 <SDMMC_GetResponse>
 800f13e:	4602      	mov	r2, r0
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2104      	movs	r1, #4
 800f14a:	4618      	mov	r0, r3
 800f14c:	f002 fa31 	bl	80115b2 <SDMMC_GetResponse>
 800f150:	4603      	mov	r3, r0
 800f152:	0d1a      	lsrs	r2, r3, #20
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800f158:	f107 0310 	add.w	r3, r7, #16
 800f15c:	4619      	mov	r1, r3
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f7ff fc34 	bl	800e9cc <HAL_SD_GetCardCSD>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d002      	beq.n	800f170 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f16a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f16e:	e021      	b.n	800f1b4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6819      	ldr	r1, [r3, #0]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f178:	041b      	lsls	r3, r3, #16
 800f17a:	2200      	movs	r2, #0
 800f17c:	461c      	mov	r4, r3
 800f17e:	4615      	mov	r5, r2
 800f180:	4622      	mov	r2, r4
 800f182:	462b      	mov	r3, r5
 800f184:	4608      	mov	r0, r1
 800f186:	f002 fb1f 	bl	80117c8 <SDMMC_CmdSelDesel>
 800f18a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800f18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d001      	beq.n	800f196 <SD_InitCard+0x176>
  {
    return errorstate;
 800f192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f194:	e00e      	b.n	800f1b4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681d      	ldr	r5, [r3, #0]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	466c      	mov	r4, sp
 800f19e:	f103 0210 	add.w	r2, r3, #16
 800f1a2:	ca07      	ldmia	r2, {r0, r1, r2}
 800f1a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f1a8:	3304      	adds	r3, #4
 800f1aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	f002 f973 	bl	8011498 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800f1b2:	2300      	movs	r3, #0
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3740      	adds	r7, #64	; 0x40
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bdb0      	pop	{r4, r5, r7, pc}

0800f1bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b086      	sub	sp, #24
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	617b      	str	r3, [r7, #20]
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f002 fb1a 	bl	801180e <SDMMC_CmdGoIdleState>
 800f1da:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d001      	beq.n	800f1e6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	e072      	b.n	800f2cc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f002 fb2d 	bl	801184a <SDMMC_CmdOperCond>
 800f1f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d00d      	beq.n	800f214 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	4618      	mov	r0, r3
 800f204:	f002 fb03 	bl	801180e <SDMMC_CmdGoIdleState>
 800f208:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d004      	beq.n	800f21a <SD_PowerON+0x5e>
    {
      return errorstate;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	e05b      	b.n	800f2cc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2201      	movs	r2, #1
 800f218:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f21e:	2b01      	cmp	r3, #1
 800f220:	d137      	bne.n	800f292 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	2100      	movs	r1, #0
 800f228:	4618      	mov	r0, r3
 800f22a:	f002 fb2d 	bl	8011888 <SDMMC_CmdAppCommand>
 800f22e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d02d      	beq.n	800f292 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f236:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f23a:	e047      	b.n	800f2cc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2100      	movs	r1, #0
 800f242:	4618      	mov	r0, r3
 800f244:	f002 fb20 	bl	8011888 <SDMMC_CmdAppCommand>
 800f248:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d001      	beq.n	800f254 <SD_PowerON+0x98>
    {
      return errorstate;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	e03b      	b.n	800f2cc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	491e      	ldr	r1, [pc, #120]	; (800f2d4 <SD_PowerON+0x118>)
 800f25a:	4618      	mov	r0, r3
 800f25c:	f002 fb36 	bl	80118cc <SDMMC_CmdAppOperCommand>
 800f260:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d002      	beq.n	800f26e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f268:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f26c:	e02e      	b.n	800f2cc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2100      	movs	r1, #0
 800f274:	4618      	mov	r0, r3
 800f276:	f002 f99c 	bl	80115b2 <SDMMC_GetResponse>
 800f27a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	0fdb      	lsrs	r3, r3, #31
 800f280:	2b01      	cmp	r3, #1
 800f282:	d101      	bne.n	800f288 <SD_PowerON+0xcc>
 800f284:	2301      	movs	r3, #1
 800f286:	e000      	b.n	800f28a <SD_PowerON+0xce>
 800f288:	2300      	movs	r3, #0
 800f28a:	613b      	str	r3, [r7, #16]

    count++;
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	3301      	adds	r3, #1
 800f290:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f298:	4293      	cmp	r3, r2
 800f29a:	d802      	bhi.n	800f2a2 <SD_PowerON+0xe6>
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d0cc      	beq.n	800f23c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d902      	bls.n	800f2b2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f2ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f2b0:	e00c      	b.n	800f2cc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d003      	beq.n	800f2c4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	645a      	str	r2, [r3, #68]	; 0x44
 800f2c2:	e002      	b.n	800f2ca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800f2ca:	2300      	movs	r3, #0
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3718      	adds	r7, #24
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	c1100000 	.word	0xc1100000

0800f2d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b084      	sub	sp, #16
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d102      	bne.n	800f2ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f2e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f2ec:	e018      	b.n	800f320 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681a      	ldr	r2, [r3, #0]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2f6:	041b      	lsls	r3, r3, #16
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	4610      	mov	r0, r2
 800f2fc:	f002 fbab 	bl	8011a56 <SDMMC_CmdSendStatus>
 800f300:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d001      	beq.n	800f30c <SD_SendStatus+0x34>
  {
    return errorstate;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	e009      	b.n	800f320 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2100      	movs	r1, #0
 800f312:	4618      	mov	r0, r3
 800f314:	f002 f94d 	bl	80115b2 <SDMMC_GetResponse>
 800f318:	4602      	mov	r2, r0
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f31e:	2300      	movs	r3, #0
}
 800f320:	4618      	mov	r0, r3
 800f322:	3710      	adds	r7, #16
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f330:	2300      	movs	r3, #0
 800f332:	60fb      	str	r3, [r7, #12]
 800f334:	2300      	movs	r3, #0
 800f336:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	2100      	movs	r1, #0
 800f33e:	4618      	mov	r0, r3
 800f340:	f002 f937 	bl	80115b2 <SDMMC_GetResponse>
 800f344:	4603      	mov	r3, r0
 800f346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f34a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f34e:	d102      	bne.n	800f356 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f354:	e02f      	b.n	800f3b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f356:	f107 030c 	add.w	r3, r7, #12
 800f35a:	4619      	mov	r1, r3
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 f879 	bl	800f454 <SD_FindSCR>
 800f362:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d001      	beq.n	800f36e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	e023      	b.n	800f3b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f374:	2b00      	cmp	r3, #0
 800f376:	d01c      	beq.n	800f3b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f380:	041b      	lsls	r3, r3, #16
 800f382:	4619      	mov	r1, r3
 800f384:	4610      	mov	r0, r2
 800f386:	f002 fa7f 	bl	8011888 <SDMMC_CmdAppCommand>
 800f38a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d001      	beq.n	800f396 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	e00f      	b.n	800f3b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	2102      	movs	r1, #2
 800f39c:	4618      	mov	r0, r3
 800f39e:	f002 fab9 	bl	8011914 <SDMMC_CmdBusWidth>
 800f3a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d001      	beq.n	800f3ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	e003      	b.n	800f3b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	e001      	b.n	800f3b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f3b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3718      	adds	r7, #24
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}

0800f3be <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f3be:	b580      	push	{r7, lr}
 800f3c0:	b086      	sub	sp, #24
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	60fb      	str	r3, [r7, #12]
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	2100      	movs	r1, #0
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f002 f8ec 	bl	80115b2 <SDMMC_GetResponse>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f3e4:	d102      	bne.n	800f3ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f3e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f3ea:	e02f      	b.n	800f44c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f3ec:	f107 030c 	add.w	r3, r7, #12
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 f82e 	bl	800f454 <SD_FindSCR>
 800f3f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d001      	beq.n	800f404 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	e023      	b.n	800f44c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d01c      	beq.n	800f448 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f416:	041b      	lsls	r3, r3, #16
 800f418:	4619      	mov	r1, r3
 800f41a:	4610      	mov	r0, r2
 800f41c:	f002 fa34 	bl	8011888 <SDMMC_CmdAppCommand>
 800f420:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d001      	beq.n	800f42c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	e00f      	b.n	800f44c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2100      	movs	r1, #0
 800f432:	4618      	mov	r0, r3
 800f434:	f002 fa6e 	bl	8011914 <SDMMC_CmdBusWidth>
 800f438:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d001      	beq.n	800f444 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	e003      	b.n	800f44c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f444:	2300      	movs	r3, #0
 800f446:	e001      	b.n	800f44c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f448:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3718      	adds	r7, #24
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f454:	b590      	push	{r4, r7, lr}
 800f456:	b08f      	sub	sp, #60	; 0x3c
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f45e:	f7f6 ff31 	bl	80062c4 <HAL_GetTick>
 800f462:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f464:	2300      	movs	r3, #0
 800f466:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800f468:	2300      	movs	r3, #0
 800f46a:	60bb      	str	r3, [r7, #8]
 800f46c:	2300      	movs	r3, #0
 800f46e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2108      	movs	r1, #8
 800f47a:	4618      	mov	r0, r3
 800f47c:	f002 f8d8 	bl	8011630 <SDMMC_CmdBlockLength>
 800f480:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <SD_FindSCR+0x38>
  {
    return errorstate;
 800f488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48a:	e0b2      	b.n	800f5f2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f494:	041b      	lsls	r3, r3, #16
 800f496:	4619      	mov	r1, r3
 800f498:	4610      	mov	r0, r2
 800f49a:	f002 f9f5 	bl	8011888 <SDMMC_CmdAppCommand>
 800f49e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d001      	beq.n	800f4aa <SD_FindSCR+0x56>
  {
    return errorstate;
 800f4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a8:	e0a3      	b.n	800f5f2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f4b0:	2308      	movs	r3, #8
 800f4b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f4b4:	2330      	movs	r3, #48	; 0x30
 800f4b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f4b8:	2302      	movs	r3, #2
 800f4ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f107 0210 	add.w	r2, r7, #16
 800f4cc:	4611      	mov	r1, r2
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f002 f882 	bl	80115d8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f002 fa3d 	bl	8011958 <SDMMC_CmdSendSCR>
 800f4de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800f4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d02a      	beq.n	800f53c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800f4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e8:	e083      	b.n	800f5f2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d00f      	beq.n	800f518 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6819      	ldr	r1, [r3, #0]
 800f4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	f107 0208 	add.w	r2, r7, #8
 800f504:	18d4      	adds	r4, r2, r3
 800f506:	4608      	mov	r0, r1
 800f508:	f001 fff2 	bl	80114f0 <SDMMC_ReadFIFO>
 800f50c:	4603      	mov	r3, r0
 800f50e:	6023      	str	r3, [r4, #0]
      index++;
 800f510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f512:	3301      	adds	r3, #1
 800f514:	637b      	str	r3, [r7, #52]	; 0x34
 800f516:	e006      	b.n	800f526 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f51e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f522:	2b00      	cmp	r3, #0
 800f524:	d012      	beq.n	800f54c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f526:	f7f6 fecd 	bl	80062c4 <HAL_GetTick>
 800f52a:	4602      	mov	r2, r0
 800f52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f534:	d102      	bne.n	800f53c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f536:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f53a:	e05a      	b.n	800f5f2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f542:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800f546:	2b00      	cmp	r3, #0
 800f548:	d0cf      	beq.n	800f4ea <SD_FindSCR+0x96>
 800f54a:	e000      	b.n	800f54e <SD_FindSCR+0xfa>
      break;
 800f54c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f554:	f003 0308 	and.w	r3, r3, #8
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d005      	beq.n	800f568 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	2208      	movs	r2, #8
 800f562:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f564:	2308      	movs	r3, #8
 800f566:	e044      	b.n	800f5f2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f56e:	f003 0302 	and.w	r3, r3, #2
 800f572:	2b00      	cmp	r3, #0
 800f574:	d005      	beq.n	800f582 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	2202      	movs	r2, #2
 800f57c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f57e:	2302      	movs	r3, #2
 800f580:	e037      	b.n	800f5f2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f588:	f003 0320 	and.w	r3, r3, #32
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d005      	beq.n	800f59c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	2220      	movs	r2, #32
 800f596:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f598:	2320      	movs	r3, #32
 800f59a:	e02a      	b.n	800f5f2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f240 523a 	movw	r2, #1338	; 0x53a
 800f5a4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	061a      	lsls	r2, r3, #24
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	021b      	lsls	r3, r3, #8
 800f5ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f5b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	0a1b      	lsrs	r3, r3, #8
 800f5b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f5bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	0e1b      	lsrs	r3, r3, #24
 800f5c2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c6:	601a      	str	r2, [r3, #0]
    scr++;
 800f5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ca:	3304      	adds	r3, #4
 800f5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	061a      	lsls	r2, r3, #24
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	021b      	lsls	r3, r3, #8
 800f5d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f5da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	0a1b      	lsrs	r3, r3, #8
 800f5e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f5e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	0e1b      	lsrs	r3, r3, #24
 800f5ea:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ee:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	373c      	adds	r7, #60	; 0x3c
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd90      	pop	{r4, r7, pc}

0800f5fa <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b082      	sub	sp, #8
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
 800f602:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d101      	bne.n	800f60e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800f60a:	2301      	movs	r3, #1
 800f60c:	e025      	b.n	800f65a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f614:	b2db      	uxtb	r3, r3
 800f616:	2b00      	cmp	r3, #0
 800f618:	d106      	bne.n	800f628 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7f4 fdaa 	bl	800417c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2202      	movs	r2, #2
 800f62c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681a      	ldr	r2, [r3, #0]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	3304      	adds	r3, #4
 800f638:	4619      	mov	r1, r3
 800f63a:	4610      	mov	r0, r2
 800f63c:	f001 fe2a 	bl	8011294 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6818      	ldr	r0, [r3, #0]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	461a      	mov	r2, r3
 800f64a:	6839      	ldr	r1, [r7, #0]
 800f64c:	f001 fe7e 	bl	801134c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2201      	movs	r2, #1
 800f654:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f658:	2300      	movs	r3, #0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}

0800f662 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800f662:	b580      	push	{r7, lr}
 800f664:	b086      	sub	sp, #24
 800f666:	af00      	add	r7, sp, #0
 800f668:	60f8      	str	r0, [r7, #12]
 800f66a:	60b9      	str	r1, [r7, #8]
 800f66c:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f674:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800f676:	7dfb      	ldrb	r3, [r7, #23]
 800f678:	2b02      	cmp	r3, #2
 800f67a:	d101      	bne.n	800f680 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800f67c:	2302      	movs	r3, #2
 800f67e:	e021      	b.n	800f6c4 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800f680:	7dfb      	ldrb	r3, [r7, #23]
 800f682:	2b01      	cmp	r3, #1
 800f684:	d002      	beq.n	800f68c <HAL_SDRAM_SendCommand+0x2a>
 800f686:	7dfb      	ldrb	r3, [r7, #23]
 800f688:	2b05      	cmp	r3, #5
 800f68a:	d118      	bne.n	800f6be <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	2202      	movs	r2, #2
 800f690:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	68b9      	ldr	r1, [r7, #8]
 800f69c:	4618      	mov	r0, r3
 800f69e:	f001 febf 	bl	8011420 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	2b02      	cmp	r3, #2
 800f6a8:	d104      	bne.n	800f6b4 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2205      	movs	r2, #5
 800f6ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800f6b2:	e006      	b.n	800f6c2 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800f6bc:	e001      	b.n	800f6c2 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e000      	b.n	800f6c4 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800f6c2:	2300      	movs	r3, #0
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3718      	adds	r7, #24
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	2b02      	cmp	r3, #2
 800f6e0:	d101      	bne.n	800f6e6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800f6e2:	2302      	movs	r3, #2
 800f6e4:	e016      	b.n	800f714 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d10f      	bne.n	800f712 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2202      	movs	r2, #2
 800f6f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	6839      	ldr	r1, [r7, #0]
 800f700:	4618      	mov	r0, r3
 800f702:	f001 feb1 	bl	8011468 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2201      	movs	r2, #1
 800f70a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800f70e:	2300      	movs	r3, #0
 800f710:	e000      	b.n	800f714 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800f712:	2301      	movs	r3, #1
}
 800f714:	4618      	mov	r0, r3
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b084      	sub	sp, #16
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d101      	bne.n	800f72e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800f72a:	2301      	movs	r3, #1
 800f72c:	e04c      	b.n	800f7c8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f734:	b2db      	uxtb	r3, r3
 800f736:	2b00      	cmp	r3, #0
 800f738:	d106      	bne.n	800f748 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2200      	movs	r2, #0
 800f73e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f7f4 f9f8 	bl	8003b38 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2202      	movs	r2, #2
 800f74c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f022 0203 	bic.w	r2, r2, #3
 800f75e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800f768:	68fa      	ldr	r2, [r7, #12]
 800f76a:	4b19      	ldr	r3, [pc, #100]	; (800f7d0 <HAL_SPDIFRX_Init+0xb4>)
 800f76c:	4013      	ands	r3, r2
 800f76e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800f778:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800f77e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800f784:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800f78a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800f790:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800f796:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800f79c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800f7a2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800f7a8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800f7aa:	68fa      	ldr	r2, [r7, #12]
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800f7c6:	2300      	movs	r3, #0
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3710      	adds	r7, #16
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	fff88407 	.word	0xfff88407

0800f7d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d101      	bne.n	800f7e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e049      	b.n	800f87a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d106      	bne.n	800f800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7f4 fa00 	bl	8003c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2202      	movs	r2, #2
 800f804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	3304      	adds	r3, #4
 800f810:	4619      	mov	r1, r3
 800f812:	4610      	mov	r0, r2
 800f814:	f000 fc2a 	bl	801006c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2201      	movs	r2, #1
 800f81c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2201      	movs	r2, #1
 800f824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2201      	movs	r2, #1
 800f82c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2201      	movs	r2, #1
 800f834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2201      	movs	r2, #1
 800f83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2201      	movs	r2, #1
 800f844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2201      	movs	r2, #1
 800f84c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2201      	movs	r2, #1
 800f854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2201      	movs	r2, #1
 800f85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2201      	movs	r2, #1
 800f864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2201      	movs	r2, #1
 800f86c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2201      	movs	r2, #1
 800f874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f878:	2300      	movs	r3, #0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
	...

0800f884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f884:	b480      	push	{r7}
 800f886:	b085      	sub	sp, #20
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f892:	b2db      	uxtb	r3, r3
 800f894:	2b01      	cmp	r3, #1
 800f896:	d001      	beq.n	800f89c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f898:	2301      	movs	r3, #1
 800f89a:	e054      	b.n	800f946 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2202      	movs	r2, #2
 800f8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	68da      	ldr	r2, [r3, #12]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f042 0201 	orr.w	r2, r2, #1
 800f8b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a26      	ldr	r2, [pc, #152]	; (800f954 <HAL_TIM_Base_Start_IT+0xd0>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d022      	beq.n	800f904 <HAL_TIM_Base_Start_IT+0x80>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8c6:	d01d      	beq.n	800f904 <HAL_TIM_Base_Start_IT+0x80>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a22      	ldr	r2, [pc, #136]	; (800f958 <HAL_TIM_Base_Start_IT+0xd4>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d018      	beq.n	800f904 <HAL_TIM_Base_Start_IT+0x80>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	4a21      	ldr	r2, [pc, #132]	; (800f95c <HAL_TIM_Base_Start_IT+0xd8>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d013      	beq.n	800f904 <HAL_TIM_Base_Start_IT+0x80>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a1f      	ldr	r2, [pc, #124]	; (800f960 <HAL_TIM_Base_Start_IT+0xdc>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d00e      	beq.n	800f904 <HAL_TIM_Base_Start_IT+0x80>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4a1e      	ldr	r2, [pc, #120]	; (800f964 <HAL_TIM_Base_Start_IT+0xe0>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d009      	beq.n	800f904 <HAL_TIM_Base_Start_IT+0x80>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4a1c      	ldr	r2, [pc, #112]	; (800f968 <HAL_TIM_Base_Start_IT+0xe4>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d004      	beq.n	800f904 <HAL_TIM_Base_Start_IT+0x80>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	4a1b      	ldr	r2, [pc, #108]	; (800f96c <HAL_TIM_Base_Start_IT+0xe8>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d115      	bne.n	800f930 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	689a      	ldr	r2, [r3, #8]
 800f90a:	4b19      	ldr	r3, [pc, #100]	; (800f970 <HAL_TIM_Base_Start_IT+0xec>)
 800f90c:	4013      	ands	r3, r2
 800f90e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2b06      	cmp	r3, #6
 800f914:	d015      	beq.n	800f942 <HAL_TIM_Base_Start_IT+0xbe>
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f91c:	d011      	beq.n	800f942 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	681a      	ldr	r2, [r3, #0]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f042 0201 	orr.w	r2, r2, #1
 800f92c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f92e:	e008      	b.n	800f942 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f042 0201 	orr.w	r2, r2, #1
 800f93e:	601a      	str	r2, [r3, #0]
 800f940:	e000      	b.n	800f944 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f942:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f944:	2300      	movs	r3, #0
}
 800f946:	4618      	mov	r0, r3
 800f948:	3714      	adds	r7, #20
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr
 800f952:	bf00      	nop
 800f954:	40010000 	.word	0x40010000
 800f958:	40000400 	.word	0x40000400
 800f95c:	40000800 	.word	0x40000800
 800f960:	40000c00 	.word	0x40000c00
 800f964:	40010400 	.word	0x40010400
 800f968:	40014000 	.word	0x40014000
 800f96c:	40001800 	.word	0x40001800
 800f970:	00010007 	.word	0x00010007

0800f974 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b082      	sub	sp, #8
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d101      	bne.n	800f986 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f982:	2301      	movs	r3, #1
 800f984:	e049      	b.n	800fa1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d106      	bne.n	800f9a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f7f4 f99e 	bl	8003cdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2202      	movs	r2, #2
 800f9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	3304      	adds	r3, #4
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	4610      	mov	r0, r2
 800f9b4:	f000 fb5a 	bl	801006c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2201      	movs	r2, #1
 800f9dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2201      	movs	r2, #1
 800fa04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2201      	movs	r2, #1
 800fa14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fa18:	2300      	movs	r3, #0
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3708      	adds	r7, #8
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b082      	sub	sp, #8
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	691b      	ldr	r3, [r3, #16]
 800fa30:	f003 0302 	and.w	r3, r3, #2
 800fa34:	2b02      	cmp	r3, #2
 800fa36:	d122      	bne.n	800fa7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	68db      	ldr	r3, [r3, #12]
 800fa3e:	f003 0302 	and.w	r3, r3, #2
 800fa42:	2b02      	cmp	r3, #2
 800fa44:	d11b      	bne.n	800fa7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	f06f 0202 	mvn.w	r2, #2
 800fa4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2201      	movs	r2, #1
 800fa54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	699b      	ldr	r3, [r3, #24]
 800fa5c:	f003 0303 	and.w	r3, r3, #3
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d003      	beq.n	800fa6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 fae3 	bl	8010030 <HAL_TIM_IC_CaptureCallback>
 800fa6a:	e005      	b.n	800fa78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f000 fad5 	bl	801001c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 fae6 	bl	8010044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	691b      	ldr	r3, [r3, #16]
 800fa84:	f003 0304 	and.w	r3, r3, #4
 800fa88:	2b04      	cmp	r3, #4
 800fa8a:	d122      	bne.n	800fad2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	68db      	ldr	r3, [r3, #12]
 800fa92:	f003 0304 	and.w	r3, r3, #4
 800fa96:	2b04      	cmp	r3, #4
 800fa98:	d11b      	bne.n	800fad2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f06f 0204 	mvn.w	r2, #4
 800faa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2202      	movs	r2, #2
 800faa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	699b      	ldr	r3, [r3, #24]
 800fab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d003      	beq.n	800fac0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f000 fab9 	bl	8010030 <HAL_TIM_IC_CaptureCallback>
 800fabe:	e005      	b.n	800facc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f000 faab 	bl	801001c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 fabc 	bl	8010044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2200      	movs	r2, #0
 800fad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	691b      	ldr	r3, [r3, #16]
 800fad8:	f003 0308 	and.w	r3, r3, #8
 800fadc:	2b08      	cmp	r3, #8
 800fade:	d122      	bne.n	800fb26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	68db      	ldr	r3, [r3, #12]
 800fae6:	f003 0308 	and.w	r3, r3, #8
 800faea:	2b08      	cmp	r3, #8
 800faec:	d11b      	bne.n	800fb26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f06f 0208 	mvn.w	r2, #8
 800faf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2204      	movs	r2, #4
 800fafc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	69db      	ldr	r3, [r3, #28]
 800fb04:	f003 0303 	and.w	r3, r3, #3
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d003      	beq.n	800fb14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f000 fa8f 	bl	8010030 <HAL_TIM_IC_CaptureCallback>
 800fb12:	e005      	b.n	800fb20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f000 fa81 	bl	801001c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f000 fa92 	bl	8010044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2200      	movs	r2, #0
 800fb24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	691b      	ldr	r3, [r3, #16]
 800fb2c:	f003 0310 	and.w	r3, r3, #16
 800fb30:	2b10      	cmp	r3, #16
 800fb32:	d122      	bne.n	800fb7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	f003 0310 	and.w	r3, r3, #16
 800fb3e:	2b10      	cmp	r3, #16
 800fb40:	d11b      	bne.n	800fb7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f06f 0210 	mvn.w	r2, #16
 800fb4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2208      	movs	r2, #8
 800fb50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	69db      	ldr	r3, [r3, #28]
 800fb58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d003      	beq.n	800fb68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f000 fa65 	bl	8010030 <HAL_TIM_IC_CaptureCallback>
 800fb66:	e005      	b.n	800fb74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f000 fa57 	bl	801001c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 fa68 	bl	8010044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2200      	movs	r2, #0
 800fb78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	691b      	ldr	r3, [r3, #16]
 800fb80:	f003 0301 	and.w	r3, r3, #1
 800fb84:	2b01      	cmp	r3, #1
 800fb86:	d10e      	bne.n	800fba6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	68db      	ldr	r3, [r3, #12]
 800fb8e:	f003 0301 	and.w	r3, r3, #1
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d107      	bne.n	800fba6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f06f 0201 	mvn.w	r2, #1
 800fb9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f7f3 fb21 	bl	80031e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbb0:	2b80      	cmp	r3, #128	; 0x80
 800fbb2:	d10e      	bne.n	800fbd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	68db      	ldr	r3, [r3, #12]
 800fbba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbbe:	2b80      	cmp	r3, #128	; 0x80
 800fbc0:	d107      	bne.n	800fbd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fbca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 fefb 	bl	80109c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	691b      	ldr	r3, [r3, #16]
 800fbd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbe0:	d10e      	bne.n	800fc00 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbec:	2b80      	cmp	r3, #128	; 0x80
 800fbee:	d107      	bne.n	800fc00 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fbf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 feee 	bl	80109dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	691b      	ldr	r3, [r3, #16]
 800fc06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc0a:	2b40      	cmp	r3, #64	; 0x40
 800fc0c:	d10e      	bne.n	800fc2c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc18:	2b40      	cmp	r3, #64	; 0x40
 800fc1a:	d107      	bne.n	800fc2c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fc24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f000 fa16 	bl	8010058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	691b      	ldr	r3, [r3, #16]
 800fc32:	f003 0320 	and.w	r3, r3, #32
 800fc36:	2b20      	cmp	r3, #32
 800fc38:	d10e      	bne.n	800fc58 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	f003 0320 	and.w	r3, r3, #32
 800fc44:	2b20      	cmp	r3, #32
 800fc46:	d107      	bne.n	800fc58 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f06f 0220 	mvn.w	r2, #32
 800fc50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f000 feae 	bl	80109b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fc58:	bf00      	nop
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d101      	bne.n	800fc7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fc7a:	2302      	movs	r3, #2
 800fc7c:	e0ff      	b.n	800fe7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2201      	movs	r2, #1
 800fc82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2b14      	cmp	r3, #20
 800fc8a:	f200 80f0 	bhi.w	800fe6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fc8e:	a201      	add	r2, pc, #4	; (adr r2, 800fc94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc94:	0800fce9 	.word	0x0800fce9
 800fc98:	0800fe6f 	.word	0x0800fe6f
 800fc9c:	0800fe6f 	.word	0x0800fe6f
 800fca0:	0800fe6f 	.word	0x0800fe6f
 800fca4:	0800fd29 	.word	0x0800fd29
 800fca8:	0800fe6f 	.word	0x0800fe6f
 800fcac:	0800fe6f 	.word	0x0800fe6f
 800fcb0:	0800fe6f 	.word	0x0800fe6f
 800fcb4:	0800fd6b 	.word	0x0800fd6b
 800fcb8:	0800fe6f 	.word	0x0800fe6f
 800fcbc:	0800fe6f 	.word	0x0800fe6f
 800fcc0:	0800fe6f 	.word	0x0800fe6f
 800fcc4:	0800fdab 	.word	0x0800fdab
 800fcc8:	0800fe6f 	.word	0x0800fe6f
 800fccc:	0800fe6f 	.word	0x0800fe6f
 800fcd0:	0800fe6f 	.word	0x0800fe6f
 800fcd4:	0800fded 	.word	0x0800fded
 800fcd8:	0800fe6f 	.word	0x0800fe6f
 800fcdc:	0800fe6f 	.word	0x0800fe6f
 800fce0:	0800fe6f 	.word	0x0800fe6f
 800fce4:	0800fe2d 	.word	0x0800fe2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	68b9      	ldr	r1, [r7, #8]
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f000 fa5c 	bl	80101ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	699a      	ldr	r2, [r3, #24]
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f042 0208 	orr.w	r2, r2, #8
 800fd02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	699a      	ldr	r2, [r3, #24]
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f022 0204 	bic.w	r2, r2, #4
 800fd12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	6999      	ldr	r1, [r3, #24]
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	691a      	ldr	r2, [r3, #16]
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	430a      	orrs	r2, r1
 800fd24:	619a      	str	r2, [r3, #24]
      break;
 800fd26:	e0a5      	b.n	800fe74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	68b9      	ldr	r1, [r7, #8]
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f000 faae 	bl	8010290 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	699a      	ldr	r2, [r3, #24]
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fd42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	699a      	ldr	r2, [r3, #24]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	6999      	ldr	r1, [r3, #24]
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	691b      	ldr	r3, [r3, #16]
 800fd5e:	021a      	lsls	r2, r3, #8
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	430a      	orrs	r2, r1
 800fd66:	619a      	str	r2, [r3, #24]
      break;
 800fd68:	e084      	b.n	800fe74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	68b9      	ldr	r1, [r7, #8]
 800fd70:	4618      	mov	r0, r3
 800fd72:	f000 fb05 	bl	8010380 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	69da      	ldr	r2, [r3, #28]
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f042 0208 	orr.w	r2, r2, #8
 800fd84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	69da      	ldr	r2, [r3, #28]
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f022 0204 	bic.w	r2, r2, #4
 800fd94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	69d9      	ldr	r1, [r3, #28]
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	691a      	ldr	r2, [r3, #16]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	430a      	orrs	r2, r1
 800fda6:	61da      	str	r2, [r3, #28]
      break;
 800fda8:	e064      	b.n	800fe74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	68b9      	ldr	r1, [r7, #8]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f000 fb5b 	bl	801046c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	69da      	ldr	r2, [r3, #28]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fdc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	69da      	ldr	r2, [r3, #28]
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	69d9      	ldr	r1, [r3, #28]
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	691b      	ldr	r3, [r3, #16]
 800fde0:	021a      	lsls	r2, r3, #8
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	430a      	orrs	r2, r1
 800fde8:	61da      	str	r2, [r3, #28]
      break;
 800fdea:	e043      	b.n	800fe74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	68b9      	ldr	r1, [r7, #8]
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f000 fb92 	bl	801051c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	f042 0208 	orr.w	r2, r2, #8
 800fe06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f022 0204 	bic.w	r2, r2, #4
 800fe16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	691a      	ldr	r2, [r3, #16]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	430a      	orrs	r2, r1
 800fe28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fe2a:	e023      	b.n	800fe74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	68b9      	ldr	r1, [r7, #8]
 800fe32:	4618      	mov	r0, r3
 800fe34:	f000 fbc4 	bl	80105c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	691b      	ldr	r3, [r3, #16]
 800fe62:	021a      	lsls	r2, r3, #8
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	430a      	orrs	r2, r1
 800fe6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fe6c:	e002      	b.n	800fe74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	75fb      	strb	r3, [r7, #23]
      break;
 800fe72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2200      	movs	r2, #0
 800fe78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fe7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3718      	adds	r7, #24
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop

0800fe88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fe92:	2300      	movs	r3, #0
 800fe94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	d101      	bne.n	800fea4 <HAL_TIM_ConfigClockSource+0x1c>
 800fea0:	2302      	movs	r3, #2
 800fea2:	e0b4      	b.n	801000e <HAL_TIM_ConfigClockSource+0x186>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2201      	movs	r2, #1
 800fea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2202      	movs	r2, #2
 800feb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	689b      	ldr	r3, [r3, #8]
 800feba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800febc:	68ba      	ldr	r2, [r7, #8]
 800febe:	4b56      	ldr	r3, [pc, #344]	; (8010018 <HAL_TIM_ConfigClockSource+0x190>)
 800fec0:	4013      	ands	r3, r2
 800fec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800feca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fedc:	d03e      	beq.n	800ff5c <HAL_TIM_ConfigClockSource+0xd4>
 800fede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fee2:	f200 8087 	bhi.w	800fff4 <HAL_TIM_ConfigClockSource+0x16c>
 800fee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800feea:	f000 8086 	beq.w	800fffa <HAL_TIM_ConfigClockSource+0x172>
 800feee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fef2:	d87f      	bhi.n	800fff4 <HAL_TIM_ConfigClockSource+0x16c>
 800fef4:	2b70      	cmp	r3, #112	; 0x70
 800fef6:	d01a      	beq.n	800ff2e <HAL_TIM_ConfigClockSource+0xa6>
 800fef8:	2b70      	cmp	r3, #112	; 0x70
 800fefa:	d87b      	bhi.n	800fff4 <HAL_TIM_ConfigClockSource+0x16c>
 800fefc:	2b60      	cmp	r3, #96	; 0x60
 800fefe:	d050      	beq.n	800ffa2 <HAL_TIM_ConfigClockSource+0x11a>
 800ff00:	2b60      	cmp	r3, #96	; 0x60
 800ff02:	d877      	bhi.n	800fff4 <HAL_TIM_ConfigClockSource+0x16c>
 800ff04:	2b50      	cmp	r3, #80	; 0x50
 800ff06:	d03c      	beq.n	800ff82 <HAL_TIM_ConfigClockSource+0xfa>
 800ff08:	2b50      	cmp	r3, #80	; 0x50
 800ff0a:	d873      	bhi.n	800fff4 <HAL_TIM_ConfigClockSource+0x16c>
 800ff0c:	2b40      	cmp	r3, #64	; 0x40
 800ff0e:	d058      	beq.n	800ffc2 <HAL_TIM_ConfigClockSource+0x13a>
 800ff10:	2b40      	cmp	r3, #64	; 0x40
 800ff12:	d86f      	bhi.n	800fff4 <HAL_TIM_ConfigClockSource+0x16c>
 800ff14:	2b30      	cmp	r3, #48	; 0x30
 800ff16:	d064      	beq.n	800ffe2 <HAL_TIM_ConfigClockSource+0x15a>
 800ff18:	2b30      	cmp	r3, #48	; 0x30
 800ff1a:	d86b      	bhi.n	800fff4 <HAL_TIM_ConfigClockSource+0x16c>
 800ff1c:	2b20      	cmp	r3, #32
 800ff1e:	d060      	beq.n	800ffe2 <HAL_TIM_ConfigClockSource+0x15a>
 800ff20:	2b20      	cmp	r3, #32
 800ff22:	d867      	bhi.n	800fff4 <HAL_TIM_ConfigClockSource+0x16c>
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d05c      	beq.n	800ffe2 <HAL_TIM_ConfigClockSource+0x15a>
 800ff28:	2b10      	cmp	r3, #16
 800ff2a:	d05a      	beq.n	800ffe2 <HAL_TIM_ConfigClockSource+0x15a>
 800ff2c:	e062      	b.n	800fff4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6818      	ldr	r0, [r3, #0]
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	6899      	ldr	r1, [r3, #8]
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	685a      	ldr	r2, [r3, #4]
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	f000 fc0d 	bl	801075c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	689b      	ldr	r3, [r3, #8]
 800ff48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ff50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	68ba      	ldr	r2, [r7, #8]
 800ff58:	609a      	str	r2, [r3, #8]
      break;
 800ff5a:	e04f      	b.n	800fffc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6818      	ldr	r0, [r3, #0]
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	6899      	ldr	r1, [r3, #8]
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	685a      	ldr	r2, [r3, #4]
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	f000 fbf6 	bl	801075c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	689a      	ldr	r2, [r3, #8]
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ff7e:	609a      	str	r2, [r3, #8]
      break;
 800ff80:	e03c      	b.n	800fffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6818      	ldr	r0, [r3, #0]
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	6859      	ldr	r1, [r3, #4]
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	461a      	mov	r2, r3
 800ff90:	f000 fb6a 	bl	8010668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	2150      	movs	r1, #80	; 0x50
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f000 fbc3 	bl	8010726 <TIM_ITRx_SetConfig>
      break;
 800ffa0:	e02c      	b.n	800fffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6818      	ldr	r0, [r3, #0]
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	6859      	ldr	r1, [r3, #4]
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	461a      	mov	r2, r3
 800ffb0:	f000 fb89 	bl	80106c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2160      	movs	r1, #96	; 0x60
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f000 fbb3 	bl	8010726 <TIM_ITRx_SetConfig>
      break;
 800ffc0:	e01c      	b.n	800fffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6818      	ldr	r0, [r3, #0]
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	6859      	ldr	r1, [r3, #4]
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	f000 fb4a 	bl	8010668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2140      	movs	r1, #64	; 0x40
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f000 fba3 	bl	8010726 <TIM_ITRx_SetConfig>
      break;
 800ffe0:	e00c      	b.n	800fffc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681a      	ldr	r2, [r3, #0]
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	4619      	mov	r1, r3
 800ffec:	4610      	mov	r0, r2
 800ffee:	f000 fb9a 	bl	8010726 <TIM_ITRx_SetConfig>
      break;
 800fff2:	e003      	b.n	800fffc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800fff4:	2301      	movs	r3, #1
 800fff6:	73fb      	strb	r3, [r7, #15]
      break;
 800fff8:	e000      	b.n	800fffc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800fffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2201      	movs	r2, #1
 8010000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2200      	movs	r2, #0
 8010008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801000c:	7bfb      	ldrb	r3, [r7, #15]
}
 801000e:	4618      	mov	r0, r3
 8010010:	3710      	adds	r7, #16
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}
 8010016:	bf00      	nop
 8010018:	fffeff88 	.word	0xfffeff88

0801001c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801001c:	b480      	push	{r7}
 801001e:	b083      	sub	sp, #12
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010024:	bf00      	nop
 8010026:	370c      	adds	r7, #12
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	4770      	bx	lr

08010030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010030:	b480      	push	{r7}
 8010032:	b083      	sub	sp, #12
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010038:	bf00      	nop
 801003a:	370c      	adds	r7, #12
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr

08010044 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801004c:	bf00      	nop
 801004e:	370c      	adds	r7, #12
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr

08010058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010058:	b480      	push	{r7}
 801005a:	b083      	sub	sp, #12
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010060:	bf00      	nop
 8010062:	370c      	adds	r7, #12
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801006c:	b480      	push	{r7}
 801006e:	b085      	sub	sp, #20
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	4a40      	ldr	r2, [pc, #256]	; (8010180 <TIM_Base_SetConfig+0x114>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d013      	beq.n	80100ac <TIM_Base_SetConfig+0x40>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801008a:	d00f      	beq.n	80100ac <TIM_Base_SetConfig+0x40>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	4a3d      	ldr	r2, [pc, #244]	; (8010184 <TIM_Base_SetConfig+0x118>)
 8010090:	4293      	cmp	r3, r2
 8010092:	d00b      	beq.n	80100ac <TIM_Base_SetConfig+0x40>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	4a3c      	ldr	r2, [pc, #240]	; (8010188 <TIM_Base_SetConfig+0x11c>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d007      	beq.n	80100ac <TIM_Base_SetConfig+0x40>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	4a3b      	ldr	r2, [pc, #236]	; (801018c <TIM_Base_SetConfig+0x120>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d003      	beq.n	80100ac <TIM_Base_SetConfig+0x40>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	4a3a      	ldr	r2, [pc, #232]	; (8010190 <TIM_Base_SetConfig+0x124>)
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d108      	bne.n	80100be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	68fa      	ldr	r2, [r7, #12]
 80100ba:	4313      	orrs	r3, r2
 80100bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	4a2f      	ldr	r2, [pc, #188]	; (8010180 <TIM_Base_SetConfig+0x114>)
 80100c2:	4293      	cmp	r3, r2
 80100c4:	d02b      	beq.n	801011e <TIM_Base_SetConfig+0xb2>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100cc:	d027      	beq.n	801011e <TIM_Base_SetConfig+0xb2>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	4a2c      	ldr	r2, [pc, #176]	; (8010184 <TIM_Base_SetConfig+0x118>)
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d023      	beq.n	801011e <TIM_Base_SetConfig+0xb2>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	4a2b      	ldr	r2, [pc, #172]	; (8010188 <TIM_Base_SetConfig+0x11c>)
 80100da:	4293      	cmp	r3, r2
 80100dc:	d01f      	beq.n	801011e <TIM_Base_SetConfig+0xb2>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	4a2a      	ldr	r2, [pc, #168]	; (801018c <TIM_Base_SetConfig+0x120>)
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d01b      	beq.n	801011e <TIM_Base_SetConfig+0xb2>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4a29      	ldr	r2, [pc, #164]	; (8010190 <TIM_Base_SetConfig+0x124>)
 80100ea:	4293      	cmp	r3, r2
 80100ec:	d017      	beq.n	801011e <TIM_Base_SetConfig+0xb2>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	4a28      	ldr	r2, [pc, #160]	; (8010194 <TIM_Base_SetConfig+0x128>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d013      	beq.n	801011e <TIM_Base_SetConfig+0xb2>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	4a27      	ldr	r2, [pc, #156]	; (8010198 <TIM_Base_SetConfig+0x12c>)
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d00f      	beq.n	801011e <TIM_Base_SetConfig+0xb2>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	4a26      	ldr	r2, [pc, #152]	; (801019c <TIM_Base_SetConfig+0x130>)
 8010102:	4293      	cmp	r3, r2
 8010104:	d00b      	beq.n	801011e <TIM_Base_SetConfig+0xb2>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	4a25      	ldr	r2, [pc, #148]	; (80101a0 <TIM_Base_SetConfig+0x134>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d007      	beq.n	801011e <TIM_Base_SetConfig+0xb2>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4a24      	ldr	r2, [pc, #144]	; (80101a4 <TIM_Base_SetConfig+0x138>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d003      	beq.n	801011e <TIM_Base_SetConfig+0xb2>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	4a23      	ldr	r2, [pc, #140]	; (80101a8 <TIM_Base_SetConfig+0x13c>)
 801011a:	4293      	cmp	r3, r2
 801011c:	d108      	bne.n	8010130 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	68fa      	ldr	r2, [r7, #12]
 801012c:	4313      	orrs	r3, r2
 801012e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	695b      	ldr	r3, [r3, #20]
 801013a:	4313      	orrs	r3, r2
 801013c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	68fa      	ldr	r2, [r7, #12]
 8010142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	689a      	ldr	r2, [r3, #8]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	681a      	ldr	r2, [r3, #0]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4a0a      	ldr	r2, [pc, #40]	; (8010180 <TIM_Base_SetConfig+0x114>)
 8010158:	4293      	cmp	r3, r2
 801015a:	d003      	beq.n	8010164 <TIM_Base_SetConfig+0xf8>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4a0c      	ldr	r2, [pc, #48]	; (8010190 <TIM_Base_SetConfig+0x124>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d103      	bne.n	801016c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	691a      	ldr	r2, [r3, #16]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2201      	movs	r2, #1
 8010170:	615a      	str	r2, [r3, #20]
}
 8010172:	bf00      	nop
 8010174:	3714      	adds	r7, #20
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr
 801017e:	bf00      	nop
 8010180:	40010000 	.word	0x40010000
 8010184:	40000400 	.word	0x40000400
 8010188:	40000800 	.word	0x40000800
 801018c:	40000c00 	.word	0x40000c00
 8010190:	40010400 	.word	0x40010400
 8010194:	40014000 	.word	0x40014000
 8010198:	40014400 	.word	0x40014400
 801019c:	40014800 	.word	0x40014800
 80101a0:	40001800 	.word	0x40001800
 80101a4:	40001c00 	.word	0x40001c00
 80101a8:	40002000 	.word	0x40002000

080101ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b087      	sub	sp, #28
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6a1b      	ldr	r3, [r3, #32]
 80101ba:	f023 0201 	bic.w	r2, r3, #1
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6a1b      	ldr	r3, [r3, #32]
 80101c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	699b      	ldr	r3, [r3, #24]
 80101d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80101d4:	68fa      	ldr	r2, [r7, #12]
 80101d6:	4b2b      	ldr	r3, [pc, #172]	; (8010284 <TIM_OC1_SetConfig+0xd8>)
 80101d8:	4013      	ands	r3, r2
 80101da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f023 0303 	bic.w	r3, r3, #3
 80101e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	68fa      	ldr	r2, [r7, #12]
 80101ea:	4313      	orrs	r3, r2
 80101ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	f023 0302 	bic.w	r3, r3, #2
 80101f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	689b      	ldr	r3, [r3, #8]
 80101fa:	697a      	ldr	r2, [r7, #20]
 80101fc:	4313      	orrs	r3, r2
 80101fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	4a21      	ldr	r2, [pc, #132]	; (8010288 <TIM_OC1_SetConfig+0xdc>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d003      	beq.n	8010210 <TIM_OC1_SetConfig+0x64>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	4a20      	ldr	r2, [pc, #128]	; (801028c <TIM_OC1_SetConfig+0xe0>)
 801020c:	4293      	cmp	r3, r2
 801020e:	d10c      	bne.n	801022a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	f023 0308 	bic.w	r3, r3, #8
 8010216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	697a      	ldr	r2, [r7, #20]
 801021e:	4313      	orrs	r3, r2
 8010220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	f023 0304 	bic.w	r3, r3, #4
 8010228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4a16      	ldr	r2, [pc, #88]	; (8010288 <TIM_OC1_SetConfig+0xdc>)
 801022e:	4293      	cmp	r3, r2
 8010230:	d003      	beq.n	801023a <TIM_OC1_SetConfig+0x8e>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4a15      	ldr	r2, [pc, #84]	; (801028c <TIM_OC1_SetConfig+0xe0>)
 8010236:	4293      	cmp	r3, r2
 8010238:	d111      	bne.n	801025e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	695b      	ldr	r3, [r3, #20]
 801024e:	693a      	ldr	r2, [r7, #16]
 8010250:	4313      	orrs	r3, r2
 8010252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	699b      	ldr	r3, [r3, #24]
 8010258:	693a      	ldr	r2, [r7, #16]
 801025a:	4313      	orrs	r3, r2
 801025c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	693a      	ldr	r2, [r7, #16]
 8010262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	68fa      	ldr	r2, [r7, #12]
 8010268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	685a      	ldr	r2, [r3, #4]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	697a      	ldr	r2, [r7, #20]
 8010276:	621a      	str	r2, [r3, #32]
}
 8010278:	bf00      	nop
 801027a:	371c      	adds	r7, #28
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr
 8010284:	fffeff8f 	.word	0xfffeff8f
 8010288:	40010000 	.word	0x40010000
 801028c:	40010400 	.word	0x40010400

08010290 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010290:	b480      	push	{r7}
 8010292:	b087      	sub	sp, #28
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6a1b      	ldr	r3, [r3, #32]
 801029e:	f023 0210 	bic.w	r2, r3, #16
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6a1b      	ldr	r3, [r3, #32]
 80102aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	699b      	ldr	r3, [r3, #24]
 80102b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	4b2e      	ldr	r3, [pc, #184]	; (8010374 <TIM_OC2_SetConfig+0xe4>)
 80102bc:	4013      	ands	r3, r2
 80102be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80102c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	021b      	lsls	r3, r3, #8
 80102ce:	68fa      	ldr	r2, [r7, #12]
 80102d0:	4313      	orrs	r3, r2
 80102d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	f023 0320 	bic.w	r3, r3, #32
 80102da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	689b      	ldr	r3, [r3, #8]
 80102e0:	011b      	lsls	r3, r3, #4
 80102e2:	697a      	ldr	r2, [r7, #20]
 80102e4:	4313      	orrs	r3, r2
 80102e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	4a23      	ldr	r2, [pc, #140]	; (8010378 <TIM_OC2_SetConfig+0xe8>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d003      	beq.n	80102f8 <TIM_OC2_SetConfig+0x68>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	4a22      	ldr	r2, [pc, #136]	; (801037c <TIM_OC2_SetConfig+0xec>)
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d10d      	bne.n	8010314 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	68db      	ldr	r3, [r3, #12]
 8010304:	011b      	lsls	r3, r3, #4
 8010306:	697a      	ldr	r2, [r7, #20]
 8010308:	4313      	orrs	r3, r2
 801030a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010312:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	4a18      	ldr	r2, [pc, #96]	; (8010378 <TIM_OC2_SetConfig+0xe8>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d003      	beq.n	8010324 <TIM_OC2_SetConfig+0x94>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	4a17      	ldr	r2, [pc, #92]	; (801037c <TIM_OC2_SetConfig+0xec>)
 8010320:	4293      	cmp	r3, r2
 8010322:	d113      	bne.n	801034c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801032a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010332:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	695b      	ldr	r3, [r3, #20]
 8010338:	009b      	lsls	r3, r3, #2
 801033a:	693a      	ldr	r2, [r7, #16]
 801033c:	4313      	orrs	r3, r2
 801033e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	699b      	ldr	r3, [r3, #24]
 8010344:	009b      	lsls	r3, r3, #2
 8010346:	693a      	ldr	r2, [r7, #16]
 8010348:	4313      	orrs	r3, r2
 801034a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	693a      	ldr	r2, [r7, #16]
 8010350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	68fa      	ldr	r2, [r7, #12]
 8010356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	685a      	ldr	r2, [r3, #4]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	697a      	ldr	r2, [r7, #20]
 8010364:	621a      	str	r2, [r3, #32]
}
 8010366:	bf00      	nop
 8010368:	371c      	adds	r7, #28
 801036a:	46bd      	mov	sp, r7
 801036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010370:	4770      	bx	lr
 8010372:	bf00      	nop
 8010374:	feff8fff 	.word	0xfeff8fff
 8010378:	40010000 	.word	0x40010000
 801037c:	40010400 	.word	0x40010400

08010380 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010380:	b480      	push	{r7}
 8010382:	b087      	sub	sp, #28
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6a1b      	ldr	r3, [r3, #32]
 801038e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6a1b      	ldr	r3, [r3, #32]
 801039a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	69db      	ldr	r3, [r3, #28]
 80103a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80103a8:	68fa      	ldr	r2, [r7, #12]
 80103aa:	4b2d      	ldr	r3, [pc, #180]	; (8010460 <TIM_OC3_SetConfig+0xe0>)
 80103ac:	4013      	ands	r3, r2
 80103ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	f023 0303 	bic.w	r3, r3, #3
 80103b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	68fa      	ldr	r2, [r7, #12]
 80103be:	4313      	orrs	r3, r2
 80103c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80103c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	689b      	ldr	r3, [r3, #8]
 80103ce:	021b      	lsls	r3, r3, #8
 80103d0:	697a      	ldr	r2, [r7, #20]
 80103d2:	4313      	orrs	r3, r2
 80103d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	4a22      	ldr	r2, [pc, #136]	; (8010464 <TIM_OC3_SetConfig+0xe4>)
 80103da:	4293      	cmp	r3, r2
 80103dc:	d003      	beq.n	80103e6 <TIM_OC3_SetConfig+0x66>
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	4a21      	ldr	r2, [pc, #132]	; (8010468 <TIM_OC3_SetConfig+0xe8>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d10d      	bne.n	8010402 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80103ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	021b      	lsls	r3, r3, #8
 80103f4:	697a      	ldr	r2, [r7, #20]
 80103f6:	4313      	orrs	r3, r2
 80103f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	4a17      	ldr	r2, [pc, #92]	; (8010464 <TIM_OC3_SetConfig+0xe4>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d003      	beq.n	8010412 <TIM_OC3_SetConfig+0x92>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	4a16      	ldr	r2, [pc, #88]	; (8010468 <TIM_OC3_SetConfig+0xe8>)
 801040e:	4293      	cmp	r3, r2
 8010410:	d113      	bne.n	801043a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	695b      	ldr	r3, [r3, #20]
 8010426:	011b      	lsls	r3, r3, #4
 8010428:	693a      	ldr	r2, [r7, #16]
 801042a:	4313      	orrs	r3, r2
 801042c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	699b      	ldr	r3, [r3, #24]
 8010432:	011b      	lsls	r3, r3, #4
 8010434:	693a      	ldr	r2, [r7, #16]
 8010436:	4313      	orrs	r3, r2
 8010438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	693a      	ldr	r2, [r7, #16]
 801043e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	685a      	ldr	r2, [r3, #4]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	697a      	ldr	r2, [r7, #20]
 8010452:	621a      	str	r2, [r3, #32]
}
 8010454:	bf00      	nop
 8010456:	371c      	adds	r7, #28
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr
 8010460:	fffeff8f 	.word	0xfffeff8f
 8010464:	40010000 	.word	0x40010000
 8010468:	40010400 	.word	0x40010400

0801046c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801046c:	b480      	push	{r7}
 801046e:	b087      	sub	sp, #28
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6a1b      	ldr	r3, [r3, #32]
 801047a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6a1b      	ldr	r3, [r3, #32]
 8010486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	685b      	ldr	r3, [r3, #4]
 801048c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	69db      	ldr	r3, [r3, #28]
 8010492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010494:	68fa      	ldr	r2, [r7, #12]
 8010496:	4b1e      	ldr	r3, [pc, #120]	; (8010510 <TIM_OC4_SetConfig+0xa4>)
 8010498:	4013      	ands	r3, r2
 801049a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80104a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	021b      	lsls	r3, r3, #8
 80104aa:	68fa      	ldr	r2, [r7, #12]
 80104ac:	4313      	orrs	r3, r2
 80104ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80104b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	689b      	ldr	r3, [r3, #8]
 80104bc:	031b      	lsls	r3, r3, #12
 80104be:	693a      	ldr	r2, [r7, #16]
 80104c0:	4313      	orrs	r3, r2
 80104c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	4a13      	ldr	r2, [pc, #76]	; (8010514 <TIM_OC4_SetConfig+0xa8>)
 80104c8:	4293      	cmp	r3, r2
 80104ca:	d003      	beq.n	80104d4 <TIM_OC4_SetConfig+0x68>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	4a12      	ldr	r2, [pc, #72]	; (8010518 <TIM_OC4_SetConfig+0xac>)
 80104d0:	4293      	cmp	r3, r2
 80104d2:	d109      	bne.n	80104e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80104da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	695b      	ldr	r3, [r3, #20]
 80104e0:	019b      	lsls	r3, r3, #6
 80104e2:	697a      	ldr	r2, [r7, #20]
 80104e4:	4313      	orrs	r3, r2
 80104e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	697a      	ldr	r2, [r7, #20]
 80104ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	68fa      	ldr	r2, [r7, #12]
 80104f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	685a      	ldr	r2, [r3, #4]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	693a      	ldr	r2, [r7, #16]
 8010500:	621a      	str	r2, [r3, #32]
}
 8010502:	bf00      	nop
 8010504:	371c      	adds	r7, #28
 8010506:	46bd      	mov	sp, r7
 8010508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050c:	4770      	bx	lr
 801050e:	bf00      	nop
 8010510:	feff8fff 	.word	0xfeff8fff
 8010514:	40010000 	.word	0x40010000
 8010518:	40010400 	.word	0x40010400

0801051c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801051c:	b480      	push	{r7}
 801051e:	b087      	sub	sp, #28
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6a1b      	ldr	r3, [r3, #32]
 801052a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6a1b      	ldr	r3, [r3, #32]
 8010536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	685b      	ldr	r3, [r3, #4]
 801053c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010544:	68fa      	ldr	r2, [r7, #12]
 8010546:	4b1b      	ldr	r3, [pc, #108]	; (80105b4 <TIM_OC5_SetConfig+0x98>)
 8010548:	4013      	ands	r3, r2
 801054a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	68fa      	ldr	r2, [r7, #12]
 8010552:	4313      	orrs	r3, r2
 8010554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801055c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	689b      	ldr	r3, [r3, #8]
 8010562:	041b      	lsls	r3, r3, #16
 8010564:	693a      	ldr	r2, [r7, #16]
 8010566:	4313      	orrs	r3, r2
 8010568:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4a12      	ldr	r2, [pc, #72]	; (80105b8 <TIM_OC5_SetConfig+0x9c>)
 801056e:	4293      	cmp	r3, r2
 8010570:	d003      	beq.n	801057a <TIM_OC5_SetConfig+0x5e>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	4a11      	ldr	r2, [pc, #68]	; (80105bc <TIM_OC5_SetConfig+0xa0>)
 8010576:	4293      	cmp	r3, r2
 8010578:	d109      	bne.n	801058e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010580:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	695b      	ldr	r3, [r3, #20]
 8010586:	021b      	lsls	r3, r3, #8
 8010588:	697a      	ldr	r2, [r7, #20]
 801058a:	4313      	orrs	r3, r2
 801058c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	697a      	ldr	r2, [r7, #20]
 8010592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	68fa      	ldr	r2, [r7, #12]
 8010598:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	685a      	ldr	r2, [r3, #4]
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	693a      	ldr	r2, [r7, #16]
 80105a6:	621a      	str	r2, [r3, #32]
}
 80105a8:	bf00      	nop
 80105aa:	371c      	adds	r7, #28
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr
 80105b4:	fffeff8f 	.word	0xfffeff8f
 80105b8:	40010000 	.word	0x40010000
 80105bc:	40010400 	.word	0x40010400

080105c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80105c0:	b480      	push	{r7}
 80105c2:	b087      	sub	sp, #28
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6a1b      	ldr	r3, [r3, #32]
 80105ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6a1b      	ldr	r3, [r3, #32]
 80105da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80105e8:	68fa      	ldr	r2, [r7, #12]
 80105ea:	4b1c      	ldr	r3, [pc, #112]	; (801065c <TIM_OC6_SetConfig+0x9c>)
 80105ec:	4013      	ands	r3, r2
 80105ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	021b      	lsls	r3, r3, #8
 80105f6:	68fa      	ldr	r2, [r7, #12]
 80105f8:	4313      	orrs	r3, r2
 80105fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	051b      	lsls	r3, r3, #20
 801060a:	693a      	ldr	r2, [r7, #16]
 801060c:	4313      	orrs	r3, r2
 801060e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	4a13      	ldr	r2, [pc, #76]	; (8010660 <TIM_OC6_SetConfig+0xa0>)
 8010614:	4293      	cmp	r3, r2
 8010616:	d003      	beq.n	8010620 <TIM_OC6_SetConfig+0x60>
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	4a12      	ldr	r2, [pc, #72]	; (8010664 <TIM_OC6_SetConfig+0xa4>)
 801061c:	4293      	cmp	r3, r2
 801061e:	d109      	bne.n	8010634 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010626:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	695b      	ldr	r3, [r3, #20]
 801062c:	029b      	lsls	r3, r3, #10
 801062e:	697a      	ldr	r2, [r7, #20]
 8010630:	4313      	orrs	r3, r2
 8010632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	697a      	ldr	r2, [r7, #20]
 8010638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	68fa      	ldr	r2, [r7, #12]
 801063e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	685a      	ldr	r2, [r3, #4]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	693a      	ldr	r2, [r7, #16]
 801064c:	621a      	str	r2, [r3, #32]
}
 801064e:	bf00      	nop
 8010650:	371c      	adds	r7, #28
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop
 801065c:	feff8fff 	.word	0xfeff8fff
 8010660:	40010000 	.word	0x40010000
 8010664:	40010400 	.word	0x40010400

08010668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010668:	b480      	push	{r7}
 801066a:	b087      	sub	sp, #28
 801066c:	af00      	add	r7, sp, #0
 801066e:	60f8      	str	r0, [r7, #12]
 8010670:	60b9      	str	r1, [r7, #8]
 8010672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	6a1b      	ldr	r3, [r3, #32]
 8010678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	6a1b      	ldr	r3, [r3, #32]
 801067e:	f023 0201 	bic.w	r2, r3, #1
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	699b      	ldr	r3, [r3, #24]
 801068a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	011b      	lsls	r3, r3, #4
 8010698:	693a      	ldr	r2, [r7, #16]
 801069a:	4313      	orrs	r3, r2
 801069c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	f023 030a 	bic.w	r3, r3, #10
 80106a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80106a6:	697a      	ldr	r2, [r7, #20]
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	4313      	orrs	r3, r2
 80106ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	693a      	ldr	r2, [r7, #16]
 80106b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	697a      	ldr	r2, [r7, #20]
 80106b8:	621a      	str	r2, [r3, #32]
}
 80106ba:	bf00      	nop
 80106bc:	371c      	adds	r7, #28
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr

080106c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80106c6:	b480      	push	{r7}
 80106c8:	b087      	sub	sp, #28
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	60f8      	str	r0, [r7, #12]
 80106ce:	60b9      	str	r1, [r7, #8]
 80106d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	6a1b      	ldr	r3, [r3, #32]
 80106d6:	f023 0210 	bic.w	r2, r3, #16
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	699b      	ldr	r3, [r3, #24]
 80106e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	6a1b      	ldr	r3, [r3, #32]
 80106e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80106f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	031b      	lsls	r3, r3, #12
 80106f6:	697a      	ldr	r2, [r7, #20]
 80106f8:	4313      	orrs	r3, r2
 80106fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010702:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	011b      	lsls	r3, r3, #4
 8010708:	693a      	ldr	r2, [r7, #16]
 801070a:	4313      	orrs	r3, r2
 801070c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	697a      	ldr	r2, [r7, #20]
 8010712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	693a      	ldr	r2, [r7, #16]
 8010718:	621a      	str	r2, [r3, #32]
}
 801071a:	bf00      	nop
 801071c:	371c      	adds	r7, #28
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr

08010726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010726:	b480      	push	{r7}
 8010728:	b085      	sub	sp, #20
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	689b      	ldr	r3, [r3, #8]
 8010734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801073c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801073e:	683a      	ldr	r2, [r7, #0]
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	4313      	orrs	r3, r2
 8010744:	f043 0307 	orr.w	r3, r3, #7
 8010748:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	68fa      	ldr	r2, [r7, #12]
 801074e:	609a      	str	r2, [r3, #8]
}
 8010750:	bf00      	nop
 8010752:	3714      	adds	r7, #20
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801075c:	b480      	push	{r7}
 801075e:	b087      	sub	sp, #28
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	607a      	str	r2, [r7, #4]
 8010768:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	689b      	ldr	r3, [r3, #8]
 801076e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010776:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	021a      	lsls	r2, r3, #8
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	431a      	orrs	r2, r3
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	4313      	orrs	r3, r2
 8010784:	697a      	ldr	r2, [r7, #20]
 8010786:	4313      	orrs	r3, r2
 8010788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	697a      	ldr	r2, [r7, #20]
 801078e:	609a      	str	r2, [r3, #8]
}
 8010790:	bf00      	nop
 8010792:	371c      	adds	r7, #28
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr

0801079c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801079c:	b480      	push	{r7}
 801079e:	b085      	sub	sp, #20
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	d101      	bne.n	80107b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80107b0:	2302      	movs	r3, #2
 80107b2:	e06d      	b.n	8010890 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2201      	movs	r2, #1
 80107b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2202      	movs	r2, #2
 80107c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	685b      	ldr	r3, [r3, #4]
 80107ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	689b      	ldr	r3, [r3, #8]
 80107d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	4a30      	ldr	r2, [pc, #192]	; (801089c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80107da:	4293      	cmp	r3, r2
 80107dc:	d004      	beq.n	80107e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	4a2f      	ldr	r2, [pc, #188]	; (80108a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d108      	bne.n	80107fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80107ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	68fa      	ldr	r2, [r7, #12]
 80107f6:	4313      	orrs	r3, r2
 80107f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010800:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	68fa      	ldr	r2, [r7, #12]
 8010808:	4313      	orrs	r3, r2
 801080a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	68fa      	ldr	r2, [r7, #12]
 8010812:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	4a20      	ldr	r2, [pc, #128]	; (801089c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801081a:	4293      	cmp	r3, r2
 801081c:	d022      	beq.n	8010864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010826:	d01d      	beq.n	8010864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4a1d      	ldr	r2, [pc, #116]	; (80108a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801082e:	4293      	cmp	r3, r2
 8010830:	d018      	beq.n	8010864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	4a1c      	ldr	r2, [pc, #112]	; (80108a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010838:	4293      	cmp	r3, r2
 801083a:	d013      	beq.n	8010864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	4a1a      	ldr	r2, [pc, #104]	; (80108ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010842:	4293      	cmp	r3, r2
 8010844:	d00e      	beq.n	8010864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4a15      	ldr	r2, [pc, #84]	; (80108a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801084c:	4293      	cmp	r3, r2
 801084e:	d009      	beq.n	8010864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4a16      	ldr	r2, [pc, #88]	; (80108b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010856:	4293      	cmp	r3, r2
 8010858:	d004      	beq.n	8010864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	4a15      	ldr	r2, [pc, #84]	; (80108b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010860:	4293      	cmp	r3, r2
 8010862:	d10c      	bne.n	801087e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801086a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	689b      	ldr	r3, [r3, #8]
 8010870:	68ba      	ldr	r2, [r7, #8]
 8010872:	4313      	orrs	r3, r2
 8010874:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	68ba      	ldr	r2, [r7, #8]
 801087c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2201      	movs	r2, #1
 8010882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2200      	movs	r2, #0
 801088a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801088e:	2300      	movs	r3, #0
}
 8010890:	4618      	mov	r0, r3
 8010892:	3714      	adds	r7, #20
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr
 801089c:	40010000 	.word	0x40010000
 80108a0:	40010400 	.word	0x40010400
 80108a4:	40000400 	.word	0x40000400
 80108a8:	40000800 	.word	0x40000800
 80108ac:	40000c00 	.word	0x40000c00
 80108b0:	40014000 	.word	0x40014000
 80108b4:	40001800 	.word	0x40001800

080108b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b085      	sub	sp, #20
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
 80108c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80108c2:	2300      	movs	r3, #0
 80108c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d101      	bne.n	80108d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80108d0:	2302      	movs	r3, #2
 80108d2:	e065      	b.n	80109a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2201      	movs	r2, #1
 80108d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	68db      	ldr	r3, [r3, #12]
 80108e6:	4313      	orrs	r3, r2
 80108e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	689b      	ldr	r3, [r3, #8]
 80108f4:	4313      	orrs	r3, r2
 80108f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	685b      	ldr	r3, [r3, #4]
 8010902:	4313      	orrs	r3, r2
 8010904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4313      	orrs	r3, r2
 8010912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	691b      	ldr	r3, [r3, #16]
 801091e:	4313      	orrs	r3, r2
 8010920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	695b      	ldr	r3, [r3, #20]
 801092c:	4313      	orrs	r3, r2
 801092e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801093a:	4313      	orrs	r3, r2
 801093c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	699b      	ldr	r3, [r3, #24]
 8010948:	041b      	lsls	r3, r3, #16
 801094a:	4313      	orrs	r3, r2
 801094c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4a16      	ldr	r2, [pc, #88]	; (80109ac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010954:	4293      	cmp	r3, r2
 8010956:	d004      	beq.n	8010962 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	4a14      	ldr	r2, [pc, #80]	; (80109b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801095e:	4293      	cmp	r3, r2
 8010960:	d115      	bne.n	801098e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801096c:	051b      	lsls	r3, r3, #20
 801096e:	4313      	orrs	r3, r2
 8010970:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	69db      	ldr	r3, [r3, #28]
 801097c:	4313      	orrs	r3, r2
 801097e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	6a1b      	ldr	r3, [r3, #32]
 801098a:	4313      	orrs	r3, r2
 801098c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	68fa      	ldr	r2, [r7, #12]
 8010994:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2200      	movs	r2, #0
 801099a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801099e:	2300      	movs	r3, #0
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3714      	adds	r7, #20
 80109a4:	46bd      	mov	sp, r7
 80109a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109aa:	4770      	bx	lr
 80109ac:	40010000 	.word	0x40010000
 80109b0:	40010400 	.word	0x40010400

080109b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b083      	sub	sp, #12
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80109bc:	bf00      	nop
 80109be:	370c      	adds	r7, #12
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr

080109c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b083      	sub	sp, #12
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80109d0:	bf00      	nop
 80109d2:	370c      	adds	r7, #12
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr

080109dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80109dc:	b480      	push	{r7}
 80109de:	b083      	sub	sp, #12
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80109e4:	bf00      	nop
 80109e6:	370c      	adds	r7, #12
 80109e8:	46bd      	mov	sp, r7
 80109ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ee:	4770      	bx	lr

080109f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d101      	bne.n	8010a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80109fe:	2301      	movs	r3, #1
 8010a00:	e040      	b.n	8010a84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d106      	bne.n	8010a18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7f3 fa50 	bl	8003eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2224      	movs	r2, #36	; 0x24
 8010a1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	681a      	ldr	r2, [r3, #0]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f022 0201 	bic.w	r2, r2, #1
 8010a2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f000 f82c 	bl	8010a8c <UART_SetConfig>
 8010a34:	4603      	mov	r3, r0
 8010a36:	2b01      	cmp	r3, #1
 8010a38:	d101      	bne.n	8010a3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	e022      	b.n	8010a84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d002      	beq.n	8010a4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 fa84 	bl	8010f54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	685a      	ldr	r2, [r3, #4]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	689a      	ldr	r2, [r3, #8]
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	f042 0201 	orr.w	r2, r2, #1
 8010a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 fb0b 	bl	8011098 <UART_CheckIdleState>
 8010a82:	4603      	mov	r3, r0
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3708      	adds	r7, #8
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b088      	sub	sp, #32
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010a94:	2300      	movs	r3, #0
 8010a96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	689a      	ldr	r2, [r3, #8]
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	691b      	ldr	r3, [r3, #16]
 8010aa0:	431a      	orrs	r2, r3
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	695b      	ldr	r3, [r3, #20]
 8010aa6:	431a      	orrs	r2, r3
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	69db      	ldr	r3, [r3, #28]
 8010aac:	4313      	orrs	r3, r2
 8010aae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	681a      	ldr	r2, [r3, #0]
 8010ab6:	4ba6      	ldr	r3, [pc, #664]	; (8010d50 <UART_SetConfig+0x2c4>)
 8010ab8:	4013      	ands	r3, r2
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	6812      	ldr	r2, [r2, #0]
 8010abe:	6979      	ldr	r1, [r7, #20]
 8010ac0:	430b      	orrs	r3, r1
 8010ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	68da      	ldr	r2, [r3, #12]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	430a      	orrs	r2, r1
 8010ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	699b      	ldr	r3, [r3, #24]
 8010ade:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6a1b      	ldr	r3, [r3, #32]
 8010ae4:	697a      	ldr	r2, [r7, #20]
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	689b      	ldr	r3, [r3, #8]
 8010af0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	697a      	ldr	r2, [r7, #20]
 8010afa:	430a      	orrs	r2, r1
 8010afc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	4a94      	ldr	r2, [pc, #592]	; (8010d54 <UART_SetConfig+0x2c8>)
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d120      	bne.n	8010b4a <UART_SetConfig+0xbe>
 8010b08:	4b93      	ldr	r3, [pc, #588]	; (8010d58 <UART_SetConfig+0x2cc>)
 8010b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b0e:	f003 0303 	and.w	r3, r3, #3
 8010b12:	2b03      	cmp	r3, #3
 8010b14:	d816      	bhi.n	8010b44 <UART_SetConfig+0xb8>
 8010b16:	a201      	add	r2, pc, #4	; (adr r2, 8010b1c <UART_SetConfig+0x90>)
 8010b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b1c:	08010b2d 	.word	0x08010b2d
 8010b20:	08010b39 	.word	0x08010b39
 8010b24:	08010b33 	.word	0x08010b33
 8010b28:	08010b3f 	.word	0x08010b3f
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	77fb      	strb	r3, [r7, #31]
 8010b30:	e150      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010b32:	2302      	movs	r3, #2
 8010b34:	77fb      	strb	r3, [r7, #31]
 8010b36:	e14d      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010b38:	2304      	movs	r3, #4
 8010b3a:	77fb      	strb	r3, [r7, #31]
 8010b3c:	e14a      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010b3e:	2308      	movs	r3, #8
 8010b40:	77fb      	strb	r3, [r7, #31]
 8010b42:	e147      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010b44:	2310      	movs	r3, #16
 8010b46:	77fb      	strb	r3, [r7, #31]
 8010b48:	e144      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	4a83      	ldr	r2, [pc, #524]	; (8010d5c <UART_SetConfig+0x2d0>)
 8010b50:	4293      	cmp	r3, r2
 8010b52:	d132      	bne.n	8010bba <UART_SetConfig+0x12e>
 8010b54:	4b80      	ldr	r3, [pc, #512]	; (8010d58 <UART_SetConfig+0x2cc>)
 8010b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b5a:	f003 030c 	and.w	r3, r3, #12
 8010b5e:	2b0c      	cmp	r3, #12
 8010b60:	d828      	bhi.n	8010bb4 <UART_SetConfig+0x128>
 8010b62:	a201      	add	r2, pc, #4	; (adr r2, 8010b68 <UART_SetConfig+0xdc>)
 8010b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b68:	08010b9d 	.word	0x08010b9d
 8010b6c:	08010bb5 	.word	0x08010bb5
 8010b70:	08010bb5 	.word	0x08010bb5
 8010b74:	08010bb5 	.word	0x08010bb5
 8010b78:	08010ba9 	.word	0x08010ba9
 8010b7c:	08010bb5 	.word	0x08010bb5
 8010b80:	08010bb5 	.word	0x08010bb5
 8010b84:	08010bb5 	.word	0x08010bb5
 8010b88:	08010ba3 	.word	0x08010ba3
 8010b8c:	08010bb5 	.word	0x08010bb5
 8010b90:	08010bb5 	.word	0x08010bb5
 8010b94:	08010bb5 	.word	0x08010bb5
 8010b98:	08010baf 	.word	0x08010baf
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	77fb      	strb	r3, [r7, #31]
 8010ba0:	e118      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010ba2:	2302      	movs	r3, #2
 8010ba4:	77fb      	strb	r3, [r7, #31]
 8010ba6:	e115      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010ba8:	2304      	movs	r3, #4
 8010baa:	77fb      	strb	r3, [r7, #31]
 8010bac:	e112      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010bae:	2308      	movs	r3, #8
 8010bb0:	77fb      	strb	r3, [r7, #31]
 8010bb2:	e10f      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010bb4:	2310      	movs	r3, #16
 8010bb6:	77fb      	strb	r3, [r7, #31]
 8010bb8:	e10c      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	4a68      	ldr	r2, [pc, #416]	; (8010d60 <UART_SetConfig+0x2d4>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d120      	bne.n	8010c06 <UART_SetConfig+0x17a>
 8010bc4:	4b64      	ldr	r3, [pc, #400]	; (8010d58 <UART_SetConfig+0x2cc>)
 8010bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010bce:	2b30      	cmp	r3, #48	; 0x30
 8010bd0:	d013      	beq.n	8010bfa <UART_SetConfig+0x16e>
 8010bd2:	2b30      	cmp	r3, #48	; 0x30
 8010bd4:	d814      	bhi.n	8010c00 <UART_SetConfig+0x174>
 8010bd6:	2b20      	cmp	r3, #32
 8010bd8:	d009      	beq.n	8010bee <UART_SetConfig+0x162>
 8010bda:	2b20      	cmp	r3, #32
 8010bdc:	d810      	bhi.n	8010c00 <UART_SetConfig+0x174>
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d002      	beq.n	8010be8 <UART_SetConfig+0x15c>
 8010be2:	2b10      	cmp	r3, #16
 8010be4:	d006      	beq.n	8010bf4 <UART_SetConfig+0x168>
 8010be6:	e00b      	b.n	8010c00 <UART_SetConfig+0x174>
 8010be8:	2300      	movs	r3, #0
 8010bea:	77fb      	strb	r3, [r7, #31]
 8010bec:	e0f2      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010bee:	2302      	movs	r3, #2
 8010bf0:	77fb      	strb	r3, [r7, #31]
 8010bf2:	e0ef      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010bf4:	2304      	movs	r3, #4
 8010bf6:	77fb      	strb	r3, [r7, #31]
 8010bf8:	e0ec      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010bfa:	2308      	movs	r3, #8
 8010bfc:	77fb      	strb	r3, [r7, #31]
 8010bfe:	e0e9      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010c00:	2310      	movs	r3, #16
 8010c02:	77fb      	strb	r3, [r7, #31]
 8010c04:	e0e6      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	4a56      	ldr	r2, [pc, #344]	; (8010d64 <UART_SetConfig+0x2d8>)
 8010c0c:	4293      	cmp	r3, r2
 8010c0e:	d120      	bne.n	8010c52 <UART_SetConfig+0x1c6>
 8010c10:	4b51      	ldr	r3, [pc, #324]	; (8010d58 <UART_SetConfig+0x2cc>)
 8010c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010c1a:	2bc0      	cmp	r3, #192	; 0xc0
 8010c1c:	d013      	beq.n	8010c46 <UART_SetConfig+0x1ba>
 8010c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8010c20:	d814      	bhi.n	8010c4c <UART_SetConfig+0x1c0>
 8010c22:	2b80      	cmp	r3, #128	; 0x80
 8010c24:	d009      	beq.n	8010c3a <UART_SetConfig+0x1ae>
 8010c26:	2b80      	cmp	r3, #128	; 0x80
 8010c28:	d810      	bhi.n	8010c4c <UART_SetConfig+0x1c0>
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d002      	beq.n	8010c34 <UART_SetConfig+0x1a8>
 8010c2e:	2b40      	cmp	r3, #64	; 0x40
 8010c30:	d006      	beq.n	8010c40 <UART_SetConfig+0x1b4>
 8010c32:	e00b      	b.n	8010c4c <UART_SetConfig+0x1c0>
 8010c34:	2300      	movs	r3, #0
 8010c36:	77fb      	strb	r3, [r7, #31]
 8010c38:	e0cc      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010c3a:	2302      	movs	r3, #2
 8010c3c:	77fb      	strb	r3, [r7, #31]
 8010c3e:	e0c9      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010c40:	2304      	movs	r3, #4
 8010c42:	77fb      	strb	r3, [r7, #31]
 8010c44:	e0c6      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010c46:	2308      	movs	r3, #8
 8010c48:	77fb      	strb	r3, [r7, #31]
 8010c4a:	e0c3      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010c4c:	2310      	movs	r3, #16
 8010c4e:	77fb      	strb	r3, [r7, #31]
 8010c50:	e0c0      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	4a44      	ldr	r2, [pc, #272]	; (8010d68 <UART_SetConfig+0x2dc>)
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d125      	bne.n	8010ca8 <UART_SetConfig+0x21c>
 8010c5c:	4b3e      	ldr	r3, [pc, #248]	; (8010d58 <UART_SetConfig+0x2cc>)
 8010c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010c6a:	d017      	beq.n	8010c9c <UART_SetConfig+0x210>
 8010c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010c70:	d817      	bhi.n	8010ca2 <UART_SetConfig+0x216>
 8010c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c76:	d00b      	beq.n	8010c90 <UART_SetConfig+0x204>
 8010c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c7c:	d811      	bhi.n	8010ca2 <UART_SetConfig+0x216>
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d003      	beq.n	8010c8a <UART_SetConfig+0x1fe>
 8010c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c86:	d006      	beq.n	8010c96 <UART_SetConfig+0x20a>
 8010c88:	e00b      	b.n	8010ca2 <UART_SetConfig+0x216>
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	77fb      	strb	r3, [r7, #31]
 8010c8e:	e0a1      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010c90:	2302      	movs	r3, #2
 8010c92:	77fb      	strb	r3, [r7, #31]
 8010c94:	e09e      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010c96:	2304      	movs	r3, #4
 8010c98:	77fb      	strb	r3, [r7, #31]
 8010c9a:	e09b      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010c9c:	2308      	movs	r3, #8
 8010c9e:	77fb      	strb	r3, [r7, #31]
 8010ca0:	e098      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010ca2:	2310      	movs	r3, #16
 8010ca4:	77fb      	strb	r3, [r7, #31]
 8010ca6:	e095      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	4a2f      	ldr	r2, [pc, #188]	; (8010d6c <UART_SetConfig+0x2e0>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d125      	bne.n	8010cfe <UART_SetConfig+0x272>
 8010cb2:	4b29      	ldr	r3, [pc, #164]	; (8010d58 <UART_SetConfig+0x2cc>)
 8010cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010cbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010cc0:	d017      	beq.n	8010cf2 <UART_SetConfig+0x266>
 8010cc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010cc6:	d817      	bhi.n	8010cf8 <UART_SetConfig+0x26c>
 8010cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ccc:	d00b      	beq.n	8010ce6 <UART_SetConfig+0x25a>
 8010cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010cd2:	d811      	bhi.n	8010cf8 <UART_SetConfig+0x26c>
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d003      	beq.n	8010ce0 <UART_SetConfig+0x254>
 8010cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010cdc:	d006      	beq.n	8010cec <UART_SetConfig+0x260>
 8010cde:	e00b      	b.n	8010cf8 <UART_SetConfig+0x26c>
 8010ce0:	2301      	movs	r3, #1
 8010ce2:	77fb      	strb	r3, [r7, #31]
 8010ce4:	e076      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010ce6:	2302      	movs	r3, #2
 8010ce8:	77fb      	strb	r3, [r7, #31]
 8010cea:	e073      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010cec:	2304      	movs	r3, #4
 8010cee:	77fb      	strb	r3, [r7, #31]
 8010cf0:	e070      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010cf2:	2308      	movs	r3, #8
 8010cf4:	77fb      	strb	r3, [r7, #31]
 8010cf6:	e06d      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010cf8:	2310      	movs	r3, #16
 8010cfa:	77fb      	strb	r3, [r7, #31]
 8010cfc:	e06a      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4a1b      	ldr	r2, [pc, #108]	; (8010d70 <UART_SetConfig+0x2e4>)
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d138      	bne.n	8010d7a <UART_SetConfig+0x2ee>
 8010d08:	4b13      	ldr	r3, [pc, #76]	; (8010d58 <UART_SetConfig+0x2cc>)
 8010d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010d12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010d16:	d017      	beq.n	8010d48 <UART_SetConfig+0x2bc>
 8010d18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010d1c:	d82a      	bhi.n	8010d74 <UART_SetConfig+0x2e8>
 8010d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d22:	d00b      	beq.n	8010d3c <UART_SetConfig+0x2b0>
 8010d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d28:	d824      	bhi.n	8010d74 <UART_SetConfig+0x2e8>
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d003      	beq.n	8010d36 <UART_SetConfig+0x2aa>
 8010d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d32:	d006      	beq.n	8010d42 <UART_SetConfig+0x2b6>
 8010d34:	e01e      	b.n	8010d74 <UART_SetConfig+0x2e8>
 8010d36:	2300      	movs	r3, #0
 8010d38:	77fb      	strb	r3, [r7, #31]
 8010d3a:	e04b      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010d3c:	2302      	movs	r3, #2
 8010d3e:	77fb      	strb	r3, [r7, #31]
 8010d40:	e048      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010d42:	2304      	movs	r3, #4
 8010d44:	77fb      	strb	r3, [r7, #31]
 8010d46:	e045      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010d48:	2308      	movs	r3, #8
 8010d4a:	77fb      	strb	r3, [r7, #31]
 8010d4c:	e042      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010d4e:	bf00      	nop
 8010d50:	efff69f3 	.word	0xefff69f3
 8010d54:	40011000 	.word	0x40011000
 8010d58:	40023800 	.word	0x40023800
 8010d5c:	40004400 	.word	0x40004400
 8010d60:	40004800 	.word	0x40004800
 8010d64:	40004c00 	.word	0x40004c00
 8010d68:	40005000 	.word	0x40005000
 8010d6c:	40011400 	.word	0x40011400
 8010d70:	40007800 	.word	0x40007800
 8010d74:	2310      	movs	r3, #16
 8010d76:	77fb      	strb	r3, [r7, #31]
 8010d78:	e02c      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	4a72      	ldr	r2, [pc, #456]	; (8010f48 <UART_SetConfig+0x4bc>)
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d125      	bne.n	8010dd0 <UART_SetConfig+0x344>
 8010d84:	4b71      	ldr	r3, [pc, #452]	; (8010f4c <UART_SetConfig+0x4c0>)
 8010d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010d8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010d92:	d017      	beq.n	8010dc4 <UART_SetConfig+0x338>
 8010d94:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010d98:	d817      	bhi.n	8010dca <UART_SetConfig+0x33e>
 8010d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d9e:	d00b      	beq.n	8010db8 <UART_SetConfig+0x32c>
 8010da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010da4:	d811      	bhi.n	8010dca <UART_SetConfig+0x33e>
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d003      	beq.n	8010db2 <UART_SetConfig+0x326>
 8010daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010dae:	d006      	beq.n	8010dbe <UART_SetConfig+0x332>
 8010db0:	e00b      	b.n	8010dca <UART_SetConfig+0x33e>
 8010db2:	2300      	movs	r3, #0
 8010db4:	77fb      	strb	r3, [r7, #31]
 8010db6:	e00d      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010db8:	2302      	movs	r3, #2
 8010dba:	77fb      	strb	r3, [r7, #31]
 8010dbc:	e00a      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010dbe:	2304      	movs	r3, #4
 8010dc0:	77fb      	strb	r3, [r7, #31]
 8010dc2:	e007      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010dc4:	2308      	movs	r3, #8
 8010dc6:	77fb      	strb	r3, [r7, #31]
 8010dc8:	e004      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010dca:	2310      	movs	r3, #16
 8010dcc:	77fb      	strb	r3, [r7, #31]
 8010dce:	e001      	b.n	8010dd4 <UART_SetConfig+0x348>
 8010dd0:	2310      	movs	r3, #16
 8010dd2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	69db      	ldr	r3, [r3, #28]
 8010dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ddc:	d15b      	bne.n	8010e96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8010dde:	7ffb      	ldrb	r3, [r7, #31]
 8010de0:	2b08      	cmp	r3, #8
 8010de2:	d828      	bhi.n	8010e36 <UART_SetConfig+0x3aa>
 8010de4:	a201      	add	r2, pc, #4	; (adr r2, 8010dec <UART_SetConfig+0x360>)
 8010de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dea:	bf00      	nop
 8010dec:	08010e11 	.word	0x08010e11
 8010df0:	08010e19 	.word	0x08010e19
 8010df4:	08010e21 	.word	0x08010e21
 8010df8:	08010e37 	.word	0x08010e37
 8010dfc:	08010e27 	.word	0x08010e27
 8010e00:	08010e37 	.word	0x08010e37
 8010e04:	08010e37 	.word	0x08010e37
 8010e08:	08010e37 	.word	0x08010e37
 8010e0c:	08010e2f 	.word	0x08010e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010e10:	f7fb fe14 	bl	800ca3c <HAL_RCC_GetPCLK1Freq>
 8010e14:	61b8      	str	r0, [r7, #24]
        break;
 8010e16:	e013      	b.n	8010e40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e18:	f7fb fe24 	bl	800ca64 <HAL_RCC_GetPCLK2Freq>
 8010e1c:	61b8      	str	r0, [r7, #24]
        break;
 8010e1e:	e00f      	b.n	8010e40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010e20:	4b4b      	ldr	r3, [pc, #300]	; (8010f50 <UART_SetConfig+0x4c4>)
 8010e22:	61bb      	str	r3, [r7, #24]
        break;
 8010e24:	e00c      	b.n	8010e40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010e26:	f7fb fd37 	bl	800c898 <HAL_RCC_GetSysClockFreq>
 8010e2a:	61b8      	str	r0, [r7, #24]
        break;
 8010e2c:	e008      	b.n	8010e40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e32:	61bb      	str	r3, [r7, #24]
        break;
 8010e34:	e004      	b.n	8010e40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8010e36:	2300      	movs	r3, #0
 8010e38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	77bb      	strb	r3, [r7, #30]
        break;
 8010e3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010e40:	69bb      	ldr	r3, [r7, #24]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d074      	beq.n	8010f30 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010e46:	69bb      	ldr	r3, [r7, #24]
 8010e48:	005a      	lsls	r2, r3, #1
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	085b      	lsrs	r3, r3, #1
 8010e50:	441a      	add	r2, r3
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	2b0f      	cmp	r3, #15
 8010e60:	d916      	bls.n	8010e90 <UART_SetConfig+0x404>
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e68:	d212      	bcs.n	8010e90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	f023 030f 	bic.w	r3, r3, #15
 8010e72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	085b      	lsrs	r3, r3, #1
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	f003 0307 	and.w	r3, r3, #7
 8010e7e:	b29a      	uxth	r2, r3
 8010e80:	89fb      	ldrh	r3, [r7, #14]
 8010e82:	4313      	orrs	r3, r2
 8010e84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	89fa      	ldrh	r2, [r7, #14]
 8010e8c:	60da      	str	r2, [r3, #12]
 8010e8e:	e04f      	b.n	8010f30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010e90:	2301      	movs	r3, #1
 8010e92:	77bb      	strb	r3, [r7, #30]
 8010e94:	e04c      	b.n	8010f30 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010e96:	7ffb      	ldrb	r3, [r7, #31]
 8010e98:	2b08      	cmp	r3, #8
 8010e9a:	d828      	bhi.n	8010eee <UART_SetConfig+0x462>
 8010e9c:	a201      	add	r2, pc, #4	; (adr r2, 8010ea4 <UART_SetConfig+0x418>)
 8010e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea2:	bf00      	nop
 8010ea4:	08010ec9 	.word	0x08010ec9
 8010ea8:	08010ed1 	.word	0x08010ed1
 8010eac:	08010ed9 	.word	0x08010ed9
 8010eb0:	08010eef 	.word	0x08010eef
 8010eb4:	08010edf 	.word	0x08010edf
 8010eb8:	08010eef 	.word	0x08010eef
 8010ebc:	08010eef 	.word	0x08010eef
 8010ec0:	08010eef 	.word	0x08010eef
 8010ec4:	08010ee7 	.word	0x08010ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ec8:	f7fb fdb8 	bl	800ca3c <HAL_RCC_GetPCLK1Freq>
 8010ecc:	61b8      	str	r0, [r7, #24]
        break;
 8010ece:	e013      	b.n	8010ef8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010ed0:	f7fb fdc8 	bl	800ca64 <HAL_RCC_GetPCLK2Freq>
 8010ed4:	61b8      	str	r0, [r7, #24]
        break;
 8010ed6:	e00f      	b.n	8010ef8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010ed8:	4b1d      	ldr	r3, [pc, #116]	; (8010f50 <UART_SetConfig+0x4c4>)
 8010eda:	61bb      	str	r3, [r7, #24]
        break;
 8010edc:	e00c      	b.n	8010ef8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010ede:	f7fb fcdb 	bl	800c898 <HAL_RCC_GetSysClockFreq>
 8010ee2:	61b8      	str	r0, [r7, #24]
        break;
 8010ee4:	e008      	b.n	8010ef8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010eea:	61bb      	str	r3, [r7, #24]
        break;
 8010eec:	e004      	b.n	8010ef8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	77bb      	strb	r3, [r7, #30]
        break;
 8010ef6:	bf00      	nop
    }

    if (pclk != 0U)
 8010ef8:	69bb      	ldr	r3, [r7, #24]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d018      	beq.n	8010f30 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	085a      	lsrs	r2, r3, #1
 8010f04:	69bb      	ldr	r3, [r7, #24]
 8010f06:	441a      	add	r2, r3
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	2b0f      	cmp	r3, #15
 8010f16:	d909      	bls.n	8010f2c <UART_SetConfig+0x4a0>
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f1e:	d205      	bcs.n	8010f2c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	b29a      	uxth	r2, r3
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	60da      	str	r2, [r3, #12]
 8010f2a:	e001      	b.n	8010f30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2200      	movs	r2, #0
 8010f34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8010f3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3720      	adds	r7, #32
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	40007c00 	.word	0x40007c00
 8010f4c:	40023800 	.word	0x40023800
 8010f50:	00f42400 	.word	0x00f42400

08010f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b083      	sub	sp, #12
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f60:	f003 0301 	and.w	r3, r3, #1
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00a      	beq.n	8010f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	430a      	orrs	r2, r1
 8010f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f82:	f003 0302 	and.w	r3, r3, #2
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d00a      	beq.n	8010fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	685b      	ldr	r3, [r3, #4]
 8010f90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	430a      	orrs	r2, r1
 8010f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa4:	f003 0304 	and.w	r3, r3, #4
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d00a      	beq.n	8010fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	430a      	orrs	r2, r1
 8010fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fc6:	f003 0308 	and.w	r3, r3, #8
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d00a      	beq.n	8010fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	430a      	orrs	r2, r1
 8010fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fe8:	f003 0310 	and.w	r3, r3, #16
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d00a      	beq.n	8011006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	689b      	ldr	r3, [r3, #8]
 8010ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	430a      	orrs	r2, r1
 8011004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801100a:	f003 0320 	and.w	r3, r3, #32
 801100e:	2b00      	cmp	r3, #0
 8011010:	d00a      	beq.n	8011028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	689b      	ldr	r3, [r3, #8]
 8011018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	430a      	orrs	r2, r1
 8011026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801102c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011030:	2b00      	cmp	r3, #0
 8011032:	d01a      	beq.n	801106a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	430a      	orrs	r2, r1
 8011048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801104e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011052:	d10a      	bne.n	801106a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	430a      	orrs	r2, r1
 8011068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011072:	2b00      	cmp	r3, #0
 8011074:	d00a      	beq.n	801108c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	430a      	orrs	r2, r1
 801108a:	605a      	str	r2, [r3, #4]
  }
}
 801108c:	bf00      	nop
 801108e:	370c      	adds	r7, #12
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr

08011098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b086      	sub	sp, #24
 801109c:	af02      	add	r7, sp, #8
 801109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2200      	movs	r2, #0
 80110a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80110a8:	f7f5 f90c 	bl	80062c4 <HAL_GetTick>
 80110ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	f003 0308 	and.w	r3, r3, #8
 80110b8:	2b08      	cmp	r3, #8
 80110ba:	d10e      	bne.n	80110da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80110bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80110c0:	9300      	str	r3, [sp, #0]
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	2200      	movs	r2, #0
 80110c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f000 f81b 	bl	8011106 <UART_WaitOnFlagUntilTimeout>
 80110d0:	4603      	mov	r3, r0
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d001      	beq.n	80110da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80110d6:	2303      	movs	r3, #3
 80110d8:	e011      	b.n	80110fe <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2220      	movs	r2, #32
 80110de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2220      	movs	r2, #32
 80110e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2200      	movs	r2, #0
 80110ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2200      	movs	r2, #0
 80110f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2200      	movs	r2, #0
 80110f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80110fc:	2300      	movs	r3, #0
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3710      	adds	r7, #16
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}

08011106 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011106:	b580      	push	{r7, lr}
 8011108:	b09c      	sub	sp, #112	; 0x70
 801110a:	af00      	add	r7, sp, #0
 801110c:	60f8      	str	r0, [r7, #12]
 801110e:	60b9      	str	r1, [r7, #8]
 8011110:	603b      	str	r3, [r7, #0]
 8011112:	4613      	mov	r3, r2
 8011114:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011116:	e0a7      	b.n	8011268 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801111a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801111e:	f000 80a3 	beq.w	8011268 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011122:	f7f5 f8cf 	bl	80062c4 <HAL_GetTick>
 8011126:	4602      	mov	r2, r0
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	1ad3      	subs	r3, r2, r3
 801112c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801112e:	429a      	cmp	r2, r3
 8011130:	d302      	bcc.n	8011138 <UART_WaitOnFlagUntilTimeout+0x32>
 8011132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011134:	2b00      	cmp	r3, #0
 8011136:	d13f      	bne.n	80111b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801113e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011140:	e853 3f00 	ldrex	r3, [r3]
 8011144:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011148:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801114c:	667b      	str	r3, [r7, #100]	; 0x64
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	461a      	mov	r2, r3
 8011154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011156:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011158:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801115a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801115c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801115e:	e841 2300 	strex	r3, r2, [r1]
 8011162:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011166:	2b00      	cmp	r3, #0
 8011168:	d1e6      	bne.n	8011138 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	3308      	adds	r3, #8
 8011170:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011174:	e853 3f00 	ldrex	r3, [r3]
 8011178:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801117a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801117c:	f023 0301 	bic.w	r3, r3, #1
 8011180:	663b      	str	r3, [r7, #96]	; 0x60
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	3308      	adds	r3, #8
 8011188:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801118a:	64ba      	str	r2, [r7, #72]	; 0x48
 801118c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801118e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011192:	e841 2300 	strex	r3, r2, [r1]
 8011196:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801119a:	2b00      	cmp	r3, #0
 801119c:	d1e5      	bne.n	801116a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2220      	movs	r2, #32
 80111a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2220      	movs	r2, #32
 80111a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2200      	movs	r2, #0
 80111b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80111b4:	2303      	movs	r3, #3
 80111b6:	e068      	b.n	801128a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	f003 0304 	and.w	r3, r3, #4
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d050      	beq.n	8011268 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	69db      	ldr	r3, [r3, #28]
 80111cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80111d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80111d4:	d148      	bne.n	8011268 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80111de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e8:	e853 3f00 	ldrex	r3, [r3]
 80111ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80111ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80111f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	461a      	mov	r2, r3
 80111fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80111fe:	637b      	str	r3, [r7, #52]	; 0x34
 8011200:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011202:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011206:	e841 2300 	strex	r3, r2, [r1]
 801120a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120e:	2b00      	cmp	r3, #0
 8011210:	d1e6      	bne.n	80111e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	3308      	adds	r3, #8
 8011218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	e853 3f00 	ldrex	r3, [r3]
 8011220:	613b      	str	r3, [r7, #16]
   return(result);
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	f023 0301 	bic.w	r3, r3, #1
 8011228:	66bb      	str	r3, [r7, #104]	; 0x68
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	3308      	adds	r3, #8
 8011230:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011232:	623a      	str	r2, [r7, #32]
 8011234:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011236:	69f9      	ldr	r1, [r7, #28]
 8011238:	6a3a      	ldr	r2, [r7, #32]
 801123a:	e841 2300 	strex	r3, r2, [r1]
 801123e:	61bb      	str	r3, [r7, #24]
   return(result);
 8011240:	69bb      	ldr	r3, [r7, #24]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d1e5      	bne.n	8011212 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	2220      	movs	r2, #32
 801124a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2220      	movs	r2, #32
 8011250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2220      	movs	r2, #32
 8011258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	2200      	movs	r2, #0
 8011260:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8011264:	2303      	movs	r3, #3
 8011266:	e010      	b.n	801128a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	69da      	ldr	r2, [r3, #28]
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	4013      	ands	r3, r2
 8011272:	68ba      	ldr	r2, [r7, #8]
 8011274:	429a      	cmp	r2, r3
 8011276:	bf0c      	ite	eq
 8011278:	2301      	moveq	r3, #1
 801127a:	2300      	movne	r3, #0
 801127c:	b2db      	uxtb	r3, r3
 801127e:	461a      	mov	r2, r3
 8011280:	79fb      	ldrb	r3, [r7, #7]
 8011282:	429a      	cmp	r2, r3
 8011284:	f43f af48 	beq.w	8011118 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011288:	2300      	movs	r3, #0
}
 801128a:	4618      	mov	r0, r3
 801128c:	3770      	adds	r7, #112	; 0x70
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}
	...

08011294 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8011294:	b480      	push	{r7}
 8011296:	b083      	sub	sp, #12
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d121      	bne.n	80112ea <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	4b27      	ldr	r3, [pc, #156]	; (8011348 <FMC_SDRAM_Init+0xb4>)
 80112ac:	4013      	ands	r3, r2
 80112ae:	683a      	ldr	r2, [r7, #0]
 80112b0:	6851      	ldr	r1, [r2, #4]
 80112b2:	683a      	ldr	r2, [r7, #0]
 80112b4:	6892      	ldr	r2, [r2, #8]
 80112b6:	4311      	orrs	r1, r2
 80112b8:	683a      	ldr	r2, [r7, #0]
 80112ba:	68d2      	ldr	r2, [r2, #12]
 80112bc:	4311      	orrs	r1, r2
 80112be:	683a      	ldr	r2, [r7, #0]
 80112c0:	6912      	ldr	r2, [r2, #16]
 80112c2:	4311      	orrs	r1, r2
 80112c4:	683a      	ldr	r2, [r7, #0]
 80112c6:	6952      	ldr	r2, [r2, #20]
 80112c8:	4311      	orrs	r1, r2
 80112ca:	683a      	ldr	r2, [r7, #0]
 80112cc:	6992      	ldr	r2, [r2, #24]
 80112ce:	4311      	orrs	r1, r2
 80112d0:	683a      	ldr	r2, [r7, #0]
 80112d2:	69d2      	ldr	r2, [r2, #28]
 80112d4:	4311      	orrs	r1, r2
 80112d6:	683a      	ldr	r2, [r7, #0]
 80112d8:	6a12      	ldr	r2, [r2, #32]
 80112da:	4311      	orrs	r1, r2
 80112dc:	683a      	ldr	r2, [r7, #0]
 80112de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80112e0:	430a      	orrs	r2, r1
 80112e2:	431a      	orrs	r2, r3
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	601a      	str	r2, [r3, #0]
 80112e8:	e026      	b.n	8011338 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	69d9      	ldr	r1, [r3, #28]
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	6a1b      	ldr	r3, [r3, #32]
 80112fa:	4319      	orrs	r1, r3
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011300:	430b      	orrs	r3, r1
 8011302:	431a      	orrs	r2, r3
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	685a      	ldr	r2, [r3, #4]
 801130c:	4b0e      	ldr	r3, [pc, #56]	; (8011348 <FMC_SDRAM_Init+0xb4>)
 801130e:	4013      	ands	r3, r2
 8011310:	683a      	ldr	r2, [r7, #0]
 8011312:	6851      	ldr	r1, [r2, #4]
 8011314:	683a      	ldr	r2, [r7, #0]
 8011316:	6892      	ldr	r2, [r2, #8]
 8011318:	4311      	orrs	r1, r2
 801131a:	683a      	ldr	r2, [r7, #0]
 801131c:	68d2      	ldr	r2, [r2, #12]
 801131e:	4311      	orrs	r1, r2
 8011320:	683a      	ldr	r2, [r7, #0]
 8011322:	6912      	ldr	r2, [r2, #16]
 8011324:	4311      	orrs	r1, r2
 8011326:	683a      	ldr	r2, [r7, #0]
 8011328:	6952      	ldr	r2, [r2, #20]
 801132a:	4311      	orrs	r1, r2
 801132c:	683a      	ldr	r2, [r7, #0]
 801132e:	6992      	ldr	r2, [r2, #24]
 8011330:	430a      	orrs	r2, r1
 8011332:	431a      	orrs	r2, r3
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8011338:	2300      	movs	r3, #0
}
 801133a:	4618      	mov	r0, r3
 801133c:	370c      	adds	r7, #12
 801133e:	46bd      	mov	sp, r7
 8011340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011344:	4770      	bx	lr
 8011346:	bf00      	nop
 8011348:	ffff8000 	.word	0xffff8000

0801134c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801134c:	b480      	push	{r7}
 801134e:	b085      	sub	sp, #20
 8011350:	af00      	add	r7, sp, #0
 8011352:	60f8      	str	r0, [r7, #12]
 8011354:	60b9      	str	r1, [r7, #8]
 8011356:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d128      	bne.n	80113b0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	689b      	ldr	r3, [r3, #8]
 8011362:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	1e59      	subs	r1, r3, #1
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	3b01      	subs	r3, #1
 8011372:	011b      	lsls	r3, r3, #4
 8011374:	4319      	orrs	r1, r3
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	689b      	ldr	r3, [r3, #8]
 801137a:	3b01      	subs	r3, #1
 801137c:	021b      	lsls	r3, r3, #8
 801137e:	4319      	orrs	r1, r3
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	68db      	ldr	r3, [r3, #12]
 8011384:	3b01      	subs	r3, #1
 8011386:	031b      	lsls	r3, r3, #12
 8011388:	4319      	orrs	r1, r3
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	691b      	ldr	r3, [r3, #16]
 801138e:	3b01      	subs	r3, #1
 8011390:	041b      	lsls	r3, r3, #16
 8011392:	4319      	orrs	r1, r3
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	695b      	ldr	r3, [r3, #20]
 8011398:	3b01      	subs	r3, #1
 801139a:	051b      	lsls	r3, r3, #20
 801139c:	4319      	orrs	r1, r3
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	699b      	ldr	r3, [r3, #24]
 80113a2:	3b01      	subs	r3, #1
 80113a4:	061b      	lsls	r3, r3, #24
 80113a6:	430b      	orrs	r3, r1
 80113a8:	431a      	orrs	r2, r3
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	609a      	str	r2, [r3, #8]
 80113ae:	e02d      	b.n	801140c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	689a      	ldr	r2, [r3, #8]
 80113b4:	4b19      	ldr	r3, [pc, #100]	; (801141c <FMC_SDRAM_Timing_Init+0xd0>)
 80113b6:	4013      	ands	r3, r2
 80113b8:	68ba      	ldr	r2, [r7, #8]
 80113ba:	68d2      	ldr	r2, [r2, #12]
 80113bc:	3a01      	subs	r2, #1
 80113be:	0311      	lsls	r1, r2, #12
 80113c0:	68ba      	ldr	r2, [r7, #8]
 80113c2:	6952      	ldr	r2, [r2, #20]
 80113c4:	3a01      	subs	r2, #1
 80113c6:	0512      	lsls	r2, r2, #20
 80113c8:	430a      	orrs	r2, r1
 80113ca:	431a      	orrs	r2, r3
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	68db      	ldr	r3, [r3, #12]
 80113d4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	1e59      	subs	r1, r3, #1
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	3b01      	subs	r3, #1
 80113e4:	011b      	lsls	r3, r3, #4
 80113e6:	4319      	orrs	r1, r3
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	689b      	ldr	r3, [r3, #8]
 80113ec:	3b01      	subs	r3, #1
 80113ee:	021b      	lsls	r3, r3, #8
 80113f0:	4319      	orrs	r1, r3
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	691b      	ldr	r3, [r3, #16]
 80113f6:	3b01      	subs	r3, #1
 80113f8:	041b      	lsls	r3, r3, #16
 80113fa:	4319      	orrs	r1, r3
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	699b      	ldr	r3, [r3, #24]
 8011400:	3b01      	subs	r3, #1
 8011402:	061b      	lsls	r3, r3, #24
 8011404:	430b      	orrs	r3, r1
 8011406:	431a      	orrs	r2, r3
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 801140c:	2300      	movs	r3, #0
}
 801140e:	4618      	mov	r0, r3
 8011410:	3714      	adds	r7, #20
 8011412:	46bd      	mov	sp, r7
 8011414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011418:	4770      	bx	lr
 801141a:	bf00      	nop
 801141c:	ff0f0fff 	.word	0xff0f0fff

08011420 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8011420:	b480      	push	{r7}
 8011422:	b085      	sub	sp, #20
 8011424:	af00      	add	r7, sp, #0
 8011426:	60f8      	str	r0, [r7, #12]
 8011428:	60b9      	str	r1, [r7, #8]
 801142a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	691a      	ldr	r2, [r3, #16]
 8011430:	4b0c      	ldr	r3, [pc, #48]	; (8011464 <FMC_SDRAM_SendCommand+0x44>)
 8011432:	4013      	ands	r3, r2
 8011434:	68ba      	ldr	r2, [r7, #8]
 8011436:	6811      	ldr	r1, [r2, #0]
 8011438:	68ba      	ldr	r2, [r7, #8]
 801143a:	6852      	ldr	r2, [r2, #4]
 801143c:	4311      	orrs	r1, r2
 801143e:	68ba      	ldr	r2, [r7, #8]
 8011440:	6892      	ldr	r2, [r2, #8]
 8011442:	3a01      	subs	r2, #1
 8011444:	0152      	lsls	r2, r2, #5
 8011446:	4311      	orrs	r1, r2
 8011448:	68ba      	ldr	r2, [r7, #8]
 801144a:	68d2      	ldr	r2, [r2, #12]
 801144c:	0252      	lsls	r2, r2, #9
 801144e:	430a      	orrs	r2, r1
 8011450:	431a      	orrs	r2, r3
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8011456:	2300      	movs	r3, #0
}
 8011458:	4618      	mov	r0, r3
 801145a:	3714      	adds	r7, #20
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr
 8011464:	ffc00000 	.word	0xffc00000

08011468 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011468:	b480      	push	{r7}
 801146a:	b083      	sub	sp, #12
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	695a      	ldr	r2, [r3, #20]
 8011476:	4b07      	ldr	r3, [pc, #28]	; (8011494 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8011478:	4013      	ands	r3, r2
 801147a:	683a      	ldr	r2, [r7, #0]
 801147c:	0052      	lsls	r2, r2, #1
 801147e:	431a      	orrs	r2, r3
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8011484:	2300      	movs	r3, #0
}
 8011486:	4618      	mov	r0, r3
 8011488:	370c      	adds	r7, #12
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr
 8011492:	bf00      	nop
 8011494:	ffffc001 	.word	0xffffc001

08011498 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011498:	b084      	sub	sp, #16
 801149a:	b480      	push	{r7}
 801149c:	b085      	sub	sp, #20
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
 80114a2:	f107 001c 	add.w	r0, r7, #28
 80114a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80114aa:	2300      	movs	r3, #0
 80114ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80114ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80114b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80114b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80114b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80114b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80114b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80114ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80114bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80114be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80114c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80114c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80114c4:	68fa      	ldr	r2, [r7, #12]
 80114c6:	4313      	orrs	r3, r2
 80114c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	685a      	ldr	r2, [r3, #4]
 80114ce:	4b07      	ldr	r3, [pc, #28]	; (80114ec <SDMMC_Init+0x54>)
 80114d0:	4013      	ands	r3, r2
 80114d2:	68fa      	ldr	r2, [r7, #12]
 80114d4:	431a      	orrs	r2, r3
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80114da:	2300      	movs	r3, #0
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3714      	adds	r7, #20
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	b004      	add	sp, #16
 80114e8:	4770      	bx	lr
 80114ea:	bf00      	nop
 80114ec:	ffff8100 	.word	0xffff8100

080114f0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b083      	sub	sp, #12
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80114fe:	4618      	mov	r0, r3
 8011500:	370c      	adds	r7, #12
 8011502:	46bd      	mov	sp, r7
 8011504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011508:	4770      	bx	lr

0801150a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 801150a:	b480      	push	{r7}
 801150c:	b083      	sub	sp, #12
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2203      	movs	r2, #3
 8011516:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011518:	2300      	movs	r3, #0
}
 801151a:	4618      	mov	r0, r3
 801151c:	370c      	adds	r7, #12
 801151e:	46bd      	mov	sp, r7
 8011520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011524:	4770      	bx	lr

08011526 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8011526:	b480      	push	{r7}
 8011528:	b083      	sub	sp, #12
 801152a:	af00      	add	r7, sp, #0
 801152c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	f003 0303 	and.w	r3, r3, #3
}
 8011536:	4618      	mov	r0, r3
 8011538:	370c      	adds	r7, #12
 801153a:	46bd      	mov	sp, r7
 801153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011540:	4770      	bx	lr
	...

08011544 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011544:	b480      	push	{r7}
 8011546:	b085      	sub	sp, #20
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801154e:	2300      	movs	r3, #0
 8011550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	681a      	ldr	r2, [r3, #0]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011562:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011568:	431a      	orrs	r2, r3
                       Command->CPSM);
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801156e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011570:	68fa      	ldr	r2, [r7, #12]
 8011572:	4313      	orrs	r3, r2
 8011574:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	68da      	ldr	r2, [r3, #12]
 801157a:	4b06      	ldr	r3, [pc, #24]	; (8011594 <SDMMC_SendCommand+0x50>)
 801157c:	4013      	ands	r3, r2
 801157e:	68fa      	ldr	r2, [r7, #12]
 8011580:	431a      	orrs	r2, r3
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8011586:	2300      	movs	r3, #0
}
 8011588:	4618      	mov	r0, r3
 801158a:	3714      	adds	r7, #20
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr
 8011594:	fffff000 	.word	0xfffff000

08011598 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011598:	b480      	push	{r7}
 801159a:	b083      	sub	sp, #12
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	691b      	ldr	r3, [r3, #16]
 80115a4:	b2db      	uxtb	r3, r3
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	370c      	adds	r7, #12
 80115aa:	46bd      	mov	sp, r7
 80115ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b0:	4770      	bx	lr

080115b2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80115b2:	b480      	push	{r7}
 80115b4:	b085      	sub	sp, #20
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
 80115ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	3314      	adds	r3, #20
 80115c0:	461a      	mov	r2, r3
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	4413      	add	r3, r2
 80115c6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	681b      	ldr	r3, [r3, #0]
}  
 80115cc:	4618      	mov	r0, r3
 80115ce:	3714      	adds	r7, #20
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr

080115d8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80115d8:	b480      	push	{r7}
 80115da:	b085      	sub	sp, #20
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80115e2:	2300      	movs	r3, #0
 80115e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	685a      	ldr	r2, [r3, #4]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80115fe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011604:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801160a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801160c:	68fa      	ldr	r2, [r7, #12]
 801160e:	4313      	orrs	r3, r2
 8011610:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011616:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	431a      	orrs	r2, r3
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011622:	2300      	movs	r3, #0

}
 8011624:	4618      	mov	r0, r3
 8011626:	3714      	adds	r7, #20
 8011628:	46bd      	mov	sp, r7
 801162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162e:	4770      	bx	lr

08011630 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b088      	sub	sp, #32
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801163e:	2310      	movs	r3, #16
 8011640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011642:	2340      	movs	r3, #64	; 0x40
 8011644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011646:	2300      	movs	r3, #0
 8011648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801164a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801164e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011650:	f107 0308 	add.w	r3, r7, #8
 8011654:	4619      	mov	r1, r3
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f7ff ff74 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801165c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011660:	2110      	movs	r1, #16
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f000 fa1a 	bl	8011a9c <SDMMC_GetCmdResp1>
 8011668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801166a:	69fb      	ldr	r3, [r7, #28]
}
 801166c:	4618      	mov	r0, r3
 801166e:	3720      	adds	r7, #32
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b088      	sub	sp, #32
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011682:	2311      	movs	r3, #17
 8011684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011686:	2340      	movs	r3, #64	; 0x40
 8011688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801168a:	2300      	movs	r3, #0
 801168c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801168e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011692:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011694:	f107 0308 	add.w	r3, r7, #8
 8011698:	4619      	mov	r1, r3
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f7ff ff52 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80116a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80116a4:	2111      	movs	r1, #17
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f000 f9f8 	bl	8011a9c <SDMMC_GetCmdResp1>
 80116ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116ae:	69fb      	ldr	r3, [r7, #28]
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3720      	adds	r7, #32
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}

080116b8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b088      	sub	sp, #32
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80116c6:	2312      	movs	r3, #18
 80116c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80116ca:	2340      	movs	r3, #64	; 0x40
 80116cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116ce:	2300      	movs	r3, #0
 80116d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116d8:	f107 0308 	add.w	r3, r7, #8
 80116dc:	4619      	mov	r1, r3
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f7ff ff30 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80116e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80116e8:	2112      	movs	r1, #18
 80116ea:	6878      	ldr	r0, [r7, #4]
 80116ec:	f000 f9d6 	bl	8011a9c <SDMMC_GetCmdResp1>
 80116f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116f2:	69fb      	ldr	r3, [r7, #28]
}
 80116f4:	4618      	mov	r0, r3
 80116f6:	3720      	adds	r7, #32
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}

080116fc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b088      	sub	sp, #32
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
 8011704:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801170a:	2318      	movs	r3, #24
 801170c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801170e:	2340      	movs	r3, #64	; 0x40
 8011710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011712:	2300      	movs	r3, #0
 8011714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801171a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801171c:	f107 0308 	add.w	r3, r7, #8
 8011720:	4619      	mov	r1, r3
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f7ff ff0e 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011728:	f241 3288 	movw	r2, #5000	; 0x1388
 801172c:	2118      	movs	r1, #24
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 f9b4 	bl	8011a9c <SDMMC_GetCmdResp1>
 8011734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011736:	69fb      	ldr	r3, [r7, #28]
}
 8011738:	4618      	mov	r0, r3
 801173a:	3720      	adds	r7, #32
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b088      	sub	sp, #32
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801174e:	2319      	movs	r3, #25
 8011750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011752:	2340      	movs	r3, #64	; 0x40
 8011754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011756:	2300      	movs	r3, #0
 8011758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801175a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801175e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011760:	f107 0308 	add.w	r3, r7, #8
 8011764:	4619      	mov	r1, r3
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f7ff feec 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011770:	2119      	movs	r1, #25
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f000 f992 	bl	8011a9c <SDMMC_GetCmdResp1>
 8011778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801177a:	69fb      	ldr	r3, [r7, #28]
}
 801177c:	4618      	mov	r0, r3
 801177e:	3720      	adds	r7, #32
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b088      	sub	sp, #32
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801178c:	2300      	movs	r3, #0
 801178e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011790:	230c      	movs	r3, #12
 8011792:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011794:	2340      	movs	r3, #64	; 0x40
 8011796:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011798:	2300      	movs	r3, #0
 801179a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801179c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80117a2:	f107 0308 	add.w	r3, r7, #8
 80117a6:	4619      	mov	r1, r3
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f7ff fecb 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80117ae:	4a05      	ldr	r2, [pc, #20]	; (80117c4 <SDMMC_CmdStopTransfer+0x40>)
 80117b0:	210c      	movs	r1, #12
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f000 f972 	bl	8011a9c <SDMMC_GetCmdResp1>
 80117b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117ba:	69fb      	ldr	r3, [r7, #28]
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3720      	adds	r7, #32
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	05f5e100 	.word	0x05f5e100

080117c8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b08a      	sub	sp, #40	; 0x28
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	60f8      	str	r0, [r7, #12]
 80117d0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80117d8:	2307      	movs	r3, #7
 80117da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80117dc:	2340      	movs	r3, #64	; 0x40
 80117de:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80117e0:	2300      	movs	r3, #0
 80117e2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80117e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117e8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80117ea:	f107 0310 	add.w	r3, r7, #16
 80117ee:	4619      	mov	r1, r3
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	f7ff fea7 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80117f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80117fa:	2107      	movs	r1, #7
 80117fc:	68f8      	ldr	r0, [r7, #12]
 80117fe:	f000 f94d 	bl	8011a9c <SDMMC_GetCmdResp1>
 8011802:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011806:	4618      	mov	r0, r3
 8011808:	3728      	adds	r7, #40	; 0x28
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}

0801180e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801180e:	b580      	push	{r7, lr}
 8011810:	b088      	sub	sp, #32
 8011812:	af00      	add	r7, sp, #0
 8011814:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8011816:	2300      	movs	r3, #0
 8011818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801181a:	2300      	movs	r3, #0
 801181c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801181e:	2300      	movs	r3, #0
 8011820:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011822:	2300      	movs	r3, #0
 8011824:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801182a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801182c:	f107 0308 	add.w	r3, r7, #8
 8011830:	4619      	mov	r1, r3
 8011832:	6878      	ldr	r0, [r7, #4]
 8011834:	f7ff fe86 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f000 fb67 	bl	8011f0c <SDMMC_GetCmdError>
 801183e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011840:	69fb      	ldr	r3, [r7, #28]
}
 8011842:	4618      	mov	r0, r3
 8011844:	3720      	adds	r7, #32
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}

0801184a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801184a:	b580      	push	{r7, lr}
 801184c:	b088      	sub	sp, #32
 801184e:	af00      	add	r7, sp, #0
 8011850:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011852:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011856:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011858:	2308      	movs	r3, #8
 801185a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801185c:	2340      	movs	r3, #64	; 0x40
 801185e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011860:	2300      	movs	r3, #0
 8011862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011868:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801186a:	f107 0308 	add.w	r3, r7, #8
 801186e:	4619      	mov	r1, r3
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f7ff fe67 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f000 fafa 	bl	8011e70 <SDMMC_GetCmdResp7>
 801187c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801187e:	69fb      	ldr	r3, [r7, #28]
}
 8011880:	4618      	mov	r0, r3
 8011882:	3720      	adds	r7, #32
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}

08011888 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b088      	sub	sp, #32
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011896:	2337      	movs	r3, #55	; 0x37
 8011898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801189a:	2340      	movs	r3, #64	; 0x40
 801189c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801189e:	2300      	movs	r3, #0
 80118a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80118a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80118a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80118a8:	f107 0308 	add.w	r3, r7, #8
 80118ac:	4619      	mov	r1, r3
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f7ff fe48 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80118b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80118b8:	2137      	movs	r1, #55	; 0x37
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f000 f8ee 	bl	8011a9c <SDMMC_GetCmdResp1>
 80118c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80118c2:	69fb      	ldr	r3, [r7, #28]
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3720      	adds	r7, #32
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}

080118cc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b088      	sub	sp, #32
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80118d6:	683a      	ldr	r2, [r7, #0]
 80118d8:	4b0d      	ldr	r3, [pc, #52]	; (8011910 <SDMMC_CmdAppOperCommand+0x44>)
 80118da:	4313      	orrs	r3, r2
 80118dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80118de:	2329      	movs	r3, #41	; 0x29
 80118e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80118e2:	2340      	movs	r3, #64	; 0x40
 80118e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80118e6:	2300      	movs	r3, #0
 80118e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80118ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80118ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80118f0:	f107 0308 	add.w	r3, r7, #8
 80118f4:	4619      	mov	r1, r3
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f7ff fe24 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f000 fa03 	bl	8011d08 <SDMMC_GetCmdResp3>
 8011902:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011904:	69fb      	ldr	r3, [r7, #28]
}
 8011906:	4618      	mov	r0, r3
 8011908:	3720      	adds	r7, #32
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
 801190e:	bf00      	nop
 8011910:	80100000 	.word	0x80100000

08011914 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b088      	sub	sp, #32
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011922:	2306      	movs	r3, #6
 8011924:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011926:	2340      	movs	r3, #64	; 0x40
 8011928:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801192a:	2300      	movs	r3, #0
 801192c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801192e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011932:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011934:	f107 0308 	add.w	r3, r7, #8
 8011938:	4619      	mov	r1, r3
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f7ff fe02 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011940:	f241 3288 	movw	r2, #5000	; 0x1388
 8011944:	2106      	movs	r1, #6
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f000 f8a8 	bl	8011a9c <SDMMC_GetCmdResp1>
 801194c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801194e:	69fb      	ldr	r3, [r7, #28]
}
 8011950:	4618      	mov	r0, r3
 8011952:	3720      	adds	r7, #32
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b088      	sub	sp, #32
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011960:	2300      	movs	r3, #0
 8011962:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011964:	2333      	movs	r3, #51	; 0x33
 8011966:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011968:	2340      	movs	r3, #64	; 0x40
 801196a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801196c:	2300      	movs	r3, #0
 801196e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011974:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011976:	f107 0308 	add.w	r3, r7, #8
 801197a:	4619      	mov	r1, r3
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f7ff fde1 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011982:	f241 3288 	movw	r2, #5000	; 0x1388
 8011986:	2133      	movs	r1, #51	; 0x33
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f000 f887 	bl	8011a9c <SDMMC_GetCmdResp1>
 801198e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011990:	69fb      	ldr	r3, [r7, #28]
}
 8011992:	4618      	mov	r0, r3
 8011994:	3720      	adds	r7, #32
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}

0801199a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801199a:	b580      	push	{r7, lr}
 801199c:	b088      	sub	sp, #32
 801199e:	af00      	add	r7, sp, #0
 80119a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80119a2:	2300      	movs	r3, #0
 80119a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80119a6:	2302      	movs	r3, #2
 80119a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80119aa:	23c0      	movs	r3, #192	; 0xc0
 80119ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80119ae:	2300      	movs	r3, #0
 80119b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80119b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80119b8:	f107 0308 	add.w	r3, r7, #8
 80119bc:	4619      	mov	r1, r3
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f7ff fdc0 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f000 f957 	bl	8011c78 <SDMMC_GetCmdResp2>
 80119ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80119cc:	69fb      	ldr	r3, [r7, #28]
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3720      	adds	r7, #32
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80119d6:	b580      	push	{r7, lr}
 80119d8:	b088      	sub	sp, #32
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
 80119de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80119e4:	2309      	movs	r3, #9
 80119e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80119e8:	23c0      	movs	r3, #192	; 0xc0
 80119ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80119ec:	2300      	movs	r3, #0
 80119ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80119f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80119f6:	f107 0308 	add.w	r3, r7, #8
 80119fa:	4619      	mov	r1, r3
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f7ff fda1 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f000 f938 	bl	8011c78 <SDMMC_GetCmdResp2>
 8011a08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a0a:	69fb      	ldr	r3, [r7, #28]
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3720      	adds	r7, #32
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b088      	sub	sp, #32
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011a22:	2303      	movs	r3, #3
 8011a24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a26:	2340      	movs	r3, #64	; 0x40
 8011a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a34:	f107 0308 	add.w	r3, r7, #8
 8011a38:	4619      	mov	r1, r3
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	f7ff fd82 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011a40:	683a      	ldr	r2, [r7, #0]
 8011a42:	2103      	movs	r1, #3
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f000 f99d 	bl	8011d84 <SDMMC_GetCmdResp6>
 8011a4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a4c:	69fb      	ldr	r3, [r7, #28]
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3720      	adds	r7, #32
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}

08011a56 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011a56:	b580      	push	{r7, lr}
 8011a58:	b088      	sub	sp, #32
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	6078      	str	r0, [r7, #4]
 8011a5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011a64:	230d      	movs	r3, #13
 8011a66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a68:	2340      	movs	r3, #64	; 0x40
 8011a6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a76:	f107 0308 	add.w	r3, r7, #8
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f7ff fd61 	bl	8011544 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a86:	210d      	movs	r1, #13
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f000 f807 	bl	8011a9c <SDMMC_GetCmdResp1>
 8011a8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a90:	69fb      	ldr	r3, [r7, #28]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3720      	adds	r7, #32
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
	...

08011a9c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b088      	sub	sp, #32
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	460b      	mov	r3, r1
 8011aa6:	607a      	str	r2, [r7, #4]
 8011aa8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011aaa:	4b70      	ldr	r3, [pc, #448]	; (8011c6c <SDMMC_GetCmdResp1+0x1d0>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	4a70      	ldr	r2, [pc, #448]	; (8011c70 <SDMMC_GetCmdResp1+0x1d4>)
 8011ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8011ab4:	0a5a      	lsrs	r2, r3, #9
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	fb02 f303 	mul.w	r3, r2, r3
 8011abc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011abe:	69fb      	ldr	r3, [r7, #28]
 8011ac0:	1e5a      	subs	r2, r3, #1
 8011ac2:	61fa      	str	r2, [r7, #28]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d102      	bne.n	8011ace <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011ac8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011acc:	e0c9      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ad2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011ad4:	69bb      	ldr	r3, [r7, #24]
 8011ad6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d0ef      	beq.n	8011abe <SDMMC_GetCmdResp1+0x22>
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d1ea      	bne.n	8011abe <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aec:	f003 0304 	and.w	r3, r3, #4
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d004      	beq.n	8011afe <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	2204      	movs	r2, #4
 8011af8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011afa:	2304      	movs	r3, #4
 8011afc:	e0b1      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b02:	f003 0301 	and.w	r3, r3, #1
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d004      	beq.n	8011b14 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2201      	movs	r2, #1
 8011b0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b10:	2301      	movs	r3, #1
 8011b12:	e0a6      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	22c5      	movs	r2, #197	; 0xc5
 8011b18:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011b1a:	68f8      	ldr	r0, [r7, #12]
 8011b1c:	f7ff fd3c 	bl	8011598 <SDMMC_GetCommandResponse>
 8011b20:	4603      	mov	r3, r0
 8011b22:	461a      	mov	r2, r3
 8011b24:	7afb      	ldrb	r3, [r7, #11]
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d001      	beq.n	8011b2e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	e099      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011b2e:	2100      	movs	r1, #0
 8011b30:	68f8      	ldr	r0, [r7, #12]
 8011b32:	f7ff fd3e 	bl	80115b2 <SDMMC_GetResponse>
 8011b36:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011b38:	697a      	ldr	r2, [r7, #20]
 8011b3a:	4b4e      	ldr	r3, [pc, #312]	; (8011c74 <SDMMC_GetCmdResp1+0x1d8>)
 8011b3c:	4013      	ands	r3, r2
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d101      	bne.n	8011b46 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011b42:	2300      	movs	r3, #0
 8011b44:	e08d      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	da02      	bge.n	8011b52 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011b4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011b50:	e087      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d001      	beq.n	8011b60 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011b5c:	2340      	movs	r3, #64	; 0x40
 8011b5e:	e080      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d001      	beq.n	8011b6e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011b6a:	2380      	movs	r3, #128	; 0x80
 8011b6c:	e079      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d002      	beq.n	8011b7e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b7c:	e071      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d002      	beq.n	8011b8e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b8c:	e069      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d002      	beq.n	8011b9e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b9c:	e061      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d002      	beq.n	8011bae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011bac:	e059      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d002      	beq.n	8011bbe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011bbc:	e051      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d002      	beq.n	8011bce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011bcc:	e049      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d002      	beq.n	8011bde <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011bd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011bdc:	e041      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d002      	beq.n	8011bee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011bec:	e039      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d002      	beq.n	8011bfe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011bfc:	e031      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d002      	beq.n	8011c0e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011c08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011c0c:	e029      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d002      	beq.n	8011c1e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011c18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011c1c:	e021      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d002      	beq.n	8011c2e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011c28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011c2c:	e019      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d002      	beq.n	8011c3e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011c38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011c3c:	e011      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d002      	beq.n	8011c4e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011c48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011c4c:	e009      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	f003 0308 	and.w	r3, r3, #8
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d002      	beq.n	8011c5e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011c58:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011c5c:	e001      	b.n	8011c62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3720      	adds	r7, #32
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	2000002c 	.word	0x2000002c
 8011c70:	10624dd3 	.word	0x10624dd3
 8011c74:	fdffe008 	.word	0xfdffe008

08011c78 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011c78:	b480      	push	{r7}
 8011c7a:	b085      	sub	sp, #20
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011c80:	4b1f      	ldr	r3, [pc, #124]	; (8011d00 <SDMMC_GetCmdResp2+0x88>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	4a1f      	ldr	r2, [pc, #124]	; (8011d04 <SDMMC_GetCmdResp2+0x8c>)
 8011c86:	fba2 2303 	umull	r2, r3, r2, r3
 8011c8a:	0a5b      	lsrs	r3, r3, #9
 8011c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c90:	fb02 f303 	mul.w	r3, r2, r3
 8011c94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	1e5a      	subs	r2, r3, #1
 8011c9a:	60fa      	str	r2, [r7, #12]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d102      	bne.n	8011ca6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011ca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011ca4:	e026      	b.n	8011cf4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011caa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d0ef      	beq.n	8011c96 <SDMMC_GetCmdResp2+0x1e>
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d1ea      	bne.n	8011c96 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cc4:	f003 0304 	and.w	r3, r3, #4
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d004      	beq.n	8011cd6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2204      	movs	r2, #4
 8011cd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011cd2:	2304      	movs	r3, #4
 8011cd4:	e00e      	b.n	8011cf4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cda:	f003 0301 	and.w	r3, r3, #1
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d004      	beq.n	8011cec <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2201      	movs	r2, #1
 8011ce6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011ce8:	2301      	movs	r3, #1
 8011cea:	e003      	b.n	8011cf4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	22c5      	movs	r2, #197	; 0xc5
 8011cf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011cf2:	2300      	movs	r3, #0
}
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3714      	adds	r7, #20
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfe:	4770      	bx	lr
 8011d00:	2000002c 	.word	0x2000002c
 8011d04:	10624dd3 	.word	0x10624dd3

08011d08 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011d08:	b480      	push	{r7}
 8011d0a:	b085      	sub	sp, #20
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011d10:	4b1a      	ldr	r3, [pc, #104]	; (8011d7c <SDMMC_GetCmdResp3+0x74>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	4a1a      	ldr	r2, [pc, #104]	; (8011d80 <SDMMC_GetCmdResp3+0x78>)
 8011d16:	fba2 2303 	umull	r2, r3, r2, r3
 8011d1a:	0a5b      	lsrs	r3, r3, #9
 8011d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d20:	fb02 f303 	mul.w	r3, r2, r3
 8011d24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	1e5a      	subs	r2, r3, #1
 8011d2a:	60fa      	str	r2, [r7, #12]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d102      	bne.n	8011d36 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011d30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011d34:	e01b      	b.n	8011d6e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d0ef      	beq.n	8011d26 <SDMMC_GetCmdResp3+0x1e>
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d1ea      	bne.n	8011d26 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d54:	f003 0304 	and.w	r3, r3, #4
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d004      	beq.n	8011d66 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2204      	movs	r2, #4
 8011d60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011d62:	2304      	movs	r3, #4
 8011d64:	e003      	b.n	8011d6e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	22c5      	movs	r2, #197	; 0xc5
 8011d6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011d6c:	2300      	movs	r3, #0
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3714      	adds	r7, #20
 8011d72:	46bd      	mov	sp, r7
 8011d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d78:	4770      	bx	lr
 8011d7a:	bf00      	nop
 8011d7c:	2000002c 	.word	0x2000002c
 8011d80:	10624dd3 	.word	0x10624dd3

08011d84 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b088      	sub	sp, #32
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	60f8      	str	r0, [r7, #12]
 8011d8c:	460b      	mov	r3, r1
 8011d8e:	607a      	str	r2, [r7, #4]
 8011d90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011d92:	4b35      	ldr	r3, [pc, #212]	; (8011e68 <SDMMC_GetCmdResp6+0xe4>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	4a35      	ldr	r2, [pc, #212]	; (8011e6c <SDMMC_GetCmdResp6+0xe8>)
 8011d98:	fba2 2303 	umull	r2, r3, r2, r3
 8011d9c:	0a5b      	lsrs	r3, r3, #9
 8011d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011da2:	fb02 f303 	mul.w	r3, r2, r3
 8011da6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8011da8:	69fb      	ldr	r3, [r7, #28]
 8011daa:	1e5a      	subs	r2, r3, #1
 8011dac:	61fa      	str	r2, [r7, #28]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d102      	bne.n	8011db8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011db2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011db6:	e052      	b.n	8011e5e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dbc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011dbe:	69bb      	ldr	r3, [r7, #24]
 8011dc0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d0ef      	beq.n	8011da8 <SDMMC_GetCmdResp6+0x24>
 8011dc8:	69bb      	ldr	r3, [r7, #24]
 8011dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d1ea      	bne.n	8011da8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dd6:	f003 0304 	and.w	r3, r3, #4
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d004      	beq.n	8011de8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	2204      	movs	r2, #4
 8011de2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011de4:	2304      	movs	r3, #4
 8011de6:	e03a      	b.n	8011e5e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dec:	f003 0301 	and.w	r3, r3, #1
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d004      	beq.n	8011dfe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2201      	movs	r2, #1
 8011df8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	e02f      	b.n	8011e5e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011dfe:	68f8      	ldr	r0, [r7, #12]
 8011e00:	f7ff fbca 	bl	8011598 <SDMMC_GetCommandResponse>
 8011e04:	4603      	mov	r3, r0
 8011e06:	461a      	mov	r2, r3
 8011e08:	7afb      	ldrb	r3, [r7, #11]
 8011e0a:	4293      	cmp	r3, r2
 8011e0c:	d001      	beq.n	8011e12 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011e0e:	2301      	movs	r3, #1
 8011e10:	e025      	b.n	8011e5e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	22c5      	movs	r2, #197	; 0xc5
 8011e16:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011e18:	2100      	movs	r1, #0
 8011e1a:	68f8      	ldr	r0, [r7, #12]
 8011e1c:	f7ff fbc9 	bl	80115b2 <SDMMC_GetResponse>
 8011e20:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d106      	bne.n	8011e3a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	0c1b      	lsrs	r3, r3, #16
 8011e30:	b29a      	uxth	r2, r3
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011e36:	2300      	movs	r3, #0
 8011e38:	e011      	b.n	8011e5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d002      	beq.n	8011e4a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011e44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011e48:	e009      	b.n	8011e5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011e4a:	697b      	ldr	r3, [r7, #20]
 8011e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d002      	beq.n	8011e5a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e58:	e001      	b.n	8011e5e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3720      	adds	r7, #32
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}
 8011e66:	bf00      	nop
 8011e68:	2000002c 	.word	0x2000002c
 8011e6c:	10624dd3 	.word	0x10624dd3

08011e70 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011e70:	b480      	push	{r7}
 8011e72:	b085      	sub	sp, #20
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011e78:	4b22      	ldr	r3, [pc, #136]	; (8011f04 <SDMMC_GetCmdResp7+0x94>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	4a22      	ldr	r2, [pc, #136]	; (8011f08 <SDMMC_GetCmdResp7+0x98>)
 8011e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8011e82:	0a5b      	lsrs	r3, r3, #9
 8011e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e88:	fb02 f303 	mul.w	r3, r2, r3
 8011e8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	1e5a      	subs	r2, r3, #1
 8011e92:	60fa      	str	r2, [r7, #12]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d102      	bne.n	8011e9e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011e98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011e9c:	e02c      	b.n	8011ef8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ea2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011ea4:	68bb      	ldr	r3, [r7, #8]
 8011ea6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d0ef      	beq.n	8011e8e <SDMMC_GetCmdResp7+0x1e>
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d1ea      	bne.n	8011e8e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ebc:	f003 0304 	and.w	r3, r3, #4
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d004      	beq.n	8011ece <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2204      	movs	r2, #4
 8011ec8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011eca:	2304      	movs	r3, #4
 8011ecc:	e014      	b.n	8011ef8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ed2:	f003 0301 	and.w	r3, r3, #1
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d004      	beq.n	8011ee4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2201      	movs	r2, #1
 8011ede:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	e009      	b.n	8011ef8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d002      	beq.n	8011ef6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2240      	movs	r2, #64	; 0x40
 8011ef4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011ef6:	2300      	movs	r3, #0
  
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3714      	adds	r7, #20
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr
 8011f04:	2000002c 	.word	0x2000002c
 8011f08:	10624dd3 	.word	0x10624dd3

08011f0c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b085      	sub	sp, #20
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011f14:	4b11      	ldr	r3, [pc, #68]	; (8011f5c <SDMMC_GetCmdError+0x50>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	4a11      	ldr	r2, [pc, #68]	; (8011f60 <SDMMC_GetCmdError+0x54>)
 8011f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8011f1e:	0a5b      	lsrs	r3, r3, #9
 8011f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f24:	fb02 f303 	mul.w	r3, r2, r3
 8011f28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	1e5a      	subs	r2, r3, #1
 8011f2e:	60fa      	str	r2, [r7, #12]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d102      	bne.n	8011f3a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011f34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011f38:	e009      	b.n	8011f4e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d0f1      	beq.n	8011f2a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	22c5      	movs	r2, #197	; 0xc5
 8011f4a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8011f4c:	2300      	movs	r3, #0
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	3714      	adds	r7, #20
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr
 8011f5a:	bf00      	nop
 8011f5c:	2000002c 	.word	0x2000002c
 8011f60:	10624dd3 	.word	0x10624dd3

08011f64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011f64:	b084      	sub	sp, #16
 8011f66:	b580      	push	{r7, lr}
 8011f68:	b084      	sub	sp, #16
 8011f6a:	af00      	add	r7, sp, #0
 8011f6c:	6078      	str	r0, [r7, #4]
 8011f6e:	f107 001c 	add.w	r0, r7, #28
 8011f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	d120      	bne.n	8011fbe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	68da      	ldr	r2, [r3, #12]
 8011f8c:	4b20      	ldr	r3, [pc, #128]	; (8012010 <USB_CoreInit+0xac>)
 8011f8e:	4013      	ands	r3, r2
 8011f90:	687a      	ldr	r2, [r7, #4]
 8011f92:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	d105      	bne.n	8011fb2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	68db      	ldr	r3, [r3, #12]
 8011faa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f000 f9d8 	bl	8012368 <USB_CoreReset>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	73fb      	strb	r3, [r7, #15]
 8011fbc:	e010      	b.n	8011fe0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	68db      	ldr	r3, [r3, #12]
 8011fc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 f9cc 	bl	8012368 <USB_CoreReset>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8011fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe2:	2b01      	cmp	r3, #1
 8011fe4:	d10b      	bne.n	8011ffe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	689b      	ldr	r3, [r3, #8]
 8011fea:	f043 0206 	orr.w	r2, r3, #6
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	689b      	ldr	r3, [r3, #8]
 8011ff6:	f043 0220 	orr.w	r2, r3, #32
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012000:	4618      	mov	r0, r3
 8012002:	3710      	adds	r7, #16
 8012004:	46bd      	mov	sp, r7
 8012006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801200a:	b004      	add	sp, #16
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	ffbdffbf 	.word	0xffbdffbf

08012014 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012014:	b480      	push	{r7}
 8012016:	b083      	sub	sp, #12
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	689b      	ldr	r3, [r3, #8]
 8012020:	f043 0201 	orr.w	r2, r3, #1
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012028:	2300      	movs	r3, #0
}
 801202a:	4618      	mov	r0, r3
 801202c:	370c      	adds	r7, #12
 801202e:	46bd      	mov	sp, r7
 8012030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012034:	4770      	bx	lr

08012036 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012036:	b480      	push	{r7}
 8012038:	b083      	sub	sp, #12
 801203a:	af00      	add	r7, sp, #0
 801203c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	689b      	ldr	r3, [r3, #8]
 8012042:	f023 0201 	bic.w	r2, r3, #1
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801204a:	2300      	movs	r3, #0
}
 801204c:	4618      	mov	r0, r3
 801204e:	370c      	adds	r7, #12
 8012050:	46bd      	mov	sp, r7
 8012052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012056:	4770      	bx	lr

08012058 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b084      	sub	sp, #16
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
 8012060:	460b      	mov	r3, r1
 8012062:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012064:	2300      	movs	r3, #0
 8012066:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012074:	78fb      	ldrb	r3, [r7, #3]
 8012076:	2b01      	cmp	r3, #1
 8012078:	d115      	bne.n	80120a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	68db      	ldr	r3, [r3, #12]
 801207e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012086:	2001      	movs	r0, #1
 8012088:	f7f4 f928 	bl	80062dc <HAL_Delay>
      ms++;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	3301      	adds	r3, #1
 8012090:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f000 f95a 	bl	801234c <USB_GetMode>
 8012098:	4603      	mov	r3, r0
 801209a:	2b01      	cmp	r3, #1
 801209c:	d01e      	beq.n	80120dc <USB_SetCurrentMode+0x84>
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	2b31      	cmp	r3, #49	; 0x31
 80120a2:	d9f0      	bls.n	8012086 <USB_SetCurrentMode+0x2e>
 80120a4:	e01a      	b.n	80120dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80120a6:	78fb      	ldrb	r3, [r7, #3]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d115      	bne.n	80120d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	68db      	ldr	r3, [r3, #12]
 80120b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80120b8:	2001      	movs	r0, #1
 80120ba:	f7f4 f90f 	bl	80062dc <HAL_Delay>
      ms++;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	3301      	adds	r3, #1
 80120c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f000 f941 	bl	801234c <USB_GetMode>
 80120ca:	4603      	mov	r3, r0
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d005      	beq.n	80120dc <USB_SetCurrentMode+0x84>
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	2b31      	cmp	r3, #49	; 0x31
 80120d4:	d9f0      	bls.n	80120b8 <USB_SetCurrentMode+0x60>
 80120d6:	e001      	b.n	80120dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80120d8:	2301      	movs	r3, #1
 80120da:	e005      	b.n	80120e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	2b32      	cmp	r3, #50	; 0x32
 80120e0:	d101      	bne.n	80120e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80120e2:	2301      	movs	r3, #1
 80120e4:	e000      	b.n	80120e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80120e6:	2300      	movs	r3, #0
}
 80120e8:	4618      	mov	r0, r3
 80120ea:	3710      	adds	r7, #16
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}

080120f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80120f0:	b480      	push	{r7}
 80120f2:	b085      	sub	sp, #20
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80120fa:	2300      	movs	r3, #0
 80120fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	3301      	adds	r3, #1
 8012102:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	4a13      	ldr	r2, [pc, #76]	; (8012154 <USB_FlushTxFifo+0x64>)
 8012108:	4293      	cmp	r3, r2
 801210a:	d901      	bls.n	8012110 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801210c:	2303      	movs	r3, #3
 801210e:	e01b      	b.n	8012148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	691b      	ldr	r3, [r3, #16]
 8012114:	2b00      	cmp	r3, #0
 8012116:	daf2      	bge.n	80120fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012118:	2300      	movs	r3, #0
 801211a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	019b      	lsls	r3, r3, #6
 8012120:	f043 0220 	orr.w	r2, r3, #32
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	3301      	adds	r3, #1
 801212c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	4a08      	ldr	r2, [pc, #32]	; (8012154 <USB_FlushTxFifo+0x64>)
 8012132:	4293      	cmp	r3, r2
 8012134:	d901      	bls.n	801213a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012136:	2303      	movs	r3, #3
 8012138:	e006      	b.n	8012148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	691b      	ldr	r3, [r3, #16]
 801213e:	f003 0320 	and.w	r3, r3, #32
 8012142:	2b20      	cmp	r3, #32
 8012144:	d0f0      	beq.n	8012128 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012146:	2300      	movs	r3, #0
}
 8012148:	4618      	mov	r0, r3
 801214a:	3714      	adds	r7, #20
 801214c:	46bd      	mov	sp, r7
 801214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012152:	4770      	bx	lr
 8012154:	00030d40 	.word	0x00030d40

08012158 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012158:	b480      	push	{r7}
 801215a:	b085      	sub	sp, #20
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012160:	2300      	movs	r3, #0
 8012162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	3301      	adds	r3, #1
 8012168:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	4a11      	ldr	r2, [pc, #68]	; (80121b4 <USB_FlushRxFifo+0x5c>)
 801216e:	4293      	cmp	r3, r2
 8012170:	d901      	bls.n	8012176 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012172:	2303      	movs	r3, #3
 8012174:	e018      	b.n	80121a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	691b      	ldr	r3, [r3, #16]
 801217a:	2b00      	cmp	r3, #0
 801217c:	daf2      	bge.n	8012164 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801217e:	2300      	movs	r3, #0
 8012180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2210      	movs	r2, #16
 8012186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	3301      	adds	r3, #1
 801218c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	4a08      	ldr	r2, [pc, #32]	; (80121b4 <USB_FlushRxFifo+0x5c>)
 8012192:	4293      	cmp	r3, r2
 8012194:	d901      	bls.n	801219a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012196:	2303      	movs	r3, #3
 8012198:	e006      	b.n	80121a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	691b      	ldr	r3, [r3, #16]
 801219e:	f003 0310 	and.w	r3, r3, #16
 80121a2:	2b10      	cmp	r3, #16
 80121a4:	d0f0      	beq.n	8012188 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80121a6:	2300      	movs	r3, #0
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3714      	adds	r7, #20
 80121ac:	46bd      	mov	sp, r7
 80121ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b2:	4770      	bx	lr
 80121b4:	00030d40 	.word	0x00030d40

080121b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80121b8:	b480      	push	{r7}
 80121ba:	b089      	sub	sp, #36	; 0x24
 80121bc:	af00      	add	r7, sp, #0
 80121be:	60f8      	str	r0, [r7, #12]
 80121c0:	60b9      	str	r1, [r7, #8]
 80121c2:	4611      	mov	r1, r2
 80121c4:	461a      	mov	r2, r3
 80121c6:	460b      	mov	r3, r1
 80121c8:	71fb      	strb	r3, [r7, #7]
 80121ca:	4613      	mov	r3, r2
 80121cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80121d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d123      	bne.n	8012226 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80121de:	88bb      	ldrh	r3, [r7, #4]
 80121e0:	3303      	adds	r3, #3
 80121e2:	089b      	lsrs	r3, r3, #2
 80121e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80121e6:	2300      	movs	r3, #0
 80121e8:	61bb      	str	r3, [r7, #24]
 80121ea:	e018      	b.n	801221e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80121ec:	79fb      	ldrb	r3, [r7, #7]
 80121ee:	031a      	lsls	r2, r3, #12
 80121f0:	697b      	ldr	r3, [r7, #20]
 80121f2:	4413      	add	r3, r2
 80121f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80121f8:	461a      	mov	r2, r3
 80121fa:	69fb      	ldr	r3, [r7, #28]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012200:	69fb      	ldr	r3, [r7, #28]
 8012202:	3301      	adds	r3, #1
 8012204:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012206:	69fb      	ldr	r3, [r7, #28]
 8012208:	3301      	adds	r3, #1
 801220a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	3301      	adds	r3, #1
 8012210:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012212:	69fb      	ldr	r3, [r7, #28]
 8012214:	3301      	adds	r3, #1
 8012216:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012218:	69bb      	ldr	r3, [r7, #24]
 801221a:	3301      	adds	r3, #1
 801221c:	61bb      	str	r3, [r7, #24]
 801221e:	69ba      	ldr	r2, [r7, #24]
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	429a      	cmp	r2, r3
 8012224:	d3e2      	bcc.n	80121ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012226:	2300      	movs	r3, #0
}
 8012228:	4618      	mov	r0, r3
 801222a:	3724      	adds	r7, #36	; 0x24
 801222c:	46bd      	mov	sp, r7
 801222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012232:	4770      	bx	lr

08012234 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012234:	b480      	push	{r7}
 8012236:	b08b      	sub	sp, #44	; 0x2c
 8012238:	af00      	add	r7, sp, #0
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	4613      	mov	r3, r2
 8012240:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801224a:	88fb      	ldrh	r3, [r7, #6]
 801224c:	089b      	lsrs	r3, r3, #2
 801224e:	b29b      	uxth	r3, r3
 8012250:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012252:	88fb      	ldrh	r3, [r7, #6]
 8012254:	f003 0303 	and.w	r3, r3, #3
 8012258:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801225a:	2300      	movs	r3, #0
 801225c:	623b      	str	r3, [r7, #32]
 801225e:	e014      	b.n	801228a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012260:	69bb      	ldr	r3, [r7, #24]
 8012262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226a:	601a      	str	r2, [r3, #0]
    pDest++;
 801226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226e:	3301      	adds	r3, #1
 8012270:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012274:	3301      	adds	r3, #1
 8012276:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227a:	3301      	adds	r3, #1
 801227c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012280:	3301      	adds	r3, #1
 8012282:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8012284:	6a3b      	ldr	r3, [r7, #32]
 8012286:	3301      	adds	r3, #1
 8012288:	623b      	str	r3, [r7, #32]
 801228a:	6a3a      	ldr	r2, [r7, #32]
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	429a      	cmp	r2, r3
 8012290:	d3e6      	bcc.n	8012260 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012292:	8bfb      	ldrh	r3, [r7, #30]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d01e      	beq.n	80122d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012298:	2300      	movs	r3, #0
 801229a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80122a2:	461a      	mov	r2, r3
 80122a4:	f107 0310 	add.w	r3, r7, #16
 80122a8:	6812      	ldr	r2, [r2, #0]
 80122aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80122ac:	693a      	ldr	r2, [r7, #16]
 80122ae:	6a3b      	ldr	r3, [r7, #32]
 80122b0:	b2db      	uxtb	r3, r3
 80122b2:	00db      	lsls	r3, r3, #3
 80122b4:	fa22 f303 	lsr.w	r3, r2, r3
 80122b8:	b2da      	uxtb	r2, r3
 80122ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122bc:	701a      	strb	r2, [r3, #0]
      i++;
 80122be:	6a3b      	ldr	r3, [r7, #32]
 80122c0:	3301      	adds	r3, #1
 80122c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80122c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c6:	3301      	adds	r3, #1
 80122c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80122ca:	8bfb      	ldrh	r3, [r7, #30]
 80122cc:	3b01      	subs	r3, #1
 80122ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80122d0:	8bfb      	ldrh	r3, [r7, #30]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d1ea      	bne.n	80122ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80122d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80122d8:	4618      	mov	r0, r3
 80122da:	372c      	adds	r7, #44	; 0x2c
 80122dc:	46bd      	mov	sp, r7
 80122de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e2:	4770      	bx	lr

080122e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b085      	sub	sp, #20
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	695b      	ldr	r3, [r3, #20]
 80122f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	699b      	ldr	r3, [r3, #24]
 80122f6:	68fa      	ldr	r2, [r7, #12]
 80122f8:	4013      	ands	r3, r2
 80122fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80122fc:	68fb      	ldr	r3, [r7, #12]
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3714      	adds	r7, #20
 8012302:	46bd      	mov	sp, r7
 8012304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012308:	4770      	bx	lr

0801230a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 801230a:	b480      	push	{r7}
 801230c:	b085      	sub	sp, #20
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]
 8012312:	460b      	mov	r3, r1
 8012314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 801231a:	78fb      	ldrb	r3, [r7, #3]
 801231c:	015a      	lsls	r2, r3, #5
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	4413      	add	r3, r2
 8012322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012326:	689b      	ldr	r3, [r3, #8]
 8012328:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 801232a:	78fb      	ldrb	r3, [r7, #3]
 801232c:	015a      	lsls	r2, r3, #5
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	4413      	add	r3, r2
 8012332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012336:	68db      	ldr	r3, [r3, #12]
 8012338:	68ba      	ldr	r2, [r7, #8]
 801233a:	4013      	ands	r3, r2
 801233c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801233e:	68bb      	ldr	r3, [r7, #8]
}
 8012340:	4618      	mov	r0, r3
 8012342:	3714      	adds	r7, #20
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr

0801234c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	695b      	ldr	r3, [r3, #20]
 8012358:	f003 0301 	and.w	r3, r3, #1
}
 801235c:	4618      	mov	r0, r3
 801235e:	370c      	adds	r7, #12
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012368:	b480      	push	{r7}
 801236a:	b085      	sub	sp, #20
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012370:	2300      	movs	r3, #0
 8012372:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	3301      	adds	r3, #1
 8012378:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	4a13      	ldr	r2, [pc, #76]	; (80123cc <USB_CoreReset+0x64>)
 801237e:	4293      	cmp	r3, r2
 8012380:	d901      	bls.n	8012386 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012382:	2303      	movs	r3, #3
 8012384:	e01b      	b.n	80123be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	691b      	ldr	r3, [r3, #16]
 801238a:	2b00      	cmp	r3, #0
 801238c:	daf2      	bge.n	8012374 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801238e:	2300      	movs	r3, #0
 8012390:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	691b      	ldr	r3, [r3, #16]
 8012396:	f043 0201 	orr.w	r2, r3, #1
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	3301      	adds	r3, #1
 80123a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	4a09      	ldr	r2, [pc, #36]	; (80123cc <USB_CoreReset+0x64>)
 80123a8:	4293      	cmp	r3, r2
 80123aa:	d901      	bls.n	80123b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80123ac:	2303      	movs	r3, #3
 80123ae:	e006      	b.n	80123be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	691b      	ldr	r3, [r3, #16]
 80123b4:	f003 0301 	and.w	r3, r3, #1
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	d0f0      	beq.n	801239e <USB_CoreReset+0x36>

  return HAL_OK;
 80123bc:	2300      	movs	r3, #0
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3714      	adds	r7, #20
 80123c2:	46bd      	mov	sp, r7
 80123c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c8:	4770      	bx	lr
 80123ca:	bf00      	nop
 80123cc:	00030d40 	.word	0x00030d40

080123d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80123d0:	b084      	sub	sp, #16
 80123d2:	b580      	push	{r7, lr}
 80123d4:	b086      	sub	sp, #24
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	6078      	str	r0, [r7, #4]
 80123da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80123de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80123e2:	2300      	movs	r3, #0
 80123e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80123f0:	461a      	mov	r2, r3
 80123f2:	2300      	movs	r3, #0
 80123f4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801240a:	2b00      	cmp	r3, #0
 801240c:	d018      	beq.n	8012440 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 801240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012410:	2b01      	cmp	r3, #1
 8012412:	d10a      	bne.n	801242a <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	68fa      	ldr	r2, [r7, #12]
 801241e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012422:	f043 0304 	orr.w	r3, r3, #4
 8012426:	6013      	str	r3, [r2, #0]
 8012428:	e014      	b.n	8012454 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	68fa      	ldr	r2, [r7, #12]
 8012434:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012438:	f023 0304 	bic.w	r3, r3, #4
 801243c:	6013      	str	r3, [r2, #0]
 801243e:	e009      	b.n	8012454 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	68fa      	ldr	r2, [r7, #12]
 801244a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801244e:	f023 0304 	bic.w	r3, r3, #4
 8012452:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012454:	2110      	movs	r1, #16
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f7ff fe4a 	bl	80120f0 <USB_FlushTxFifo>
 801245c:	4603      	mov	r3, r0
 801245e:	2b00      	cmp	r3, #0
 8012460:	d001      	beq.n	8012466 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 8012462:	2301      	movs	r3, #1
 8012464:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f7ff fe76 	bl	8012158 <USB_FlushRxFifo>
 801246c:	4603      	mov	r3, r0
 801246e:	2b00      	cmp	r3, #0
 8012470:	d001      	beq.n	8012476 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 8012472:	2301      	movs	r3, #1
 8012474:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8012476:	2300      	movs	r3, #0
 8012478:	613b      	str	r3, [r7, #16]
 801247a:	e015      	b.n	80124a8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	015a      	lsls	r2, r3, #5
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	4413      	add	r3, r2
 8012484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012488:	461a      	mov	r2, r3
 801248a:	f04f 33ff 	mov.w	r3, #4294967295
 801248e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	015a      	lsls	r2, r3, #5
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	4413      	add	r3, r2
 8012498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801249c:	461a      	mov	r2, r3
 801249e:	2300      	movs	r3, #0
 80124a0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	3301      	adds	r3, #1
 80124a6:	613b      	str	r3, [r7, #16]
 80124a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124aa:	693a      	ldr	r2, [r7, #16]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d3e5      	bcc.n	801247c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2200      	movs	r2, #0
 80124b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f04f 32ff 	mov.w	r2, #4294967295
 80124bc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d00b      	beq.n	80124e2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80124d0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	4a13      	ldr	r2, [pc, #76]	; (8012524 <USB_HostInit+0x154>)
 80124d6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	4a13      	ldr	r2, [pc, #76]	; (8012528 <USB_HostInit+0x158>)
 80124dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80124e0:	e009      	b.n	80124f6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2280      	movs	r2, #128	; 0x80
 80124e6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	4a10      	ldr	r2, [pc, #64]	; (801252c <USB_HostInit+0x15c>)
 80124ec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	4a0f      	ldr	r2, [pc, #60]	; (8012530 <USB_HostInit+0x160>)
 80124f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80124f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d105      	bne.n	8012508 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	699b      	ldr	r3, [r3, #24]
 8012500:	f043 0210 	orr.w	r2, r3, #16
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	699a      	ldr	r2, [r3, #24]
 801250c:	4b09      	ldr	r3, [pc, #36]	; (8012534 <USB_HostInit+0x164>)
 801250e:	4313      	orrs	r3, r2
 8012510:	687a      	ldr	r2, [r7, #4]
 8012512:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8012514:	7dfb      	ldrb	r3, [r7, #23]
}
 8012516:	4618      	mov	r0, r3
 8012518:	3718      	adds	r7, #24
 801251a:	46bd      	mov	sp, r7
 801251c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012520:	b004      	add	sp, #16
 8012522:	4770      	bx	lr
 8012524:	01000200 	.word	0x01000200
 8012528:	00e00300 	.word	0x00e00300
 801252c:	00600080 	.word	0x00600080
 8012530:	004000e0 	.word	0x004000e0
 8012534:	a3200008 	.word	0xa3200008

08012538 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8012538:	b480      	push	{r7}
 801253a:	b085      	sub	sp, #20
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	460b      	mov	r3, r1
 8012542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	68fa      	ldr	r2, [r7, #12]
 8012552:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012556:	f023 0303 	bic.w	r3, r3, #3
 801255a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012562:	681a      	ldr	r2, [r3, #0]
 8012564:	78fb      	ldrb	r3, [r7, #3]
 8012566:	f003 0303 	and.w	r3, r3, #3
 801256a:	68f9      	ldr	r1, [r7, #12]
 801256c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8012570:	4313      	orrs	r3, r2
 8012572:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8012574:	78fb      	ldrb	r3, [r7, #3]
 8012576:	2b01      	cmp	r3, #1
 8012578:	d107      	bne.n	801258a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012580:	461a      	mov	r2, r3
 8012582:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8012586:	6053      	str	r3, [r2, #4]
 8012588:	e009      	b.n	801259e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 801258a:	78fb      	ldrb	r3, [r7, #3]
 801258c:	2b02      	cmp	r3, #2
 801258e:	d106      	bne.n	801259e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012596:	461a      	mov	r2, r3
 8012598:	f241 7370 	movw	r3, #6000	; 0x1770
 801259c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 801259e:	2300      	movs	r3, #0
}
 80125a0:	4618      	mov	r0, r3
 80125a2:	3714      	adds	r7, #20
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr

080125ac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80125b8:	2300      	movs	r3, #0
 80125ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80125cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	68fa      	ldr	r2, [r7, #12]
 80125d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80125d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80125da:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80125dc:	2064      	movs	r0, #100	; 0x64
 80125de:	f7f3 fe7d 	bl	80062dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	68fa      	ldr	r2, [r7, #12]
 80125e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80125ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80125ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80125f0:	200a      	movs	r0, #10
 80125f2:	f7f3 fe73 	bl	80062dc <HAL_Delay>

  return HAL_OK;
 80125f6:	2300      	movs	r3, #0
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3710      	adds	r7, #16
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}

08012600 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8012600:	b480      	push	{r7}
 8012602:	b085      	sub	sp, #20
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
 8012608:	460b      	mov	r3, r1
 801260a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8012610:	2300      	movs	r3, #0
 8012612:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8012624:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801262c:	2b00      	cmp	r3, #0
 801262e:	d109      	bne.n	8012644 <USB_DriveVbus+0x44>
 8012630:	78fb      	ldrb	r3, [r7, #3]
 8012632:	2b01      	cmp	r3, #1
 8012634:	d106      	bne.n	8012644 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8012636:	68bb      	ldr	r3, [r7, #8]
 8012638:	68fa      	ldr	r2, [r7, #12]
 801263a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801263e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012642:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801264a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801264e:	d109      	bne.n	8012664 <USB_DriveVbus+0x64>
 8012650:	78fb      	ldrb	r3, [r7, #3]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d106      	bne.n	8012664 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	68fa      	ldr	r2, [r7, #12]
 801265a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 801265e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012662:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8012664:	2300      	movs	r3, #0
}
 8012666:	4618      	mov	r0, r3
 8012668:	3714      	adds	r7, #20
 801266a:	46bd      	mov	sp, r7
 801266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012670:	4770      	bx	lr

08012672 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012672:	b480      	push	{r7}
 8012674:	b085      	sub	sp, #20
 8012676:	af00      	add	r7, sp, #0
 8012678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 801267e:	2300      	movs	r3, #0
 8012680:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	0c5b      	lsrs	r3, r3, #17
 8012690:	f003 0303 	and.w	r3, r3, #3
}
 8012694:	4618      	mov	r0, r3
 8012696:	3714      	adds	r7, #20
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b085      	sub	sp, #20
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80126b2:	689b      	ldr	r3, [r3, #8]
 80126b4:	b29b      	uxth	r3, r3
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3714      	adds	r7, #20
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr
	...

080126c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b088      	sub	sp, #32
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	4608      	mov	r0, r1
 80126ce:	4611      	mov	r1, r2
 80126d0:	461a      	mov	r2, r3
 80126d2:	4603      	mov	r3, r0
 80126d4:	70fb      	strb	r3, [r7, #3]
 80126d6:	460b      	mov	r3, r1
 80126d8:	70bb      	strb	r3, [r7, #2]
 80126da:	4613      	mov	r3, r2
 80126dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80126de:	2300      	movs	r3, #0
 80126e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80126e6:	78fb      	ldrb	r3, [r7, #3]
 80126e8:	015a      	lsls	r2, r3, #5
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	4413      	add	r3, r2
 80126ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80126f2:	461a      	mov	r2, r3
 80126f4:	f04f 33ff 	mov.w	r3, #4294967295
 80126f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80126fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80126fe:	2b03      	cmp	r3, #3
 8012700:	d87e      	bhi.n	8012800 <USB_HC_Init+0x13c>
 8012702:	a201      	add	r2, pc, #4	; (adr r2, 8012708 <USB_HC_Init+0x44>)
 8012704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012708:	08012719 	.word	0x08012719
 801270c:	080127c3 	.word	0x080127c3
 8012710:	08012719 	.word	0x08012719
 8012714:	08012785 	.word	0x08012785
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012718:	78fb      	ldrb	r3, [r7, #3]
 801271a:	015a      	lsls	r2, r3, #5
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	4413      	add	r3, r2
 8012720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012724:	461a      	mov	r2, r3
 8012726:	f240 439d 	movw	r3, #1181	; 0x49d
 801272a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 801272c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8012730:	2b00      	cmp	r3, #0
 8012732:	da10      	bge.n	8012756 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8012734:	78fb      	ldrb	r3, [r7, #3]
 8012736:	015a      	lsls	r2, r3, #5
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	4413      	add	r3, r2
 801273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012740:	68db      	ldr	r3, [r3, #12]
 8012742:	78fa      	ldrb	r2, [r7, #3]
 8012744:	0151      	lsls	r1, r2, #5
 8012746:	693a      	ldr	r2, [r7, #16]
 8012748:	440a      	add	r2, r1
 801274a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801274e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012752:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8012754:	e057      	b.n	8012806 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801275e:	2b00      	cmp	r3, #0
 8012760:	d051      	beq.n	8012806 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8012762:	78fb      	ldrb	r3, [r7, #3]
 8012764:	015a      	lsls	r2, r3, #5
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	4413      	add	r3, r2
 801276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	78fa      	ldrb	r2, [r7, #3]
 8012772:	0151      	lsls	r1, r2, #5
 8012774:	693a      	ldr	r2, [r7, #16]
 8012776:	440a      	add	r2, r1
 8012778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801277c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8012780:	60d3      	str	r3, [r2, #12]
      break;
 8012782:	e040      	b.n	8012806 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8012784:	78fb      	ldrb	r3, [r7, #3]
 8012786:	015a      	lsls	r2, r3, #5
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	4413      	add	r3, r2
 801278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012790:	461a      	mov	r2, r3
 8012792:	f240 639d 	movw	r3, #1693	; 0x69d
 8012796:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8012798:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801279c:	2b00      	cmp	r3, #0
 801279e:	da34      	bge.n	801280a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80127a0:	78fb      	ldrb	r3, [r7, #3]
 80127a2:	015a      	lsls	r2, r3, #5
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	4413      	add	r3, r2
 80127a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80127ac:	68db      	ldr	r3, [r3, #12]
 80127ae:	78fa      	ldrb	r2, [r7, #3]
 80127b0:	0151      	lsls	r1, r2, #5
 80127b2:	693a      	ldr	r2, [r7, #16]
 80127b4:	440a      	add	r2, r1
 80127b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80127ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80127be:	60d3      	str	r3, [r2, #12]
      }

      break;
 80127c0:	e023      	b.n	801280a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80127c2:	78fb      	ldrb	r3, [r7, #3]
 80127c4:	015a      	lsls	r2, r3, #5
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	4413      	add	r3, r2
 80127ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80127ce:	461a      	mov	r2, r3
 80127d0:	f240 2325 	movw	r3, #549	; 0x225
 80127d4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80127d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	da17      	bge.n	801280e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80127de:	78fb      	ldrb	r3, [r7, #3]
 80127e0:	015a      	lsls	r2, r3, #5
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	4413      	add	r3, r2
 80127e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	78fa      	ldrb	r2, [r7, #3]
 80127ee:	0151      	lsls	r1, r2, #5
 80127f0:	693a      	ldr	r2, [r7, #16]
 80127f2:	440a      	add	r2, r1
 80127f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80127f8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80127fc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80127fe:	e006      	b.n	801280e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8012800:	2301      	movs	r3, #1
 8012802:	77fb      	strb	r3, [r7, #31]
      break;
 8012804:	e004      	b.n	8012810 <USB_HC_Init+0x14c>
      break;
 8012806:	bf00      	nop
 8012808:	e002      	b.n	8012810 <USB_HC_Init+0x14c>
      break;
 801280a:	bf00      	nop
 801280c:	e000      	b.n	8012810 <USB_HC_Init+0x14c>
      break;
 801280e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8012810:	78fb      	ldrb	r3, [r7, #3]
 8012812:	015a      	lsls	r2, r3, #5
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	4413      	add	r3, r2
 8012818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801281c:	68db      	ldr	r3, [r3, #12]
 801281e:	78fa      	ldrb	r2, [r7, #3]
 8012820:	0151      	lsls	r1, r2, #5
 8012822:	693a      	ldr	r2, [r7, #16]
 8012824:	440a      	add	r2, r1
 8012826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801282a:	f043 0302 	orr.w	r3, r3, #2
 801282e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8012830:	693b      	ldr	r3, [r7, #16]
 8012832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012836:	699a      	ldr	r2, [r3, #24]
 8012838:	78fb      	ldrb	r3, [r7, #3]
 801283a:	f003 030f 	and.w	r3, r3, #15
 801283e:	2101      	movs	r1, #1
 8012840:	fa01 f303 	lsl.w	r3, r1, r3
 8012844:	6939      	ldr	r1, [r7, #16]
 8012846:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801284a:	4313      	orrs	r3, r2
 801284c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	699b      	ldr	r3, [r3, #24]
 8012852:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 801285a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801285e:	2b00      	cmp	r3, #0
 8012860:	da03      	bge.n	801286a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8012862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012866:	61bb      	str	r3, [r7, #24]
 8012868:	e001      	b.n	801286e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 801286a:	2300      	movs	r3, #0
 801286c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f7ff feff 	bl	8012672 <USB_GetHostSpeed>
 8012874:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8012876:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801287a:	2b02      	cmp	r3, #2
 801287c:	d106      	bne.n	801288c <USB_HC_Init+0x1c8>
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	2b02      	cmp	r3, #2
 8012882:	d003      	beq.n	801288c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8012884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012888:	617b      	str	r3, [r7, #20]
 801288a:	e001      	b.n	8012890 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 801288c:	2300      	movs	r3, #0
 801288e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8012890:	787b      	ldrb	r3, [r7, #1]
 8012892:	059b      	lsls	r3, r3, #22
 8012894:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8012898:	78bb      	ldrb	r3, [r7, #2]
 801289a:	02db      	lsls	r3, r3, #11
 801289c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80128a0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80128a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80128a6:	049b      	lsls	r3, r3, #18
 80128a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80128ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80128ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80128b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80128b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80128b6:	69bb      	ldr	r3, [r7, #24]
 80128b8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80128ba:	78fb      	ldrb	r3, [r7, #3]
 80128bc:	0159      	lsls	r1, r3, #5
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	440b      	add	r3, r1
 80128c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80128c6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80128cc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80128ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80128d2:	2b03      	cmp	r3, #3
 80128d4:	d003      	beq.n	80128de <USB_HC_Init+0x21a>
 80128d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d10f      	bne.n	80128fe <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80128de:	78fb      	ldrb	r3, [r7, #3]
 80128e0:	015a      	lsls	r2, r3, #5
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	4413      	add	r3, r2
 80128e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	78fa      	ldrb	r2, [r7, #3]
 80128ee:	0151      	lsls	r1, r2, #5
 80128f0:	693a      	ldr	r2, [r7, #16]
 80128f2:	440a      	add	r2, r1
 80128f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80128f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80128fc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80128fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8012900:	4618      	mov	r0, r3
 8012902:	3720      	adds	r7, #32
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b08c      	sub	sp, #48	; 0x30
 801290c:	af02      	add	r7, sp, #8
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	60b9      	str	r1, [r7, #8]
 8012912:	4613      	mov	r3, r2
 8012914:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	785b      	ldrb	r3, [r3, #1]
 801291e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8012920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012924:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801292e:	2b00      	cmp	r3, #0
 8012930:	d02d      	beq.n	801298e <USB_HC_StartXfer+0x86>
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	791b      	ldrb	r3, [r3, #4]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d129      	bne.n	801298e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 801293a:	79fb      	ldrb	r3, [r7, #7]
 801293c:	2b01      	cmp	r3, #1
 801293e:	d117      	bne.n	8012970 <USB_HC_StartXfer+0x68>
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	79db      	ldrb	r3, [r3, #7]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d003      	beq.n	8012950 <USB_HC_StartXfer+0x48>
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	79db      	ldrb	r3, [r3, #7]
 801294c:	2b02      	cmp	r3, #2
 801294e:	d10f      	bne.n	8012970 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8012950:	69fb      	ldr	r3, [r7, #28]
 8012952:	015a      	lsls	r2, r3, #5
 8012954:	6a3b      	ldr	r3, [r7, #32]
 8012956:	4413      	add	r3, r2
 8012958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 801295c:	68db      	ldr	r3, [r3, #12]
 801295e:	69fa      	ldr	r2, [r7, #28]
 8012960:	0151      	lsls	r1, r2, #5
 8012962:	6a3a      	ldr	r2, [r7, #32]
 8012964:	440a      	add	r2, r1
 8012966:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 801296a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801296e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8012970:	79fb      	ldrb	r3, [r7, #7]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d10b      	bne.n	801298e <USB_HC_StartXfer+0x86>
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	795b      	ldrb	r3, [r3, #5]
 801297a:	2b01      	cmp	r3, #1
 801297c:	d107      	bne.n	801298e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	785b      	ldrb	r3, [r3, #1]
 8012982:	4619      	mov	r1, r3
 8012984:	68f8      	ldr	r0, [r7, #12]
 8012986:	f000 fa0f 	bl	8012da8 <USB_DoPing>
      return HAL_OK;
 801298a:	2300      	movs	r3, #0
 801298c:	e0f8      	b.n	8012b80 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	695b      	ldr	r3, [r3, #20]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d018      	beq.n	80129c8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8012996:	68bb      	ldr	r3, [r7, #8]
 8012998:	695b      	ldr	r3, [r3, #20]
 801299a:	68ba      	ldr	r2, [r7, #8]
 801299c:	8912      	ldrh	r2, [r2, #8]
 801299e:	4413      	add	r3, r2
 80129a0:	3b01      	subs	r3, #1
 80129a2:	68ba      	ldr	r2, [r7, #8]
 80129a4:	8912      	ldrh	r2, [r2, #8]
 80129a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80129aa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80129ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80129ae:	8b7b      	ldrh	r3, [r7, #26]
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d90b      	bls.n	80129cc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80129b4:	8b7b      	ldrh	r3, [r7, #26]
 80129b6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80129b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80129ba:	68ba      	ldr	r2, [r7, #8]
 80129bc:	8912      	ldrh	r2, [r2, #8]
 80129be:	fb03 f202 	mul.w	r2, r3, r2
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	611a      	str	r2, [r3, #16]
 80129c6:	e001      	b.n	80129cc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80129c8:	2301      	movs	r3, #1
 80129ca:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	78db      	ldrb	r3, [r3, #3]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d007      	beq.n	80129e4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80129d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80129d6:	68ba      	ldr	r2, [r7, #8]
 80129d8:	8912      	ldrh	r2, [r2, #8]
 80129da:	fb03 f202 	mul.w	r2, r3, r2
 80129de:	68bb      	ldr	r3, [r7, #8]
 80129e0:	611a      	str	r2, [r3, #16]
 80129e2:	e003      	b.n	80129ec <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	695a      	ldr	r2, [r3, #20]
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	691b      	ldr	r3, [r3, #16]
 80129f0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80129f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80129f6:	04d9      	lsls	r1, r3, #19
 80129f8:	4b63      	ldr	r3, [pc, #396]	; (8012b88 <USB_HC_StartXfer+0x280>)
 80129fa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80129fc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	7a9b      	ldrb	r3, [r3, #10]
 8012a02:	075b      	lsls	r3, r3, #29
 8012a04:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012a08:	69f9      	ldr	r1, [r7, #28]
 8012a0a:	0148      	lsls	r0, r1, #5
 8012a0c:	6a39      	ldr	r1, [r7, #32]
 8012a0e:	4401      	add	r1, r0
 8012a10:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012a14:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8012a16:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8012a18:	79fb      	ldrb	r3, [r7, #7]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d009      	beq.n	8012a32 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	68d9      	ldr	r1, [r3, #12]
 8012a22:	69fb      	ldr	r3, [r7, #28]
 8012a24:	015a      	lsls	r2, r3, #5
 8012a26:	6a3b      	ldr	r3, [r7, #32]
 8012a28:	4413      	add	r3, r2
 8012a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a2e:	460a      	mov	r2, r1
 8012a30:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8012a32:	6a3b      	ldr	r3, [r7, #32]
 8012a34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012a38:	689b      	ldr	r3, [r3, #8]
 8012a3a:	f003 0301 	and.w	r3, r3, #1
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	bf0c      	ite	eq
 8012a42:	2301      	moveq	r3, #1
 8012a44:	2300      	movne	r3, #0
 8012a46:	b2db      	uxtb	r3, r3
 8012a48:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	015a      	lsls	r2, r3, #5
 8012a4e:	6a3b      	ldr	r3, [r7, #32]
 8012a50:	4413      	add	r3, r2
 8012a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	69fa      	ldr	r2, [r7, #28]
 8012a5a:	0151      	lsls	r1, r2, #5
 8012a5c:	6a3a      	ldr	r2, [r7, #32]
 8012a5e:	440a      	add	r2, r1
 8012a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012a64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012a68:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8012a6a:	69fb      	ldr	r3, [r7, #28]
 8012a6c:	015a      	lsls	r2, r3, #5
 8012a6e:	6a3b      	ldr	r3, [r7, #32]
 8012a70:	4413      	add	r3, r2
 8012a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a76:	681a      	ldr	r2, [r3, #0]
 8012a78:	7e7b      	ldrb	r3, [r7, #25]
 8012a7a:	075b      	lsls	r3, r3, #29
 8012a7c:	69f9      	ldr	r1, [r7, #28]
 8012a7e:	0148      	lsls	r0, r1, #5
 8012a80:	6a39      	ldr	r1, [r7, #32]
 8012a82:	4401      	add	r1, r0
 8012a84:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8012a88:	4313      	orrs	r3, r2
 8012a8a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8012a8c:	69fb      	ldr	r3, [r7, #28]
 8012a8e:	015a      	lsls	r2, r3, #5
 8012a90:	6a3b      	ldr	r3, [r7, #32]
 8012a92:	4413      	add	r3, r2
 8012a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012aa2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	78db      	ldrb	r3, [r3, #3]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d004      	beq.n	8012ab6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012ab2:	613b      	str	r3, [r7, #16]
 8012ab4:	e003      	b.n	8012abe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012abc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012ac4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	015a      	lsls	r2, r3, #5
 8012aca:	6a3b      	ldr	r3, [r7, #32]
 8012acc:	4413      	add	r3, r2
 8012ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8012ad8:	79fb      	ldrb	r3, [r7, #7]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d001      	beq.n	8012ae2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	e04e      	b.n	8012b80 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	78db      	ldrb	r3, [r3, #3]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d149      	bne.n	8012b7e <USB_HC_StartXfer+0x276>
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	695b      	ldr	r3, [r3, #20]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d045      	beq.n	8012b7e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	79db      	ldrb	r3, [r3, #7]
 8012af6:	2b03      	cmp	r3, #3
 8012af8:	d830      	bhi.n	8012b5c <USB_HC_StartXfer+0x254>
 8012afa:	a201      	add	r2, pc, #4	; (adr r2, 8012b00 <USB_HC_StartXfer+0x1f8>)
 8012afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b00:	08012b11 	.word	0x08012b11
 8012b04:	08012b35 	.word	0x08012b35
 8012b08:	08012b11 	.word	0x08012b11
 8012b0c:	08012b35 	.word	0x08012b35
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	695b      	ldr	r3, [r3, #20]
 8012b14:	3303      	adds	r3, #3
 8012b16:	089b      	lsrs	r3, r3, #2
 8012b18:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8012b1a:	8afa      	ldrh	r2, [r7, #22]
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	429a      	cmp	r2, r3
 8012b24:	d91c      	bls.n	8012b60 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	699b      	ldr	r3, [r3, #24]
 8012b2a:	f043 0220 	orr.w	r2, r3, #32
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	619a      	str	r2, [r3, #24]
        }
        break;
 8012b32:	e015      	b.n	8012b60 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	695b      	ldr	r3, [r3, #20]
 8012b38:	3303      	adds	r3, #3
 8012b3a:	089b      	lsrs	r3, r3, #2
 8012b3c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8012b3e:	8afa      	ldrh	r2, [r7, #22]
 8012b40:	6a3b      	ldr	r3, [r7, #32]
 8012b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012b46:	691b      	ldr	r3, [r3, #16]
 8012b48:	b29b      	uxth	r3, r3
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d90a      	bls.n	8012b64 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	699b      	ldr	r3, [r3, #24]
 8012b52:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	619a      	str	r2, [r3, #24]
        }
        break;
 8012b5a:	e003      	b.n	8012b64 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8012b5c:	bf00      	nop
 8012b5e:	e002      	b.n	8012b66 <USB_HC_StartXfer+0x25e>
        break;
 8012b60:	bf00      	nop
 8012b62:	e000      	b.n	8012b66 <USB_HC_StartXfer+0x25e>
        break;
 8012b64:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	68d9      	ldr	r1, [r3, #12]
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	785a      	ldrb	r2, [r3, #1]
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	695b      	ldr	r3, [r3, #20]
 8012b72:	b29b      	uxth	r3, r3
 8012b74:	2000      	movs	r0, #0
 8012b76:	9000      	str	r0, [sp, #0]
 8012b78:	68f8      	ldr	r0, [r7, #12]
 8012b7a:	f7ff fb1d 	bl	80121b8 <USB_WritePacket>
  }

  return HAL_OK;
 8012b7e:	2300      	movs	r3, #0
}
 8012b80:	4618      	mov	r0, r3
 8012b82:	3728      	adds	r7, #40	; 0x28
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}
 8012b88:	1ff80000 	.word	0x1ff80000

08012b8c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b085      	sub	sp, #20
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012b9e:	695b      	ldr	r3, [r3, #20]
 8012ba0:	b29b      	uxth	r3, r3
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3714      	adds	r7, #20
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr

08012bae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8012bae:	b480      	push	{r7}
 8012bb0:	b089      	sub	sp, #36	; 0x24
 8012bb2:	af00      	add	r7, sp, #0
 8012bb4:	6078      	str	r0, [r7, #4]
 8012bb6:	460b      	mov	r3, r1
 8012bb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8012bbe:	78fb      	ldrb	r3, [r7, #3]
 8012bc0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8012bc6:	69bb      	ldr	r3, [r7, #24]
 8012bc8:	015a      	lsls	r2, r3, #5
 8012bca:	69fb      	ldr	r3, [r7, #28]
 8012bcc:	4413      	add	r3, r2
 8012bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	0c9b      	lsrs	r3, r3, #18
 8012bd6:	f003 0303 	and.w	r3, r3, #3
 8012bda:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	015a      	lsls	r2, r3, #5
 8012be0:	69fb      	ldr	r3, [r7, #28]
 8012be2:	4413      	add	r3, r2
 8012be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	0fdb      	lsrs	r3, r3, #31
 8012bec:	f003 0301 	and.w	r3, r3, #1
 8012bf0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	689b      	ldr	r3, [r3, #8]
 8012bf6:	f003 0320 	and.w	r3, r3, #32
 8012bfa:	2b20      	cmp	r3, #32
 8012bfc:	d104      	bne.n	8012c08 <USB_HC_Halt+0x5a>
 8012bfe:	693b      	ldr	r3, [r7, #16]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d101      	bne.n	8012c08 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8012c04:	2300      	movs	r3, #0
 8012c06:	e0c8      	b.n	8012d9a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d002      	beq.n	8012c14 <USB_HC_Halt+0x66>
 8012c0e:	697b      	ldr	r3, [r7, #20]
 8012c10:	2b02      	cmp	r3, #2
 8012c12:	d163      	bne.n	8012cdc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012c14:	69bb      	ldr	r3, [r7, #24]
 8012c16:	015a      	lsls	r2, r3, #5
 8012c18:	69fb      	ldr	r3, [r7, #28]
 8012c1a:	4413      	add	r3, r2
 8012c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	69ba      	ldr	r2, [r7, #24]
 8012c24:	0151      	lsls	r1, r2, #5
 8012c26:	69fa      	ldr	r2, [r7, #28]
 8012c28:	440a      	add	r2, r1
 8012c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012c2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012c32:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	689b      	ldr	r3, [r3, #8]
 8012c38:	f003 0320 	and.w	r3, r3, #32
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	f040 80ab 	bne.w	8012d98 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d133      	bne.n	8012cb6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012c4e:	69bb      	ldr	r3, [r7, #24]
 8012c50:	015a      	lsls	r2, r3, #5
 8012c52:	69fb      	ldr	r3, [r7, #28]
 8012c54:	4413      	add	r3, r2
 8012c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	69ba      	ldr	r2, [r7, #24]
 8012c5e:	0151      	lsls	r1, r2, #5
 8012c60:	69fa      	ldr	r2, [r7, #28]
 8012c62:	440a      	add	r2, r1
 8012c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012c68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012c6c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	015a      	lsls	r2, r3, #5
 8012c72:	69fb      	ldr	r3, [r7, #28]
 8012c74:	4413      	add	r3, r2
 8012c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	69ba      	ldr	r2, [r7, #24]
 8012c7e:	0151      	lsls	r1, r2, #5
 8012c80:	69fa      	ldr	r2, [r7, #28]
 8012c82:	440a      	add	r2, r1
 8012c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012c8c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	3301      	adds	r3, #1
 8012c92:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012c9a:	d81d      	bhi.n	8012cd8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012c9c:	69bb      	ldr	r3, [r7, #24]
 8012c9e:	015a      	lsls	r2, r3, #5
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	4413      	add	r3, r2
 8012ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012cb2:	d0ec      	beq.n	8012c8e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012cb4:	e070      	b.n	8012d98 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012cb6:	69bb      	ldr	r3, [r7, #24]
 8012cb8:	015a      	lsls	r2, r3, #5
 8012cba:	69fb      	ldr	r3, [r7, #28]
 8012cbc:	4413      	add	r3, r2
 8012cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	69ba      	ldr	r2, [r7, #24]
 8012cc6:	0151      	lsls	r1, r2, #5
 8012cc8:	69fa      	ldr	r2, [r7, #28]
 8012cca:	440a      	add	r2, r1
 8012ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012cd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012cd4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012cd6:	e05f      	b.n	8012d98 <USB_HC_Halt+0x1ea>
            break;
 8012cd8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012cda:	e05d      	b.n	8012d98 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8012cdc:	69bb      	ldr	r3, [r7, #24]
 8012cde:	015a      	lsls	r2, r3, #5
 8012ce0:	69fb      	ldr	r3, [r7, #28]
 8012ce2:	4413      	add	r3, r2
 8012ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	69ba      	ldr	r2, [r7, #24]
 8012cec:	0151      	lsls	r1, r2, #5
 8012cee:	69fa      	ldr	r2, [r7, #28]
 8012cf0:	440a      	add	r2, r1
 8012cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012cf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012cfa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8012cfc:	69fb      	ldr	r3, [r7, #28]
 8012cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012d02:	691b      	ldr	r3, [r3, #16]
 8012d04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d133      	bne.n	8012d74 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8012d0c:	69bb      	ldr	r3, [r7, #24]
 8012d0e:	015a      	lsls	r2, r3, #5
 8012d10:	69fb      	ldr	r3, [r7, #28]
 8012d12:	4413      	add	r3, r2
 8012d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	69ba      	ldr	r2, [r7, #24]
 8012d1c:	0151      	lsls	r1, r2, #5
 8012d1e:	69fa      	ldr	r2, [r7, #28]
 8012d20:	440a      	add	r2, r1
 8012d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012d26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012d2c:	69bb      	ldr	r3, [r7, #24]
 8012d2e:	015a      	lsls	r2, r3, #5
 8012d30:	69fb      	ldr	r3, [r7, #28]
 8012d32:	4413      	add	r3, r2
 8012d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	69ba      	ldr	r2, [r7, #24]
 8012d3c:	0151      	lsls	r1, r2, #5
 8012d3e:	69fa      	ldr	r2, [r7, #28]
 8012d40:	440a      	add	r2, r1
 8012d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012d46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012d4a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	3301      	adds	r3, #1
 8012d50:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012d58:	d81d      	bhi.n	8012d96 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012d5a:	69bb      	ldr	r3, [r7, #24]
 8012d5c:	015a      	lsls	r2, r3, #5
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	4413      	add	r3, r2
 8012d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d70:	d0ec      	beq.n	8012d4c <USB_HC_Halt+0x19e>
 8012d72:	e011      	b.n	8012d98 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012d74:	69bb      	ldr	r3, [r7, #24]
 8012d76:	015a      	lsls	r2, r3, #5
 8012d78:	69fb      	ldr	r3, [r7, #28]
 8012d7a:	4413      	add	r3, r2
 8012d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	69ba      	ldr	r2, [r7, #24]
 8012d84:	0151      	lsls	r1, r2, #5
 8012d86:	69fa      	ldr	r2, [r7, #28]
 8012d88:	440a      	add	r2, r1
 8012d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012d92:	6013      	str	r3, [r2, #0]
 8012d94:	e000      	b.n	8012d98 <USB_HC_Halt+0x1ea>
          break;
 8012d96:	bf00      	nop
    }
  }

  return HAL_OK;
 8012d98:	2300      	movs	r3, #0
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3724      	adds	r7, #36	; 0x24
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da4:	4770      	bx	lr
	...

08012da8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8012da8:	b480      	push	{r7}
 8012daa:	b087      	sub	sp, #28
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	460b      	mov	r3, r1
 8012db2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8012db8:	78fb      	ldrb	r3, [r7, #3]
 8012dba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	04da      	lsls	r2, r3, #19
 8012dc4:	4b15      	ldr	r3, [pc, #84]	; (8012e1c <USB_DoPing+0x74>)
 8012dc6:	4013      	ands	r3, r2
 8012dc8:	693a      	ldr	r2, [r7, #16]
 8012dca:	0151      	lsls	r1, r2, #5
 8012dcc:	697a      	ldr	r2, [r7, #20]
 8012dce:	440a      	add	r2, r1
 8012dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8012dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012dd8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	015a      	lsls	r2, r3, #5
 8012dde:	697b      	ldr	r3, [r7, #20]
 8012de0:	4413      	add	r3, r2
 8012de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012df0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012df8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8012dfa:	693b      	ldr	r3, [r7, #16]
 8012dfc:	015a      	lsls	r2, r3, #5
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	4413      	add	r3, r2
 8012e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012e06:	461a      	mov	r2, r3
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8012e0c:	2300      	movs	r3, #0
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	371c      	adds	r7, #28
 8012e12:	46bd      	mov	sp, r7
 8012e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e18:	4770      	bx	lr
 8012e1a:	bf00      	nop
 8012e1c:	1ff80000 	.word	0x1ff80000

08012e20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b088      	sub	sp, #32
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8012e30:	2300      	movs	r3, #0
 8012e32:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f7ff f8fe 	bl	8012036 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012e3a:	2110      	movs	r1, #16
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f7ff f957 	bl	80120f0 <USB_FlushTxFifo>
 8012e42:	4603      	mov	r3, r0
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d001      	beq.n	8012e4c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8012e48:	2301      	movs	r3, #1
 8012e4a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f7ff f983 	bl	8012158 <USB_FlushRxFifo>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d001      	beq.n	8012e5c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8012e58:	2301      	movs	r3, #1
 8012e5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	61bb      	str	r3, [r7, #24]
 8012e60:	e01f      	b.n	8012ea2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8012e62:	69bb      	ldr	r3, [r7, #24]
 8012e64:	015a      	lsls	r2, r3, #5
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	4413      	add	r3, r2
 8012e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012e78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012e80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012e88:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	015a      	lsls	r2, r3, #5
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	4413      	add	r3, r2
 8012e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012e96:	461a      	mov	r2, r3
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8012e9c:	69bb      	ldr	r3, [r7, #24]
 8012e9e:	3301      	adds	r3, #1
 8012ea0:	61bb      	str	r3, [r7, #24]
 8012ea2:	69bb      	ldr	r3, [r7, #24]
 8012ea4:	2b0f      	cmp	r3, #15
 8012ea6:	d9dc      	bls.n	8012e62 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	61bb      	str	r3, [r7, #24]
 8012eac:	e034      	b.n	8012f18 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8012eae:	69bb      	ldr	r3, [r7, #24]
 8012eb0:	015a      	lsls	r2, r3, #5
 8012eb2:	697b      	ldr	r3, [r7, #20]
 8012eb4:	4413      	add	r3, r2
 8012eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012ec4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8012ecc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012ed4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8012ed6:	69bb      	ldr	r3, [r7, #24]
 8012ed8:	015a      	lsls	r2, r3, #5
 8012eda:	697b      	ldr	r3, [r7, #20]
 8012edc:	4413      	add	r3, r2
 8012ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	693b      	ldr	r3, [r7, #16]
 8012ee6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	3301      	adds	r3, #1
 8012eec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012ef4:	d80c      	bhi.n	8012f10 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8012ef6:	69bb      	ldr	r3, [r7, #24]
 8012ef8:	015a      	lsls	r2, r3, #5
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	4413      	add	r3, r2
 8012efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f0c:	d0ec      	beq.n	8012ee8 <USB_StopHost+0xc8>
 8012f0e:	e000      	b.n	8012f12 <USB_StopHost+0xf2>
        break;
 8012f10:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8012f12:	69bb      	ldr	r3, [r7, #24]
 8012f14:	3301      	adds	r3, #1
 8012f16:	61bb      	str	r3, [r7, #24]
 8012f18:	69bb      	ldr	r3, [r7, #24]
 8012f1a:	2b0f      	cmp	r3, #15
 8012f1c:	d9c7      	bls.n	8012eae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012f24:	461a      	mov	r2, r3
 8012f26:	f04f 33ff 	mov.w	r3, #4294967295
 8012f2a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8012f32:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f7ff f86d 	bl	8012014 <USB_EnableGlobalInt>

  return ret;
 8012f3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	3720      	adds	r7, #32
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}

08012f44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012f48:	4904      	ldr	r1, [pc, #16]	; (8012f5c <MX_FATFS_Init+0x18>)
 8012f4a:	4805      	ldr	r0, [pc, #20]	; (8012f60 <MX_FATFS_Init+0x1c>)
 8012f4c:	f002 fce2 	bl	8015914 <FATFS_LinkDriver>
 8012f50:	4603      	mov	r3, r0
 8012f52:	461a      	mov	r2, r3
 8012f54:	4b03      	ldr	r3, [pc, #12]	; (8012f64 <MX_FATFS_Init+0x20>)
 8012f56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012f58:	bf00      	nop
 8012f5a:	bd80      	pop	{r7, pc}
 8012f5c:	20041aa0 	.word	0x20041aa0
 8012f60:	0801eb30 	.word	0x0801eb30
 8012f64:	20041a9c 	.word	0x20041a9c

08012f68 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012f72:	f000 f87b 	bl	801306c <BSP_SD_IsDetected>
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b01      	cmp	r3, #1
 8012f7a:	d001      	beq.n	8012f80 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012f7c:	2302      	movs	r3, #2
 8012f7e:	e012      	b.n	8012fa6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012f80:	480b      	ldr	r0, [pc, #44]	; (8012fb0 <BSP_SD_Init+0x48>)
 8012f82:	f7fb fa98 	bl	800e4b6 <HAL_SD_Init>
 8012f86:	4603      	mov	r3, r0
 8012f88:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012f8a:	79fb      	ldrb	r3, [r7, #7]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d109      	bne.n	8012fa4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012f94:	4806      	ldr	r0, [pc, #24]	; (8012fb0 <BSP_SD_Init+0x48>)
 8012f96:	f7fb fee9 	bl	800ed6c <HAL_SD_ConfigWideBusOperation>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d001      	beq.n	8012fa4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012fa4:	79fb      	ldrb	r3, [r7, #7]
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3708      	adds	r7, #8
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}
 8012fae:	bf00      	nop
 8012fb0:	200019c8 	.word	0x200019c8

08012fb4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b086      	sub	sp, #24
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	60f8      	str	r0, [r7, #12]
 8012fbc:	60b9      	str	r1, [r7, #8]
 8012fbe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	68ba      	ldr	r2, [r7, #8]
 8012fc8:	68f9      	ldr	r1, [r7, #12]
 8012fca:	4806      	ldr	r0, [pc, #24]	; (8012fe4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012fcc:	f7fb fb2c 	bl	800e628 <HAL_SD_ReadBlocks_DMA>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d001      	beq.n	8012fda <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3718      	adds	r7, #24
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}
 8012fe4:	200019c8 	.word	0x200019c8

08012fe8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b086      	sub	sp, #24
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	60f8      	str	r0, [r7, #12]
 8012ff0:	60b9      	str	r1, [r7, #8]
 8012ff2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	68ba      	ldr	r2, [r7, #8]
 8012ffc:	68f9      	ldr	r1, [r7, #12]
 8012ffe:	4806      	ldr	r0, [pc, #24]	; (8013018 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013000:	f7fb fbf4 	bl	800e7ec <HAL_SD_WriteBlocks_DMA>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	d001      	beq.n	801300e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801300a:	2301      	movs	r3, #1
 801300c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801300e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013010:	4618      	mov	r0, r3
 8013012:	3718      	adds	r7, #24
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}
 8013018:	200019c8 	.word	0x200019c8

0801301c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013020:	4805      	ldr	r0, [pc, #20]	; (8013038 <BSP_SD_GetCardState+0x1c>)
 8013022:	f7fb ff3d 	bl	800eea0 <HAL_SD_GetCardState>
 8013026:	4603      	mov	r3, r0
 8013028:	2b04      	cmp	r3, #4
 801302a:	bf14      	ite	ne
 801302c:	2301      	movne	r3, #1
 801302e:	2300      	moveq	r3, #0
 8013030:	b2db      	uxtb	r3, r3
}
 8013032:	4618      	mov	r0, r3
 8013034:	bd80      	pop	{r7, pc}
 8013036:	bf00      	nop
 8013038:	200019c8 	.word	0x200019c8

0801303c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b082      	sub	sp, #8
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8013044:	6879      	ldr	r1, [r7, #4]
 8013046:	4803      	ldr	r0, [pc, #12]	; (8013054 <BSP_SD_GetCardInfo+0x18>)
 8013048:	f7fb fe64 	bl	800ed14 <HAL_SD_GetCardInfo>
}
 801304c:	bf00      	nop
 801304e:	3708      	adds	r7, #8
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}
 8013054:	200019c8 	.word	0x200019c8

08013058 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013060:	f000 f9b2 	bl	80133c8 <BSP_SD_ReadCpltCallback>
}
 8013064:	bf00      	nop
 8013066:	3708      	adds	r7, #8
 8013068:	46bd      	mov	sp, r7
 801306a:	bd80      	pop	{r7, pc}

0801306c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b082      	sub	sp, #8
 8013070:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013072:	2301      	movs	r3, #1
 8013074:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013076:	f000 f80b 	bl	8013090 <BSP_PlatformIsDetected>
 801307a:	4603      	mov	r3, r0
 801307c:	2b00      	cmp	r3, #0
 801307e:	d101      	bne.n	8013084 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013080:	2300      	movs	r3, #0
 8013082:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013084:	79fb      	ldrb	r3, [r7, #7]
 8013086:	b2db      	uxtb	r3, r3
}
 8013088:	4618      	mov	r0, r3
 801308a:	3708      	adds	r7, #8
 801308c:	46bd      	mov	sp, r7
 801308e:	bd80      	pop	{r7, pc}

08013090 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013096:	2301      	movs	r3, #1
 8013098:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801309a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801309e:	4806      	ldr	r0, [pc, #24]	; (80130b8 <BSP_PlatformIsDetected+0x28>)
 80130a0:	f7f5 f986 	bl	80083b0 <HAL_GPIO_ReadPin>
 80130a4:	4603      	mov	r3, r0
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d001      	beq.n	80130ae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80130aa:	2300      	movs	r3, #0
 80130ac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80130ae:	79fb      	ldrb	r3, [r7, #7]
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	3708      	adds	r7, #8
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd80      	pop	{r7, pc}
 80130b8:	40020800 	.word	0x40020800

080130bc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80130c4:	f002 fc72 	bl	80159ac <osKernelSysTick>
 80130c8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80130ca:	e006      	b.n	80130da <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80130cc:	f7ff ffa6 	bl	801301c <BSP_SD_GetCardState>
 80130d0:	4603      	mov	r3, r0
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d101      	bne.n	80130da <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80130d6:	2300      	movs	r3, #0
 80130d8:	e009      	b.n	80130ee <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80130da:	f002 fc67 	bl	80159ac <osKernelSysTick>
 80130de:	4602      	mov	r2, r0
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	1ad3      	subs	r3, r2, r3
 80130e4:	687a      	ldr	r2, [r7, #4]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d8f0      	bhi.n	80130cc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80130ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3710      	adds	r7, #16
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}
	...

080130f8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	4603      	mov	r3, r0
 8013100:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013102:	4b0b      	ldr	r3, [pc, #44]	; (8013130 <SD_CheckStatus+0x38>)
 8013104:	2201      	movs	r2, #1
 8013106:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013108:	f7ff ff88 	bl	801301c <BSP_SD_GetCardState>
 801310c:	4603      	mov	r3, r0
 801310e:	2b00      	cmp	r3, #0
 8013110:	d107      	bne.n	8013122 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013112:	4b07      	ldr	r3, [pc, #28]	; (8013130 <SD_CheckStatus+0x38>)
 8013114:	781b      	ldrb	r3, [r3, #0]
 8013116:	b2db      	uxtb	r3, r3
 8013118:	f023 0301 	bic.w	r3, r3, #1
 801311c:	b2da      	uxtb	r2, r3
 801311e:	4b04      	ldr	r3, [pc, #16]	; (8013130 <SD_CheckStatus+0x38>)
 8013120:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013122:	4b03      	ldr	r3, [pc, #12]	; (8013130 <SD_CheckStatus+0x38>)
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	b2db      	uxtb	r3, r3
}
 8013128:	4618      	mov	r0, r3
 801312a:	3708      	adds	r7, #8
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}
 8013130:	2000004d 	.word	0x2000004d

08013134 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013134:	b590      	push	{r4, r7, lr}
 8013136:	b087      	sub	sp, #28
 8013138:	af00      	add	r7, sp, #0
 801313a:	4603      	mov	r3, r0
 801313c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801313e:	4b20      	ldr	r3, [pc, #128]	; (80131c0 <SD_initialize+0x8c>)
 8013140:	2201      	movs	r2, #1
 8013142:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8013144:	f002 fc26 	bl	8015994 <osKernelRunning>
 8013148:	4603      	mov	r3, r0
 801314a:	2b00      	cmp	r3, #0
 801314c:	d030      	beq.n	80131b0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801314e:	f7ff ff0b 	bl	8012f68 <BSP_SD_Init>
 8013152:	4603      	mov	r3, r0
 8013154:	2b00      	cmp	r3, #0
 8013156:	d107      	bne.n	8013168 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8013158:	79fb      	ldrb	r3, [r7, #7]
 801315a:	4618      	mov	r0, r3
 801315c:	f7ff ffcc 	bl	80130f8 <SD_CheckStatus>
 8013160:	4603      	mov	r3, r0
 8013162:	461a      	mov	r2, r3
 8013164:	4b16      	ldr	r3, [pc, #88]	; (80131c0 <SD_initialize+0x8c>)
 8013166:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8013168:	4b15      	ldr	r3, [pc, #84]	; (80131c0 <SD_initialize+0x8c>)
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	b2db      	uxtb	r3, r3
 801316e:	2b01      	cmp	r3, #1
 8013170:	d01e      	beq.n	80131b0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8013172:	4b14      	ldr	r3, [pc, #80]	; (80131c4 <SD_initialize+0x90>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d10e      	bne.n	8013198 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 801317a:	4b13      	ldr	r3, [pc, #76]	; (80131c8 <SD_initialize+0x94>)
 801317c:	f107 0408 	add.w	r4, r7, #8
 8013180:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013182:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8013186:	f107 0308 	add.w	r3, r7, #8
 801318a:	2100      	movs	r1, #0
 801318c:	4618      	mov	r0, r3
 801318e:	f002 fd09 	bl	8015ba4 <osMessageCreate>
 8013192:	4603      	mov	r3, r0
 8013194:	4a0b      	ldr	r2, [pc, #44]	; (80131c4 <SD_initialize+0x90>)
 8013196:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8013198:	4b0a      	ldr	r3, [pc, #40]	; (80131c4 <SD_initialize+0x90>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d107      	bne.n	80131b0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 80131a0:	4b07      	ldr	r3, [pc, #28]	; (80131c0 <SD_initialize+0x8c>)
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	b2db      	uxtb	r3, r3
 80131a6:	f043 0301 	orr.w	r3, r3, #1
 80131aa:	b2da      	uxtb	r2, r3
 80131ac:	4b04      	ldr	r3, [pc, #16]	; (80131c0 <SD_initialize+0x8c>)
 80131ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80131b0:	4b03      	ldr	r3, [pc, #12]	; (80131c0 <SD_initialize+0x8c>)
 80131b2:	781b      	ldrb	r3, [r3, #0]
 80131b4:	b2db      	uxtb	r3, r3
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	371c      	adds	r7, #28
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd90      	pop	{r4, r7, pc}
 80131be:	bf00      	nop
 80131c0:	2000004d 	.word	0x2000004d
 80131c4:	20041aa4 	.word	0x20041aa4
 80131c8:	0801cb90 	.word	0x0801cb90

080131cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	4603      	mov	r3, r0
 80131d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80131d6:	79fb      	ldrb	r3, [r7, #7]
 80131d8:	4618      	mov	r0, r3
 80131da:	f7ff ff8d 	bl	80130f8 <SD_CheckStatus>
 80131de:	4603      	mov	r3, r0
}
 80131e0:	4618      	mov	r0, r3
 80131e2:	3708      	adds	r7, #8
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}

080131e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b08a      	sub	sp, #40	; 0x28
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	60b9      	str	r1, [r7, #8]
 80131f0:	607a      	str	r2, [r7, #4]
 80131f2:	603b      	str	r3, [r7, #0]
 80131f4:	4603      	mov	r3, r0
 80131f6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80131f8:	2301      	movs	r3, #1
 80131fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80131fe:	f247 5030 	movw	r0, #30000	; 0x7530
 8013202:	f7ff ff5b 	bl	80130bc <SD_CheckStatusWithTimeout>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	da02      	bge.n	8013212 <SD_read+0x2a>
  {
    return res;
 801320c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013210:	e032      	b.n	8013278 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8013212:	683a      	ldr	r2, [r7, #0]
 8013214:	6879      	ldr	r1, [r7, #4]
 8013216:	68b8      	ldr	r0, [r7, #8]
 8013218:	f7ff fecc 	bl	8012fb4 <BSP_SD_ReadBlocks_DMA>
 801321c:	4603      	mov	r3, r0
 801321e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8013222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013226:	2b00      	cmp	r3, #0
 8013228:	d124      	bne.n	8013274 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801322a:	4b15      	ldr	r3, [pc, #84]	; (8013280 <SD_read+0x98>)
 801322c:	6819      	ldr	r1, [r3, #0]
 801322e:	f107 0314 	add.w	r3, r7, #20
 8013232:	f247 5230 	movw	r2, #30000	; 0x7530
 8013236:	4618      	mov	r0, r3
 8013238:	f002 fd1c 	bl	8015c74 <osMessageGet>

    if (event.status == osEventMessage)
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	2b10      	cmp	r3, #16
 8013240:	d118      	bne.n	8013274 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8013242:	69bb      	ldr	r3, [r7, #24]
 8013244:	2b01      	cmp	r3, #1
 8013246:	d115      	bne.n	8013274 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8013248:	f002 fbb0 	bl	80159ac <osKernelSysTick>
 801324c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801324e:	e008      	b.n	8013262 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013250:	f7ff fee4 	bl	801301c <BSP_SD_GetCardState>
 8013254:	4603      	mov	r3, r0
 8013256:	2b00      	cmp	r3, #0
 8013258:	d103      	bne.n	8013262 <SD_read+0x7a>
              {
                res = RES_OK;
 801325a:	2300      	movs	r3, #0
 801325c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8013260:	e008      	b.n	8013274 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8013262:	f002 fba3 	bl	80159ac <osKernelSysTick>
 8013266:	4602      	mov	r2, r0
 8013268:	6a3b      	ldr	r3, [r7, #32]
 801326a:	1ad3      	subs	r3, r2, r3
 801326c:	f247 522f 	movw	r2, #29999	; 0x752f
 8013270:	4293      	cmp	r3, r2
 8013272:	d9ed      	bls.n	8013250 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8013274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013278:	4618      	mov	r0, r3
 801327a:	3728      	adds	r7, #40	; 0x28
 801327c:	46bd      	mov	sp, r7
 801327e:	bd80      	pop	{r7, pc}
 8013280:	20041aa4 	.word	0x20041aa4

08013284 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b08a      	sub	sp, #40	; 0x28
 8013288:	af00      	add	r7, sp, #0
 801328a:	60b9      	str	r1, [r7, #8]
 801328c:	607a      	str	r2, [r7, #4]
 801328e:	603b      	str	r3, [r7, #0]
 8013290:	4603      	mov	r3, r0
 8013292:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013294:	2301      	movs	r3, #1
 8013296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801329a:	f247 5030 	movw	r0, #30000	; 0x7530
 801329e:	f7ff ff0d 	bl	80130bc <SD_CheckStatusWithTimeout>
 80132a2:	4603      	mov	r3, r0
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	da02      	bge.n	80132ae <SD_write+0x2a>
  {
    return res;
 80132a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132ac:	e02e      	b.n	801330c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80132ae:	683a      	ldr	r2, [r7, #0]
 80132b0:	6879      	ldr	r1, [r7, #4]
 80132b2:	68b8      	ldr	r0, [r7, #8]
 80132b4:	f7ff fe98 	bl	8012fe8 <BSP_SD_WriteBlocks_DMA>
 80132b8:	4603      	mov	r3, r0
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d124      	bne.n	8013308 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80132be:	4b15      	ldr	r3, [pc, #84]	; (8013314 <SD_write+0x90>)
 80132c0:	6819      	ldr	r1, [r3, #0]
 80132c2:	f107 0314 	add.w	r3, r7, #20
 80132c6:	f247 5230 	movw	r2, #30000	; 0x7530
 80132ca:	4618      	mov	r0, r3
 80132cc:	f002 fcd2 	bl	8015c74 <osMessageGet>

    if (event.status == osEventMessage)
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	2b10      	cmp	r3, #16
 80132d4:	d118      	bne.n	8013308 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80132d6:	69bb      	ldr	r3, [r7, #24]
 80132d8:	2b02      	cmp	r3, #2
 80132da:	d115      	bne.n	8013308 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80132dc:	f002 fb66 	bl	80159ac <osKernelSysTick>
 80132e0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80132e2:	e008      	b.n	80132f6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80132e4:	f7ff fe9a 	bl	801301c <BSP_SD_GetCardState>
 80132e8:	4603      	mov	r3, r0
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d103      	bne.n	80132f6 <SD_write+0x72>
          {
            res = RES_OK;
 80132ee:	2300      	movs	r3, #0
 80132f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80132f4:	e008      	b.n	8013308 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80132f6:	f002 fb59 	bl	80159ac <osKernelSysTick>
 80132fa:	4602      	mov	r2, r0
 80132fc:	6a3b      	ldr	r3, [r7, #32]
 80132fe:	1ad3      	subs	r3, r2, r3
 8013300:	f247 522f 	movw	r2, #29999	; 0x752f
 8013304:	4293      	cmp	r3, r2
 8013306:	d9ed      	bls.n	80132e4 <SD_write+0x60>
    }

  }
#endif

  return res;
 8013308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801330c:	4618      	mov	r0, r3
 801330e:	3728      	adds	r7, #40	; 0x28
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}
 8013314:	20041aa4 	.word	0x20041aa4

08013318 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b08c      	sub	sp, #48	; 0x30
 801331c:	af00      	add	r7, sp, #0
 801331e:	4603      	mov	r3, r0
 8013320:	603a      	str	r2, [r7, #0]
 8013322:	71fb      	strb	r3, [r7, #7]
 8013324:	460b      	mov	r3, r1
 8013326:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013328:	2301      	movs	r3, #1
 801332a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801332e:	4b25      	ldr	r3, [pc, #148]	; (80133c4 <SD_ioctl+0xac>)
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	b2db      	uxtb	r3, r3
 8013334:	f003 0301 	and.w	r3, r3, #1
 8013338:	2b00      	cmp	r3, #0
 801333a:	d001      	beq.n	8013340 <SD_ioctl+0x28>
 801333c:	2303      	movs	r3, #3
 801333e:	e03c      	b.n	80133ba <SD_ioctl+0xa2>

  switch (cmd)
 8013340:	79bb      	ldrb	r3, [r7, #6]
 8013342:	2b03      	cmp	r3, #3
 8013344:	d834      	bhi.n	80133b0 <SD_ioctl+0x98>
 8013346:	a201      	add	r2, pc, #4	; (adr r2, 801334c <SD_ioctl+0x34>)
 8013348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801334c:	0801335d 	.word	0x0801335d
 8013350:	08013365 	.word	0x08013365
 8013354:	0801337d 	.word	0x0801337d
 8013358:	08013397 	.word	0x08013397
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801335c:	2300      	movs	r3, #0
 801335e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013362:	e028      	b.n	80133b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013364:	f107 030c 	add.w	r3, r7, #12
 8013368:	4618      	mov	r0, r3
 801336a:	f7ff fe67 	bl	801303c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801336e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013374:	2300      	movs	r3, #0
 8013376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801337a:	e01c      	b.n	80133b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801337c:	f107 030c 	add.w	r3, r7, #12
 8013380:	4618      	mov	r0, r3
 8013382:	f7ff fe5b 	bl	801303c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013388:	b29a      	uxth	r2, r3
 801338a:	683b      	ldr	r3, [r7, #0]
 801338c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801338e:	2300      	movs	r3, #0
 8013390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013394:	e00f      	b.n	80133b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013396:	f107 030c 	add.w	r3, r7, #12
 801339a:	4618      	mov	r0, r3
 801339c:	f7ff fe4e 	bl	801303c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80133a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a2:	0a5a      	lsrs	r2, r3, #9
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80133a8:	2300      	movs	r3, #0
 80133aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80133ae:	e002      	b.n	80133b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80133b0:	2304      	movs	r3, #4
 80133b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80133b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80133ba:	4618      	mov	r0, r3
 80133bc:	3730      	adds	r7, #48	; 0x30
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}
 80133c2:	bf00      	nop
 80133c4:	2000004d 	.word	0x2000004d

080133c8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 80133cc:	4b04      	ldr	r3, [pc, #16]	; (80133e0 <BSP_SD_ReadCpltCallback+0x18>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	2200      	movs	r2, #0
 80133d2:	2101      	movs	r1, #1
 80133d4:	4618      	mov	r0, r3
 80133d6:	f002 fc0d 	bl	8015bf4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 80133da:	bf00      	nop
 80133dc:	bd80      	pop	{r7, pc}
 80133de:	bf00      	nop
 80133e0:	20041aa4 	.word	0x20041aa4

080133e4 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80133e4:	b480      	push	{r7}
 80133e6:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80133e8:	bf00      	nop
 80133ea:	46bd      	mov	sp, r7
 80133ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f0:	4770      	bx	lr

080133f2 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80133f2:	b590      	push	{r4, r7, lr}
 80133f4:	b089      	sub	sp, #36	; 0x24
 80133f6:	af04      	add	r7, sp, #16
 80133f8:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80133fa:	2301      	movs	r3, #1
 80133fc:	2202      	movs	r2, #2
 80133fe:	2102      	movs	r1, #2
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f000 fcd8 	bl	8013db6 <USBH_FindInterface>
 8013406:	4603      	mov	r3, r0
 8013408:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801340a:	7bfb      	ldrb	r3, [r7, #15]
 801340c:	2bff      	cmp	r3, #255	; 0xff
 801340e:	d002      	beq.n	8013416 <USBH_CDC_InterfaceInit+0x24>
 8013410:	7bfb      	ldrb	r3, [r7, #15]
 8013412:	2b01      	cmp	r3, #1
 8013414:	d901      	bls.n	801341a <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8013416:	2302      	movs	r3, #2
 8013418:	e13d      	b.n	8013696 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 801341a:	7bfb      	ldrb	r3, [r7, #15]
 801341c:	4619      	mov	r1, r3
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f000 fcad 	bl	8013d7e <USBH_SelectInterface>
 8013424:	4603      	mov	r3, r0
 8013426:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8013428:	7bbb      	ldrb	r3, [r7, #14]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d001      	beq.n	8013432 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 801342e:	2302      	movs	r3, #2
 8013430:	e131      	b.n	8013696 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8013438:	2050      	movs	r0, #80	; 0x50
 801343a:	f006 fd61 	bl	8019f00 <malloc>
 801343e:	4603      	mov	r3, r0
 8013440:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013448:	69db      	ldr	r3, [r3, #28]
 801344a:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d101      	bne.n	8013456 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8013452:	2302      	movs	r3, #2
 8013454:	e11f      	b.n	8013696 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8013456:	2250      	movs	r2, #80	; 0x50
 8013458:	2100      	movs	r1, #0
 801345a:	68b8      	ldr	r0, [r7, #8]
 801345c:	f006 fd6e 	bl	8019f3c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8013460:	7bfb      	ldrb	r3, [r7, #15]
 8013462:	687a      	ldr	r2, [r7, #4]
 8013464:	211a      	movs	r1, #26
 8013466:	fb01 f303 	mul.w	r3, r1, r3
 801346a:	4413      	add	r3, r2
 801346c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013470:	781b      	ldrb	r3, [r3, #0]
 8013472:	b25b      	sxtb	r3, r3
 8013474:	2b00      	cmp	r3, #0
 8013476:	da15      	bge.n	80134a4 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8013478:	7bfb      	ldrb	r3, [r7, #15]
 801347a:	687a      	ldr	r2, [r7, #4]
 801347c:	211a      	movs	r1, #26
 801347e:	fb01 f303 	mul.w	r3, r1, r3
 8013482:	4413      	add	r3, r2
 8013484:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013488:	781a      	ldrb	r2, [r3, #0]
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801348e:	7bfb      	ldrb	r3, [r7, #15]
 8013490:	687a      	ldr	r2, [r7, #4]
 8013492:	211a      	movs	r1, #26
 8013494:	fb01 f303 	mul.w	r3, r1, r3
 8013498:	4413      	add	r3, r2
 801349a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801349e:	881a      	ldrh	r2, [r3, #0]
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	785b      	ldrb	r3, [r3, #1]
 80134a8:	4619      	mov	r1, r3
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f002 f983 	bl	80157b6 <USBH_AllocPipe>
 80134b0:	4603      	mov	r3, r0
 80134b2:	461a      	mov	r2, r3
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	7819      	ldrb	r1, [r3, #0]
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	7858      	ldrb	r0, [r3, #1]
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80134cc:	68ba      	ldr	r2, [r7, #8]
 80134ce:	8952      	ldrh	r2, [r2, #10]
 80134d0:	9202      	str	r2, [sp, #8]
 80134d2:	2203      	movs	r2, #3
 80134d4:	9201      	str	r2, [sp, #4]
 80134d6:	9300      	str	r3, [sp, #0]
 80134d8:	4623      	mov	r3, r4
 80134da:	4602      	mov	r2, r0
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f002 f93b 	bl	8015758 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	2200      	movs	r2, #0
 80134e8:	4619      	mov	r1, r3
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f005 fa6e 	bl	80189cc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80134f0:	2300      	movs	r3, #0
 80134f2:	2200      	movs	r2, #0
 80134f4:	210a      	movs	r1, #10
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f000 fc5d 	bl	8013db6 <USBH_FindInterface>
 80134fc:	4603      	mov	r3, r0
 80134fe:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8013500:	7bfb      	ldrb	r3, [r7, #15]
 8013502:	2bff      	cmp	r3, #255	; 0xff
 8013504:	d002      	beq.n	801350c <USBH_CDC_InterfaceInit+0x11a>
 8013506:	7bfb      	ldrb	r3, [r7, #15]
 8013508:	2b01      	cmp	r3, #1
 801350a:	d901      	bls.n	8013510 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801350c:	2302      	movs	r3, #2
 801350e:	e0c2      	b.n	8013696 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8013510:	7bfb      	ldrb	r3, [r7, #15]
 8013512:	687a      	ldr	r2, [r7, #4]
 8013514:	211a      	movs	r1, #26
 8013516:	fb01 f303 	mul.w	r3, r1, r3
 801351a:	4413      	add	r3, r2
 801351c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	b25b      	sxtb	r3, r3
 8013524:	2b00      	cmp	r3, #0
 8013526:	da16      	bge.n	8013556 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8013528:	7bfb      	ldrb	r3, [r7, #15]
 801352a:	687a      	ldr	r2, [r7, #4]
 801352c:	211a      	movs	r1, #26
 801352e:	fb01 f303 	mul.w	r3, r1, r3
 8013532:	4413      	add	r3, r2
 8013534:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013538:	781a      	ldrb	r2, [r3, #0]
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801353e:	7bfb      	ldrb	r3, [r7, #15]
 8013540:	687a      	ldr	r2, [r7, #4]
 8013542:	211a      	movs	r1, #26
 8013544:	fb01 f303 	mul.w	r3, r1, r3
 8013548:	4413      	add	r3, r2
 801354a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801354e:	881a      	ldrh	r2, [r3, #0]
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	835a      	strh	r2, [r3, #26]
 8013554:	e015      	b.n	8013582 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8013556:	7bfb      	ldrb	r3, [r7, #15]
 8013558:	687a      	ldr	r2, [r7, #4]
 801355a:	211a      	movs	r1, #26
 801355c:	fb01 f303 	mul.w	r3, r1, r3
 8013560:	4413      	add	r3, r2
 8013562:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8013566:	781a      	ldrb	r2, [r3, #0]
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801356c:	7bfb      	ldrb	r3, [r7, #15]
 801356e:	687a      	ldr	r2, [r7, #4]
 8013570:	211a      	movs	r1, #26
 8013572:	fb01 f303 	mul.w	r3, r1, r3
 8013576:	4413      	add	r3, r2
 8013578:	f503 7354 	add.w	r3, r3, #848	; 0x350
 801357c:	881a      	ldrh	r2, [r3, #0]
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8013582:	7bfb      	ldrb	r3, [r7, #15]
 8013584:	687a      	ldr	r2, [r7, #4]
 8013586:	211a      	movs	r1, #26
 8013588:	fb01 f303 	mul.w	r3, r1, r3
 801358c:	4413      	add	r3, r2
 801358e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8013592:	781b      	ldrb	r3, [r3, #0]
 8013594:	b25b      	sxtb	r3, r3
 8013596:	2b00      	cmp	r3, #0
 8013598:	da16      	bge.n	80135c8 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801359a:	7bfb      	ldrb	r3, [r7, #15]
 801359c:	687a      	ldr	r2, [r7, #4]
 801359e:	211a      	movs	r1, #26
 80135a0:	fb01 f303 	mul.w	r3, r1, r3
 80135a4:	4413      	add	r3, r2
 80135a6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80135aa:	781a      	ldrb	r2, [r3, #0]
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80135b0:	7bfb      	ldrb	r3, [r7, #15]
 80135b2:	687a      	ldr	r2, [r7, #4]
 80135b4:	211a      	movs	r1, #26
 80135b6:	fb01 f303 	mul.w	r3, r1, r3
 80135ba:	4413      	add	r3, r2
 80135bc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80135c0:	881a      	ldrh	r2, [r3, #0]
 80135c2:	68bb      	ldr	r3, [r7, #8]
 80135c4:	835a      	strh	r2, [r3, #26]
 80135c6:	e015      	b.n	80135f4 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80135c8:	7bfb      	ldrb	r3, [r7, #15]
 80135ca:	687a      	ldr	r2, [r7, #4]
 80135cc:	211a      	movs	r1, #26
 80135ce:	fb01 f303 	mul.w	r3, r1, r3
 80135d2:	4413      	add	r3, r2
 80135d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80135d8:	781a      	ldrb	r2, [r3, #0]
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80135de:	7bfb      	ldrb	r3, [r7, #15]
 80135e0:	687a      	ldr	r2, [r7, #4]
 80135e2:	211a      	movs	r1, #26
 80135e4:	fb01 f303 	mul.w	r3, r1, r3
 80135e8:	4413      	add	r3, r2
 80135ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80135ee:	881a      	ldrh	r2, [r3, #0]
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	7b9b      	ldrb	r3, [r3, #14]
 80135f8:	4619      	mov	r1, r3
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f002 f8db 	bl	80157b6 <USBH_AllocPipe>
 8013600:	4603      	mov	r3, r0
 8013602:	461a      	mov	r2, r3
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	7bdb      	ldrb	r3, [r3, #15]
 801360c:	4619      	mov	r1, r3
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f002 f8d1 	bl	80157b6 <USBH_AllocPipe>
 8013614:	4603      	mov	r3, r0
 8013616:	461a      	mov	r2, r3
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	7b59      	ldrb	r1, [r3, #13]
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	7b98      	ldrb	r0, [r3, #14]
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8013630:	68ba      	ldr	r2, [r7, #8]
 8013632:	8b12      	ldrh	r2, [r2, #24]
 8013634:	9202      	str	r2, [sp, #8]
 8013636:	2202      	movs	r2, #2
 8013638:	9201      	str	r2, [sp, #4]
 801363a:	9300      	str	r3, [sp, #0]
 801363c:	4623      	mov	r3, r4
 801363e:	4602      	mov	r2, r0
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f002 f889 	bl	8015758 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	7b19      	ldrb	r1, [r3, #12]
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	7bd8      	ldrb	r0, [r3, #15]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801365a:	68ba      	ldr	r2, [r7, #8]
 801365c:	8b52      	ldrh	r2, [r2, #26]
 801365e:	9202      	str	r2, [sp, #8]
 8013660:	2202      	movs	r2, #2
 8013662:	9201      	str	r2, [sp, #4]
 8013664:	9300      	str	r3, [sp, #0]
 8013666:	4623      	mov	r3, r4
 8013668:	4602      	mov	r2, r0
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f002 f874 	bl	8015758 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	2200      	movs	r2, #0
 8013674:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8013678:	68bb      	ldr	r3, [r7, #8]
 801367a:	7b5b      	ldrb	r3, [r3, #13]
 801367c:	2200      	movs	r2, #0
 801367e:	4619      	mov	r1, r3
 8013680:	6878      	ldr	r0, [r7, #4]
 8013682:	f005 f9a3 	bl	80189cc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	7b1b      	ldrb	r3, [r3, #12]
 801368a:	2200      	movs	r2, #0
 801368c:	4619      	mov	r1, r3
 801368e:	6878      	ldr	r0, [r7, #4]
 8013690:	f005 f99c 	bl	80189cc <USBH_LL_SetToggle>

  return USBH_OK;
 8013694:	2300      	movs	r3, #0
}
 8013696:	4618      	mov	r0, r3
 8013698:	3714      	adds	r7, #20
 801369a:	46bd      	mov	sp, r7
 801369c:	bd90      	pop	{r4, r7, pc}

0801369e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 801369e:	b580      	push	{r7, lr}
 80136a0:	b084      	sub	sp, #16
 80136a2:	af00      	add	r7, sp, #0
 80136a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80136ac:	69db      	ldr	r3, [r3, #28]
 80136ae:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	781b      	ldrb	r3, [r3, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d00e      	beq.n	80136d6 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	781b      	ldrb	r3, [r3, #0]
 80136bc:	4619      	mov	r1, r3
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	f002 f869 	bl	8015796 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	781b      	ldrb	r3, [r3, #0]
 80136c8:	4619      	mov	r1, r3
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f002 f894 	bl	80157f8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	2200      	movs	r2, #0
 80136d4:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	7b1b      	ldrb	r3, [r3, #12]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d00e      	beq.n	80136fc <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	7b1b      	ldrb	r3, [r3, #12]
 80136e2:	4619      	mov	r1, r3
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f002 f856 	bl	8015796 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	7b1b      	ldrb	r3, [r3, #12]
 80136ee:	4619      	mov	r1, r3
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f002 f881 	bl	80157f8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	2200      	movs	r2, #0
 80136fa:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	7b5b      	ldrb	r3, [r3, #13]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d00e      	beq.n	8013722 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	7b5b      	ldrb	r3, [r3, #13]
 8013708:	4619      	mov	r1, r3
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f002 f843 	bl	8015796 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	7b5b      	ldrb	r3, [r3, #13]
 8013714:	4619      	mov	r1, r3
 8013716:	6878      	ldr	r0, [r7, #4]
 8013718:	f002 f86e 	bl	80157f8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	2200      	movs	r2, #0
 8013720:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013728:	69db      	ldr	r3, [r3, #28]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d00b      	beq.n	8013746 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013734:	69db      	ldr	r3, [r3, #28]
 8013736:	4618      	mov	r0, r3
 8013738:	f006 fbea 	bl	8019f10 <free>
    phost->pActiveClass->pData = 0U;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013742:	2200      	movs	r2, #0
 8013744:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8013746:	2300      	movs	r3, #0
}
 8013748:	4618      	mov	r0, r3
 801374a:	3710      	adds	r7, #16
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}

08013750 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b084      	sub	sp, #16
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801375e:	69db      	ldr	r3, [r3, #28]
 8013760:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	3340      	adds	r3, #64	; 0x40
 8013766:	4619      	mov	r1, r3
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f000 f8b2 	bl	80138d2 <GetLineCoding>
 801376e:	4603      	mov	r3, r0
 8013770:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8013772:	7afb      	ldrb	r3, [r7, #11]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d105      	bne.n	8013784 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801377e:	2102      	movs	r1, #2
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8013784:	7afb      	ldrb	r3, [r7, #11]
}
 8013786:	4618      	mov	r0, r3
 8013788:	3710      	adds	r7, #16
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
	...

08013790 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b084      	sub	sp, #16
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8013798:	2301      	movs	r3, #1
 801379a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 801379c:	2300      	movs	r3, #0
 801379e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80137a6:	69db      	ldr	r3, [r3, #28]
 80137a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80137b0:	2b04      	cmp	r3, #4
 80137b2:	d877      	bhi.n	80138a4 <USBH_CDC_Process+0x114>
 80137b4:	a201      	add	r2, pc, #4	; (adr r2, 80137bc <USBH_CDC_Process+0x2c>)
 80137b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137ba:	bf00      	nop
 80137bc:	080137d1 	.word	0x080137d1
 80137c0:	080137d7 	.word	0x080137d7
 80137c4:	08013807 	.word	0x08013807
 80137c8:	0801387b 	.word	0x0801387b
 80137cc:	08013889 	.word	0x08013889
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80137d0:	2300      	movs	r3, #0
 80137d2:	73fb      	strb	r3, [r7, #15]
      break;
 80137d4:	e06d      	b.n	80138b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137da:	4619      	mov	r1, r3
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f000 f897 	bl	8013910 <SetLineCoding>
 80137e2:	4603      	mov	r3, r0
 80137e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80137e6:	7bbb      	ldrb	r3, [r7, #14]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d104      	bne.n	80137f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	2202      	movs	r2, #2
 80137f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80137f4:	e058      	b.n	80138a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80137f6:	7bbb      	ldrb	r3, [r7, #14]
 80137f8:	2b01      	cmp	r3, #1
 80137fa:	d055      	beq.n	80138a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80137fc:	68bb      	ldr	r3, [r7, #8]
 80137fe:	2204      	movs	r2, #4
 8013800:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8013804:	e050      	b.n	80138a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	3340      	adds	r3, #64	; 0x40
 801380a:	4619      	mov	r1, r3
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f000 f860 	bl	80138d2 <GetLineCoding>
 8013812:	4603      	mov	r3, r0
 8013814:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8013816:	7bbb      	ldrb	r3, [r7, #14]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d126      	bne.n	801386a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	2200      	movs	r2, #0
 8013820:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8013824:	68bb      	ldr	r3, [r7, #8]
 8013826:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801382a:	68bb      	ldr	r3, [r7, #8]
 801382c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801382e:	791b      	ldrb	r3, [r3, #4]
 8013830:	429a      	cmp	r2, r3
 8013832:	d13b      	bne.n	80138ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801383a:	68bb      	ldr	r3, [r7, #8]
 801383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801383e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8013840:	429a      	cmp	r2, r3
 8013842:	d133      	bne.n	80138ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8013844:	68bb      	ldr	r3, [r7, #8]
 8013846:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801384e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8013850:	429a      	cmp	r2, r3
 8013852:	d12b      	bne.n	80138ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801385c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 801385e:	429a      	cmp	r2, r3
 8013860:	d124      	bne.n	80138ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8013862:	6878      	ldr	r0, [r7, #4]
 8013864:	f000 f982 	bl	8013b6c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8013868:	e020      	b.n	80138ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 801386a:	7bbb      	ldrb	r3, [r7, #14]
 801386c:	2b01      	cmp	r3, #1
 801386e:	d01d      	beq.n	80138ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8013870:	68bb      	ldr	r3, [r7, #8]
 8013872:	2204      	movs	r2, #4
 8013874:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8013878:	e018      	b.n	80138ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f000 f867 	bl	801394e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f000 f8f6 	bl	8013a72 <CDC_ProcessReception>
      break;
 8013886:	e014      	b.n	80138b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8013888:	2100      	movs	r1, #0
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f001 f97b 	bl	8014b86 <USBH_ClrFeature>
 8013890:	4603      	mov	r3, r0
 8013892:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8013894:	7bbb      	ldrb	r3, [r7, #14]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d10a      	bne.n	80138b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	2200      	movs	r2, #0
 801389e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80138a2:	e005      	b.n	80138b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80138a4:	bf00      	nop
 80138a6:	e004      	b.n	80138b2 <USBH_CDC_Process+0x122>
      break;
 80138a8:	bf00      	nop
 80138aa:	e002      	b.n	80138b2 <USBH_CDC_Process+0x122>
      break;
 80138ac:	bf00      	nop
 80138ae:	e000      	b.n	80138b2 <USBH_CDC_Process+0x122>
      break;
 80138b0:	bf00      	nop

  }

  return status;
 80138b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	3710      	adds	r7, #16
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}

080138bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80138bc:	b480      	push	{r7}
 80138be:	b083      	sub	sp, #12
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80138c4:	2300      	movs	r3, #0
}
 80138c6:	4618      	mov	r0, r3
 80138c8:	370c      	adds	r7, #12
 80138ca:	46bd      	mov	sp, r7
 80138cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d0:	4770      	bx	lr

080138d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80138d2:	b580      	push	{r7, lr}
 80138d4:	b082      	sub	sp, #8
 80138d6:	af00      	add	r7, sp, #0
 80138d8:	6078      	str	r0, [r7, #4]
 80138da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	22a1      	movs	r2, #161	; 0xa1
 80138e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2221      	movs	r2, #33	; 0x21
 80138e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2200      	movs	r2, #0
 80138ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	2200      	movs	r2, #0
 80138f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2207      	movs	r2, #7
 80138f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	2207      	movs	r2, #7
 80138fe:	4619      	mov	r1, r3
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f001 fbe7 	bl	80150d4 <USBH_CtlReq>
 8013906:	4603      	mov	r3, r0
}
 8013908:	4618      	mov	r0, r3
 801390a:	3708      	adds	r7, #8
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}

08013910 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b082      	sub	sp, #8
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	2221      	movs	r2, #33	; 0x21
 801391e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2220      	movs	r2, #32
 8013924:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2200      	movs	r2, #0
 801392a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	2200      	movs	r2, #0
 8013930:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	2207      	movs	r2, #7
 8013936:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	2207      	movs	r2, #7
 801393c:	4619      	mov	r1, r3
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f001 fbc8 	bl	80150d4 <USBH_CtlReq>
 8013944:	4603      	mov	r3, r0
}
 8013946:	4618      	mov	r0, r3
 8013948:	3708      	adds	r7, #8
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}

0801394e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 801394e:	b580      	push	{r7, lr}
 8013950:	b086      	sub	sp, #24
 8013952:	af02      	add	r7, sp, #8
 8013954:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801395c:	69db      	ldr	r3, [r3, #28]
 801395e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013960:	2300      	movs	r3, #0
 8013962:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801396a:	2b01      	cmp	r3, #1
 801396c:	d002      	beq.n	8013974 <CDC_ProcessTransmission+0x26>
 801396e:	2b02      	cmp	r3, #2
 8013970:	d023      	beq.n	80139ba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8013972:	e07a      	b.n	8013a6a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013978:	68fa      	ldr	r2, [r7, #12]
 801397a:	8b12      	ldrh	r2, [r2, #24]
 801397c:	4293      	cmp	r3, r2
 801397e:	d90b      	bls.n	8013998 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	69d9      	ldr	r1, [r3, #28]
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	8b1a      	ldrh	r2, [r3, #24]
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	7b5b      	ldrb	r3, [r3, #13]
 801398c:	2001      	movs	r0, #1
 801398e:	9000      	str	r0, [sp, #0]
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f001 fe9e 	bl	80156d2 <USBH_BulkSendData>
 8013996:	e00b      	b.n	80139b0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80139a0:	b29a      	uxth	r2, r3
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	7b5b      	ldrb	r3, [r3, #13]
 80139a6:	2001      	movs	r0, #1
 80139a8:	9000      	str	r0, [sp, #0]
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f001 fe91 	bl	80156d2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	2202      	movs	r2, #2
 80139b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80139b8:	e057      	b.n	8013a6a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	7b5b      	ldrb	r3, [r3, #13]
 80139be:	4619      	mov	r1, r3
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f004 ffd9 	bl	8018978 <USBH_LL_GetURBState>
 80139c6:	4603      	mov	r3, r0
 80139c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80139ca:	7afb      	ldrb	r3, [r7, #11]
 80139cc:	2b01      	cmp	r3, #1
 80139ce:	d136      	bne.n	8013a3e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139d4:	68fa      	ldr	r2, [r7, #12]
 80139d6:	8b12      	ldrh	r2, [r2, #24]
 80139d8:	4293      	cmp	r3, r2
 80139da:	d90e      	bls.n	80139fa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139e0:	68fa      	ldr	r2, [r7, #12]
 80139e2:	8b12      	ldrh	r2, [r2, #24]
 80139e4:	1a9a      	subs	r2, r3, r2
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	69db      	ldr	r3, [r3, #28]
 80139ee:	68fa      	ldr	r2, [r7, #12]
 80139f0:	8b12      	ldrh	r2, [r2, #24]
 80139f2:	441a      	add	r2, r3
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	61da      	str	r2, [r3, #28]
 80139f8:	e002      	b.n	8013a00 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	2200      	movs	r2, #0
 80139fe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d004      	beq.n	8013a12 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	2201      	movs	r2, #1
 8013a0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8013a10:	e006      	b.n	8013a20 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2200      	movs	r2, #0
 8013a16:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f000 f892 	bl	8013b44 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2204      	movs	r2, #4
 8013a24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013a34:	2200      	movs	r2, #0
 8013a36:	4619      	mov	r1, r3
 8013a38:	f002 f8dc 	bl	8015bf4 <osMessagePut>
      break;
 8013a3c:	e014      	b.n	8013a68 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8013a3e:	7afb      	ldrb	r3, [r7, #11]
 8013a40:	2b02      	cmp	r3, #2
 8013a42:	d111      	bne.n	8013a68 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	2201      	movs	r2, #1
 8013a48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2204      	movs	r2, #4
 8013a50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013a60:	2200      	movs	r2, #0
 8013a62:	4619      	mov	r1, r3
 8013a64:	f002 f8c6 	bl	8015bf4 <osMessagePut>
      break;
 8013a68:	bf00      	nop
  }
}
 8013a6a:	bf00      	nop
 8013a6c:	3710      	adds	r7, #16
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}

08013a72 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8013a72:	b580      	push	{r7, lr}
 8013a74:	b086      	sub	sp, #24
 8013a76:	af00      	add	r7, sp, #0
 8013a78:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013a80:	69db      	ldr	r3, [r3, #28]
 8013a82:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013a84:	2300      	movs	r3, #0
 8013a86:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8013a8e:	2b03      	cmp	r3, #3
 8013a90:	d002      	beq.n	8013a98 <CDC_ProcessReception+0x26>
 8013a92:	2b04      	cmp	r3, #4
 8013a94:	d00e      	beq.n	8013ab4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8013a96:	e051      	b.n	8013b3c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	6a19      	ldr	r1, [r3, #32]
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	8b5a      	ldrh	r2, [r3, #26]
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	7b1b      	ldrb	r3, [r3, #12]
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f001 fe39 	bl	801571c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8013aaa:	697b      	ldr	r3, [r7, #20]
 8013aac:	2204      	movs	r2, #4
 8013aae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8013ab2:	e043      	b.n	8013b3c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8013ab4:	697b      	ldr	r3, [r7, #20]
 8013ab6:	7b1b      	ldrb	r3, [r3, #12]
 8013ab8:	4619      	mov	r1, r3
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f004 ff5c 	bl	8018978 <USBH_LL_GetURBState>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8013ac4:	7cfb      	ldrb	r3, [r7, #19]
 8013ac6:	2b01      	cmp	r3, #1
 8013ac8:	d137      	bne.n	8013b3a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	7b1b      	ldrb	r3, [r3, #12]
 8013ace:	4619      	mov	r1, r3
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f004 febf 	bl	8018854 <USBH_LL_GetLastXferSize>
 8013ad6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013adc:	68fa      	ldr	r2, [r7, #12]
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d016      	beq.n	8013b10 <CDC_ProcessReception+0x9e>
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	8b5b      	ldrh	r3, [r3, #26]
 8013ae6:	461a      	mov	r2, r3
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	4293      	cmp	r3, r2
 8013aec:	d910      	bls.n	8013b10 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	1ad2      	subs	r2, r2, r3
 8013af6:	697b      	ldr	r3, [r7, #20]
 8013af8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	6a1a      	ldr	r2, [r3, #32]
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	441a      	add	r2, r3
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	2203      	movs	r2, #3
 8013b0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8013b0e:	e006      	b.n	8013b1e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8013b10:	697b      	ldr	r3, [r7, #20]
 8013b12:	2200      	movs	r2, #0
 8013b14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f000 f81d 	bl	8013b58 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	2204      	movs	r2, #4
 8013b22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013b32:	2200      	movs	r2, #0
 8013b34:	4619      	mov	r1, r3
 8013b36:	f002 f85d 	bl	8015bf4 <osMessagePut>
      break;
 8013b3a:	bf00      	nop
  }
}
 8013b3c:	bf00      	nop
 8013b3e:	3718      	adds	r7, #24
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}

08013b44 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8013b44:	b480      	push	{r7}
 8013b46:	b083      	sub	sp, #12
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013b4c:	bf00      	nop
 8013b4e:	370c      	adds	r7, #12
 8013b50:	46bd      	mov	sp, r7
 8013b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b56:	4770      	bx	lr

08013b58 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8013b58:	b480      	push	{r7}
 8013b5a:	b083      	sub	sp, #12
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013b60:	bf00      	nop
 8013b62:	370c      	adds	r7, #12
 8013b64:	46bd      	mov	sp, r7
 8013b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6a:	4770      	bx	lr

08013b6c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b083      	sub	sp, #12
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8013b74:	bf00      	nop
 8013b76:	370c      	adds	r7, #12
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr

08013b80 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8013b80:	b5b0      	push	{r4, r5, r7, lr}
 8013b82:	b090      	sub	sp, #64	; 0x40
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	60f8      	str	r0, [r7, #12]
 8013b88:	60b9      	str	r1, [r7, #8]
 8013b8a:	4613      	mov	r3, r2
 8013b8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d101      	bne.n	8013b98 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8013b94:	2302      	movs	r3, #2
 8013b96:	e04d      	b.n	8013c34 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	79fa      	ldrb	r2, [r7, #7]
 8013b9c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	2200      	movs	r2, #0
 8013bac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8013bb0:	68f8      	ldr	r0, [r7, #12]
 8013bb2:	f000 f847 	bl	8013c44 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	2200      	movs	r2, #0
 8013bba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2200      	movs	r2, #0
 8013bca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d003      	beq.n	8013be4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	68ba      	ldr	r2, [r7, #8]
 8013be0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8013be4:	4b15      	ldr	r3, [pc, #84]	; (8013c3c <USBH_Init+0xbc>)
 8013be6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8013bea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013bec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8013bf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013bf4:	2100      	movs	r1, #0
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f001 ffd4 	bl	8015ba4 <osMessageCreate>
 8013bfc:	4602      	mov	r2, r0
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8013c04:	4b0e      	ldr	r3, [pc, #56]	; (8013c40 <USBH_Init+0xc0>)
 8013c06:	f107 0414 	add.w	r4, r7, #20
 8013c0a:	461d      	mov	r5, r3
 8013c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013c10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013c14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8013c18:	f107 0314 	add.w	r3, r7, #20
 8013c1c:	68f9      	ldr	r1, [r7, #12]
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f001 fed4 	bl	80159cc <osThreadCreate>
 8013c24:	4602      	mov	r2, r0
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8013c2c:	68f8      	ldr	r0, [r7, #12]
 8013c2e:	f004 fd5d 	bl	80186ec <USBH_LL_Init>

  return USBH_OK;
 8013c32:	2300      	movs	r3, #0
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	3740      	adds	r7, #64	; 0x40
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8013c3c:	0801cbb0 	.word	0x0801cbb0
 8013c40:	0801cbc0 	.word	0x0801cbc0

08013c44 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b084      	sub	sp, #16
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8013c50:	2300      	movs	r3, #0
 8013c52:	60fb      	str	r3, [r7, #12]
 8013c54:	e009      	b.n	8013c6a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8013c56:	687a      	ldr	r2, [r7, #4]
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	33e0      	adds	r3, #224	; 0xe0
 8013c5c:	009b      	lsls	r3, r3, #2
 8013c5e:	4413      	add	r3, r2
 8013c60:	2200      	movs	r2, #0
 8013c62:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	3301      	adds	r3, #1
 8013c68:	60fb      	str	r3, [r7, #12]
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	2b0f      	cmp	r3, #15
 8013c6e:	d9f2      	bls.n	8013c56 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013c70:	2300      	movs	r3, #0
 8013c72:	60fb      	str	r3, [r7, #12]
 8013c74:	e009      	b.n	8013c8a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8013c76:	687a      	ldr	r2, [r7, #4]
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	4413      	add	r3, r2
 8013c7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013c80:	2200      	movs	r2, #0
 8013c82:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	3301      	adds	r3, #1
 8013c88:	60fb      	str	r3, [r7, #12]
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c90:	d3f1      	bcc.n	8013c76 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	2200      	movs	r2, #0
 8013c96:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2201      	movs	r2, #1
 8013ca2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2201      	movs	r2, #1
 8013cb0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	2240      	movs	r2, #64	; 0x40
 8013cb6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2200      	movs	r2, #0
 8013cbc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	2201      	movs	r2, #1
 8013cca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	331c      	adds	r3, #28
 8013ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013ce6:	2100      	movs	r1, #0
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f006 f927 	bl	8019f3c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013cf8:	2100      	movs	r1, #0
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f006 f91e 	bl	8019f3c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f203 3326 	addw	r3, r3, #806	; 0x326
 8013d06:	2212      	movs	r2, #18
 8013d08:	2100      	movs	r1, #0
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f006 f916 	bl	8019f3c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8013d16:	223e      	movs	r2, #62	; 0x3e
 8013d18:	2100      	movs	r1, #0
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f006 f90e 	bl	8019f3c <memset>

  return USBH_OK;
 8013d20:	2300      	movs	r3, #0
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	3710      	adds	r7, #16
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}

08013d2a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8013d2a:	b480      	push	{r7}
 8013d2c:	b085      	sub	sp, #20
 8013d2e:	af00      	add	r7, sp, #0
 8013d30:	6078      	str	r0, [r7, #4]
 8013d32:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8013d34:	2300      	movs	r3, #0
 8013d36:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d016      	beq.n	8013d6c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d10e      	bne.n	8013d66 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8013d4e:	1c59      	adds	r1, r3, #1
 8013d50:	687a      	ldr	r2, [r7, #4]
 8013d52:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8013d56:	687a      	ldr	r2, [r7, #4]
 8013d58:	33de      	adds	r3, #222	; 0xde
 8013d5a:	6839      	ldr	r1, [r7, #0]
 8013d5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8013d60:	2300      	movs	r3, #0
 8013d62:	73fb      	strb	r3, [r7, #15]
 8013d64:	e004      	b.n	8013d70 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8013d66:	2302      	movs	r3, #2
 8013d68:	73fb      	strb	r3, [r7, #15]
 8013d6a:	e001      	b.n	8013d70 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8013d6c:	2302      	movs	r3, #2
 8013d6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	3714      	adds	r7, #20
 8013d76:	46bd      	mov	sp, r7
 8013d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7c:	4770      	bx	lr

08013d7e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8013d7e:	b480      	push	{r7}
 8013d80:	b085      	sub	sp, #20
 8013d82:	af00      	add	r7, sp, #0
 8013d84:	6078      	str	r0, [r7, #4]
 8013d86:	460b      	mov	r3, r1
 8013d88:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8013d94:	78fa      	ldrb	r2, [r7, #3]
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d204      	bcs.n	8013da4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	78fa      	ldrb	r2, [r7, #3]
 8013d9e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8013da2:	e001      	b.n	8013da8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8013da4:	2302      	movs	r3, #2
 8013da6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3714      	adds	r7, #20
 8013dae:	46bd      	mov	sp, r7
 8013db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db4:	4770      	bx	lr

08013db6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8013db6:	b480      	push	{r7}
 8013db8:	b087      	sub	sp, #28
 8013dba:	af00      	add	r7, sp, #0
 8013dbc:	6078      	str	r0, [r7, #4]
 8013dbe:	4608      	mov	r0, r1
 8013dc0:	4611      	mov	r1, r2
 8013dc2:	461a      	mov	r2, r3
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	70fb      	strb	r3, [r7, #3]
 8013dc8:	460b      	mov	r3, r1
 8013dca:	70bb      	strb	r3, [r7, #2]
 8013dcc:	4613      	mov	r3, r2
 8013dce:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8013dde:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013de0:	e025      	b.n	8013e2e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8013de2:	7dfb      	ldrb	r3, [r7, #23]
 8013de4:	221a      	movs	r2, #26
 8013de6:	fb02 f303 	mul.w	r3, r2, r3
 8013dea:	3308      	adds	r3, #8
 8013dec:	68fa      	ldr	r2, [r7, #12]
 8013dee:	4413      	add	r3, r2
 8013df0:	3302      	adds	r3, #2
 8013df2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013df4:	693b      	ldr	r3, [r7, #16]
 8013df6:	795b      	ldrb	r3, [r3, #5]
 8013df8:	78fa      	ldrb	r2, [r7, #3]
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d002      	beq.n	8013e04 <USBH_FindInterface+0x4e>
 8013dfe:	78fb      	ldrb	r3, [r7, #3]
 8013e00:	2bff      	cmp	r3, #255	; 0xff
 8013e02:	d111      	bne.n	8013e28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013e04:	693b      	ldr	r3, [r7, #16]
 8013e06:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8013e08:	78ba      	ldrb	r2, [r7, #2]
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	d002      	beq.n	8013e14 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013e0e:	78bb      	ldrb	r3, [r7, #2]
 8013e10:	2bff      	cmp	r3, #255	; 0xff
 8013e12:	d109      	bne.n	8013e28 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8013e18:	787a      	ldrb	r2, [r7, #1]
 8013e1a:	429a      	cmp	r2, r3
 8013e1c:	d002      	beq.n	8013e24 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8013e1e:	787b      	ldrb	r3, [r7, #1]
 8013e20:	2bff      	cmp	r3, #255	; 0xff
 8013e22:	d101      	bne.n	8013e28 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8013e24:	7dfb      	ldrb	r3, [r7, #23]
 8013e26:	e006      	b.n	8013e36 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8013e28:	7dfb      	ldrb	r3, [r7, #23]
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8013e2e:	7dfb      	ldrb	r3, [r7, #23]
 8013e30:	2b01      	cmp	r3, #1
 8013e32:	d9d6      	bls.n	8013de2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8013e34:	23ff      	movs	r3, #255	; 0xff
}
 8013e36:	4618      	mov	r0, r3
 8013e38:	371c      	adds	r7, #28
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e40:	4770      	bx	lr

08013e42 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8013e42:	b580      	push	{r7, lr}
 8013e44:	b082      	sub	sp, #8
 8013e46:	af00      	add	r7, sp, #0
 8013e48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f004 fc8a 	bl	8018764 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8013e50:	2101      	movs	r1, #1
 8013e52:	6878      	ldr	r0, [r7, #4]
 8013e54:	f004 fda3 	bl	801899e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8013e58:	2300      	movs	r3, #0
}
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	3708      	adds	r7, #8
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}
	...

08013e64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b088      	sub	sp, #32
 8013e68:	af04      	add	r7, sp, #16
 8013e6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8013e6c:	2302      	movs	r3, #2
 8013e6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8013e70:	2300      	movs	r3, #0
 8013e72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8013e7a:	b2db      	uxtb	r3, r3
 8013e7c:	2b01      	cmp	r3, #1
 8013e7e:	d102      	bne.n	8013e86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2203      	movs	r2, #3
 8013e84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	781b      	ldrb	r3, [r3, #0]
 8013e8a:	b2db      	uxtb	r3, r3
 8013e8c:	2b0b      	cmp	r3, #11
 8013e8e:	f200 8247 	bhi.w	8014320 <USBH_Process+0x4bc>
 8013e92:	a201      	add	r2, pc, #4	; (adr r2, 8013e98 <USBH_Process+0x34>)
 8013e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e98:	08013ec9 	.word	0x08013ec9
 8013e9c:	08013f17 	.word	0x08013f17
 8013ea0:	08013f9b 	.word	0x08013f9b
 8013ea4:	0801429f 	.word	0x0801429f
 8013ea8:	08014321 	.word	0x08014321
 8013eac:	0801405b 	.word	0x0801405b
 8013eb0:	08014229 	.word	0x08014229
 8013eb4:	080140ad 	.word	0x080140ad
 8013eb8:	080140e9 	.word	0x080140e9
 8013ebc:	08014123 	.word	0x08014123
 8013ec0:	08014181 	.word	0x08014181
 8013ec4:	08014287 	.word	0x08014287
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8013ece:	b2db      	uxtb	r3, r3
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	f000 8227 	beq.w	8014324 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2201      	movs	r2, #1
 8013eda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8013edc:	20c8      	movs	r0, #200	; 0xc8
 8013ede:	f004 fda5 	bl	8018a2c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f004 fc9b 	bl	801881e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	2200      	movs	r2, #0
 8013eec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2201      	movs	r2, #1
 8013efc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	4619      	mov	r1, r3
 8013f10:	f001 fe70 	bl	8015bf4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8013f14:	e206      	b.n	8014324 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8013f1c:	2b01      	cmp	r3, #1
 8013f1e:	d107      	bne.n	8013f30 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2200      	movs	r2, #0
 8013f24:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2202      	movs	r2, #2
 8013f2c:	701a      	strb	r2, [r3, #0]
 8013f2e:	e025      	b.n	8013f7c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8013f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013f3a:	d914      	bls.n	8013f66 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8013f42:	3301      	adds	r3, #1
 8013f44:	b2da      	uxtb	r2, r3
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8013f52:	2b03      	cmp	r3, #3
 8013f54:	d903      	bls.n	8013f5e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	220d      	movs	r2, #13
 8013f5a:	701a      	strb	r2, [r3, #0]
 8013f5c:	e00e      	b.n	8013f7c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	2200      	movs	r2, #0
 8013f62:	701a      	strb	r2, [r3, #0]
 8013f64:	e00a      	b.n	8013f7c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8013f6c:	f103 020a 	add.w	r2, r3, #10
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8013f76:	200a      	movs	r0, #10
 8013f78:	f004 fd58 	bl	8018a2c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2201      	movs	r2, #1
 8013f80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013f90:	2200      	movs	r2, #0
 8013f92:	4619      	mov	r1, r3
 8013f94:	f001 fe2e 	bl	8015bf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8013f98:	e1cb      	b.n	8014332 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d005      	beq.n	8013fb0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013faa:	2104      	movs	r1, #4
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8013fb0:	2064      	movs	r0, #100	; 0x64
 8013fb2:	f004 fd3b 	bl	8018a2c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8013fb6:	6878      	ldr	r0, [r7, #4]
 8013fb8:	f004 fc0a 	bl	80187d0 <USBH_LL_GetSpeed>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	461a      	mov	r2, r3
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2205      	movs	r2, #5
 8013fca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8013fcc:	2100      	movs	r1, #0
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f001 fbf1 	bl	80157b6 <USBH_AllocPipe>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	461a      	mov	r2, r3
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8013fdc:	2180      	movs	r1, #128	; 0x80
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f001 fbe9 	bl	80157b6 <USBH_AllocPipe>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	461a      	mov	r2, r3
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	7919      	ldrb	r1, [r3, #4]
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8013ffc:	687a      	ldr	r2, [r7, #4]
 8013ffe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8014000:	b292      	uxth	r2, r2
 8014002:	9202      	str	r2, [sp, #8]
 8014004:	2200      	movs	r2, #0
 8014006:	9201      	str	r2, [sp, #4]
 8014008:	9300      	str	r3, [sp, #0]
 801400a:	4603      	mov	r3, r0
 801400c:	2280      	movs	r2, #128	; 0x80
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f001 fba2 	bl	8015758 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	7959      	ldrb	r1, [r3, #5]
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8014024:	687a      	ldr	r2, [r7, #4]
 8014026:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8014028:	b292      	uxth	r2, r2
 801402a:	9202      	str	r2, [sp, #8]
 801402c:	2200      	movs	r2, #0
 801402e:	9201      	str	r2, [sp, #4]
 8014030:	9300      	str	r3, [sp, #0]
 8014032:	4603      	mov	r3, r0
 8014034:	2200      	movs	r2, #0
 8014036:	6878      	ldr	r0, [r7, #4]
 8014038:	f001 fb8e 	bl	8015758 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	2201      	movs	r2, #1
 8014040:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014050:	2200      	movs	r2, #0
 8014052:	4619      	mov	r1, r3
 8014054:	f001 fdce 	bl	8015bf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8014058:	e16b      	b.n	8014332 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f000 f96e 	bl	801433c <USBH_HandleEnum>
 8014060:	4603      	mov	r3, r0
 8014062:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8014064:	7bbb      	ldrb	r3, [r7, #14]
 8014066:	b2db      	uxtb	r3, r3
 8014068:	2b00      	cmp	r3, #0
 801406a:	f040 815d 	bne.w	8014328 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2200      	movs	r2, #0
 8014072:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 801407c:	2b01      	cmp	r3, #1
 801407e:	d103      	bne.n	8014088 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2208      	movs	r2, #8
 8014084:	701a      	strb	r2, [r3, #0]
 8014086:	e002      	b.n	801408e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	2207      	movs	r2, #7
 801408c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	2205      	movs	r2, #5
 8014092:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80140a2:	2200      	movs	r2, #0
 80140a4:	4619      	mov	r1, r3
 80140a6:	f001 fda5 	bl	8015bf4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80140aa:	e13d      	b.n	8014328 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	f000 813a 	beq.w	801432c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80140be:	2101      	movs	r1, #1
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2208      	movs	r2, #8
 80140c8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2205      	movs	r2, #5
 80140ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80140de:	2200      	movs	r2, #0
 80140e0:	4619      	mov	r1, r3
 80140e2:	f001 fd87 	bl	8015bf4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80140e6:	e121      	b.n	801432c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	4619      	mov	r1, r3
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f000 fd00 	bl	8014af8 <USBH_SetCfg>
 80140f8:	4603      	mov	r3, r0
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d102      	bne.n	8014104 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	2209      	movs	r2, #9
 8014102:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	2201      	movs	r2, #1
 8014108:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014118:	2200      	movs	r2, #0
 801411a:	4619      	mov	r1, r3
 801411c:	f001 fd6a 	bl	8015bf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8014120:	e107      	b.n	8014332 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8014128:	f003 0320 	and.w	r3, r3, #32
 801412c:	2b00      	cmp	r3, #0
 801412e:	d015      	beq.n	801415c <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8014130:	2101      	movs	r1, #1
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f000 fd03 	bl	8014b3e <USBH_SetFeature>
 8014138:	4603      	mov	r3, r0
 801413a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801413c:	7bbb      	ldrb	r3, [r7, #14]
 801413e:	b2db      	uxtb	r3, r3
 8014140:	2b00      	cmp	r3, #0
 8014142:	d103      	bne.n	801414c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	220a      	movs	r2, #10
 8014148:	701a      	strb	r2, [r3, #0]
 801414a:	e00a      	b.n	8014162 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 801414c:	7bbb      	ldrb	r3, [r7, #14]
 801414e:	b2db      	uxtb	r3, r3
 8014150:	2b03      	cmp	r3, #3
 8014152:	d106      	bne.n	8014162 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	220a      	movs	r2, #10
 8014158:	701a      	strb	r2, [r3, #0]
 801415a:	e002      	b.n	8014162 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	220a      	movs	r2, #10
 8014160:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	2201      	movs	r2, #1
 8014166:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014176:	2200      	movs	r2, #0
 8014178:	4619      	mov	r1, r3
 801417a:	f001 fd3b 	bl	8015bf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801417e:	e0d8      	b.n	8014332 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8014186:	2b00      	cmp	r3, #0
 8014188:	d03f      	beq.n	801420a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	2200      	movs	r2, #0
 801418e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8014192:	2300      	movs	r3, #0
 8014194:	73fb      	strb	r3, [r7, #15]
 8014196:	e016      	b.n	80141c6 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8014198:	7bfa      	ldrb	r2, [r7, #15]
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	32de      	adds	r2, #222	; 0xde
 801419e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141a2:	791a      	ldrb	r2, [r3, #4]
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d108      	bne.n	80141c0 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 80141ae:	7bfa      	ldrb	r2, [r7, #15]
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	32de      	adds	r2, #222	; 0xde
 80141b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80141be:	e005      	b.n	80141cc <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80141c0:	7bfb      	ldrb	r3, [r7, #15]
 80141c2:	3301      	adds	r3, #1
 80141c4:	73fb      	strb	r3, [r7, #15]
 80141c6:	7bfb      	ldrb	r3, [r7, #15]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d0e5      	beq.n	8014198 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d016      	beq.n	8014204 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80141dc:	689b      	ldr	r3, [r3, #8]
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	4798      	blx	r3
 80141e2:	4603      	mov	r3, r0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d109      	bne.n	80141fc <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2206      	movs	r2, #6
 80141ec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80141f4:	2103      	movs	r1, #3
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	4798      	blx	r3
 80141fa:	e006      	b.n	801420a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	220d      	movs	r2, #13
 8014200:	701a      	strb	r2, [r3, #0]
 8014202:	e002      	b.n	801420a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	220d      	movs	r2, #13
 8014208:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	2205      	movs	r2, #5
 801420e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801421e:	2200      	movs	r2, #0
 8014220:	4619      	mov	r1, r3
 8014222:	f001 fce7 	bl	8015bf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8014226:	e084      	b.n	8014332 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801422e:	2b00      	cmp	r3, #0
 8014230:	d017      	beq.n	8014262 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014238:	691b      	ldr	r3, [r3, #16]
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	4798      	blx	r3
 801423e:	4603      	mov	r3, r0
 8014240:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8014242:	7bbb      	ldrb	r3, [r7, #14]
 8014244:	b2db      	uxtb	r3, r3
 8014246:	2b00      	cmp	r3, #0
 8014248:	d103      	bne.n	8014252 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	220b      	movs	r2, #11
 801424e:	701a      	strb	r2, [r3, #0]
 8014250:	e00a      	b.n	8014268 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 8014252:	7bbb      	ldrb	r3, [r7, #14]
 8014254:	b2db      	uxtb	r3, r3
 8014256:	2b02      	cmp	r3, #2
 8014258:	d106      	bne.n	8014268 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	220d      	movs	r2, #13
 801425e:	701a      	strb	r2, [r3, #0]
 8014260:	e002      	b.n	8014268 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	220d      	movs	r2, #13
 8014266:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	2205      	movs	r2, #5
 801426c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801427c:	2200      	movs	r2, #0
 801427e:	4619      	mov	r1, r3
 8014280:	f001 fcb8 	bl	8015bf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8014284:	e055      	b.n	8014332 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801428c:	2b00      	cmp	r3, #0
 801428e:	d04f      	beq.n	8014330 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8014296:	695b      	ldr	r3, [r3, #20]
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	4798      	blx	r3
      }
      break;
 801429c:	e048      	b.n	8014330 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	2200      	movs	r2, #0
 80142a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f7ff fccc 	bl	8013c44 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d009      	beq.n	80142ca <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80142bc:	68db      	ldr	r3, [r3, #12]
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2200      	movs	r2, #0
 80142c6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d005      	beq.n	80142e0 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80142da:	2105      	movs	r1, #5
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80142e6:	b2db      	uxtb	r3, r3
 80142e8:	2b01      	cmp	r3, #1
 80142ea:	d107      	bne.n	80142fc <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2200      	movs	r2, #0
 80142f0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f7ff fda4 	bl	8013e42 <USBH_Start>
 80142fa:	e002      	b.n	8014302 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f004 fa31 	bl	8018764 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	2201      	movs	r2, #1
 8014306:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014316:	2200      	movs	r2, #0
 8014318:	4619      	mov	r1, r3
 801431a:	f001 fc6b 	bl	8015bf4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801431e:	e008      	b.n	8014332 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8014320:	bf00      	nop
 8014322:	e006      	b.n	8014332 <USBH_Process+0x4ce>
      break;
 8014324:	bf00      	nop
 8014326:	e004      	b.n	8014332 <USBH_Process+0x4ce>
      break;
 8014328:	bf00      	nop
 801432a:	e002      	b.n	8014332 <USBH_Process+0x4ce>
    break;
 801432c:	bf00      	nop
 801432e:	e000      	b.n	8014332 <USBH_Process+0x4ce>
      break;
 8014330:	bf00      	nop
  }
  return USBH_OK;
 8014332:	2300      	movs	r3, #0
}
 8014334:	4618      	mov	r0, r3
 8014336:	3710      	adds	r7, #16
 8014338:	46bd      	mov	sp, r7
 801433a:	bd80      	pop	{r7, pc}

0801433c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b088      	sub	sp, #32
 8014340:	af04      	add	r7, sp, #16
 8014342:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8014344:	2301      	movs	r3, #1
 8014346:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8014348:	2301      	movs	r3, #1
 801434a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	785b      	ldrb	r3, [r3, #1]
 8014350:	2b07      	cmp	r3, #7
 8014352:	f200 8208 	bhi.w	8014766 <USBH_HandleEnum+0x42a>
 8014356:	a201      	add	r2, pc, #4	; (adr r2, 801435c <USBH_HandleEnum+0x20>)
 8014358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801435c:	0801437d 	.word	0x0801437d
 8014360:	0801443b 	.word	0x0801443b
 8014364:	080144a5 	.word	0x080144a5
 8014368:	08014533 	.word	0x08014533
 801436c:	0801459d 	.word	0x0801459d
 8014370:	0801460d 	.word	0x0801460d
 8014374:	080146a9 	.word	0x080146a9
 8014378:	08014727 	.word	0x08014727
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 801437c:	2108      	movs	r1, #8
 801437e:	6878      	ldr	r0, [r7, #4]
 8014380:	f000 faea 	bl	8014958 <USBH_Get_DevDesc>
 8014384:	4603      	mov	r3, r0
 8014386:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014388:	7bbb      	ldrb	r3, [r7, #14]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d130      	bne.n	80143f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2201      	movs	r2, #1
 801439c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	7919      	ldrb	r1, [r3, #4]
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80143ae:	687a      	ldr	r2, [r7, #4]
 80143b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80143b2:	b292      	uxth	r2, r2
 80143b4:	9202      	str	r2, [sp, #8]
 80143b6:	2200      	movs	r2, #0
 80143b8:	9201      	str	r2, [sp, #4]
 80143ba:	9300      	str	r3, [sp, #0]
 80143bc:	4603      	mov	r3, r0
 80143be:	2280      	movs	r2, #128	; 0x80
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f001 f9c9 	bl	8015758 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	7959      	ldrb	r1, [r3, #5]
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80143d6:	687a      	ldr	r2, [r7, #4]
 80143d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80143da:	b292      	uxth	r2, r2
 80143dc:	9202      	str	r2, [sp, #8]
 80143de:	2200      	movs	r2, #0
 80143e0:	9201      	str	r2, [sp, #4]
 80143e2:	9300      	str	r3, [sp, #0]
 80143e4:	4603      	mov	r3, r0
 80143e6:	2200      	movs	r2, #0
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f001 f9b5 	bl	8015758 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80143ee:	e1bc      	b.n	801476a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80143f0:	7bbb      	ldrb	r3, [r7, #14]
 80143f2:	2b03      	cmp	r3, #3
 80143f4:	f040 81b9 	bne.w	801476a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80143fe:	3301      	adds	r3, #1
 8014400:	b2da      	uxtb	r2, r3
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801440e:	2b03      	cmp	r3, #3
 8014410:	d903      	bls.n	801441a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	220d      	movs	r2, #13
 8014416:	701a      	strb	r2, [r3, #0]
      break;
 8014418:	e1a7      	b.n	801476a <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	795b      	ldrb	r3, [r3, #5]
 801441e:	4619      	mov	r1, r3
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f001 f9e9 	bl	80157f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	791b      	ldrb	r3, [r3, #4]
 801442a:	4619      	mov	r1, r3
 801442c:	6878      	ldr	r0, [r7, #4]
 801442e:	f001 f9e3 	bl	80157f8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	2200      	movs	r2, #0
 8014436:	701a      	strb	r2, [r3, #0]
      break;
 8014438:	e197      	b.n	801476a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801443a:	2112      	movs	r1, #18
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f000 fa8b 	bl	8014958 <USBH_Get_DevDesc>
 8014442:	4603      	mov	r3, r0
 8014444:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8014446:	7bbb      	ldrb	r3, [r7, #14]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d103      	bne.n	8014454 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2202      	movs	r2, #2
 8014450:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8014452:	e18c      	b.n	801476e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014454:	7bbb      	ldrb	r3, [r7, #14]
 8014456:	2b03      	cmp	r3, #3
 8014458:	f040 8189 	bne.w	801476e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014462:	3301      	adds	r3, #1
 8014464:	b2da      	uxtb	r2, r3
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8014472:	2b03      	cmp	r3, #3
 8014474:	d903      	bls.n	801447e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	220d      	movs	r2, #13
 801447a:	701a      	strb	r2, [r3, #0]
      break;
 801447c:	e177      	b.n	801476e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	795b      	ldrb	r3, [r3, #5]
 8014482:	4619      	mov	r1, r3
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f001 f9b7 	bl	80157f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	791b      	ldrb	r3, [r3, #4]
 801448e:	4619      	mov	r1, r3
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f001 f9b1 	bl	80157f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2200      	movs	r2, #0
 801449a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	2200      	movs	r2, #0
 80144a0:	701a      	strb	r2, [r3, #0]
      break;
 80144a2:	e164      	b.n	801476e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80144a4:	2101      	movs	r1, #1
 80144a6:	6878      	ldr	r0, [r7, #4]
 80144a8:	f000 fb02 	bl	8014ab0 <USBH_SetAddress>
 80144ac:	4603      	mov	r3, r0
 80144ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80144b0:	7bbb      	ldrb	r3, [r7, #14]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d132      	bne.n	801451c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80144b6:	2002      	movs	r0, #2
 80144b8:	f004 fab8 	bl	8018a2c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2201      	movs	r2, #1
 80144c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2203      	movs	r2, #3
 80144c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	7919      	ldrb	r1, [r3, #4]
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80144da:	687a      	ldr	r2, [r7, #4]
 80144dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80144de:	b292      	uxth	r2, r2
 80144e0:	9202      	str	r2, [sp, #8]
 80144e2:	2200      	movs	r2, #0
 80144e4:	9201      	str	r2, [sp, #4]
 80144e6:	9300      	str	r3, [sp, #0]
 80144e8:	4603      	mov	r3, r0
 80144ea:	2280      	movs	r2, #128	; 0x80
 80144ec:	6878      	ldr	r0, [r7, #4]
 80144ee:	f001 f933 	bl	8015758 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	7959      	ldrb	r1, [r3, #5]
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8014502:	687a      	ldr	r2, [r7, #4]
 8014504:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8014506:	b292      	uxth	r2, r2
 8014508:	9202      	str	r2, [sp, #8]
 801450a:	2200      	movs	r2, #0
 801450c:	9201      	str	r2, [sp, #4]
 801450e:	9300      	str	r3, [sp, #0]
 8014510:	4603      	mov	r3, r0
 8014512:	2200      	movs	r2, #0
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f001 f91f 	bl	8015758 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801451a:	e12a      	b.n	8014772 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801451c:	7bbb      	ldrb	r3, [r7, #14]
 801451e:	2b03      	cmp	r3, #3
 8014520:	f040 8127 	bne.w	8014772 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	220d      	movs	r2, #13
 8014528:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2200      	movs	r2, #0
 801452e:	705a      	strb	r2, [r3, #1]
      break;
 8014530:	e11f      	b.n	8014772 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8014532:	2109      	movs	r1, #9
 8014534:	6878      	ldr	r0, [r7, #4]
 8014536:	f000 fa37 	bl	80149a8 <USBH_Get_CfgDesc>
 801453a:	4603      	mov	r3, r0
 801453c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801453e:	7bbb      	ldrb	r3, [r7, #14]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d103      	bne.n	801454c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2204      	movs	r2, #4
 8014548:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801454a:	e114      	b.n	8014776 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801454c:	7bbb      	ldrb	r3, [r7, #14]
 801454e:	2b03      	cmp	r3, #3
 8014550:	f040 8111 	bne.w	8014776 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801455a:	3301      	adds	r3, #1
 801455c:	b2da      	uxtb	r2, r3
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801456a:	2b03      	cmp	r3, #3
 801456c:	d903      	bls.n	8014576 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	220d      	movs	r2, #13
 8014572:	701a      	strb	r2, [r3, #0]
      break;
 8014574:	e0ff      	b.n	8014776 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	795b      	ldrb	r3, [r3, #5]
 801457a:	4619      	mov	r1, r3
 801457c:	6878      	ldr	r0, [r7, #4]
 801457e:	f001 f93b 	bl	80157f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	791b      	ldrb	r3, [r3, #4]
 8014586:	4619      	mov	r1, r3
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f001 f935 	bl	80157f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	2200      	movs	r2, #0
 8014592:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2200      	movs	r2, #0
 8014598:	701a      	strb	r2, [r3, #0]
      break;
 801459a:	e0ec      	b.n	8014776 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80145a2:	4619      	mov	r1, r3
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f000 f9ff 	bl	80149a8 <USBH_Get_CfgDesc>
 80145aa:	4603      	mov	r3, r0
 80145ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80145ae:	7bbb      	ldrb	r3, [r7, #14]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d103      	bne.n	80145bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2205      	movs	r2, #5
 80145b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80145ba:	e0de      	b.n	801477a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80145bc:	7bbb      	ldrb	r3, [r7, #14]
 80145be:	2b03      	cmp	r3, #3
 80145c0:	f040 80db 	bne.w	801477a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80145ca:	3301      	adds	r3, #1
 80145cc:	b2da      	uxtb	r2, r3
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80145da:	2b03      	cmp	r3, #3
 80145dc:	d903      	bls.n	80145e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	220d      	movs	r2, #13
 80145e2:	701a      	strb	r2, [r3, #0]
      break;
 80145e4:	e0c9      	b.n	801477a <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	795b      	ldrb	r3, [r3, #5]
 80145ea:	4619      	mov	r1, r3
 80145ec:	6878      	ldr	r0, [r7, #4]
 80145ee:	f001 f903 	bl	80157f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	791b      	ldrb	r3, [r3, #4]
 80145f6:	4619      	mov	r1, r3
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f001 f8fd 	bl	80157f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2200      	movs	r2, #0
 8014602:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2200      	movs	r2, #0
 8014608:	701a      	strb	r2, [r3, #0]
      break;
 801460a:	e0b6      	b.n	801477a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8014612:	2b00      	cmp	r3, #0
 8014614:	d036      	beq.n	8014684 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8014622:	23ff      	movs	r3, #255	; 0xff
 8014624:	6878      	ldr	r0, [r7, #4]
 8014626:	f000 f9e3 	bl	80149f0 <USBH_Get_StringDesc>
 801462a:	4603      	mov	r3, r0
 801462c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801462e:	7bbb      	ldrb	r3, [r7, #14]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d111      	bne.n	8014658 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2206      	movs	r2, #6
 8014638:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	2205      	movs	r2, #5
 801463e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801464e:	2200      	movs	r2, #0
 8014650:	4619      	mov	r1, r3
 8014652:	f001 facf 	bl	8015bf4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8014656:	e092      	b.n	801477e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014658:	7bbb      	ldrb	r3, [r7, #14]
 801465a:	2b03      	cmp	r3, #3
 801465c:	f040 808f 	bne.w	801477e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2206      	movs	r2, #6
 8014664:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2205      	movs	r2, #5
 801466a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801467a:	2200      	movs	r2, #0
 801467c:	4619      	mov	r1, r3
 801467e:	f001 fab9 	bl	8015bf4 <osMessagePut>
      break;
 8014682:	e07c      	b.n	801477e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2206      	movs	r2, #6
 8014688:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	2205      	movs	r2, #5
 801468e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801469e:	2200      	movs	r2, #0
 80146a0:	4619      	mov	r1, r3
 80146a2:	f001 faa7 	bl	8015bf4 <osMessagePut>
      break;
 80146a6:	e06a      	b.n	801477e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d027      	beq.n	8014702 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80146be:	23ff      	movs	r3, #255	; 0xff
 80146c0:	6878      	ldr	r0, [r7, #4]
 80146c2:	f000 f995 	bl	80149f0 <USBH_Get_StringDesc>
 80146c6:	4603      	mov	r3, r0
 80146c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80146ca:	7bbb      	ldrb	r3, [r7, #14]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d103      	bne.n	80146d8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2207      	movs	r2, #7
 80146d4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80146d6:	e054      	b.n	8014782 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80146d8:	7bbb      	ldrb	r3, [r7, #14]
 80146da:	2b03      	cmp	r3, #3
 80146dc:	d151      	bne.n	8014782 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	2207      	movs	r2, #7
 80146e2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2205      	movs	r2, #5
 80146e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80146f8:	2200      	movs	r2, #0
 80146fa:	4619      	mov	r1, r3
 80146fc:	f001 fa7a 	bl	8015bf4 <osMessagePut>
      break;
 8014700:	e03f      	b.n	8014782 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	2207      	movs	r2, #7
 8014706:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2205      	movs	r2, #5
 801470c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801471c:	2200      	movs	r2, #0
 801471e:	4619      	mov	r1, r3
 8014720:	f001 fa68 	bl	8015bf4 <osMessagePut>
      break;
 8014724:	e02d      	b.n	8014782 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 801472c:	2b00      	cmp	r3, #0
 801472e:	d017      	beq.n	8014760 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801473c:	23ff      	movs	r3, #255	; 0xff
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f000 f956 	bl	80149f0 <USBH_Get_StringDesc>
 8014744:	4603      	mov	r3, r0
 8014746:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8014748:	7bbb      	ldrb	r3, [r7, #14]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d102      	bne.n	8014754 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801474e:	2300      	movs	r3, #0
 8014750:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8014752:	e018      	b.n	8014786 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8014754:	7bbb      	ldrb	r3, [r7, #14]
 8014756:	2b03      	cmp	r3, #3
 8014758:	d115      	bne.n	8014786 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 801475a:	2300      	movs	r3, #0
 801475c:	73fb      	strb	r3, [r7, #15]
      break;
 801475e:	e012      	b.n	8014786 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8014760:	2300      	movs	r3, #0
 8014762:	73fb      	strb	r3, [r7, #15]
      break;
 8014764:	e00f      	b.n	8014786 <USBH_HandleEnum+0x44a>

    default:
      break;
 8014766:	bf00      	nop
 8014768:	e00e      	b.n	8014788 <USBH_HandleEnum+0x44c>
      break;
 801476a:	bf00      	nop
 801476c:	e00c      	b.n	8014788 <USBH_HandleEnum+0x44c>
      break;
 801476e:	bf00      	nop
 8014770:	e00a      	b.n	8014788 <USBH_HandleEnum+0x44c>
      break;
 8014772:	bf00      	nop
 8014774:	e008      	b.n	8014788 <USBH_HandleEnum+0x44c>
      break;
 8014776:	bf00      	nop
 8014778:	e006      	b.n	8014788 <USBH_HandleEnum+0x44c>
      break;
 801477a:	bf00      	nop
 801477c:	e004      	b.n	8014788 <USBH_HandleEnum+0x44c>
      break;
 801477e:	bf00      	nop
 8014780:	e002      	b.n	8014788 <USBH_HandleEnum+0x44c>
      break;
 8014782:	bf00      	nop
 8014784:	e000      	b.n	8014788 <USBH_HandleEnum+0x44c>
      break;
 8014786:	bf00      	nop
  }
  return Status;
 8014788:	7bfb      	ldrb	r3, [r7, #15]
}
 801478a:	4618      	mov	r0, r3
 801478c:	3710      	adds	r7, #16
 801478e:	46bd      	mov	sp, r7
 8014790:	bd80      	pop	{r7, pc}
 8014792:	bf00      	nop

08014794 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8014794:	b480      	push	{r7}
 8014796:	b083      	sub	sp, #12
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	683a      	ldr	r2, [r7, #0]
 80147a2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80147a6:	bf00      	nop
 80147a8:	370c      	adds	r7, #12
 80147aa:	46bd      	mov	sp, r7
 80147ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b0:	4770      	bx	lr

080147b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80147b2:	b580      	push	{r7, lr}
 80147b4:	b082      	sub	sp, #8
 80147b6:	af00      	add	r7, sp, #0
 80147b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80147c0:	1c5a      	adds	r2, r3, #1
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f000 f804 	bl	80147d6 <USBH_HandleSof>
}
 80147ce:	bf00      	nop
 80147d0:	3708      	adds	r7, #8
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}

080147d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80147d6:	b580      	push	{r7, lr}
 80147d8:	b082      	sub	sp, #8
 80147da:	af00      	add	r7, sp, #0
 80147dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	781b      	ldrb	r3, [r3, #0]
 80147e2:	b2db      	uxtb	r3, r3
 80147e4:	2b0b      	cmp	r3, #11
 80147e6:	d10a      	bne.n	80147fe <USBH_HandleSof+0x28>
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d005      	beq.n	80147fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80147f8:	699b      	ldr	r3, [r3, #24]
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	4798      	blx	r3
  }
}
 80147fe:	bf00      	nop
 8014800:	3708      	adds	r7, #8
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}

08014806 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8014806:	b580      	push	{r7, lr}
 8014808:	b082      	sub	sp, #8
 801480a:	af00      	add	r7, sp, #0
 801480c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	2201      	movs	r2, #1
 8014812:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	2201      	movs	r2, #1
 801481a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801482a:	2200      	movs	r2, #0
 801482c:	4619      	mov	r1, r3
 801482e:	f001 f9e1 	bl	8015bf4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8014832:	bf00      	nop
}
 8014834:	3708      	adds	r7, #8
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}

0801483a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801483a:	b480      	push	{r7}
 801483c:	b083      	sub	sp, #12
 801483e:	af00      	add	r7, sp, #0
 8014840:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	2200      	movs	r2, #0
 8014846:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801484a:	bf00      	nop
}
 801484c:	370c      	adds	r7, #12
 801484e:	46bd      	mov	sp, r7
 8014850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014854:	4770      	bx	lr

08014856 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8014856:	b580      	push	{r7, lr}
 8014858:	b082      	sub	sp, #8
 801485a:	af00      	add	r7, sp, #0
 801485c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2201      	movs	r2, #1
 8014862:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	2200      	movs	r2, #0
 801486a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	2200      	movs	r2, #0
 8014872:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	2201      	movs	r2, #1
 801487a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801488a:	2200      	movs	r2, #0
 801488c:	4619      	mov	r1, r3
 801488e:	f001 f9b1 	bl	8015bf4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8014892:	2300      	movs	r3, #0
}
 8014894:	4618      	mov	r0, r3
 8014896:	3708      	adds	r7, #8
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}

0801489c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2201      	movs	r2, #1
 80148a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2200      	movs	r2, #0
 80148b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2200      	movs	r2, #0
 80148b8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80148bc:	6878      	ldr	r0, [r7, #4]
 80148be:	f003 ff6c 	bl	801879a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	791b      	ldrb	r3, [r3, #4]
 80148c6:	4619      	mov	r1, r3
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f000 ff95 	bl	80157f8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	795b      	ldrb	r3, [r3, #5]
 80148d2:	4619      	mov	r1, r3
 80148d4:	6878      	ldr	r0, [r7, #4]
 80148d6:	f000 ff8f 	bl	80157f8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	2201      	movs	r2, #1
 80148de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80148ee:	2200      	movs	r2, #0
 80148f0:	4619      	mov	r1, r3
 80148f2:	f001 f97f 	bl	8015bf4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80148f6:	2300      	movs	r3, #0
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3708      	adds	r7, #8
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}

08014900 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b086      	sub	sp, #24
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 801490e:	f107 030c 	add.w	r3, r7, #12
 8014912:	f04f 32ff 	mov.w	r2, #4294967295
 8014916:	4618      	mov	r0, r3
 8014918:	f001 f9ac 	bl	8015c74 <osMessageGet>
    if (event.status == osEventMessage)
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	2b10      	cmp	r3, #16
 8014920:	d1f2      	bne.n	8014908 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	f7ff fa9e 	bl	8013e64 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8014928:	e7ee      	b.n	8014908 <USBH_Process_OS+0x8>

0801492a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 801492a:	b580      	push	{r7, lr}
 801492c:	b082      	sub	sp, #8
 801492e:	af00      	add	r7, sp, #0
 8014930:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	2201      	movs	r2, #1
 8014936:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014946:	2200      	movs	r2, #0
 8014948:	4619      	mov	r1, r3
 801494a:	f001 f953 	bl	8015bf4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 801494e:	2300      	movs	r3, #0
}
 8014950:	4618      	mov	r0, r3
 8014952:	3708      	adds	r7, #8
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b086      	sub	sp, #24
 801495c:	af02      	add	r7, sp, #8
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	460b      	mov	r3, r1
 8014962:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 801496a:	78fb      	ldrb	r3, [r7, #3]
 801496c:	b29b      	uxth	r3, r3
 801496e:	9300      	str	r3, [sp, #0]
 8014970:	4613      	mov	r3, r2
 8014972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014976:	2100      	movs	r1, #0
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f000 f864 	bl	8014a46 <USBH_GetDescriptor>
 801497e:	4603      	mov	r3, r0
 8014980:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8014982:	7bfb      	ldrb	r3, [r7, #15]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d10a      	bne.n	801499e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	f203 3026 	addw	r0, r3, #806	; 0x326
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014994:	78fa      	ldrb	r2, [r7, #3]
 8014996:	b292      	uxth	r2, r2
 8014998:	4619      	mov	r1, r3
 801499a:	f000 f919 	bl	8014bd0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 801499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	3710      	adds	r7, #16
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}

080149a8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b086      	sub	sp, #24
 80149ac:	af02      	add	r7, sp, #8
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	460b      	mov	r3, r1
 80149b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	331c      	adds	r3, #28
 80149b8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80149ba:	887b      	ldrh	r3, [r7, #2]
 80149bc:	9300      	str	r3, [sp, #0]
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80149c4:	2100      	movs	r1, #0
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f000 f83d 	bl	8014a46 <USBH_GetDescriptor>
 80149cc:	4603      	mov	r3, r0
 80149ce:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80149d0:	7bfb      	ldrb	r3, [r7, #15]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d107      	bne.n	80149e6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80149d6:	887b      	ldrh	r3, [r7, #2]
 80149d8:	461a      	mov	r2, r3
 80149da:	68b9      	ldr	r1, [r7, #8]
 80149dc:	6878      	ldr	r0, [r7, #4]
 80149de:	f000 f987 	bl	8014cf0 <USBH_ParseCfgDesc>
 80149e2:	4603      	mov	r3, r0
 80149e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80149e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3710      	adds	r7, #16
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}

080149f0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b088      	sub	sp, #32
 80149f4:	af02      	add	r7, sp, #8
 80149f6:	60f8      	str	r0, [r7, #12]
 80149f8:	607a      	str	r2, [r7, #4]
 80149fa:	461a      	mov	r2, r3
 80149fc:	460b      	mov	r3, r1
 80149fe:	72fb      	strb	r3, [r7, #11]
 8014a00:	4613      	mov	r3, r2
 8014a02:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8014a04:	7afb      	ldrb	r3, [r7, #11]
 8014a06:	b29b      	uxth	r3, r3
 8014a08:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8014a0c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8014a14:	893b      	ldrh	r3, [r7, #8]
 8014a16:	9300      	str	r3, [sp, #0]
 8014a18:	460b      	mov	r3, r1
 8014a1a:	2100      	movs	r1, #0
 8014a1c:	68f8      	ldr	r0, [r7, #12]
 8014a1e:	f000 f812 	bl	8014a46 <USBH_GetDescriptor>
 8014a22:	4603      	mov	r3, r0
 8014a24:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8014a26:	7dfb      	ldrb	r3, [r7, #23]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d107      	bne.n	8014a3c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014a32:	893a      	ldrh	r2, [r7, #8]
 8014a34:	6879      	ldr	r1, [r7, #4]
 8014a36:	4618      	mov	r0, r3
 8014a38:	f000 fafe 	bl	8015038 <USBH_ParseStringDesc>
  }

  return status;
 8014a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3718      	adds	r7, #24
 8014a42:	46bd      	mov	sp, r7
 8014a44:	bd80      	pop	{r7, pc}

08014a46 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8014a46:	b580      	push	{r7, lr}
 8014a48:	b084      	sub	sp, #16
 8014a4a:	af00      	add	r7, sp, #0
 8014a4c:	60f8      	str	r0, [r7, #12]
 8014a4e:	607b      	str	r3, [r7, #4]
 8014a50:	460b      	mov	r3, r1
 8014a52:	72fb      	strb	r3, [r7, #11]
 8014a54:	4613      	mov	r3, r2
 8014a56:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	789b      	ldrb	r3, [r3, #2]
 8014a5c:	2b01      	cmp	r3, #1
 8014a5e:	d11c      	bne.n	8014a9a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8014a60:	7afb      	ldrb	r3, [r7, #11]
 8014a62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014a66:	b2da      	uxtb	r2, r3
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	2206      	movs	r2, #6
 8014a70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	893a      	ldrh	r2, [r7, #8]
 8014a76:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8014a78:	893b      	ldrh	r3, [r7, #8]
 8014a7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8014a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014a82:	d104      	bne.n	8014a8e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	f240 4209 	movw	r2, #1033	; 0x409
 8014a8a:	829a      	strh	r2, [r3, #20]
 8014a8c:	e002      	b.n	8014a94 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	2200      	movs	r2, #0
 8014a92:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	8b3a      	ldrh	r2, [r7, #24]
 8014a98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8014a9a:	8b3b      	ldrh	r3, [r7, #24]
 8014a9c:	461a      	mov	r2, r3
 8014a9e:	6879      	ldr	r1, [r7, #4]
 8014aa0:	68f8      	ldr	r0, [r7, #12]
 8014aa2:	f000 fb17 	bl	80150d4 <USBH_CtlReq>
 8014aa6:	4603      	mov	r3, r0
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3710      	adds	r7, #16
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
 8014ab8:	460b      	mov	r3, r1
 8014aba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	789b      	ldrb	r3, [r3, #2]
 8014ac0:	2b01      	cmp	r3, #1
 8014ac2:	d10f      	bne.n	8014ae4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	2200      	movs	r2, #0
 8014ac8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2205      	movs	r2, #5
 8014ace:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8014ad0:	78fb      	ldrb	r3, [r7, #3]
 8014ad2:	b29a      	uxth	r2, r3
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2200      	movs	r2, #0
 8014adc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	2100      	movs	r1, #0
 8014ae8:	6878      	ldr	r0, [r7, #4]
 8014aea:	f000 faf3 	bl	80150d4 <USBH_CtlReq>
 8014aee:	4603      	mov	r3, r0
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	3708      	adds	r7, #8
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}

08014af8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b082      	sub	sp, #8
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
 8014b00:	460b      	mov	r3, r1
 8014b02:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	789b      	ldrb	r3, [r3, #2]
 8014b08:	2b01      	cmp	r3, #1
 8014b0a:	d10e      	bne.n	8014b2a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	2200      	movs	r2, #0
 8014b10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	2209      	movs	r2, #9
 8014b16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	887a      	ldrh	r2, [r7, #2]
 8014b1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2200      	movs	r2, #0
 8014b22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2200      	movs	r2, #0
 8014b28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	2100      	movs	r1, #0
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f000 fad0 	bl	80150d4 <USBH_CtlReq>
 8014b34:	4603      	mov	r3, r0
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3708      	adds	r7, #8
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}

08014b3e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8014b3e:	b580      	push	{r7, lr}
 8014b40:	b082      	sub	sp, #8
 8014b42:	af00      	add	r7, sp, #0
 8014b44:	6078      	str	r0, [r7, #4]
 8014b46:	460b      	mov	r3, r1
 8014b48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	789b      	ldrb	r3, [r3, #2]
 8014b4e:	2b01      	cmp	r3, #1
 8014b50:	d10f      	bne.n	8014b72 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	2200      	movs	r2, #0
 8014b56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2203      	movs	r2, #3
 8014b5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8014b5e:	78fb      	ldrb	r3, [r7, #3]
 8014b60:	b29a      	uxth	r2, r3
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	2200      	movs	r2, #0
 8014b6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	2200      	movs	r2, #0
 8014b70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8014b72:	2200      	movs	r2, #0
 8014b74:	2100      	movs	r1, #0
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f000 faac 	bl	80150d4 <USBH_CtlReq>
 8014b7c:	4603      	mov	r3, r0
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	3708      	adds	r7, #8
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd80      	pop	{r7, pc}

08014b86 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8014b86:	b580      	push	{r7, lr}
 8014b88:	b082      	sub	sp, #8
 8014b8a:	af00      	add	r7, sp, #0
 8014b8c:	6078      	str	r0, [r7, #4]
 8014b8e:	460b      	mov	r3, r1
 8014b90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	789b      	ldrb	r3, [r3, #2]
 8014b96:	2b01      	cmp	r3, #1
 8014b98:	d10f      	bne.n	8014bba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	2202      	movs	r2, #2
 8014b9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	2201      	movs	r2, #1
 8014ba4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	2200      	movs	r2, #0
 8014baa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8014bac:	78fb      	ldrb	r3, [r7, #3]
 8014bae:	b29a      	uxth	r2, r3
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8014bba:	2200      	movs	r2, #0
 8014bbc:	2100      	movs	r1, #0
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f000 fa88 	bl	80150d4 <USBH_CtlReq>
 8014bc4:	4603      	mov	r3, r0
}
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	3708      	adds	r7, #8
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	bd80      	pop	{r7, pc}
	...

08014bd0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 8014bd0:	b480      	push	{r7}
 8014bd2:	b085      	sub	sp, #20
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	60f8      	str	r0, [r7, #12]
 8014bd8:	60b9      	str	r1, [r7, #8]
 8014bda:	4613      	mov	r3, r2
 8014bdc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	781a      	ldrb	r2, [r3, #0]
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	785a      	ldrb	r2, [r3, #1]
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8014bee:	68bb      	ldr	r3, [r7, #8]
 8014bf0:	3302      	adds	r3, #2
 8014bf2:	781b      	ldrb	r3, [r3, #0]
 8014bf4:	b29a      	uxth	r2, r3
 8014bf6:	68bb      	ldr	r3, [r7, #8]
 8014bf8:	3303      	adds	r3, #3
 8014bfa:	781b      	ldrb	r3, [r3, #0]
 8014bfc:	b29b      	uxth	r3, r3
 8014bfe:	021b      	lsls	r3, r3, #8
 8014c00:	b29b      	uxth	r3, r3
 8014c02:	4313      	orrs	r3, r2
 8014c04:	b29a      	uxth	r2, r3
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	791a      	ldrb	r2, [r3, #4]
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	795a      	ldrb	r2, [r3, #5]
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	799a      	ldrb	r2, [r3, #6]
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8014c22:	68bb      	ldr	r3, [r7, #8]
 8014c24:	79da      	ldrb	r2, [r3, #7]
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	79db      	ldrb	r3, [r3, #7]
 8014c2e:	2b20      	cmp	r3, #32
 8014c30:	dc0e      	bgt.n	8014c50 <USBH_ParseDevDesc+0x80>
 8014c32:	2b08      	cmp	r3, #8
 8014c34:	db13      	blt.n	8014c5e <USBH_ParseDevDesc+0x8e>
 8014c36:	3b08      	subs	r3, #8
 8014c38:	2201      	movs	r2, #1
 8014c3a:	409a      	lsls	r2, r3
 8014c3c:	4b2b      	ldr	r3, [pc, #172]	; (8014cec <USBH_ParseDevDesc+0x11c>)
 8014c3e:	4013      	ands	r3, r2
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	bf14      	ite	ne
 8014c44:	2301      	movne	r3, #1
 8014c46:	2300      	moveq	r3, #0
 8014c48:	b2db      	uxtb	r3, r3
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d102      	bne.n	8014c54 <USBH_ParseDevDesc+0x84>
 8014c4e:	e006      	b.n	8014c5e <USBH_ParseDevDesc+0x8e>
 8014c50:	2b40      	cmp	r3, #64	; 0x40
 8014c52:	d104      	bne.n	8014c5e <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	79da      	ldrb	r2, [r3, #7]
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	71da      	strb	r2, [r3, #7]
      break;
 8014c5c:	e003      	b.n	8014c66 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	2240      	movs	r2, #64	; 0x40
 8014c62:	71da      	strb	r2, [r3, #7]
      break;
 8014c64:	bf00      	nop
  }

  if (length > 8U)
 8014c66:	88fb      	ldrh	r3, [r7, #6]
 8014c68:	2b08      	cmp	r3, #8
 8014c6a:	d939      	bls.n	8014ce0 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	3308      	adds	r3, #8
 8014c70:	781b      	ldrb	r3, [r3, #0]
 8014c72:	b29a      	uxth	r2, r3
 8014c74:	68bb      	ldr	r3, [r7, #8]
 8014c76:	3309      	adds	r3, #9
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	021b      	lsls	r3, r3, #8
 8014c7e:	b29b      	uxth	r3, r3
 8014c80:	4313      	orrs	r3, r2
 8014c82:	b29a      	uxth	r2, r3
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	330a      	adds	r3, #10
 8014c8c:	781b      	ldrb	r3, [r3, #0]
 8014c8e:	b29a      	uxth	r2, r3
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	330b      	adds	r3, #11
 8014c94:	781b      	ldrb	r3, [r3, #0]
 8014c96:	b29b      	uxth	r3, r3
 8014c98:	021b      	lsls	r3, r3, #8
 8014c9a:	b29b      	uxth	r3, r3
 8014c9c:	4313      	orrs	r3, r2
 8014c9e:	b29a      	uxth	r2, r3
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	330c      	adds	r3, #12
 8014ca8:	781b      	ldrb	r3, [r3, #0]
 8014caa:	b29a      	uxth	r2, r3
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	330d      	adds	r3, #13
 8014cb0:	781b      	ldrb	r3, [r3, #0]
 8014cb2:	b29b      	uxth	r3, r3
 8014cb4:	021b      	lsls	r3, r3, #8
 8014cb6:	b29b      	uxth	r3, r3
 8014cb8:	4313      	orrs	r3, r2
 8014cba:	b29a      	uxth	r2, r3
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8014cc0:	68bb      	ldr	r3, [r7, #8]
 8014cc2:	7b9a      	ldrb	r2, [r3, #14]
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	7bda      	ldrb	r2, [r3, #15]
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8014cd0:	68bb      	ldr	r3, [r7, #8]
 8014cd2:	7c1a      	ldrb	r2, [r3, #16]
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8014cd8:	68bb      	ldr	r3, [r7, #8]
 8014cda:	7c5a      	ldrb	r2, [r3, #17]
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	745a      	strb	r2, [r3, #17]
  }
}
 8014ce0:	bf00      	nop
 8014ce2:	3714      	adds	r7, #20
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cea:	4770      	bx	lr
 8014cec:	01000101 	.word	0x01000101

08014cf0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b08c      	sub	sp, #48	; 0x30
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	60f8      	str	r0, [r7, #12]
 8014cf8:	60b9      	str	r1, [r7, #8]
 8014cfa:	4613      	mov	r3, r2
 8014cfc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8014d04:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8014d06:	2300      	movs	r3, #0
 8014d08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8014d0c:	68bb      	ldr	r3, [r7, #8]
 8014d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8014d10:	2300      	movs	r3, #0
 8014d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8014d16:	2300      	movs	r3, #0
 8014d18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	781a      	ldrb	r2, [r3, #0]
 8014d24:	6a3b      	ldr	r3, [r7, #32]
 8014d26:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	785a      	ldrb	r2, [r3, #1]
 8014d2c:	6a3b      	ldr	r3, [r7, #32]
 8014d2e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	3302      	adds	r3, #2
 8014d34:	781b      	ldrb	r3, [r3, #0]
 8014d36:	b29a      	uxth	r2, r3
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	3303      	adds	r3, #3
 8014d3c:	781b      	ldrb	r3, [r3, #0]
 8014d3e:	b29b      	uxth	r3, r3
 8014d40:	021b      	lsls	r3, r3, #8
 8014d42:	b29b      	uxth	r3, r3
 8014d44:	4313      	orrs	r3, r2
 8014d46:	b29b      	uxth	r3, r3
 8014d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d4c:	bf28      	it	cs
 8014d4e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8014d52:	b29a      	uxth	r2, r3
 8014d54:	6a3b      	ldr	r3, [r7, #32]
 8014d56:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	791a      	ldrb	r2, [r3, #4]
 8014d5c:	6a3b      	ldr	r3, [r7, #32]
 8014d5e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	795a      	ldrb	r2, [r3, #5]
 8014d64:	6a3b      	ldr	r3, [r7, #32]
 8014d66:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	799a      	ldrb	r2, [r3, #6]
 8014d6c:	6a3b      	ldr	r3, [r7, #32]
 8014d6e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	79da      	ldrb	r2, [r3, #7]
 8014d74:	6a3b      	ldr	r3, [r7, #32]
 8014d76:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8014d78:	68bb      	ldr	r3, [r7, #8]
 8014d7a:	7a1a      	ldrb	r2, [r3, #8]
 8014d7c:	6a3b      	ldr	r3, [r7, #32]
 8014d7e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8014d80:	6a3b      	ldr	r3, [r7, #32]
 8014d82:	781b      	ldrb	r3, [r3, #0]
 8014d84:	2b09      	cmp	r3, #9
 8014d86:	d002      	beq.n	8014d8e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8014d88:	6a3b      	ldr	r3, [r7, #32]
 8014d8a:	2209      	movs	r2, #9
 8014d8c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8014d8e:	88fb      	ldrh	r3, [r7, #6]
 8014d90:	2b09      	cmp	r3, #9
 8014d92:	f240 8099 	bls.w	8014ec8 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 8014d96:	2309      	movs	r3, #9
 8014d98:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014d9e:	e07d      	b.n	8014e9c <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8014da0:	f107 0316 	add.w	r3, r7, #22
 8014da4:	4619      	mov	r1, r3
 8014da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014da8:	f000 f979 	bl	801509e <USBH_GetNextDesc>
 8014dac:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8014dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db0:	785b      	ldrb	r3, [r3, #1]
 8014db2:	2b04      	cmp	r3, #4
 8014db4:	d172      	bne.n	8014e9c <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8014db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db8:	781b      	ldrb	r3, [r3, #0]
 8014dba:	2b09      	cmp	r3, #9
 8014dbc:	d002      	beq.n	8014dc4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8014dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dc0:	2209      	movs	r2, #9
 8014dc2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8014dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014dc8:	221a      	movs	r2, #26
 8014dca:	fb02 f303 	mul.w	r3, r2, r3
 8014dce:	3308      	adds	r3, #8
 8014dd0:	6a3a      	ldr	r2, [r7, #32]
 8014dd2:	4413      	add	r3, r2
 8014dd4:	3302      	adds	r3, #2
 8014dd6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8014dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014dda:	69f8      	ldr	r0, [r7, #28]
 8014ddc:	f000 f87a 	bl	8014ed4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8014de0:	2300      	movs	r3, #0
 8014de2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8014de6:	2300      	movs	r3, #0
 8014de8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014dea:	e03f      	b.n	8014e6c <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8014dec:	f107 0316 	add.w	r3, r7, #22
 8014df0:	4619      	mov	r1, r3
 8014df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014df4:	f000 f953 	bl	801509e <USBH_GetNextDesc>
 8014df8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dfc:	785b      	ldrb	r3, [r3, #1]
 8014dfe:	2b05      	cmp	r3, #5
 8014e00:	d134      	bne.n	8014e6c <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8014e02:	69fb      	ldr	r3, [r7, #28]
 8014e04:	795b      	ldrb	r3, [r3, #5]
 8014e06:	2b01      	cmp	r3, #1
 8014e08:	d10f      	bne.n	8014e2a <USBH_ParseCfgDesc+0x13a>
 8014e0a:	69fb      	ldr	r3, [r7, #28]
 8014e0c:	799b      	ldrb	r3, [r3, #6]
 8014e0e:	2b02      	cmp	r3, #2
 8014e10:	d10b      	bne.n	8014e2a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8014e12:	69fb      	ldr	r3, [r7, #28]
 8014e14:	79db      	ldrb	r3, [r3, #7]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d10b      	bne.n	8014e32 <USBH_ParseCfgDesc+0x142>
 8014e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	2b09      	cmp	r3, #9
 8014e20:	d007      	beq.n	8014e32 <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 8014e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e24:	2209      	movs	r2, #9
 8014e26:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8014e28:	e003      	b.n	8014e32 <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8014e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e2c:	2207      	movs	r2, #7
 8014e2e:	701a      	strb	r2, [r3, #0]
 8014e30:	e000      	b.n	8014e34 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8014e32:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8014e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8014e3c:	3201      	adds	r2, #1
 8014e3e:	00d2      	lsls	r2, r2, #3
 8014e40:	211a      	movs	r1, #26
 8014e42:	fb01 f303 	mul.w	r3, r1, r3
 8014e46:	4413      	add	r3, r2
 8014e48:	3308      	adds	r3, #8
 8014e4a:	6a3a      	ldr	r2, [r7, #32]
 8014e4c:	4413      	add	r3, r2
 8014e4e:	3304      	adds	r3, #4
 8014e50:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8014e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e54:	69b9      	ldr	r1, [r7, #24]
 8014e56:	68f8      	ldr	r0, [r7, #12]
 8014e58:	f000 f86c 	bl	8014f34 <USBH_ParseEPDesc>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8014e62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e66:	3301      	adds	r3, #1
 8014e68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014e6c:	69fb      	ldr	r3, [r7, #28]
 8014e6e:	791b      	ldrb	r3, [r3, #4]
 8014e70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8014e74:	429a      	cmp	r2, r3
 8014e76:	d204      	bcs.n	8014e82 <USBH_ParseCfgDesc+0x192>
 8014e78:	6a3b      	ldr	r3, [r7, #32]
 8014e7a:	885a      	ldrh	r2, [r3, #2]
 8014e7c:	8afb      	ldrh	r3, [r7, #22]
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	d8b4      	bhi.n	8014dec <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8014e82:	69fb      	ldr	r3, [r7, #28]
 8014e84:	791b      	ldrb	r3, [r3, #4]
 8014e86:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d201      	bcs.n	8014e92 <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 8014e8e:	2303      	movs	r3, #3
 8014e90:	e01c      	b.n	8014ecc <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 8014e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e96:	3301      	adds	r3, #1
 8014e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8014e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ea0:	2b01      	cmp	r3, #1
 8014ea2:	d805      	bhi.n	8014eb0 <USBH_ParseCfgDesc+0x1c0>
 8014ea4:	6a3b      	ldr	r3, [r7, #32]
 8014ea6:	885a      	ldrh	r2, [r3, #2]
 8014ea8:	8afb      	ldrh	r3, [r7, #22]
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	f63f af78 	bhi.w	8014da0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8014eb0:	6a3b      	ldr	r3, [r7, #32]
 8014eb2:	791b      	ldrb	r3, [r3, #4]
 8014eb4:	2b02      	cmp	r3, #2
 8014eb6:	bf28      	it	cs
 8014eb8:	2302      	movcs	r3, #2
 8014eba:	b2db      	uxtb	r3, r3
 8014ebc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d201      	bcs.n	8014ec8 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 8014ec4:	2303      	movs	r3, #3
 8014ec6:	e001      	b.n	8014ecc <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 8014ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3730      	adds	r7, #48	; 0x30
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 8014ed4:	b480      	push	{r7}
 8014ed6:	b083      	sub	sp, #12
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	781a      	ldrb	r2, [r3, #0]
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	785a      	ldrb	r2, [r3, #1]
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	789a      	ldrb	r2, [r3, #2]
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	78da      	ldrb	r2, [r3, #3]
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	791a      	ldrb	r2, [r3, #4]
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	795a      	ldrb	r2, [r3, #5]
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	799a      	ldrb	r2, [r3, #6]
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	79da      	ldrb	r2, [r3, #7]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8014f1e:	683b      	ldr	r3, [r7, #0]
 8014f20:	7a1a      	ldrb	r2, [r3, #8]
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	721a      	strb	r2, [r3, #8]
}
 8014f26:	bf00      	nop
 8014f28:	370c      	adds	r7, #12
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f30:	4770      	bx	lr
	...

08014f34 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 8014f34:	b480      	push	{r7}
 8014f36:	b087      	sub	sp, #28
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	60f8      	str	r0, [r7, #12]
 8014f3c:	60b9      	str	r1, [r7, #8]
 8014f3e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8014f40:	2300      	movs	r3, #0
 8014f42:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	781a      	ldrb	r2, [r3, #0]
 8014f48:	68bb      	ldr	r3, [r7, #8]
 8014f4a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	785a      	ldrb	r2, [r3, #1]
 8014f50:	68bb      	ldr	r3, [r7, #8]
 8014f52:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	789a      	ldrb	r2, [r3, #2]
 8014f58:	68bb      	ldr	r3, [r7, #8]
 8014f5a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	78da      	ldrb	r2, [r3, #3]
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	3304      	adds	r3, #4
 8014f68:	781b      	ldrb	r3, [r3, #0]
 8014f6a:	b29a      	uxth	r2, r3
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	3305      	adds	r3, #5
 8014f70:	781b      	ldrb	r3, [r3, #0]
 8014f72:	b29b      	uxth	r3, r3
 8014f74:	021b      	lsls	r3, r3, #8
 8014f76:	b29b      	uxth	r3, r3
 8014f78:	4313      	orrs	r3, r2
 8014f7a:	b29a      	uxth	r2, r3
 8014f7c:	68bb      	ldr	r3, [r7, #8]
 8014f7e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	799a      	ldrb	r2, [r3, #6]
 8014f84:	68bb      	ldr	r3, [r7, #8]
 8014f86:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8014f88:	68bb      	ldr	r3, [r7, #8]
 8014f8a:	889b      	ldrh	r3, [r3, #4]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d102      	bne.n	8014f96 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8014f90:	2303      	movs	r3, #3
 8014f92:	75fb      	strb	r3, [r7, #23]
 8014f94:	e00d      	b.n	8014fb2 <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	889a      	ldrh	r2, [r3, #4]
 8014f9a:	4b26      	ldr	r3, [pc, #152]	; (8015034 <USBH_ParseEPDesc+0x100>)
 8014f9c:	4013      	ands	r3, r2
 8014f9e:	b29a      	uxth	r2, r3
 8014fa0:	68bb      	ldr	r3, [r7, #8]
 8014fa2:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 8014fa4:	68bb      	ldr	r3, [r7, #8]
 8014fa6:	889b      	ldrh	r3, [r3, #4]
 8014fa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014fac:	b29a      	uxth	r2, r3
 8014fae:	68bb      	ldr	r3, [r7, #8]
 8014fb0:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d116      	bne.n	8014fea <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8014fbc:	68bb      	ldr	r3, [r7, #8]
 8014fbe:	78db      	ldrb	r3, [r3, #3]
 8014fc0:	f003 0303 	and.w	r3, r3, #3
 8014fc4:	2b01      	cmp	r3, #1
 8014fc6:	d005      	beq.n	8014fd4 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8014fc8:	68bb      	ldr	r3, [r7, #8]
 8014fca:	78db      	ldrb	r3, [r3, #3]
 8014fcc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8014fd0:	2b03      	cmp	r3, #3
 8014fd2:	d127      	bne.n	8015024 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	799b      	ldrb	r3, [r3, #6]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d003      	beq.n	8014fe4 <USBH_ParseEPDesc+0xb0>
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	799b      	ldrb	r3, [r3, #6]
 8014fe0:	2b10      	cmp	r3, #16
 8014fe2:	d91f      	bls.n	8015024 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8014fe4:	2303      	movs	r3, #3
 8014fe6:	75fb      	strb	r3, [r7, #23]
 8014fe8:	e01c      	b.n	8015024 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8014fea:	68bb      	ldr	r3, [r7, #8]
 8014fec:	78db      	ldrb	r3, [r3, #3]
 8014fee:	f003 0303 	and.w	r3, r3, #3
 8014ff2:	2b01      	cmp	r3, #1
 8014ff4:	d10a      	bne.n	801500c <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	799b      	ldrb	r3, [r3, #6]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d003      	beq.n	8015006 <USBH_ParseEPDesc+0xd2>
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	799b      	ldrb	r3, [r3, #6]
 8015002:	2b10      	cmp	r3, #16
 8015004:	d90e      	bls.n	8015024 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8015006:	2303      	movs	r3, #3
 8015008:	75fb      	strb	r3, [r7, #23]
 801500a:	e00b      	b.n	8015024 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801500c:	68bb      	ldr	r3, [r7, #8]
 801500e:	78db      	ldrb	r3, [r3, #3]
 8015010:	f003 0303 	and.w	r3, r3, #3
 8015014:	2b03      	cmp	r3, #3
 8015016:	d105      	bne.n	8015024 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 8015018:	68bb      	ldr	r3, [r7, #8]
 801501a:	799b      	ldrb	r3, [r3, #6]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d101      	bne.n	8015024 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8015020:	2303      	movs	r3, #3
 8015022:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8015024:	7dfb      	ldrb	r3, [r7, #23]
}
 8015026:	4618      	mov	r0, r3
 8015028:	371c      	adds	r7, #28
 801502a:	46bd      	mov	sp, r7
 801502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015030:	4770      	bx	lr
 8015032:	bf00      	nop
 8015034:	fffff800 	.word	0xfffff800

08015038 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8015038:	b480      	push	{r7}
 801503a:	b087      	sub	sp, #28
 801503c:	af00      	add	r7, sp, #0
 801503e:	60f8      	str	r0, [r7, #12]
 8015040:	60b9      	str	r1, [r7, #8]
 8015042:	4613      	mov	r3, r2
 8015044:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	3301      	adds	r3, #1
 801504a:	781b      	ldrb	r3, [r3, #0]
 801504c:	2b03      	cmp	r3, #3
 801504e:	d120      	bne.n	8015092 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	781b      	ldrb	r3, [r3, #0]
 8015054:	1e9a      	subs	r2, r3, #2
 8015056:	88fb      	ldrh	r3, [r7, #6]
 8015058:	4293      	cmp	r3, r2
 801505a:	bf28      	it	cs
 801505c:	4613      	movcs	r3, r2
 801505e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	3302      	adds	r3, #2
 8015064:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8015066:	2300      	movs	r3, #0
 8015068:	82fb      	strh	r3, [r7, #22]
 801506a:	e00b      	b.n	8015084 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801506c:	8afb      	ldrh	r3, [r7, #22]
 801506e:	68fa      	ldr	r2, [r7, #12]
 8015070:	4413      	add	r3, r2
 8015072:	781a      	ldrb	r2, [r3, #0]
 8015074:	68bb      	ldr	r3, [r7, #8]
 8015076:	701a      	strb	r2, [r3, #0]
      pdest++;
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	3301      	adds	r3, #1
 801507c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 801507e:	8afb      	ldrh	r3, [r7, #22]
 8015080:	3302      	adds	r3, #2
 8015082:	82fb      	strh	r3, [r7, #22]
 8015084:	8afa      	ldrh	r2, [r7, #22]
 8015086:	8abb      	ldrh	r3, [r7, #20]
 8015088:	429a      	cmp	r2, r3
 801508a:	d3ef      	bcc.n	801506c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	2200      	movs	r2, #0
 8015090:	701a      	strb	r2, [r3, #0]
  }
}
 8015092:	bf00      	nop
 8015094:	371c      	adds	r7, #28
 8015096:	46bd      	mov	sp, r7
 8015098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509c:	4770      	bx	lr

0801509e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801509e:	b480      	push	{r7}
 80150a0:	b085      	sub	sp, #20
 80150a2:	af00      	add	r7, sp, #0
 80150a4:	6078      	str	r0, [r7, #4]
 80150a6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80150a8:	683b      	ldr	r3, [r7, #0]
 80150aa:	881a      	ldrh	r2, [r3, #0]
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	b29b      	uxth	r3, r3
 80150b2:	4413      	add	r3, r2
 80150b4:	b29a      	uxth	r2, r3
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	781b      	ldrb	r3, [r3, #0]
 80150be:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	4413      	add	r3, r2
 80150c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80150c6:	68fb      	ldr	r3, [r7, #12]
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	3714      	adds	r7, #20
 80150cc:	46bd      	mov	sp, r7
 80150ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d2:	4770      	bx	lr

080150d4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b086      	sub	sp, #24
 80150d8:	af00      	add	r7, sp, #0
 80150da:	60f8      	str	r0, [r7, #12]
 80150dc:	60b9      	str	r1, [r7, #8]
 80150de:	4613      	mov	r3, r2
 80150e0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80150e2:	2301      	movs	r3, #1
 80150e4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	789b      	ldrb	r3, [r3, #2]
 80150ea:	2b01      	cmp	r3, #1
 80150ec:	d002      	beq.n	80150f4 <USBH_CtlReq+0x20>
 80150ee:	2b02      	cmp	r3, #2
 80150f0:	d01d      	beq.n	801512e <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 80150f2:	e043      	b.n	801517c <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	68ba      	ldr	r2, [r7, #8]
 80150f8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	88fa      	ldrh	r2, [r7, #6]
 80150fe:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	2201      	movs	r2, #1
 8015104:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	2202      	movs	r2, #2
 801510a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801510c:	2301      	movs	r3, #1
 801510e:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	2203      	movs	r2, #3
 8015114:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015124:	2200      	movs	r2, #0
 8015126:	4619      	mov	r1, r3
 8015128:	f000 fd64 	bl	8015bf4 <osMessagePut>
      break;
 801512c:	e026      	b.n	801517c <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 801512e:	68f8      	ldr	r0, [r7, #12]
 8015130:	f000 f82a 	bl	8015188 <USBH_HandleControl>
 8015134:	4603      	mov	r3, r0
 8015136:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8015138:	7dfb      	ldrb	r3, [r7, #23]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d002      	beq.n	8015144 <USBH_CtlReq+0x70>
 801513e:	7dfb      	ldrb	r3, [r7, #23]
 8015140:	2b03      	cmp	r3, #3
 8015142:	d106      	bne.n	8015152 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	2201      	movs	r2, #1
 8015148:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	2200      	movs	r2, #0
 801514e:	761a      	strb	r2, [r3, #24]
 8015150:	e005      	b.n	801515e <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8015152:	7dfb      	ldrb	r3, [r7, #23]
 8015154:	2b02      	cmp	r3, #2
 8015156:	d102      	bne.n	801515e <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	2201      	movs	r2, #1
 801515c:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	2203      	movs	r2, #3
 8015162:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015172:	2200      	movs	r2, #0
 8015174:	4619      	mov	r1, r3
 8015176:	f000 fd3d 	bl	8015bf4 <osMessagePut>
      break;
 801517a:	bf00      	nop
  }
  return status;
 801517c:	7dfb      	ldrb	r3, [r7, #23]
}
 801517e:	4618      	mov	r0, r3
 8015180:	3718      	adds	r7, #24
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}
	...

08015188 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b086      	sub	sp, #24
 801518c:	af02      	add	r7, sp, #8
 801518e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8015190:	2301      	movs	r3, #1
 8015192:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8015194:	2300      	movs	r3, #0
 8015196:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	7e1b      	ldrb	r3, [r3, #24]
 801519c:	3b01      	subs	r3, #1
 801519e:	2b0a      	cmp	r3, #10
 80151a0:	f200 8229 	bhi.w	80155f6 <USBH_HandleControl+0x46e>
 80151a4:	a201      	add	r2, pc, #4	; (adr r2, 80151ac <USBH_HandleControl+0x24>)
 80151a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151aa:	bf00      	nop
 80151ac:	080151d9 	.word	0x080151d9
 80151b0:	080151f3 	.word	0x080151f3
 80151b4:	08015295 	.word	0x08015295
 80151b8:	080152bb 	.word	0x080152bb
 80151bc:	08015347 	.word	0x08015347
 80151c0:	08015371 	.word	0x08015371
 80151c4:	08015433 	.word	0x08015433
 80151c8:	08015455 	.word	0x08015455
 80151cc:	080154e7 	.word	0x080154e7
 80151d0:	0801550d 	.word	0x0801550d
 80151d4:	0801559f 	.word	0x0801559f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	f103 0110 	add.w	r1, r3, #16
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	795b      	ldrb	r3, [r3, #5]
 80151e2:	461a      	mov	r2, r3
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f000 fa17 	bl	8015618 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	2202      	movs	r2, #2
 80151ee:	761a      	strb	r2, [r3, #24]
      break;
 80151f0:	e20c      	b.n	801560c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	795b      	ldrb	r3, [r3, #5]
 80151f6:	4619      	mov	r1, r3
 80151f8:	6878      	ldr	r0, [r7, #4]
 80151fa:	f003 fbbd 	bl	8018978 <USBH_LL_GetURBState>
 80151fe:	4603      	mov	r3, r0
 8015200:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8015202:	7bbb      	ldrb	r3, [r7, #14]
 8015204:	2b01      	cmp	r3, #1
 8015206:	d12c      	bne.n	8015262 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	7c1b      	ldrb	r3, [r3, #16]
 801520c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015210:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	8adb      	ldrh	r3, [r3, #22]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d00a      	beq.n	8015230 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801521a:	7b7b      	ldrb	r3, [r7, #13]
 801521c:	2b80      	cmp	r3, #128	; 0x80
 801521e:	d103      	bne.n	8015228 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	2203      	movs	r2, #3
 8015224:	761a      	strb	r2, [r3, #24]
 8015226:	e00d      	b.n	8015244 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2205      	movs	r2, #5
 801522c:	761a      	strb	r2, [r3, #24]
 801522e:	e009      	b.n	8015244 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8015230:	7b7b      	ldrb	r3, [r7, #13]
 8015232:	2b80      	cmp	r3, #128	; 0x80
 8015234:	d103      	bne.n	801523e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2209      	movs	r2, #9
 801523a:	761a      	strb	r2, [r3, #24]
 801523c:	e002      	b.n	8015244 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	2207      	movs	r2, #7
 8015242:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	2203      	movs	r2, #3
 8015248:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015258:	2200      	movs	r2, #0
 801525a:	4619      	mov	r1, r3
 801525c:	f000 fcca 	bl	8015bf4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8015260:	e1cb      	b.n	80155fa <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8015262:	7bbb      	ldrb	r3, [r7, #14]
 8015264:	2b04      	cmp	r3, #4
 8015266:	d003      	beq.n	8015270 <USBH_HandleControl+0xe8>
 8015268:	7bbb      	ldrb	r3, [r7, #14]
 801526a:	2b02      	cmp	r3, #2
 801526c:	f040 81c5 	bne.w	80155fa <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	220b      	movs	r2, #11
 8015274:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	2203      	movs	r2, #3
 801527a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801528a:	2200      	movs	r2, #0
 801528c:	4619      	mov	r1, r3
 801528e:	f000 fcb1 	bl	8015bf4 <osMessagePut>
      break;
 8015292:	e1b2      	b.n	80155fa <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801529a:	b29a      	uxth	r2, r3
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	6899      	ldr	r1, [r3, #8]
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	899a      	ldrh	r2, [r3, #12]
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	791b      	ldrb	r3, [r3, #4]
 80152ac:	6878      	ldr	r0, [r7, #4]
 80152ae:	f000 f9f2 	bl	8015696 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2204      	movs	r2, #4
 80152b6:	761a      	strb	r2, [r3, #24]
      break;
 80152b8:	e1a8      	b.n	801560c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	791b      	ldrb	r3, [r3, #4]
 80152be:	4619      	mov	r1, r3
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f003 fb59 	bl	8018978 <USBH_LL_GetURBState>
 80152c6:	4603      	mov	r3, r0
 80152c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80152ca:	7bbb      	ldrb	r3, [r7, #14]
 80152cc:	2b01      	cmp	r3, #1
 80152ce:	d110      	bne.n	80152f2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	2209      	movs	r2, #9
 80152d4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	2203      	movs	r2, #3
 80152da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80152ea:	2200      	movs	r2, #0
 80152ec:	4619      	mov	r1, r3
 80152ee:	f000 fc81 	bl	8015bf4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80152f2:	7bbb      	ldrb	r3, [r7, #14]
 80152f4:	2b05      	cmp	r3, #5
 80152f6:	d110      	bne.n	801531a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80152f8:	2303      	movs	r3, #3
 80152fa:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2203      	movs	r2, #3
 8015300:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015310:	2200      	movs	r2, #0
 8015312:	4619      	mov	r1, r3
 8015314:	f000 fc6e 	bl	8015bf4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8015318:	e171      	b.n	80155fe <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 801531a:	7bbb      	ldrb	r3, [r7, #14]
 801531c:	2b04      	cmp	r3, #4
 801531e:	f040 816e 	bne.w	80155fe <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	220b      	movs	r2, #11
 8015326:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	2203      	movs	r2, #3
 801532c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801533c:	2200      	movs	r2, #0
 801533e:	4619      	mov	r1, r3
 8015340:	f000 fc58 	bl	8015bf4 <osMessagePut>
      break;
 8015344:	e15b      	b.n	80155fe <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	6899      	ldr	r1, [r3, #8]
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	899a      	ldrh	r2, [r3, #12]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	795b      	ldrb	r3, [r3, #5]
 8015352:	2001      	movs	r0, #1
 8015354:	9000      	str	r0, [sp, #0]
 8015356:	6878      	ldr	r0, [r7, #4]
 8015358:	f000 f978 	bl	801564c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015362:	b29a      	uxth	r2, r3
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2206      	movs	r2, #6
 801536c:	761a      	strb	r2, [r3, #24]
      break;
 801536e:	e14d      	b.n	801560c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	795b      	ldrb	r3, [r3, #5]
 8015374:	4619      	mov	r1, r3
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f003 fafe 	bl	8018978 <USBH_LL_GetURBState>
 801537c:	4603      	mov	r3, r0
 801537e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8015380:	7bbb      	ldrb	r3, [r7, #14]
 8015382:	2b01      	cmp	r3, #1
 8015384:	d111      	bne.n	80153aa <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	2207      	movs	r2, #7
 801538a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	2203      	movs	r2, #3
 8015390:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80153a0:	2200      	movs	r2, #0
 80153a2:	4619      	mov	r1, r3
 80153a4:	f000 fc26 	bl	8015bf4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80153a8:	e12b      	b.n	8015602 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 80153aa:	7bbb      	ldrb	r3, [r7, #14]
 80153ac:	2b05      	cmp	r3, #5
 80153ae:	d113      	bne.n	80153d8 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	220c      	movs	r2, #12
 80153b4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80153b6:	2303      	movs	r3, #3
 80153b8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	2203      	movs	r2, #3
 80153be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80153ce:	2200      	movs	r2, #0
 80153d0:	4619      	mov	r1, r3
 80153d2:	f000 fc0f 	bl	8015bf4 <osMessagePut>
      break;
 80153d6:	e114      	b.n	8015602 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80153d8:	7bbb      	ldrb	r3, [r7, #14]
 80153da:	2b02      	cmp	r3, #2
 80153dc:	d111      	bne.n	8015402 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	2205      	movs	r2, #5
 80153e2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2203      	movs	r2, #3
 80153e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80153f8:	2200      	movs	r2, #0
 80153fa:	4619      	mov	r1, r3
 80153fc:	f000 fbfa 	bl	8015bf4 <osMessagePut>
      break;
 8015400:	e0ff      	b.n	8015602 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8015402:	7bbb      	ldrb	r3, [r7, #14]
 8015404:	2b04      	cmp	r3, #4
 8015406:	f040 80fc 	bne.w	8015602 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	220b      	movs	r2, #11
 801540e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8015410:	2302      	movs	r3, #2
 8015412:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	2203      	movs	r2, #3
 8015418:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015428:	2200      	movs	r2, #0
 801542a:	4619      	mov	r1, r3
 801542c:	f000 fbe2 	bl	8015bf4 <osMessagePut>
      break;
 8015430:	e0e7      	b.n	8015602 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	791b      	ldrb	r3, [r3, #4]
 8015436:	2200      	movs	r2, #0
 8015438:	2100      	movs	r1, #0
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f000 f92b 	bl	8015696 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015446:	b29a      	uxth	r2, r3
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2208      	movs	r2, #8
 8015450:	761a      	strb	r2, [r3, #24]

      break;
 8015452:	e0db      	b.n	801560c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	791b      	ldrb	r3, [r3, #4]
 8015458:	4619      	mov	r1, r3
 801545a:	6878      	ldr	r0, [r7, #4]
 801545c:	f003 fa8c 	bl	8018978 <USBH_LL_GetURBState>
 8015460:	4603      	mov	r3, r0
 8015462:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8015464:	7bbb      	ldrb	r3, [r7, #14]
 8015466:	2b01      	cmp	r3, #1
 8015468:	d113      	bne.n	8015492 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	220d      	movs	r2, #13
 801546e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8015470:	2300      	movs	r3, #0
 8015472:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	2203      	movs	r2, #3
 8015478:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015488:	2200      	movs	r2, #0
 801548a:	4619      	mov	r1, r3
 801548c:	f000 fbb2 	bl	8015bf4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8015490:	e0b9      	b.n	8015606 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8015492:	7bbb      	ldrb	r3, [r7, #14]
 8015494:	2b04      	cmp	r3, #4
 8015496:	d111      	bne.n	80154bc <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	220b      	movs	r2, #11
 801549c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	2203      	movs	r2, #3
 80154a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80154b2:	2200      	movs	r2, #0
 80154b4:	4619      	mov	r1, r3
 80154b6:	f000 fb9d 	bl	8015bf4 <osMessagePut>
      break;
 80154ba:	e0a4      	b.n	8015606 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 80154bc:	7bbb      	ldrb	r3, [r7, #14]
 80154be:	2b05      	cmp	r3, #5
 80154c0:	f040 80a1 	bne.w	8015606 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 80154c4:	2303      	movs	r3, #3
 80154c6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2203      	movs	r2, #3
 80154cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80154dc:	2200      	movs	r2, #0
 80154de:	4619      	mov	r1, r3
 80154e0:	f000 fb88 	bl	8015bf4 <osMessagePut>
      break;
 80154e4:	e08f      	b.n	8015606 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	795b      	ldrb	r3, [r3, #5]
 80154ea:	2201      	movs	r2, #1
 80154ec:	9200      	str	r2, [sp, #0]
 80154ee:	2200      	movs	r2, #0
 80154f0:	2100      	movs	r1, #0
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	f000 f8aa 	bl	801564c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80154fe:	b29a      	uxth	r2, r3
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	220a      	movs	r2, #10
 8015508:	761a      	strb	r2, [r3, #24]
      break;
 801550a:	e07f      	b.n	801560c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	795b      	ldrb	r3, [r3, #5]
 8015510:	4619      	mov	r1, r3
 8015512:	6878      	ldr	r0, [r7, #4]
 8015514:	f003 fa30 	bl	8018978 <USBH_LL_GetURBState>
 8015518:	4603      	mov	r3, r0
 801551a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801551c:	7bbb      	ldrb	r3, [r7, #14]
 801551e:	2b01      	cmp	r3, #1
 8015520:	d113      	bne.n	801554a <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8015522:	2300      	movs	r3, #0
 8015524:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	220d      	movs	r2, #13
 801552a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2203      	movs	r2, #3
 8015530:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015540:	2200      	movs	r2, #0
 8015542:	4619      	mov	r1, r3
 8015544:	f000 fb56 	bl	8015bf4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8015548:	e05f      	b.n	801560a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 801554a:	7bbb      	ldrb	r3, [r7, #14]
 801554c:	2b02      	cmp	r3, #2
 801554e:	d111      	bne.n	8015574 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	2209      	movs	r2, #9
 8015554:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	2203      	movs	r2, #3
 801555a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801556a:	2200      	movs	r2, #0
 801556c:	4619      	mov	r1, r3
 801556e:	f000 fb41 	bl	8015bf4 <osMessagePut>
      break;
 8015572:	e04a      	b.n	801560a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8015574:	7bbb      	ldrb	r3, [r7, #14]
 8015576:	2b04      	cmp	r3, #4
 8015578:	d147      	bne.n	801560a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	220b      	movs	r2, #11
 801557e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	2203      	movs	r2, #3
 8015584:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8015594:	2200      	movs	r2, #0
 8015596:	4619      	mov	r1, r3
 8015598:	f000 fb2c 	bl	8015bf4 <osMessagePut>
      break;
 801559c:	e035      	b.n	801560a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	7e5b      	ldrb	r3, [r3, #25]
 80155a2:	3301      	adds	r3, #1
 80155a4:	b2da      	uxtb	r2, r3
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	765a      	strb	r2, [r3, #25]
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	7e5b      	ldrb	r3, [r3, #25]
 80155ae:	2b02      	cmp	r3, #2
 80155b0:	d806      	bhi.n	80155c0 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	2201      	movs	r2, #1
 80155b6:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	2201      	movs	r2, #1
 80155bc:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80155be:	e025      	b.n	801560c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80155c6:	2106      	movs	r1, #6
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	2200      	movs	r2, #0
 80155d0:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	795b      	ldrb	r3, [r3, #5]
 80155d6:	4619      	mov	r1, r3
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f000 f90d 	bl	80157f8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	791b      	ldrb	r3, [r3, #4]
 80155e2:	4619      	mov	r1, r3
 80155e4:	6878      	ldr	r0, [r7, #4]
 80155e6:	f000 f907 	bl	80157f8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	2200      	movs	r2, #0
 80155ee:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80155f0:	2302      	movs	r3, #2
 80155f2:	73fb      	strb	r3, [r7, #15]
      break;
 80155f4:	e00a      	b.n	801560c <USBH_HandleControl+0x484>

    default:
      break;
 80155f6:	bf00      	nop
 80155f8:	e008      	b.n	801560c <USBH_HandleControl+0x484>
      break;
 80155fa:	bf00      	nop
 80155fc:	e006      	b.n	801560c <USBH_HandleControl+0x484>
      break;
 80155fe:	bf00      	nop
 8015600:	e004      	b.n	801560c <USBH_HandleControl+0x484>
      break;
 8015602:	bf00      	nop
 8015604:	e002      	b.n	801560c <USBH_HandleControl+0x484>
      break;
 8015606:	bf00      	nop
 8015608:	e000      	b.n	801560c <USBH_HandleControl+0x484>
      break;
 801560a:	bf00      	nop
  }

  return status;
 801560c:	7bfb      	ldrb	r3, [r7, #15]
}
 801560e:	4618      	mov	r0, r3
 8015610:	3710      	adds	r7, #16
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}
 8015616:	bf00      	nop

08015618 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8015618:	b580      	push	{r7, lr}
 801561a:	b088      	sub	sp, #32
 801561c:	af04      	add	r7, sp, #16
 801561e:	60f8      	str	r0, [r7, #12]
 8015620:	60b9      	str	r1, [r7, #8]
 8015622:	4613      	mov	r3, r2
 8015624:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015626:	79f9      	ldrb	r1, [r7, #7]
 8015628:	2300      	movs	r3, #0
 801562a:	9303      	str	r3, [sp, #12]
 801562c:	2308      	movs	r3, #8
 801562e:	9302      	str	r3, [sp, #8]
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	9301      	str	r3, [sp, #4]
 8015634:	2300      	movs	r3, #0
 8015636:	9300      	str	r3, [sp, #0]
 8015638:	2300      	movs	r3, #0
 801563a:	2200      	movs	r2, #0
 801563c:	68f8      	ldr	r0, [r7, #12]
 801563e:	f003 f96a 	bl	8018916 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8015642:	2300      	movs	r3, #0
}
 8015644:	4618      	mov	r0, r3
 8015646:	3710      	adds	r7, #16
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}

0801564c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b088      	sub	sp, #32
 8015650:	af04      	add	r7, sp, #16
 8015652:	60f8      	str	r0, [r7, #12]
 8015654:	60b9      	str	r1, [r7, #8]
 8015656:	4611      	mov	r1, r2
 8015658:	461a      	mov	r2, r3
 801565a:	460b      	mov	r3, r1
 801565c:	80fb      	strh	r3, [r7, #6]
 801565e:	4613      	mov	r3, r2
 8015660:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8015668:	2b00      	cmp	r3, #0
 801566a:	d001      	beq.n	8015670 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801566c:	2300      	movs	r3, #0
 801566e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015670:	7979      	ldrb	r1, [r7, #5]
 8015672:	7e3b      	ldrb	r3, [r7, #24]
 8015674:	9303      	str	r3, [sp, #12]
 8015676:	88fb      	ldrh	r3, [r7, #6]
 8015678:	9302      	str	r3, [sp, #8]
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	9301      	str	r3, [sp, #4]
 801567e:	2301      	movs	r3, #1
 8015680:	9300      	str	r3, [sp, #0]
 8015682:	2300      	movs	r3, #0
 8015684:	2200      	movs	r2, #0
 8015686:	68f8      	ldr	r0, [r7, #12]
 8015688:	f003 f945 	bl	8018916 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801568c:	2300      	movs	r3, #0
}
 801568e:	4618      	mov	r0, r3
 8015690:	3710      	adds	r7, #16
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}

08015696 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8015696:	b580      	push	{r7, lr}
 8015698:	b088      	sub	sp, #32
 801569a:	af04      	add	r7, sp, #16
 801569c:	60f8      	str	r0, [r7, #12]
 801569e:	60b9      	str	r1, [r7, #8]
 80156a0:	4611      	mov	r1, r2
 80156a2:	461a      	mov	r2, r3
 80156a4:	460b      	mov	r3, r1
 80156a6:	80fb      	strh	r3, [r7, #6]
 80156a8:	4613      	mov	r3, r2
 80156aa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80156ac:	7979      	ldrb	r1, [r7, #5]
 80156ae:	2300      	movs	r3, #0
 80156b0:	9303      	str	r3, [sp, #12]
 80156b2:	88fb      	ldrh	r3, [r7, #6]
 80156b4:	9302      	str	r3, [sp, #8]
 80156b6:	68bb      	ldr	r3, [r7, #8]
 80156b8:	9301      	str	r3, [sp, #4]
 80156ba:	2301      	movs	r3, #1
 80156bc:	9300      	str	r3, [sp, #0]
 80156be:	2300      	movs	r3, #0
 80156c0:	2201      	movs	r2, #1
 80156c2:	68f8      	ldr	r0, [r7, #12]
 80156c4:	f003 f927 	bl	8018916 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80156c8:	2300      	movs	r3, #0

}
 80156ca:	4618      	mov	r0, r3
 80156cc:	3710      	adds	r7, #16
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}

080156d2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80156d2:	b580      	push	{r7, lr}
 80156d4:	b088      	sub	sp, #32
 80156d6:	af04      	add	r7, sp, #16
 80156d8:	60f8      	str	r0, [r7, #12]
 80156da:	60b9      	str	r1, [r7, #8]
 80156dc:	4611      	mov	r1, r2
 80156de:	461a      	mov	r2, r3
 80156e0:	460b      	mov	r3, r1
 80156e2:	80fb      	strh	r3, [r7, #6]
 80156e4:	4613      	mov	r3, r2
 80156e6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d001      	beq.n	80156f6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80156f2:	2300      	movs	r3, #0
 80156f4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80156f6:	7979      	ldrb	r1, [r7, #5]
 80156f8:	7e3b      	ldrb	r3, [r7, #24]
 80156fa:	9303      	str	r3, [sp, #12]
 80156fc:	88fb      	ldrh	r3, [r7, #6]
 80156fe:	9302      	str	r3, [sp, #8]
 8015700:	68bb      	ldr	r3, [r7, #8]
 8015702:	9301      	str	r3, [sp, #4]
 8015704:	2301      	movs	r3, #1
 8015706:	9300      	str	r3, [sp, #0]
 8015708:	2302      	movs	r3, #2
 801570a:	2200      	movs	r2, #0
 801570c:	68f8      	ldr	r0, [r7, #12]
 801570e:	f003 f902 	bl	8018916 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8015712:	2300      	movs	r3, #0
}
 8015714:	4618      	mov	r0, r3
 8015716:	3710      	adds	r7, #16
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}

0801571c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b088      	sub	sp, #32
 8015720:	af04      	add	r7, sp, #16
 8015722:	60f8      	str	r0, [r7, #12]
 8015724:	60b9      	str	r1, [r7, #8]
 8015726:	4611      	mov	r1, r2
 8015728:	461a      	mov	r2, r3
 801572a:	460b      	mov	r3, r1
 801572c:	80fb      	strh	r3, [r7, #6]
 801572e:	4613      	mov	r3, r2
 8015730:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8015732:	7979      	ldrb	r1, [r7, #5]
 8015734:	2300      	movs	r3, #0
 8015736:	9303      	str	r3, [sp, #12]
 8015738:	88fb      	ldrh	r3, [r7, #6]
 801573a:	9302      	str	r3, [sp, #8]
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	9301      	str	r3, [sp, #4]
 8015740:	2301      	movs	r3, #1
 8015742:	9300      	str	r3, [sp, #0]
 8015744:	2302      	movs	r3, #2
 8015746:	2201      	movs	r2, #1
 8015748:	68f8      	ldr	r0, [r7, #12]
 801574a:	f003 f8e4 	bl	8018916 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801574e:	2300      	movs	r3, #0
}
 8015750:	4618      	mov	r0, r3
 8015752:	3710      	adds	r7, #16
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}

08015758 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b086      	sub	sp, #24
 801575c:	af04      	add	r7, sp, #16
 801575e:	6078      	str	r0, [r7, #4]
 8015760:	4608      	mov	r0, r1
 8015762:	4611      	mov	r1, r2
 8015764:	461a      	mov	r2, r3
 8015766:	4603      	mov	r3, r0
 8015768:	70fb      	strb	r3, [r7, #3]
 801576a:	460b      	mov	r3, r1
 801576c:	70bb      	strb	r3, [r7, #2]
 801576e:	4613      	mov	r3, r2
 8015770:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8015772:	7878      	ldrb	r0, [r7, #1]
 8015774:	78ba      	ldrb	r2, [r7, #2]
 8015776:	78f9      	ldrb	r1, [r7, #3]
 8015778:	8b3b      	ldrh	r3, [r7, #24]
 801577a:	9302      	str	r3, [sp, #8]
 801577c:	7d3b      	ldrb	r3, [r7, #20]
 801577e:	9301      	str	r3, [sp, #4]
 8015780:	7c3b      	ldrb	r3, [r7, #16]
 8015782:	9300      	str	r3, [sp, #0]
 8015784:	4603      	mov	r3, r0
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f003 f877 	bl	801887a <USBH_LL_OpenPipe>

  return USBH_OK;
 801578c:	2300      	movs	r3, #0
}
 801578e:	4618      	mov	r0, r3
 8015790:	3708      	adds	r7, #8
 8015792:	46bd      	mov	sp, r7
 8015794:	bd80      	pop	{r7, pc}

08015796 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8015796:	b580      	push	{r7, lr}
 8015798:	b082      	sub	sp, #8
 801579a:	af00      	add	r7, sp, #0
 801579c:	6078      	str	r0, [r7, #4]
 801579e:	460b      	mov	r3, r1
 80157a0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80157a2:	78fb      	ldrb	r3, [r7, #3]
 80157a4:	4619      	mov	r1, r3
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f003 f896 	bl	80188d8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80157ac:	2300      	movs	r3, #0
}
 80157ae:	4618      	mov	r0, r3
 80157b0:	3708      	adds	r7, #8
 80157b2:	46bd      	mov	sp, r7
 80157b4:	bd80      	pop	{r7, pc}

080157b6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80157b6:	b580      	push	{r7, lr}
 80157b8:	b084      	sub	sp, #16
 80157ba:	af00      	add	r7, sp, #0
 80157bc:	6078      	str	r0, [r7, #4]
 80157be:	460b      	mov	r3, r1
 80157c0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80157c2:	6878      	ldr	r0, [r7, #4]
 80157c4:	f000 f836 	bl	8015834 <USBH_GetFreePipe>
 80157c8:	4603      	mov	r3, r0
 80157ca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80157cc:	89fb      	ldrh	r3, [r7, #14]
 80157ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157d2:	4293      	cmp	r3, r2
 80157d4:	d00a      	beq.n	80157ec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80157d6:	78fa      	ldrb	r2, [r7, #3]
 80157d8:	89fb      	ldrh	r3, [r7, #14]
 80157da:	f003 030f 	and.w	r3, r3, #15
 80157de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80157e2:	6879      	ldr	r1, [r7, #4]
 80157e4:	33e0      	adds	r3, #224	; 0xe0
 80157e6:	009b      	lsls	r3, r3, #2
 80157e8:	440b      	add	r3, r1
 80157ea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80157ec:	89fb      	ldrh	r3, [r7, #14]
 80157ee:	b2db      	uxtb	r3, r3
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	3710      	adds	r7, #16
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd80      	pop	{r7, pc}

080157f8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80157f8:	b480      	push	{r7}
 80157fa:	b083      	sub	sp, #12
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
 8015800:	460b      	mov	r3, r1
 8015802:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8015804:	78fb      	ldrb	r3, [r7, #3]
 8015806:	2b0f      	cmp	r3, #15
 8015808:	d80d      	bhi.n	8015826 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801580a:	78fb      	ldrb	r3, [r7, #3]
 801580c:	687a      	ldr	r2, [r7, #4]
 801580e:	33e0      	adds	r3, #224	; 0xe0
 8015810:	009b      	lsls	r3, r3, #2
 8015812:	4413      	add	r3, r2
 8015814:	685a      	ldr	r2, [r3, #4]
 8015816:	78fb      	ldrb	r3, [r7, #3]
 8015818:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801581c:	6879      	ldr	r1, [r7, #4]
 801581e:	33e0      	adds	r3, #224	; 0xe0
 8015820:	009b      	lsls	r3, r3, #2
 8015822:	440b      	add	r3, r1
 8015824:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8015826:	2300      	movs	r3, #0
}
 8015828:	4618      	mov	r0, r3
 801582a:	370c      	adds	r7, #12
 801582c:	46bd      	mov	sp, r7
 801582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015832:	4770      	bx	lr

08015834 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8015834:	b480      	push	{r7}
 8015836:	b085      	sub	sp, #20
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801583c:	2300      	movs	r3, #0
 801583e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8015840:	2300      	movs	r3, #0
 8015842:	73fb      	strb	r3, [r7, #15]
 8015844:	e00f      	b.n	8015866 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8015846:	7bfb      	ldrb	r3, [r7, #15]
 8015848:	687a      	ldr	r2, [r7, #4]
 801584a:	33e0      	adds	r3, #224	; 0xe0
 801584c:	009b      	lsls	r3, r3, #2
 801584e:	4413      	add	r3, r2
 8015850:	685b      	ldr	r3, [r3, #4]
 8015852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015856:	2b00      	cmp	r3, #0
 8015858:	d102      	bne.n	8015860 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801585a:	7bfb      	ldrb	r3, [r7, #15]
 801585c:	b29b      	uxth	r3, r3
 801585e:	e007      	b.n	8015870 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8015860:	7bfb      	ldrb	r3, [r7, #15]
 8015862:	3301      	adds	r3, #1
 8015864:	73fb      	strb	r3, [r7, #15]
 8015866:	7bfb      	ldrb	r3, [r7, #15]
 8015868:	2b0f      	cmp	r3, #15
 801586a:	d9ec      	bls.n	8015846 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801586c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8015870:	4618      	mov	r0, r3
 8015872:	3714      	adds	r7, #20
 8015874:	46bd      	mov	sp, r7
 8015876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587a:	4770      	bx	lr

0801587c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801587c:	b480      	push	{r7}
 801587e:	b087      	sub	sp, #28
 8015880:	af00      	add	r7, sp, #0
 8015882:	60f8      	str	r0, [r7, #12]
 8015884:	60b9      	str	r1, [r7, #8]
 8015886:	4613      	mov	r3, r2
 8015888:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801588a:	2301      	movs	r3, #1
 801588c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801588e:	2300      	movs	r3, #0
 8015890:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015892:	4b1f      	ldr	r3, [pc, #124]	; (8015910 <FATFS_LinkDriverEx+0x94>)
 8015894:	7a5b      	ldrb	r3, [r3, #9]
 8015896:	b2db      	uxtb	r3, r3
 8015898:	2b00      	cmp	r3, #0
 801589a:	d131      	bne.n	8015900 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801589c:	4b1c      	ldr	r3, [pc, #112]	; (8015910 <FATFS_LinkDriverEx+0x94>)
 801589e:	7a5b      	ldrb	r3, [r3, #9]
 80158a0:	b2db      	uxtb	r3, r3
 80158a2:	461a      	mov	r2, r3
 80158a4:	4b1a      	ldr	r3, [pc, #104]	; (8015910 <FATFS_LinkDriverEx+0x94>)
 80158a6:	2100      	movs	r1, #0
 80158a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80158aa:	4b19      	ldr	r3, [pc, #100]	; (8015910 <FATFS_LinkDriverEx+0x94>)
 80158ac:	7a5b      	ldrb	r3, [r3, #9]
 80158ae:	b2db      	uxtb	r3, r3
 80158b0:	4a17      	ldr	r2, [pc, #92]	; (8015910 <FATFS_LinkDriverEx+0x94>)
 80158b2:	009b      	lsls	r3, r3, #2
 80158b4:	4413      	add	r3, r2
 80158b6:	68fa      	ldr	r2, [r7, #12]
 80158b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80158ba:	4b15      	ldr	r3, [pc, #84]	; (8015910 <FATFS_LinkDriverEx+0x94>)
 80158bc:	7a5b      	ldrb	r3, [r3, #9]
 80158be:	b2db      	uxtb	r3, r3
 80158c0:	461a      	mov	r2, r3
 80158c2:	4b13      	ldr	r3, [pc, #76]	; (8015910 <FATFS_LinkDriverEx+0x94>)
 80158c4:	4413      	add	r3, r2
 80158c6:	79fa      	ldrb	r2, [r7, #7]
 80158c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80158ca:	4b11      	ldr	r3, [pc, #68]	; (8015910 <FATFS_LinkDriverEx+0x94>)
 80158cc:	7a5b      	ldrb	r3, [r3, #9]
 80158ce:	b2db      	uxtb	r3, r3
 80158d0:	1c5a      	adds	r2, r3, #1
 80158d2:	b2d1      	uxtb	r1, r2
 80158d4:	4a0e      	ldr	r2, [pc, #56]	; (8015910 <FATFS_LinkDriverEx+0x94>)
 80158d6:	7251      	strb	r1, [r2, #9]
 80158d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80158da:	7dbb      	ldrb	r3, [r7, #22]
 80158dc:	3330      	adds	r3, #48	; 0x30
 80158de:	b2da      	uxtb	r2, r3
 80158e0:	68bb      	ldr	r3, [r7, #8]
 80158e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80158e4:	68bb      	ldr	r3, [r7, #8]
 80158e6:	3301      	adds	r3, #1
 80158e8:	223a      	movs	r2, #58	; 0x3a
 80158ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80158ec:	68bb      	ldr	r3, [r7, #8]
 80158ee:	3302      	adds	r3, #2
 80158f0:	222f      	movs	r2, #47	; 0x2f
 80158f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	3303      	adds	r3, #3
 80158f8:	2200      	movs	r2, #0
 80158fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80158fc:	2300      	movs	r3, #0
 80158fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015900:	7dfb      	ldrb	r3, [r7, #23]
}
 8015902:	4618      	mov	r0, r3
 8015904:	371c      	adds	r7, #28
 8015906:	46bd      	mov	sp, r7
 8015908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801590c:	4770      	bx	lr
 801590e:	bf00      	nop
 8015910:	20041aa8 	.word	0x20041aa8

08015914 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b082      	sub	sp, #8
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801591e:	2200      	movs	r2, #0
 8015920:	6839      	ldr	r1, [r7, #0]
 8015922:	6878      	ldr	r0, [r7, #4]
 8015924:	f7ff ffaa 	bl	801587c <FATFS_LinkDriverEx>
 8015928:	4603      	mov	r3, r0
}
 801592a:	4618      	mov	r0, r3
 801592c:	3708      	adds	r7, #8
 801592e:	46bd      	mov	sp, r7
 8015930:	bd80      	pop	{r7, pc}

08015932 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8015932:	b480      	push	{r7}
 8015934:	b085      	sub	sp, #20
 8015936:	af00      	add	r7, sp, #0
 8015938:	4603      	mov	r3, r0
 801593a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801593c:	2300      	movs	r3, #0
 801593e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8015940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015944:	2b84      	cmp	r3, #132	; 0x84
 8015946:	d005      	beq.n	8015954 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8015948:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	4413      	add	r3, r2
 8015950:	3303      	adds	r3, #3
 8015952:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8015954:	68fb      	ldr	r3, [r7, #12]
}
 8015956:	4618      	mov	r0, r3
 8015958:	3714      	adds	r7, #20
 801595a:	46bd      	mov	sp, r7
 801595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015960:	4770      	bx	lr

08015962 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8015962:	b480      	push	{r7}
 8015964:	b083      	sub	sp, #12
 8015966:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015968:	f3ef 8305 	mrs	r3, IPSR
 801596c:	607b      	str	r3, [r7, #4]
  return(result);
 801596e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8015970:	2b00      	cmp	r3, #0
 8015972:	bf14      	ite	ne
 8015974:	2301      	movne	r3, #1
 8015976:	2300      	moveq	r3, #0
 8015978:	b2db      	uxtb	r3, r3
}
 801597a:	4618      	mov	r0, r3
 801597c:	370c      	adds	r7, #12
 801597e:	46bd      	mov	sp, r7
 8015980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015984:	4770      	bx	lr

08015986 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8015986:	b580      	push	{r7, lr}
 8015988:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801598a:	f001 f9ff 	bl	8016d8c <vTaskStartScheduler>
  
  return osOK;
 801598e:	2300      	movs	r3, #0
}
 8015990:	4618      	mov	r0, r3
 8015992:	bd80      	pop	{r7, pc}

08015994 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8015998:	f001 fe68 	bl	801766c <xTaskGetSchedulerState>
 801599c:	4603      	mov	r3, r0
 801599e:	2b01      	cmp	r3, #1
 80159a0:	d101      	bne.n	80159a6 <osKernelRunning+0x12>
    return 0;
 80159a2:	2300      	movs	r3, #0
 80159a4:	e000      	b.n	80159a8 <osKernelRunning+0x14>
  else
    return 1;
 80159a6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80159a8:	4618      	mov	r0, r3
 80159aa:	bd80      	pop	{r7, pc}

080159ac <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80159b0:	f7ff ffd7 	bl	8015962 <inHandlerMode>
 80159b4:	4603      	mov	r3, r0
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d003      	beq.n	80159c2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80159ba:	f001 fb11 	bl	8016fe0 <xTaskGetTickCountFromISR>
 80159be:	4603      	mov	r3, r0
 80159c0:	e002      	b.n	80159c8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80159c2:	f001 fafd 	bl	8016fc0 <xTaskGetTickCount>
 80159c6:	4603      	mov	r3, r0
  }
}
 80159c8:	4618      	mov	r0, r3
 80159ca:	bd80      	pop	{r7, pc}

080159cc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80159cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159ce:	b089      	sub	sp, #36	; 0x24
 80159d0:	af04      	add	r7, sp, #16
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	695b      	ldr	r3, [r3, #20]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d020      	beq.n	8015a20 <osThreadCreate+0x54>
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	699b      	ldr	r3, [r3, #24]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d01c      	beq.n	8015a20 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	685c      	ldr	r4, [r3, #4]
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	681d      	ldr	r5, [r3, #0]
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	691e      	ldr	r6, [r3, #16]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80159f8:	4618      	mov	r0, r3
 80159fa:	f7ff ff9a 	bl	8015932 <makeFreeRtosPriority>
 80159fe:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	695b      	ldr	r3, [r3, #20]
 8015a04:	687a      	ldr	r2, [r7, #4]
 8015a06:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015a08:	9202      	str	r2, [sp, #8]
 8015a0a:	9301      	str	r3, [sp, #4]
 8015a0c:	9100      	str	r1, [sp, #0]
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	4632      	mov	r2, r6
 8015a12:	4629      	mov	r1, r5
 8015a14:	4620      	mov	r0, r4
 8015a16:	f000 ffc5 	bl	80169a4 <xTaskCreateStatic>
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	60fb      	str	r3, [r7, #12]
 8015a1e:	e01c      	b.n	8015a5a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	685c      	ldr	r4, [r3, #4]
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015a2c:	b29e      	uxth	r6, r3
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7ff ff7c 	bl	8015932 <makeFreeRtosPriority>
 8015a3a:	4602      	mov	r2, r0
 8015a3c:	f107 030c 	add.w	r3, r7, #12
 8015a40:	9301      	str	r3, [sp, #4]
 8015a42:	9200      	str	r2, [sp, #0]
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	4632      	mov	r2, r6
 8015a48:	4629      	mov	r1, r5
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	f001 f80d 	bl	8016a6a <xTaskCreate>
 8015a50:	4603      	mov	r3, r0
 8015a52:	2b01      	cmp	r3, #1
 8015a54:	d001      	beq.n	8015a5a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8015a56:	2300      	movs	r3, #0
 8015a58:	e000      	b.n	8015a5c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
}
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	3714      	adds	r7, #20
 8015a60:	46bd      	mov	sp, r7
 8015a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a64 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b084      	sub	sp, #16
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d001      	beq.n	8015a7a <osDelay+0x16>
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	e000      	b.n	8015a7c <osDelay+0x18>
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f001 f94f 	bl	8016d20 <vTaskDelay>
  
  return osOK;
 8015a82:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3710      	adds	r7, #16
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}

08015a8c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b086      	sub	sp, #24
 8015a90:	af02      	add	r7, sp, #8
 8015a92:	6078      	str	r0, [r7, #4]
 8015a94:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015a96:	2300      	movs	r3, #0
 8015a98:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8015a9e:	f7ff ff60 	bl	8015962 <inHandlerMode>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d01c      	beq.n	8015ae2 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8015aa8:	6839      	ldr	r1, [r7, #0]
 8015aaa:	f107 0208 	add.w	r2, r7, #8
 8015aae:	f107 030c 	add.w	r3, r7, #12
 8015ab2:	9300      	str	r3, [sp, #0]
 8015ab4:	4613      	mov	r3, r2
 8015ab6:	2201      	movs	r2, #1
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f001 ffa3 	bl	8017a04 <xTaskGenericNotifyFromISR>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	2b01      	cmp	r3, #1
 8015ac2:	d002      	beq.n	8015aca <osSignalSet+0x3e>
      return 0x80000000;
 8015ac4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015ac8:	e019      	b.n	8015afe <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d015      	beq.n	8015afc <osSignalSet+0x70>
 8015ad0:	4b0d      	ldr	r3, [pc, #52]	; (8015b08 <osSignalSet+0x7c>)
 8015ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ad6:	601a      	str	r2, [r3, #0]
 8015ad8:	f3bf 8f4f 	dsb	sy
 8015adc:	f3bf 8f6f 	isb	sy
 8015ae0:	e00c      	b.n	8015afc <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8015ae2:	6839      	ldr	r1, [r7, #0]
 8015ae4:	f107 0308 	add.w	r3, r7, #8
 8015ae8:	2201      	movs	r2, #1
 8015aea:	6878      	ldr	r0, [r7, #4]
 8015aec:	f001 fec6 	bl	801787c <xTaskGenericNotify>
 8015af0:	4603      	mov	r3, r0
 8015af2:	2b01      	cmp	r3, #1
 8015af4:	d002      	beq.n	8015afc <osSignalSet+0x70>
    return 0x80000000;
 8015af6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015afa:	e000      	b.n	8015afe <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8015afc:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3710      	adds	r7, #16
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
 8015b06:	bf00      	nop
 8015b08:	e000ed04 	.word	0xe000ed04

08015b0c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8015b0c:	b590      	push	{r4, r7, lr}
 8015b0e:	b089      	sub	sp, #36	; 0x24
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	60f8      	str	r0, [r7, #12]
 8015b14:	60b9      	str	r1, [r7, #8]
 8015b16:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8015b18:	2300      	movs	r3, #0
 8015b1a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b26:	d103      	bne.n	8015b30 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8015b28:	f04f 33ff 	mov.w	r3, #4294967295
 8015b2c:	61fb      	str	r3, [r7, #28]
 8015b2e:	e009      	b.n	8015b44 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d006      	beq.n	8015b44 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8015b3a:	69fb      	ldr	r3, [r7, #28]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d101      	bne.n	8015b44 <osSignalWait+0x38>
      ticks = 1;
 8015b40:	2301      	movs	r3, #1
 8015b42:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8015b44:	f7ff ff0d 	bl	8015962 <inHandlerMode>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d002      	beq.n	8015b54 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8015b4e:	2382      	movs	r3, #130	; 0x82
 8015b50:	613b      	str	r3, [r7, #16]
 8015b52:	e01b      	b.n	8015b8c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8015b54:	68b9      	ldr	r1, [r7, #8]
 8015b56:	f107 0310 	add.w	r3, r7, #16
 8015b5a:	1d1a      	adds	r2, r3, #4
 8015b5c:	69fb      	ldr	r3, [r7, #28]
 8015b5e:	2000      	movs	r0, #0
 8015b60:	f001 fe2c 	bl	80177bc <xTaskNotifyWait>
 8015b64:	4603      	mov	r3, r0
 8015b66:	2b01      	cmp	r3, #1
 8015b68:	d008      	beq.n	8015b7c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8015b6a:	69fb      	ldr	r3, [r7, #28]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d102      	bne.n	8015b76 <osSignalWait+0x6a>
 8015b70:	2300      	movs	r3, #0
 8015b72:	613b      	str	r3, [r7, #16]
 8015b74:	e00a      	b.n	8015b8c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8015b76:	2340      	movs	r3, #64	; 0x40
 8015b78:	613b      	str	r3, [r7, #16]
 8015b7a:	e007      	b.n	8015b8c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8015b7c:	697b      	ldr	r3, [r7, #20]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	da02      	bge.n	8015b88 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8015b82:	2386      	movs	r3, #134	; 0x86
 8015b84:	613b      	str	r3, [r7, #16]
 8015b86:	e001      	b.n	8015b8c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8015b88:	2308      	movs	r3, #8
 8015b8a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	461c      	mov	r4, r3
 8015b90:	f107 0310 	add.w	r3, r7, #16
 8015b94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015b98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015b9c:	68f8      	ldr	r0, [r7, #12]
 8015b9e:	3724      	adds	r7, #36	; 0x24
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	bd90      	pop	{r4, r7, pc}

08015ba4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8015ba4:	b590      	push	{r4, r7, lr}
 8015ba6:	b085      	sub	sp, #20
 8015ba8:	af02      	add	r7, sp, #8
 8015baa:	6078      	str	r0, [r7, #4]
 8015bac:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	689b      	ldr	r3, [r3, #8]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d011      	beq.n	8015bda <osMessageCreate+0x36>
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	68db      	ldr	r3, [r3, #12]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d00d      	beq.n	8015bda <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	6818      	ldr	r0, [r3, #0]
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	6859      	ldr	r1, [r3, #4]
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	689a      	ldr	r2, [r3, #8]
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	68db      	ldr	r3, [r3, #12]
 8015bce:	2400      	movs	r4, #0
 8015bd0:	9400      	str	r4, [sp, #0]
 8015bd2:	f000 f9e1 	bl	8015f98 <xQueueGenericCreateStatic>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	e008      	b.n	8015bec <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	6818      	ldr	r0, [r3, #0]
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	685b      	ldr	r3, [r3, #4]
 8015be2:	2200      	movs	r2, #0
 8015be4:	4619      	mov	r1, r3
 8015be6:	f000 fa59 	bl	801609c <xQueueGenericCreate>
 8015bea:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	370c      	adds	r7, #12
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd90      	pop	{r4, r7, pc}

08015bf4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b086      	sub	sp, #24
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	60f8      	str	r0, [r7, #12]
 8015bfc:	60b9      	str	r1, [r7, #8]
 8015bfe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8015c00:	2300      	movs	r3, #0
 8015c02:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d101      	bne.n	8015c12 <osMessagePut+0x1e>
    ticks = 1;
 8015c0e:	2301      	movs	r3, #1
 8015c10:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8015c12:	f7ff fea6 	bl	8015962 <inHandlerMode>
 8015c16:	4603      	mov	r3, r0
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d018      	beq.n	8015c4e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8015c1c:	f107 0210 	add.w	r2, r7, #16
 8015c20:	f107 0108 	add.w	r1, r7, #8
 8015c24:	2300      	movs	r3, #0
 8015c26:	68f8      	ldr	r0, [r7, #12]
 8015c28:	f000 fba0 	bl	801636c <xQueueGenericSendFromISR>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	2b01      	cmp	r3, #1
 8015c30:	d001      	beq.n	8015c36 <osMessagePut+0x42>
      return osErrorOS;
 8015c32:	23ff      	movs	r3, #255	; 0xff
 8015c34:	e018      	b.n	8015c68 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015c36:	693b      	ldr	r3, [r7, #16]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d014      	beq.n	8015c66 <osMessagePut+0x72>
 8015c3c:	4b0c      	ldr	r3, [pc, #48]	; (8015c70 <osMessagePut+0x7c>)
 8015c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c42:	601a      	str	r2, [r3, #0]
 8015c44:	f3bf 8f4f 	dsb	sy
 8015c48:	f3bf 8f6f 	isb	sy
 8015c4c:	e00b      	b.n	8015c66 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8015c4e:	f107 0108 	add.w	r1, r7, #8
 8015c52:	2300      	movs	r3, #0
 8015c54:	697a      	ldr	r2, [r7, #20]
 8015c56:	68f8      	ldr	r0, [r7, #12]
 8015c58:	f000 fa82 	bl	8016160 <xQueueGenericSend>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	2b01      	cmp	r3, #1
 8015c60:	d001      	beq.n	8015c66 <osMessagePut+0x72>
      return osErrorOS;
 8015c62:	23ff      	movs	r3, #255	; 0xff
 8015c64:	e000      	b.n	8015c68 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8015c66:	2300      	movs	r3, #0
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3718      	adds	r7, #24
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}
 8015c70:	e000ed04 	.word	0xe000ed04

08015c74 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8015c74:	b590      	push	{r4, r7, lr}
 8015c76:	b08b      	sub	sp, #44	; 0x2c
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	60f8      	str	r0, [r7, #12]
 8015c7c:	60b9      	str	r1, [r7, #8]
 8015c7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8015c80:	68bb      	ldr	r3, [r7, #8]
 8015c82:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8015c84:	2300      	movs	r3, #0
 8015c86:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8015c88:	68bb      	ldr	r3, [r7, #8]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d10a      	bne.n	8015ca4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8015c8e:	2380      	movs	r3, #128	; 0x80
 8015c90:	617b      	str	r3, [r7, #20]
    return event;
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	461c      	mov	r4, r3
 8015c96:	f107 0314 	add.w	r3, r7, #20
 8015c9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015ca2:	e054      	b.n	8015d4e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8015ca8:	2300      	movs	r3, #0
 8015caa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cb2:	d103      	bne.n	8015cbc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8015cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8015cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8015cba:	e009      	b.n	8015cd0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d006      	beq.n	8015cd0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8015cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d101      	bne.n	8015cd0 <osMessageGet+0x5c>
      ticks = 1;
 8015ccc:	2301      	movs	r3, #1
 8015cce:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8015cd0:	f7ff fe47 	bl	8015962 <inHandlerMode>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d01c      	beq.n	8015d14 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8015cda:	f107 0220 	add.w	r2, r7, #32
 8015cde:	f107 0314 	add.w	r3, r7, #20
 8015ce2:	3304      	adds	r3, #4
 8015ce4:	4619      	mov	r1, r3
 8015ce6:	68b8      	ldr	r0, [r7, #8]
 8015ce8:	f000 fcc6 	bl	8016678 <xQueueReceiveFromISR>
 8015cec:	4603      	mov	r3, r0
 8015cee:	2b01      	cmp	r3, #1
 8015cf0:	d102      	bne.n	8015cf8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8015cf2:	2310      	movs	r3, #16
 8015cf4:	617b      	str	r3, [r7, #20]
 8015cf6:	e001      	b.n	8015cfc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015cfc:	6a3b      	ldr	r3, [r7, #32]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d01d      	beq.n	8015d3e <osMessageGet+0xca>
 8015d02:	4b15      	ldr	r3, [pc, #84]	; (8015d58 <osMessageGet+0xe4>)
 8015d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d08:	601a      	str	r2, [r3, #0]
 8015d0a:	f3bf 8f4f 	dsb	sy
 8015d0e:	f3bf 8f6f 	isb	sy
 8015d12:	e014      	b.n	8015d3e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8015d14:	f107 0314 	add.w	r3, r7, #20
 8015d18:	3304      	adds	r3, #4
 8015d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d1c:	4619      	mov	r1, r3
 8015d1e:	68b8      	ldr	r0, [r7, #8]
 8015d20:	f000 fbc4 	bl	80164ac <xQueueReceive>
 8015d24:	4603      	mov	r3, r0
 8015d26:	2b01      	cmp	r3, #1
 8015d28:	d102      	bne.n	8015d30 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8015d2a:	2310      	movs	r3, #16
 8015d2c:	617b      	str	r3, [r7, #20]
 8015d2e:	e006      	b.n	8015d3e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8015d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d101      	bne.n	8015d3a <osMessageGet+0xc6>
 8015d36:	2300      	movs	r3, #0
 8015d38:	e000      	b.n	8015d3c <osMessageGet+0xc8>
 8015d3a:	2340      	movs	r3, #64	; 0x40
 8015d3c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	461c      	mov	r4, r3
 8015d42:	f107 0314 	add.w	r3, r7, #20
 8015d46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015d4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015d4e:	68f8      	ldr	r0, [r7, #12]
 8015d50:	372c      	adds	r7, #44	; 0x2c
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd90      	pop	{r4, r7, pc}
 8015d56:	bf00      	nop
 8015d58:	e000ed04 	.word	0xe000ed04

08015d5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015d5c:	b480      	push	{r7}
 8015d5e:	b083      	sub	sp, #12
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f103 0208 	add.w	r2, r3, #8
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	f04f 32ff 	mov.w	r2, #4294967295
 8015d74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	f103 0208 	add.w	r2, r3, #8
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f103 0208 	add.w	r2, r3, #8
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015d90:	bf00      	nop
 8015d92:	370c      	adds	r7, #12
 8015d94:	46bd      	mov	sp, r7
 8015d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9a:	4770      	bx	lr

08015d9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015d9c:	b480      	push	{r7}
 8015d9e:	b083      	sub	sp, #12
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2200      	movs	r2, #0
 8015da8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015daa:	bf00      	nop
 8015dac:	370c      	adds	r7, #12
 8015dae:	46bd      	mov	sp, r7
 8015db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db4:	4770      	bx	lr

08015db6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015db6:	b480      	push	{r7}
 8015db8:	b085      	sub	sp, #20
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	6078      	str	r0, [r7, #4]
 8015dbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	685b      	ldr	r3, [r3, #4]
 8015dc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	68fa      	ldr	r2, [r7, #12]
 8015dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	689a      	ldr	r2, [r3, #8]
 8015dd0:	683b      	ldr	r3, [r7, #0]
 8015dd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	689b      	ldr	r3, [r3, #8]
 8015dd8:	683a      	ldr	r2, [r7, #0]
 8015dda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	683a      	ldr	r2, [r7, #0]
 8015de0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015de2:	683b      	ldr	r3, [r7, #0]
 8015de4:	687a      	ldr	r2, [r7, #4]
 8015de6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	1c5a      	adds	r2, r3, #1
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	601a      	str	r2, [r3, #0]
}
 8015df2:	bf00      	nop
 8015df4:	3714      	adds	r7, #20
 8015df6:	46bd      	mov	sp, r7
 8015df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfc:	4770      	bx	lr

08015dfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015dfe:	b480      	push	{r7}
 8015e00:	b085      	sub	sp, #20
 8015e02:	af00      	add	r7, sp, #0
 8015e04:	6078      	str	r0, [r7, #4]
 8015e06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015e0e:	68bb      	ldr	r3, [r7, #8]
 8015e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e14:	d103      	bne.n	8015e1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	691b      	ldr	r3, [r3, #16]
 8015e1a:	60fb      	str	r3, [r7, #12]
 8015e1c:	e00c      	b.n	8015e38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	3308      	adds	r3, #8
 8015e22:	60fb      	str	r3, [r7, #12]
 8015e24:	e002      	b.n	8015e2c <vListInsert+0x2e>
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	685b      	ldr	r3, [r3, #4]
 8015e2a:	60fb      	str	r3, [r7, #12]
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	685b      	ldr	r3, [r3, #4]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	68ba      	ldr	r2, [r7, #8]
 8015e34:	429a      	cmp	r2, r3
 8015e36:	d2f6      	bcs.n	8015e26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	685a      	ldr	r2, [r3, #4]
 8015e3c:	683b      	ldr	r3, [r7, #0]
 8015e3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	685b      	ldr	r3, [r3, #4]
 8015e44:	683a      	ldr	r2, [r7, #0]
 8015e46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015e48:	683b      	ldr	r3, [r7, #0]
 8015e4a:	68fa      	ldr	r2, [r7, #12]
 8015e4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	683a      	ldr	r2, [r7, #0]
 8015e52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015e54:	683b      	ldr	r3, [r7, #0]
 8015e56:	687a      	ldr	r2, [r7, #4]
 8015e58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	1c5a      	adds	r2, r3, #1
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	601a      	str	r2, [r3, #0]
}
 8015e64:	bf00      	nop
 8015e66:	3714      	adds	r7, #20
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6e:	4770      	bx	lr

08015e70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015e70:	b480      	push	{r7}
 8015e72:	b085      	sub	sp, #20
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	691b      	ldr	r3, [r3, #16]
 8015e7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	685b      	ldr	r3, [r3, #4]
 8015e82:	687a      	ldr	r2, [r7, #4]
 8015e84:	6892      	ldr	r2, [r2, #8]
 8015e86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	689b      	ldr	r3, [r3, #8]
 8015e8c:	687a      	ldr	r2, [r7, #4]
 8015e8e:	6852      	ldr	r2, [r2, #4]
 8015e90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	685b      	ldr	r3, [r3, #4]
 8015e96:	687a      	ldr	r2, [r7, #4]
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	d103      	bne.n	8015ea4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	689a      	ldr	r2, [r3, #8]
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	1e5a      	subs	r2, r3, #1
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	681b      	ldr	r3, [r3, #0]
}
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3714      	adds	r7, #20
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec2:	4770      	bx	lr

08015ec4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b084      	sub	sp, #16
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d10c      	bne.n	8015ef2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015edc:	b672      	cpsid	i
 8015ede:	f383 8811 	msr	BASEPRI, r3
 8015ee2:	f3bf 8f6f 	isb	sy
 8015ee6:	f3bf 8f4f 	dsb	sy
 8015eea:	b662      	cpsie	i
 8015eec:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015eee:	bf00      	nop
 8015ef0:	e7fe      	b.n	8015ef0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8015ef2:	f001 ffe3 	bl	8017ebc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	681a      	ldr	r2, [r3, #0]
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015efe:	68f9      	ldr	r1, [r7, #12]
 8015f00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015f02:	fb01 f303 	mul.w	r3, r1, r3
 8015f06:	441a      	add	r2, r3
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	2200      	movs	r2, #0
 8015f10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	681a      	ldr	r2, [r3, #0]
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	681a      	ldr	r2, [r3, #0]
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015f22:	3b01      	subs	r3, #1
 8015f24:	68f9      	ldr	r1, [r7, #12]
 8015f26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015f28:	fb01 f303 	mul.w	r3, r1, r3
 8015f2c:	441a      	add	r2, r3
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	22ff      	movs	r2, #255	; 0xff
 8015f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	22ff      	movs	r2, #255	; 0xff
 8015f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015f42:	683b      	ldr	r3, [r7, #0]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d114      	bne.n	8015f72 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	691b      	ldr	r3, [r3, #16]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d01a      	beq.n	8015f86 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	3310      	adds	r3, #16
 8015f54:	4618      	mov	r0, r3
 8015f56:	f001 f9bf 	bl	80172d8 <xTaskRemoveFromEventList>
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d012      	beq.n	8015f86 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015f60:	4b0c      	ldr	r3, [pc, #48]	; (8015f94 <xQueueGenericReset+0xd0>)
 8015f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f66:	601a      	str	r2, [r3, #0]
 8015f68:	f3bf 8f4f 	dsb	sy
 8015f6c:	f3bf 8f6f 	isb	sy
 8015f70:	e009      	b.n	8015f86 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	3310      	adds	r3, #16
 8015f76:	4618      	mov	r0, r3
 8015f78:	f7ff fef0 	bl	8015d5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	3324      	adds	r3, #36	; 0x24
 8015f80:	4618      	mov	r0, r3
 8015f82:	f7ff feeb 	bl	8015d5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015f86:	f001 ffcd 	bl	8017f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015f8a:	2301      	movs	r3, #1
}
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	3710      	adds	r7, #16
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}
 8015f94:	e000ed04 	.word	0xe000ed04

08015f98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b08e      	sub	sp, #56	; 0x38
 8015f9c:	af02      	add	r7, sp, #8
 8015f9e:	60f8      	str	r0, [r7, #12]
 8015fa0:	60b9      	str	r1, [r7, #8]
 8015fa2:	607a      	str	r2, [r7, #4]
 8015fa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d10c      	bne.n	8015fc6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8015fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fb0:	b672      	cpsid	i
 8015fb2:	f383 8811 	msr	BASEPRI, r3
 8015fb6:	f3bf 8f6f 	isb	sy
 8015fba:	f3bf 8f4f 	dsb	sy
 8015fbe:	b662      	cpsie	i
 8015fc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015fc2:	bf00      	nop
 8015fc4:	e7fe      	b.n	8015fc4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d10c      	bne.n	8015fe6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8015fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fd0:	b672      	cpsid	i
 8015fd2:	f383 8811 	msr	BASEPRI, r3
 8015fd6:	f3bf 8f6f 	isb	sy
 8015fda:	f3bf 8f4f 	dsb	sy
 8015fde:	b662      	cpsie	i
 8015fe0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015fe2:	bf00      	nop
 8015fe4:	e7fe      	b.n	8015fe4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d002      	beq.n	8015ff2 <xQueueGenericCreateStatic+0x5a>
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d001      	beq.n	8015ff6 <xQueueGenericCreateStatic+0x5e>
 8015ff2:	2301      	movs	r3, #1
 8015ff4:	e000      	b.n	8015ff8 <xQueueGenericCreateStatic+0x60>
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d10c      	bne.n	8016016 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8015ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016000:	b672      	cpsid	i
 8016002:	f383 8811 	msr	BASEPRI, r3
 8016006:	f3bf 8f6f 	isb	sy
 801600a:	f3bf 8f4f 	dsb	sy
 801600e:	b662      	cpsie	i
 8016010:	623b      	str	r3, [r7, #32]
}
 8016012:	bf00      	nop
 8016014:	e7fe      	b.n	8016014 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d102      	bne.n	8016022 <xQueueGenericCreateStatic+0x8a>
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d101      	bne.n	8016026 <xQueueGenericCreateStatic+0x8e>
 8016022:	2301      	movs	r3, #1
 8016024:	e000      	b.n	8016028 <xQueueGenericCreateStatic+0x90>
 8016026:	2300      	movs	r3, #0
 8016028:	2b00      	cmp	r3, #0
 801602a:	d10c      	bne.n	8016046 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 801602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016030:	b672      	cpsid	i
 8016032:	f383 8811 	msr	BASEPRI, r3
 8016036:	f3bf 8f6f 	isb	sy
 801603a:	f3bf 8f4f 	dsb	sy
 801603e:	b662      	cpsie	i
 8016040:	61fb      	str	r3, [r7, #28]
}
 8016042:	bf00      	nop
 8016044:	e7fe      	b.n	8016044 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016046:	2348      	movs	r3, #72	; 0x48
 8016048:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801604a:	697b      	ldr	r3, [r7, #20]
 801604c:	2b48      	cmp	r3, #72	; 0x48
 801604e:	d00c      	beq.n	801606a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8016050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016054:	b672      	cpsid	i
 8016056:	f383 8811 	msr	BASEPRI, r3
 801605a:	f3bf 8f6f 	isb	sy
 801605e:	f3bf 8f4f 	dsb	sy
 8016062:	b662      	cpsie	i
 8016064:	61bb      	str	r3, [r7, #24]
}
 8016066:	bf00      	nop
 8016068:	e7fe      	b.n	8016068 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801606a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801606c:	683b      	ldr	r3, [r7, #0]
 801606e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016072:	2b00      	cmp	r3, #0
 8016074:	d00d      	beq.n	8016092 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016078:	2201      	movs	r2, #1
 801607a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801607e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016084:	9300      	str	r3, [sp, #0]
 8016086:	4613      	mov	r3, r2
 8016088:	687a      	ldr	r2, [r7, #4]
 801608a:	68b9      	ldr	r1, [r7, #8]
 801608c:	68f8      	ldr	r0, [r7, #12]
 801608e:	f000 f847 	bl	8016120 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016094:	4618      	mov	r0, r3
 8016096:	3730      	adds	r7, #48	; 0x30
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}

0801609c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801609c:	b580      	push	{r7, lr}
 801609e:	b08a      	sub	sp, #40	; 0x28
 80160a0:	af02      	add	r7, sp, #8
 80160a2:	60f8      	str	r0, [r7, #12]
 80160a4:	60b9      	str	r1, [r7, #8]
 80160a6:	4613      	mov	r3, r2
 80160a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d10c      	bne.n	80160ca <xQueueGenericCreate+0x2e>
	__asm volatile
 80160b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160b4:	b672      	cpsid	i
 80160b6:	f383 8811 	msr	BASEPRI, r3
 80160ba:	f3bf 8f6f 	isb	sy
 80160be:	f3bf 8f4f 	dsb	sy
 80160c2:	b662      	cpsie	i
 80160c4:	613b      	str	r3, [r7, #16]
}
 80160c6:	bf00      	nop
 80160c8:	e7fe      	b.n	80160c8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d102      	bne.n	80160d6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80160d0:	2300      	movs	r3, #0
 80160d2:	61fb      	str	r3, [r7, #28]
 80160d4:	e004      	b.n	80160e0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	68ba      	ldr	r2, [r7, #8]
 80160da:	fb02 f303 	mul.w	r3, r2, r3
 80160de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80160e0:	69fb      	ldr	r3, [r7, #28]
 80160e2:	3348      	adds	r3, #72	; 0x48
 80160e4:	4618      	mov	r0, r3
 80160e6:	f002 f815 	bl	8018114 <pvPortMalloc>
 80160ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80160ec:	69bb      	ldr	r3, [r7, #24]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d011      	beq.n	8016116 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80160f2:	69bb      	ldr	r3, [r7, #24]
 80160f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80160f6:	697b      	ldr	r3, [r7, #20]
 80160f8:	3348      	adds	r3, #72	; 0x48
 80160fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80160fc:	69bb      	ldr	r3, [r7, #24]
 80160fe:	2200      	movs	r2, #0
 8016100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016104:	79fa      	ldrb	r2, [r7, #7]
 8016106:	69bb      	ldr	r3, [r7, #24]
 8016108:	9300      	str	r3, [sp, #0]
 801610a:	4613      	mov	r3, r2
 801610c:	697a      	ldr	r2, [r7, #20]
 801610e:	68b9      	ldr	r1, [r7, #8]
 8016110:	68f8      	ldr	r0, [r7, #12]
 8016112:	f000 f805 	bl	8016120 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016116:	69bb      	ldr	r3, [r7, #24]
	}
 8016118:	4618      	mov	r0, r3
 801611a:	3720      	adds	r7, #32
 801611c:	46bd      	mov	sp, r7
 801611e:	bd80      	pop	{r7, pc}

08016120 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b084      	sub	sp, #16
 8016124:	af00      	add	r7, sp, #0
 8016126:	60f8      	str	r0, [r7, #12]
 8016128:	60b9      	str	r1, [r7, #8]
 801612a:	607a      	str	r2, [r7, #4]
 801612c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801612e:	68bb      	ldr	r3, [r7, #8]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d103      	bne.n	801613c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016134:	69bb      	ldr	r3, [r7, #24]
 8016136:	69ba      	ldr	r2, [r7, #24]
 8016138:	601a      	str	r2, [r3, #0]
 801613a:	e002      	b.n	8016142 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801613c:	69bb      	ldr	r3, [r7, #24]
 801613e:	687a      	ldr	r2, [r7, #4]
 8016140:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016142:	69bb      	ldr	r3, [r7, #24]
 8016144:	68fa      	ldr	r2, [r7, #12]
 8016146:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016148:	69bb      	ldr	r3, [r7, #24]
 801614a:	68ba      	ldr	r2, [r7, #8]
 801614c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801614e:	2101      	movs	r1, #1
 8016150:	69b8      	ldr	r0, [r7, #24]
 8016152:	f7ff feb7 	bl	8015ec4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016156:	bf00      	nop
 8016158:	3710      	adds	r7, #16
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}
	...

08016160 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b08e      	sub	sp, #56	; 0x38
 8016164:	af00      	add	r7, sp, #0
 8016166:	60f8      	str	r0, [r7, #12]
 8016168:	60b9      	str	r1, [r7, #8]
 801616a:	607a      	str	r2, [r7, #4]
 801616c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801616e:	2300      	movs	r3, #0
 8016170:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016178:	2b00      	cmp	r3, #0
 801617a:	d10c      	bne.n	8016196 <xQueueGenericSend+0x36>
	__asm volatile
 801617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016180:	b672      	cpsid	i
 8016182:	f383 8811 	msr	BASEPRI, r3
 8016186:	f3bf 8f6f 	isb	sy
 801618a:	f3bf 8f4f 	dsb	sy
 801618e:	b662      	cpsie	i
 8016190:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016192:	bf00      	nop
 8016194:	e7fe      	b.n	8016194 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d103      	bne.n	80161a4 <xQueueGenericSend+0x44>
 801619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d101      	bne.n	80161a8 <xQueueGenericSend+0x48>
 80161a4:	2301      	movs	r3, #1
 80161a6:	e000      	b.n	80161aa <xQueueGenericSend+0x4a>
 80161a8:	2300      	movs	r3, #0
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d10c      	bne.n	80161c8 <xQueueGenericSend+0x68>
	__asm volatile
 80161ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161b2:	b672      	cpsid	i
 80161b4:	f383 8811 	msr	BASEPRI, r3
 80161b8:	f3bf 8f6f 	isb	sy
 80161bc:	f3bf 8f4f 	dsb	sy
 80161c0:	b662      	cpsie	i
 80161c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80161c4:	bf00      	nop
 80161c6:	e7fe      	b.n	80161c6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80161c8:	683b      	ldr	r3, [r7, #0]
 80161ca:	2b02      	cmp	r3, #2
 80161cc:	d103      	bne.n	80161d6 <xQueueGenericSend+0x76>
 80161ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80161d2:	2b01      	cmp	r3, #1
 80161d4:	d101      	bne.n	80161da <xQueueGenericSend+0x7a>
 80161d6:	2301      	movs	r3, #1
 80161d8:	e000      	b.n	80161dc <xQueueGenericSend+0x7c>
 80161da:	2300      	movs	r3, #0
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d10c      	bne.n	80161fa <xQueueGenericSend+0x9a>
	__asm volatile
 80161e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161e4:	b672      	cpsid	i
 80161e6:	f383 8811 	msr	BASEPRI, r3
 80161ea:	f3bf 8f6f 	isb	sy
 80161ee:	f3bf 8f4f 	dsb	sy
 80161f2:	b662      	cpsie	i
 80161f4:	623b      	str	r3, [r7, #32]
}
 80161f6:	bf00      	nop
 80161f8:	e7fe      	b.n	80161f8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80161fa:	f001 fa37 	bl	801766c <xTaskGetSchedulerState>
 80161fe:	4603      	mov	r3, r0
 8016200:	2b00      	cmp	r3, #0
 8016202:	d102      	bne.n	801620a <xQueueGenericSend+0xaa>
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d101      	bne.n	801620e <xQueueGenericSend+0xae>
 801620a:	2301      	movs	r3, #1
 801620c:	e000      	b.n	8016210 <xQueueGenericSend+0xb0>
 801620e:	2300      	movs	r3, #0
 8016210:	2b00      	cmp	r3, #0
 8016212:	d10c      	bne.n	801622e <xQueueGenericSend+0xce>
	__asm volatile
 8016214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016218:	b672      	cpsid	i
 801621a:	f383 8811 	msr	BASEPRI, r3
 801621e:	f3bf 8f6f 	isb	sy
 8016222:	f3bf 8f4f 	dsb	sy
 8016226:	b662      	cpsie	i
 8016228:	61fb      	str	r3, [r7, #28]
}
 801622a:	bf00      	nop
 801622c:	e7fe      	b.n	801622c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801622e:	f001 fe45 	bl	8017ebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801623a:	429a      	cmp	r2, r3
 801623c:	d302      	bcc.n	8016244 <xQueueGenericSend+0xe4>
 801623e:	683b      	ldr	r3, [r7, #0]
 8016240:	2b02      	cmp	r3, #2
 8016242:	d129      	bne.n	8016298 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016244:	683a      	ldr	r2, [r7, #0]
 8016246:	68b9      	ldr	r1, [r7, #8]
 8016248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801624a:	f000 fa9b 	bl	8016784 <prvCopyDataToQueue>
 801624e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016254:	2b00      	cmp	r3, #0
 8016256:	d010      	beq.n	801627a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801625a:	3324      	adds	r3, #36	; 0x24
 801625c:	4618      	mov	r0, r3
 801625e:	f001 f83b 	bl	80172d8 <xTaskRemoveFromEventList>
 8016262:	4603      	mov	r3, r0
 8016264:	2b00      	cmp	r3, #0
 8016266:	d013      	beq.n	8016290 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016268:	4b3f      	ldr	r3, [pc, #252]	; (8016368 <xQueueGenericSend+0x208>)
 801626a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801626e:	601a      	str	r2, [r3, #0]
 8016270:	f3bf 8f4f 	dsb	sy
 8016274:	f3bf 8f6f 	isb	sy
 8016278:	e00a      	b.n	8016290 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801627c:	2b00      	cmp	r3, #0
 801627e:	d007      	beq.n	8016290 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016280:	4b39      	ldr	r3, [pc, #228]	; (8016368 <xQueueGenericSend+0x208>)
 8016282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016286:	601a      	str	r2, [r3, #0]
 8016288:	f3bf 8f4f 	dsb	sy
 801628c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016290:	f001 fe48 	bl	8017f24 <vPortExitCritical>
				return pdPASS;
 8016294:	2301      	movs	r3, #1
 8016296:	e063      	b.n	8016360 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d103      	bne.n	80162a6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801629e:	f001 fe41 	bl	8017f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80162a2:	2300      	movs	r3, #0
 80162a4:	e05c      	b.n	8016360 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80162a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d106      	bne.n	80162ba <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80162ac:	f107 0314 	add.w	r3, r7, #20
 80162b0:	4618      	mov	r0, r3
 80162b2:	f001 f875 	bl	80173a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80162b6:	2301      	movs	r3, #1
 80162b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80162ba:	f001 fe33 	bl	8017f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80162be:	f000 fdd3 	bl	8016e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80162c2:	f001 fdfb 	bl	8017ebc <vPortEnterCritical>
 80162c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80162cc:	b25b      	sxtb	r3, r3
 80162ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162d2:	d103      	bne.n	80162dc <xQueueGenericSend+0x17c>
 80162d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d6:	2200      	movs	r2, #0
 80162d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80162dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80162e2:	b25b      	sxtb	r3, r3
 80162e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162e8:	d103      	bne.n	80162f2 <xQueueGenericSend+0x192>
 80162ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ec:	2200      	movs	r2, #0
 80162ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80162f2:	f001 fe17 	bl	8017f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80162f6:	1d3a      	adds	r2, r7, #4
 80162f8:	f107 0314 	add.w	r3, r7, #20
 80162fc:	4611      	mov	r1, r2
 80162fe:	4618      	mov	r0, r3
 8016300:	f001 f864 	bl	80173cc <xTaskCheckForTimeOut>
 8016304:	4603      	mov	r3, r0
 8016306:	2b00      	cmp	r3, #0
 8016308:	d124      	bne.n	8016354 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801630a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801630c:	f000 fb32 	bl	8016974 <prvIsQueueFull>
 8016310:	4603      	mov	r3, r0
 8016312:	2b00      	cmp	r3, #0
 8016314:	d018      	beq.n	8016348 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016318:	3310      	adds	r3, #16
 801631a:	687a      	ldr	r2, [r7, #4]
 801631c:	4611      	mov	r1, r2
 801631e:	4618      	mov	r0, r3
 8016320:	f000 ffb4 	bl	801728c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016326:	f000 fabd 	bl	80168a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801632a:	f000 fdab 	bl	8016e84 <xTaskResumeAll>
 801632e:	4603      	mov	r3, r0
 8016330:	2b00      	cmp	r3, #0
 8016332:	f47f af7c 	bne.w	801622e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8016336:	4b0c      	ldr	r3, [pc, #48]	; (8016368 <xQueueGenericSend+0x208>)
 8016338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801633c:	601a      	str	r2, [r3, #0]
 801633e:	f3bf 8f4f 	dsb	sy
 8016342:	f3bf 8f6f 	isb	sy
 8016346:	e772      	b.n	801622e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801634a:	f000 faab 	bl	80168a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801634e:	f000 fd99 	bl	8016e84 <xTaskResumeAll>
 8016352:	e76c      	b.n	801622e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016356:	f000 faa5 	bl	80168a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801635a:	f000 fd93 	bl	8016e84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801635e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016360:	4618      	mov	r0, r3
 8016362:	3738      	adds	r7, #56	; 0x38
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}
 8016368:	e000ed04 	.word	0xe000ed04

0801636c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b08e      	sub	sp, #56	; 0x38
 8016370:	af00      	add	r7, sp, #0
 8016372:	60f8      	str	r0, [r7, #12]
 8016374:	60b9      	str	r1, [r7, #8]
 8016376:	607a      	str	r2, [r7, #4]
 8016378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016380:	2b00      	cmp	r3, #0
 8016382:	d10c      	bne.n	801639e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8016384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016388:	b672      	cpsid	i
 801638a:	f383 8811 	msr	BASEPRI, r3
 801638e:	f3bf 8f6f 	isb	sy
 8016392:	f3bf 8f4f 	dsb	sy
 8016396:	b662      	cpsie	i
 8016398:	627b      	str	r3, [r7, #36]	; 0x24
}
 801639a:	bf00      	nop
 801639c:	e7fe      	b.n	801639c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801639e:	68bb      	ldr	r3, [r7, #8]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d103      	bne.n	80163ac <xQueueGenericSendFromISR+0x40>
 80163a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d101      	bne.n	80163b0 <xQueueGenericSendFromISR+0x44>
 80163ac:	2301      	movs	r3, #1
 80163ae:	e000      	b.n	80163b2 <xQueueGenericSendFromISR+0x46>
 80163b0:	2300      	movs	r3, #0
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d10c      	bne.n	80163d0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80163b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163ba:	b672      	cpsid	i
 80163bc:	f383 8811 	msr	BASEPRI, r3
 80163c0:	f3bf 8f6f 	isb	sy
 80163c4:	f3bf 8f4f 	dsb	sy
 80163c8:	b662      	cpsie	i
 80163ca:	623b      	str	r3, [r7, #32]
}
 80163cc:	bf00      	nop
 80163ce:	e7fe      	b.n	80163ce <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80163d0:	683b      	ldr	r3, [r7, #0]
 80163d2:	2b02      	cmp	r3, #2
 80163d4:	d103      	bne.n	80163de <xQueueGenericSendFromISR+0x72>
 80163d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163da:	2b01      	cmp	r3, #1
 80163dc:	d101      	bne.n	80163e2 <xQueueGenericSendFromISR+0x76>
 80163de:	2301      	movs	r3, #1
 80163e0:	e000      	b.n	80163e4 <xQueueGenericSendFromISR+0x78>
 80163e2:	2300      	movs	r3, #0
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d10c      	bne.n	8016402 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80163e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163ec:	b672      	cpsid	i
 80163ee:	f383 8811 	msr	BASEPRI, r3
 80163f2:	f3bf 8f6f 	isb	sy
 80163f6:	f3bf 8f4f 	dsb	sy
 80163fa:	b662      	cpsie	i
 80163fc:	61fb      	str	r3, [r7, #28]
}
 80163fe:	bf00      	nop
 8016400:	e7fe      	b.n	8016400 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016402:	f001 fe43 	bl	801808c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016406:	f3ef 8211 	mrs	r2, BASEPRI
 801640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801640e:	b672      	cpsid	i
 8016410:	f383 8811 	msr	BASEPRI, r3
 8016414:	f3bf 8f6f 	isb	sy
 8016418:	f3bf 8f4f 	dsb	sy
 801641c:	b662      	cpsie	i
 801641e:	61ba      	str	r2, [r7, #24]
 8016420:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016422:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016424:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801642e:	429a      	cmp	r2, r3
 8016430:	d302      	bcc.n	8016438 <xQueueGenericSendFromISR+0xcc>
 8016432:	683b      	ldr	r3, [r7, #0]
 8016434:	2b02      	cmp	r3, #2
 8016436:	d12c      	bne.n	8016492 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801643a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801643e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016442:	683a      	ldr	r2, [r7, #0]
 8016444:	68b9      	ldr	r1, [r7, #8]
 8016446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016448:	f000 f99c 	bl	8016784 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801644c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8016450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016454:	d112      	bne.n	801647c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801645a:	2b00      	cmp	r3, #0
 801645c:	d016      	beq.n	801648c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016460:	3324      	adds	r3, #36	; 0x24
 8016462:	4618      	mov	r0, r3
 8016464:	f000 ff38 	bl	80172d8 <xTaskRemoveFromEventList>
 8016468:	4603      	mov	r3, r0
 801646a:	2b00      	cmp	r3, #0
 801646c:	d00e      	beq.n	801648c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d00b      	beq.n	801648c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	2201      	movs	r2, #1
 8016478:	601a      	str	r2, [r3, #0]
 801647a:	e007      	b.n	801648c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801647c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8016480:	3301      	adds	r3, #1
 8016482:	b2db      	uxtb	r3, r3
 8016484:	b25a      	sxtb	r2, r3
 8016486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801648c:	2301      	movs	r3, #1
 801648e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8016490:	e001      	b.n	8016496 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016492:	2300      	movs	r3, #0
 8016494:	637b      	str	r3, [r7, #52]	; 0x34
 8016496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016498:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801649a:	693b      	ldr	r3, [r7, #16]
 801649c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80164a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80164a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80164a4:	4618      	mov	r0, r3
 80164a6:	3738      	adds	r7, #56	; 0x38
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}

080164ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b08c      	sub	sp, #48	; 0x30
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	60f8      	str	r0, [r7, #12]
 80164b4:	60b9      	str	r1, [r7, #8]
 80164b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80164b8:	2300      	movs	r3, #0
 80164ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80164c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d10c      	bne.n	80164e0 <xQueueReceive+0x34>
	__asm volatile
 80164c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164ca:	b672      	cpsid	i
 80164cc:	f383 8811 	msr	BASEPRI, r3
 80164d0:	f3bf 8f6f 	isb	sy
 80164d4:	f3bf 8f4f 	dsb	sy
 80164d8:	b662      	cpsie	i
 80164da:	623b      	str	r3, [r7, #32]
}
 80164dc:	bf00      	nop
 80164de:	e7fe      	b.n	80164de <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80164e0:	68bb      	ldr	r3, [r7, #8]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d103      	bne.n	80164ee <xQueueReceive+0x42>
 80164e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d101      	bne.n	80164f2 <xQueueReceive+0x46>
 80164ee:	2301      	movs	r3, #1
 80164f0:	e000      	b.n	80164f4 <xQueueReceive+0x48>
 80164f2:	2300      	movs	r3, #0
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d10c      	bne.n	8016512 <xQueueReceive+0x66>
	__asm volatile
 80164f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164fc:	b672      	cpsid	i
 80164fe:	f383 8811 	msr	BASEPRI, r3
 8016502:	f3bf 8f6f 	isb	sy
 8016506:	f3bf 8f4f 	dsb	sy
 801650a:	b662      	cpsie	i
 801650c:	61fb      	str	r3, [r7, #28]
}
 801650e:	bf00      	nop
 8016510:	e7fe      	b.n	8016510 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016512:	f001 f8ab 	bl	801766c <xTaskGetSchedulerState>
 8016516:	4603      	mov	r3, r0
 8016518:	2b00      	cmp	r3, #0
 801651a:	d102      	bne.n	8016522 <xQueueReceive+0x76>
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d101      	bne.n	8016526 <xQueueReceive+0x7a>
 8016522:	2301      	movs	r3, #1
 8016524:	e000      	b.n	8016528 <xQueueReceive+0x7c>
 8016526:	2300      	movs	r3, #0
 8016528:	2b00      	cmp	r3, #0
 801652a:	d10c      	bne.n	8016546 <xQueueReceive+0x9a>
	__asm volatile
 801652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016530:	b672      	cpsid	i
 8016532:	f383 8811 	msr	BASEPRI, r3
 8016536:	f3bf 8f6f 	isb	sy
 801653a:	f3bf 8f4f 	dsb	sy
 801653e:	b662      	cpsie	i
 8016540:	61bb      	str	r3, [r7, #24]
}
 8016542:	bf00      	nop
 8016544:	e7fe      	b.n	8016544 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016546:	f001 fcb9 	bl	8017ebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801654e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016552:	2b00      	cmp	r3, #0
 8016554:	d01f      	beq.n	8016596 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016556:	68b9      	ldr	r1, [r7, #8]
 8016558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801655a:	f000 f97d 	bl	8016858 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016560:	1e5a      	subs	r2, r3, #1
 8016562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016564:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016568:	691b      	ldr	r3, [r3, #16]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d00f      	beq.n	801658e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016570:	3310      	adds	r3, #16
 8016572:	4618      	mov	r0, r3
 8016574:	f000 feb0 	bl	80172d8 <xTaskRemoveFromEventList>
 8016578:	4603      	mov	r3, r0
 801657a:	2b00      	cmp	r3, #0
 801657c:	d007      	beq.n	801658e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801657e:	4b3d      	ldr	r3, [pc, #244]	; (8016674 <xQueueReceive+0x1c8>)
 8016580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016584:	601a      	str	r2, [r3, #0]
 8016586:	f3bf 8f4f 	dsb	sy
 801658a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801658e:	f001 fcc9 	bl	8017f24 <vPortExitCritical>
				return pdPASS;
 8016592:	2301      	movs	r3, #1
 8016594:	e069      	b.n	801666a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d103      	bne.n	80165a4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801659c:	f001 fcc2 	bl	8017f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80165a0:	2300      	movs	r3, #0
 80165a2:	e062      	b.n	801666a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80165a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d106      	bne.n	80165b8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80165aa:	f107 0310 	add.w	r3, r7, #16
 80165ae:	4618      	mov	r0, r3
 80165b0:	f000 fef6 	bl	80173a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80165b4:	2301      	movs	r3, #1
 80165b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80165b8:	f001 fcb4 	bl	8017f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80165bc:	f000 fc54 	bl	8016e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80165c0:	f001 fc7c 	bl	8017ebc <vPortEnterCritical>
 80165c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80165ca:	b25b      	sxtb	r3, r3
 80165cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165d0:	d103      	bne.n	80165da <xQueueReceive+0x12e>
 80165d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d4:	2200      	movs	r2, #0
 80165d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80165da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80165e0:	b25b      	sxtb	r3, r3
 80165e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165e6:	d103      	bne.n	80165f0 <xQueueReceive+0x144>
 80165e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ea:	2200      	movs	r2, #0
 80165ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80165f0:	f001 fc98 	bl	8017f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80165f4:	1d3a      	adds	r2, r7, #4
 80165f6:	f107 0310 	add.w	r3, r7, #16
 80165fa:	4611      	mov	r1, r2
 80165fc:	4618      	mov	r0, r3
 80165fe:	f000 fee5 	bl	80173cc <xTaskCheckForTimeOut>
 8016602:	4603      	mov	r3, r0
 8016604:	2b00      	cmp	r3, #0
 8016606:	d123      	bne.n	8016650 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801660a:	f000 f99d 	bl	8016948 <prvIsQueueEmpty>
 801660e:	4603      	mov	r3, r0
 8016610:	2b00      	cmp	r3, #0
 8016612:	d017      	beq.n	8016644 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016616:	3324      	adds	r3, #36	; 0x24
 8016618:	687a      	ldr	r2, [r7, #4]
 801661a:	4611      	mov	r1, r2
 801661c:	4618      	mov	r0, r3
 801661e:	f000 fe35 	bl	801728c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016624:	f000 f93e 	bl	80168a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016628:	f000 fc2c 	bl	8016e84 <xTaskResumeAll>
 801662c:	4603      	mov	r3, r0
 801662e:	2b00      	cmp	r3, #0
 8016630:	d189      	bne.n	8016546 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8016632:	4b10      	ldr	r3, [pc, #64]	; (8016674 <xQueueReceive+0x1c8>)
 8016634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016638:	601a      	str	r2, [r3, #0]
 801663a:	f3bf 8f4f 	dsb	sy
 801663e:	f3bf 8f6f 	isb	sy
 8016642:	e780      	b.n	8016546 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016646:	f000 f92d 	bl	80168a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801664a:	f000 fc1b 	bl	8016e84 <xTaskResumeAll>
 801664e:	e77a      	b.n	8016546 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016652:	f000 f927 	bl	80168a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016656:	f000 fc15 	bl	8016e84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801665a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801665c:	f000 f974 	bl	8016948 <prvIsQueueEmpty>
 8016660:	4603      	mov	r3, r0
 8016662:	2b00      	cmp	r3, #0
 8016664:	f43f af6f 	beq.w	8016546 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016668:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801666a:	4618      	mov	r0, r3
 801666c:	3730      	adds	r7, #48	; 0x30
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}
 8016672:	bf00      	nop
 8016674:	e000ed04 	.word	0xe000ed04

08016678 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b08e      	sub	sp, #56	; 0x38
 801667c:	af00      	add	r7, sp, #0
 801667e:	60f8      	str	r0, [r7, #12]
 8016680:	60b9      	str	r1, [r7, #8]
 8016682:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801668a:	2b00      	cmp	r3, #0
 801668c:	d10c      	bne.n	80166a8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016692:	b672      	cpsid	i
 8016694:	f383 8811 	msr	BASEPRI, r3
 8016698:	f3bf 8f6f 	isb	sy
 801669c:	f3bf 8f4f 	dsb	sy
 80166a0:	b662      	cpsie	i
 80166a2:	623b      	str	r3, [r7, #32]
}
 80166a4:	bf00      	nop
 80166a6:	e7fe      	b.n	80166a6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80166a8:	68bb      	ldr	r3, [r7, #8]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d103      	bne.n	80166b6 <xQueueReceiveFromISR+0x3e>
 80166ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d101      	bne.n	80166ba <xQueueReceiveFromISR+0x42>
 80166b6:	2301      	movs	r3, #1
 80166b8:	e000      	b.n	80166bc <xQueueReceiveFromISR+0x44>
 80166ba:	2300      	movs	r3, #0
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d10c      	bne.n	80166da <xQueueReceiveFromISR+0x62>
	__asm volatile
 80166c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166c4:	b672      	cpsid	i
 80166c6:	f383 8811 	msr	BASEPRI, r3
 80166ca:	f3bf 8f6f 	isb	sy
 80166ce:	f3bf 8f4f 	dsb	sy
 80166d2:	b662      	cpsie	i
 80166d4:	61fb      	str	r3, [r7, #28]
}
 80166d6:	bf00      	nop
 80166d8:	e7fe      	b.n	80166d8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80166da:	f001 fcd7 	bl	801808c <vPortValidateInterruptPriority>
	__asm volatile
 80166de:	f3ef 8211 	mrs	r2, BASEPRI
 80166e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166e6:	b672      	cpsid	i
 80166e8:	f383 8811 	msr	BASEPRI, r3
 80166ec:	f3bf 8f6f 	isb	sy
 80166f0:	f3bf 8f4f 	dsb	sy
 80166f4:	b662      	cpsie	i
 80166f6:	61ba      	str	r2, [r7, #24]
 80166f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80166fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80166fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80166fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016702:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016706:	2b00      	cmp	r3, #0
 8016708:	d02f      	beq.n	801676a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801670c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016714:	68b9      	ldr	r1, [r7, #8]
 8016716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016718:	f000 f89e 	bl	8016858 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801671e:	1e5a      	subs	r2, r3, #1
 8016720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016722:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801672c:	d112      	bne.n	8016754 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016730:	691b      	ldr	r3, [r3, #16]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d016      	beq.n	8016764 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016738:	3310      	adds	r3, #16
 801673a:	4618      	mov	r0, r3
 801673c:	f000 fdcc 	bl	80172d8 <xTaskRemoveFromEventList>
 8016740:	4603      	mov	r3, r0
 8016742:	2b00      	cmp	r3, #0
 8016744:	d00e      	beq.n	8016764 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d00b      	beq.n	8016764 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	2201      	movs	r2, #1
 8016750:	601a      	str	r2, [r3, #0]
 8016752:	e007      	b.n	8016764 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016758:	3301      	adds	r3, #1
 801675a:	b2db      	uxtb	r3, r3
 801675c:	b25a      	sxtb	r2, r3
 801675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016764:	2301      	movs	r3, #1
 8016766:	637b      	str	r3, [r7, #52]	; 0x34
 8016768:	e001      	b.n	801676e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801676a:	2300      	movs	r3, #0
 801676c:	637b      	str	r3, [r7, #52]	; 0x34
 801676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016770:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016772:	693b      	ldr	r3, [r7, #16]
 8016774:	f383 8811 	msr	BASEPRI, r3
}
 8016778:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801677a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801677c:	4618      	mov	r0, r3
 801677e:	3738      	adds	r7, #56	; 0x38
 8016780:	46bd      	mov	sp, r7
 8016782:	bd80      	pop	{r7, pc}

08016784 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b086      	sub	sp, #24
 8016788:	af00      	add	r7, sp, #0
 801678a:	60f8      	str	r0, [r7, #12]
 801678c:	60b9      	str	r1, [r7, #8]
 801678e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016790:	2300      	movs	r3, #0
 8016792:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016798:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d10d      	bne.n	80167be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d14d      	bne.n	8016846 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	689b      	ldr	r3, [r3, #8]
 80167ae:	4618      	mov	r0, r3
 80167b0:	f000 ff7a 	bl	80176a8 <xTaskPriorityDisinherit>
 80167b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	2200      	movs	r2, #0
 80167ba:	609a      	str	r2, [r3, #8]
 80167bc:	e043      	b.n	8016846 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d119      	bne.n	80167f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	6858      	ldr	r0, [r3, #4]
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167cc:	461a      	mov	r2, r3
 80167ce:	68b9      	ldr	r1, [r7, #8]
 80167d0:	f003 fba6 	bl	8019f20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	685a      	ldr	r2, [r3, #4]
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167dc:	441a      	add	r2, r3
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	685a      	ldr	r2, [r3, #4]
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	689b      	ldr	r3, [r3, #8]
 80167ea:	429a      	cmp	r2, r3
 80167ec:	d32b      	bcc.n	8016846 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	681a      	ldr	r2, [r3, #0]
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	605a      	str	r2, [r3, #4]
 80167f6:	e026      	b.n	8016846 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	68d8      	ldr	r0, [r3, #12]
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016800:	461a      	mov	r2, r3
 8016802:	68b9      	ldr	r1, [r7, #8]
 8016804:	f003 fb8c 	bl	8019f20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	68da      	ldr	r2, [r3, #12]
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016810:	425b      	negs	r3, r3
 8016812:	441a      	add	r2, r3
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	68da      	ldr	r2, [r3, #12]
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	429a      	cmp	r2, r3
 8016822:	d207      	bcs.n	8016834 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	689a      	ldr	r2, [r3, #8]
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801682c:	425b      	negs	r3, r3
 801682e:	441a      	add	r2, r3
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	2b02      	cmp	r3, #2
 8016838:	d105      	bne.n	8016846 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801683a:	693b      	ldr	r3, [r7, #16]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d002      	beq.n	8016846 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016840:	693b      	ldr	r3, [r7, #16]
 8016842:	3b01      	subs	r3, #1
 8016844:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016846:	693b      	ldr	r3, [r7, #16]
 8016848:	1c5a      	adds	r2, r3, #1
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801684e:	697b      	ldr	r3, [r7, #20]
}
 8016850:	4618      	mov	r0, r3
 8016852:	3718      	adds	r7, #24
 8016854:	46bd      	mov	sp, r7
 8016856:	bd80      	pop	{r7, pc}

08016858 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b082      	sub	sp, #8
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
 8016860:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016866:	2b00      	cmp	r3, #0
 8016868:	d018      	beq.n	801689c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	68da      	ldr	r2, [r3, #12]
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016872:	441a      	add	r2, r3
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	68da      	ldr	r2, [r3, #12]
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	689b      	ldr	r3, [r3, #8]
 8016880:	429a      	cmp	r2, r3
 8016882:	d303      	bcc.n	801688c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	681a      	ldr	r2, [r3, #0]
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	68d9      	ldr	r1, [r3, #12]
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016894:	461a      	mov	r2, r3
 8016896:	6838      	ldr	r0, [r7, #0]
 8016898:	f003 fb42 	bl	8019f20 <memcpy>
	}
}
 801689c:	bf00      	nop
 801689e:	3708      	adds	r7, #8
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bd80      	pop	{r7, pc}

080168a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b084      	sub	sp, #16
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80168ac:	f001 fb06 	bl	8017ebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80168b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80168b8:	e011      	b.n	80168de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d012      	beq.n	80168e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	3324      	adds	r3, #36	; 0x24
 80168c6:	4618      	mov	r0, r3
 80168c8:	f000 fd06 	bl	80172d8 <xTaskRemoveFromEventList>
 80168cc:	4603      	mov	r3, r0
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d001      	beq.n	80168d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80168d2:	f000 fde1 	bl	8017498 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80168d6:	7bfb      	ldrb	r3, [r7, #15]
 80168d8:	3b01      	subs	r3, #1
 80168da:	b2db      	uxtb	r3, r3
 80168dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80168de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	dce9      	bgt.n	80168ba <prvUnlockQueue+0x16>
 80168e6:	e000      	b.n	80168ea <prvUnlockQueue+0x46>
					break;
 80168e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	22ff      	movs	r2, #255	; 0xff
 80168ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80168f2:	f001 fb17 	bl	8017f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80168f6:	f001 fae1 	bl	8017ebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016900:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016902:	e011      	b.n	8016928 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	691b      	ldr	r3, [r3, #16]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d012      	beq.n	8016932 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	3310      	adds	r3, #16
 8016910:	4618      	mov	r0, r3
 8016912:	f000 fce1 	bl	80172d8 <xTaskRemoveFromEventList>
 8016916:	4603      	mov	r3, r0
 8016918:	2b00      	cmp	r3, #0
 801691a:	d001      	beq.n	8016920 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801691c:	f000 fdbc 	bl	8017498 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016920:	7bbb      	ldrb	r3, [r7, #14]
 8016922:	3b01      	subs	r3, #1
 8016924:	b2db      	uxtb	r3, r3
 8016926:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801692c:	2b00      	cmp	r3, #0
 801692e:	dce9      	bgt.n	8016904 <prvUnlockQueue+0x60>
 8016930:	e000      	b.n	8016934 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016932:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	22ff      	movs	r2, #255	; 0xff
 8016938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801693c:	f001 faf2 	bl	8017f24 <vPortExitCritical>
}
 8016940:	bf00      	nop
 8016942:	3710      	adds	r7, #16
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}

08016948 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b084      	sub	sp, #16
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016950:	f001 fab4 	bl	8017ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016958:	2b00      	cmp	r3, #0
 801695a:	d102      	bne.n	8016962 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801695c:	2301      	movs	r3, #1
 801695e:	60fb      	str	r3, [r7, #12]
 8016960:	e001      	b.n	8016966 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016962:	2300      	movs	r3, #0
 8016964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016966:	f001 fadd 	bl	8017f24 <vPortExitCritical>

	return xReturn;
 801696a:	68fb      	ldr	r3, [r7, #12]
}
 801696c:	4618      	mov	r0, r3
 801696e:	3710      	adds	r7, #16
 8016970:	46bd      	mov	sp, r7
 8016972:	bd80      	pop	{r7, pc}

08016974 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b084      	sub	sp, #16
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801697c:	f001 fa9e 	bl	8017ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016988:	429a      	cmp	r2, r3
 801698a:	d102      	bne.n	8016992 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801698c:	2301      	movs	r3, #1
 801698e:	60fb      	str	r3, [r7, #12]
 8016990:	e001      	b.n	8016996 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016992:	2300      	movs	r3, #0
 8016994:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016996:	f001 fac5 	bl	8017f24 <vPortExitCritical>

	return xReturn;
 801699a:	68fb      	ldr	r3, [r7, #12]
}
 801699c:	4618      	mov	r0, r3
 801699e:	3710      	adds	r7, #16
 80169a0:	46bd      	mov	sp, r7
 80169a2:	bd80      	pop	{r7, pc}

080169a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80169a4:	b580      	push	{r7, lr}
 80169a6:	b08e      	sub	sp, #56	; 0x38
 80169a8:	af04      	add	r7, sp, #16
 80169aa:	60f8      	str	r0, [r7, #12]
 80169ac:	60b9      	str	r1, [r7, #8]
 80169ae:	607a      	str	r2, [r7, #4]
 80169b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80169b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d10c      	bne.n	80169d2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80169b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169bc:	b672      	cpsid	i
 80169be:	f383 8811 	msr	BASEPRI, r3
 80169c2:	f3bf 8f6f 	isb	sy
 80169c6:	f3bf 8f4f 	dsb	sy
 80169ca:	b662      	cpsie	i
 80169cc:	623b      	str	r3, [r7, #32]
}
 80169ce:	bf00      	nop
 80169d0:	e7fe      	b.n	80169d0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80169d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d10c      	bne.n	80169f2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80169d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169dc:	b672      	cpsid	i
 80169de:	f383 8811 	msr	BASEPRI, r3
 80169e2:	f3bf 8f6f 	isb	sy
 80169e6:	f3bf 8f4f 	dsb	sy
 80169ea:	b662      	cpsie	i
 80169ec:	61fb      	str	r3, [r7, #28]
}
 80169ee:	bf00      	nop
 80169f0:	e7fe      	b.n	80169f0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80169f2:	23b8      	movs	r3, #184	; 0xb8
 80169f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80169f6:	693b      	ldr	r3, [r7, #16]
 80169f8:	2bb8      	cmp	r3, #184	; 0xb8
 80169fa:	d00c      	beq.n	8016a16 <xTaskCreateStatic+0x72>
	__asm volatile
 80169fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a00:	b672      	cpsid	i
 8016a02:	f383 8811 	msr	BASEPRI, r3
 8016a06:	f3bf 8f6f 	isb	sy
 8016a0a:	f3bf 8f4f 	dsb	sy
 8016a0e:	b662      	cpsie	i
 8016a10:	61bb      	str	r3, [r7, #24]
}
 8016a12:	bf00      	nop
 8016a14:	e7fe      	b.n	8016a14 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016a16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d01e      	beq.n	8016a5c <xTaskCreateStatic+0xb8>
 8016a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d01b      	beq.n	8016a5c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016a2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a30:	2202      	movs	r2, #2
 8016a32:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016a36:	2300      	movs	r3, #0
 8016a38:	9303      	str	r3, [sp, #12]
 8016a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a3c:	9302      	str	r3, [sp, #8]
 8016a3e:	f107 0314 	add.w	r3, r7, #20
 8016a42:	9301      	str	r3, [sp, #4]
 8016a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a46:	9300      	str	r3, [sp, #0]
 8016a48:	683b      	ldr	r3, [r7, #0]
 8016a4a:	687a      	ldr	r2, [r7, #4]
 8016a4c:	68b9      	ldr	r1, [r7, #8]
 8016a4e:	68f8      	ldr	r0, [r7, #12]
 8016a50:	f000 f850 	bl	8016af4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a56:	f000 f8f9 	bl	8016c4c <prvAddNewTaskToReadyList>
 8016a5a:	e001      	b.n	8016a60 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016a60:	697b      	ldr	r3, [r7, #20]
	}
 8016a62:	4618      	mov	r0, r3
 8016a64:	3728      	adds	r7, #40	; 0x28
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}

08016a6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016a6a:	b580      	push	{r7, lr}
 8016a6c:	b08c      	sub	sp, #48	; 0x30
 8016a6e:	af04      	add	r7, sp, #16
 8016a70:	60f8      	str	r0, [r7, #12]
 8016a72:	60b9      	str	r1, [r7, #8]
 8016a74:	603b      	str	r3, [r7, #0]
 8016a76:	4613      	mov	r3, r2
 8016a78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016a7a:	88fb      	ldrh	r3, [r7, #6]
 8016a7c:	009b      	lsls	r3, r3, #2
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f001 fb48 	bl	8018114 <pvPortMalloc>
 8016a84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016a86:	697b      	ldr	r3, [r7, #20]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d00e      	beq.n	8016aaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016a8c:	20b8      	movs	r0, #184	; 0xb8
 8016a8e:	f001 fb41 	bl	8018114 <pvPortMalloc>
 8016a92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016a94:	69fb      	ldr	r3, [r7, #28]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d003      	beq.n	8016aa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016a9a:	69fb      	ldr	r3, [r7, #28]
 8016a9c:	697a      	ldr	r2, [r7, #20]
 8016a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8016aa0:	e005      	b.n	8016aae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016aa2:	6978      	ldr	r0, [r7, #20]
 8016aa4:	f001 fc06 	bl	80182b4 <vPortFree>
 8016aa8:	e001      	b.n	8016aae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016aae:	69fb      	ldr	r3, [r7, #28]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d017      	beq.n	8016ae4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016ab4:	69fb      	ldr	r3, [r7, #28]
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016abc:	88fa      	ldrh	r2, [r7, #6]
 8016abe:	2300      	movs	r3, #0
 8016ac0:	9303      	str	r3, [sp, #12]
 8016ac2:	69fb      	ldr	r3, [r7, #28]
 8016ac4:	9302      	str	r3, [sp, #8]
 8016ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac8:	9301      	str	r3, [sp, #4]
 8016aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016acc:	9300      	str	r3, [sp, #0]
 8016ace:	683b      	ldr	r3, [r7, #0]
 8016ad0:	68b9      	ldr	r1, [r7, #8]
 8016ad2:	68f8      	ldr	r0, [r7, #12]
 8016ad4:	f000 f80e 	bl	8016af4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016ad8:	69f8      	ldr	r0, [r7, #28]
 8016ada:	f000 f8b7 	bl	8016c4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016ade:	2301      	movs	r3, #1
 8016ae0:	61bb      	str	r3, [r7, #24]
 8016ae2:	e002      	b.n	8016aea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ae8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016aea:	69bb      	ldr	r3, [r7, #24]
	}
 8016aec:	4618      	mov	r0, r3
 8016aee:	3720      	adds	r7, #32
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b088      	sub	sp, #32
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	60f8      	str	r0, [r7, #12]
 8016afc:	60b9      	str	r1, [r7, #8]
 8016afe:	607a      	str	r2, [r7, #4]
 8016b00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	009b      	lsls	r3, r3, #2
 8016b0a:	461a      	mov	r2, r3
 8016b0c:	21a5      	movs	r1, #165	; 0xa5
 8016b0e:	f003 fa15 	bl	8019f3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016b16:	6879      	ldr	r1, [r7, #4]
 8016b18:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8016b1c:	440b      	add	r3, r1
 8016b1e:	009b      	lsls	r3, r3, #2
 8016b20:	4413      	add	r3, r2
 8016b22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016b24:	69bb      	ldr	r3, [r7, #24]
 8016b26:	f023 0307 	bic.w	r3, r3, #7
 8016b2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016b2c:	69bb      	ldr	r3, [r7, #24]
 8016b2e:	f003 0307 	and.w	r3, r3, #7
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d00c      	beq.n	8016b50 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8016b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b3a:	b672      	cpsid	i
 8016b3c:	f383 8811 	msr	BASEPRI, r3
 8016b40:	f3bf 8f6f 	isb	sy
 8016b44:	f3bf 8f4f 	dsb	sy
 8016b48:	b662      	cpsie	i
 8016b4a:	617b      	str	r3, [r7, #20]
}
 8016b4c:	bf00      	nop
 8016b4e:	e7fe      	b.n	8016b4e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d01f      	beq.n	8016b96 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016b56:	2300      	movs	r3, #0
 8016b58:	61fb      	str	r3, [r7, #28]
 8016b5a:	e012      	b.n	8016b82 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016b5c:	68ba      	ldr	r2, [r7, #8]
 8016b5e:	69fb      	ldr	r3, [r7, #28]
 8016b60:	4413      	add	r3, r2
 8016b62:	7819      	ldrb	r1, [r3, #0]
 8016b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b66:	69fb      	ldr	r3, [r7, #28]
 8016b68:	4413      	add	r3, r2
 8016b6a:	3334      	adds	r3, #52	; 0x34
 8016b6c:	460a      	mov	r2, r1
 8016b6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016b70:	68ba      	ldr	r2, [r7, #8]
 8016b72:	69fb      	ldr	r3, [r7, #28]
 8016b74:	4413      	add	r3, r2
 8016b76:	781b      	ldrb	r3, [r3, #0]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d006      	beq.n	8016b8a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016b7c:	69fb      	ldr	r3, [r7, #28]
 8016b7e:	3301      	adds	r3, #1
 8016b80:	61fb      	str	r3, [r7, #28]
 8016b82:	69fb      	ldr	r3, [r7, #28]
 8016b84:	2b0f      	cmp	r3, #15
 8016b86:	d9e9      	bls.n	8016b5c <prvInitialiseNewTask+0x68>
 8016b88:	e000      	b.n	8016b8c <prvInitialiseNewTask+0x98>
			{
				break;
 8016b8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b8e:	2200      	movs	r2, #0
 8016b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016b94:	e003      	b.n	8016b9e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b98:	2200      	movs	r2, #0
 8016b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ba0:	2b06      	cmp	r3, #6
 8016ba2:	d901      	bls.n	8016ba8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016ba4:	2306      	movs	r3, #6
 8016ba6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016bac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016bb2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb6:	2200      	movs	r2, #0
 8016bb8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bbc:	3304      	adds	r3, #4
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f7ff f8ec 	bl	8015d9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bc6:	3318      	adds	r3, #24
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f7ff f8e7 	bl	8015d9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016bd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bd6:	f1c3 0207 	rsb	r2, r3, #7
 8016bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016be2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8016be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016be6:	2200      	movs	r2, #0
 8016be8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bec:	2200      	movs	r2, #0
 8016bee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bfc:	3350      	adds	r3, #80	; 0x50
 8016bfe:	2260      	movs	r2, #96	; 0x60
 8016c00:	2100      	movs	r1, #0
 8016c02:	4618      	mov	r0, r3
 8016c04:	f003 f99a 	bl	8019f3c <memset>
 8016c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c0a:	4a0d      	ldr	r2, [pc, #52]	; (8016c40 <prvInitialiseNewTask+0x14c>)
 8016c0c:	655a      	str	r2, [r3, #84]	; 0x54
 8016c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c10:	4a0c      	ldr	r2, [pc, #48]	; (8016c44 <prvInitialiseNewTask+0x150>)
 8016c12:	659a      	str	r2, [r3, #88]	; 0x58
 8016c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c16:	4a0c      	ldr	r2, [pc, #48]	; (8016c48 <prvInitialiseNewTask+0x154>)
 8016c18:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016c1a:	683a      	ldr	r2, [r7, #0]
 8016c1c:	68f9      	ldr	r1, [r7, #12]
 8016c1e:	69b8      	ldr	r0, [r7, #24]
 8016c20:	f001 f842 	bl	8017ca8 <pxPortInitialiseStack>
 8016c24:	4602      	mov	r2, r0
 8016c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d002      	beq.n	8016c36 <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016c36:	bf00      	nop
 8016c38:	3720      	adds	r7, #32
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bd80      	pop	{r7, pc}
 8016c3e:	bf00      	nop
 8016c40:	08031fbc 	.word	0x08031fbc
 8016c44:	08031fdc 	.word	0x08031fdc
 8016c48:	08031f9c 	.word	0x08031f9c

08016c4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b082      	sub	sp, #8
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016c54:	f001 f932 	bl	8017ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016c58:	4b2a      	ldr	r3, [pc, #168]	; (8016d04 <prvAddNewTaskToReadyList+0xb8>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	3301      	adds	r3, #1
 8016c5e:	4a29      	ldr	r2, [pc, #164]	; (8016d04 <prvAddNewTaskToReadyList+0xb8>)
 8016c60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016c62:	4b29      	ldr	r3, [pc, #164]	; (8016d08 <prvAddNewTaskToReadyList+0xbc>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d109      	bne.n	8016c7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016c6a:	4a27      	ldr	r2, [pc, #156]	; (8016d08 <prvAddNewTaskToReadyList+0xbc>)
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016c70:	4b24      	ldr	r3, [pc, #144]	; (8016d04 <prvAddNewTaskToReadyList+0xb8>)
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	2b01      	cmp	r3, #1
 8016c76:	d110      	bne.n	8016c9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016c78:	f000 fc34 	bl	80174e4 <prvInitialiseTaskLists>
 8016c7c:	e00d      	b.n	8016c9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016c7e:	4b23      	ldr	r3, [pc, #140]	; (8016d0c <prvAddNewTaskToReadyList+0xc0>)
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d109      	bne.n	8016c9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016c86:	4b20      	ldr	r3, [pc, #128]	; (8016d08 <prvAddNewTaskToReadyList+0xbc>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c90:	429a      	cmp	r2, r3
 8016c92:	d802      	bhi.n	8016c9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016c94:	4a1c      	ldr	r2, [pc, #112]	; (8016d08 <prvAddNewTaskToReadyList+0xbc>)
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016c9a:	4b1d      	ldr	r3, [pc, #116]	; (8016d10 <prvAddNewTaskToReadyList+0xc4>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	3301      	adds	r3, #1
 8016ca0:	4a1b      	ldr	r2, [pc, #108]	; (8016d10 <prvAddNewTaskToReadyList+0xc4>)
 8016ca2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ca8:	2201      	movs	r2, #1
 8016caa:	409a      	lsls	r2, r3
 8016cac:	4b19      	ldr	r3, [pc, #100]	; (8016d14 <prvAddNewTaskToReadyList+0xc8>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	4313      	orrs	r3, r2
 8016cb2:	4a18      	ldr	r2, [pc, #96]	; (8016d14 <prvAddNewTaskToReadyList+0xc8>)
 8016cb4:	6013      	str	r3, [r2, #0]
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cba:	4613      	mov	r3, r2
 8016cbc:	009b      	lsls	r3, r3, #2
 8016cbe:	4413      	add	r3, r2
 8016cc0:	009b      	lsls	r3, r3, #2
 8016cc2:	4a15      	ldr	r2, [pc, #84]	; (8016d18 <prvAddNewTaskToReadyList+0xcc>)
 8016cc4:	441a      	add	r2, r3
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	3304      	adds	r3, #4
 8016cca:	4619      	mov	r1, r3
 8016ccc:	4610      	mov	r0, r2
 8016cce:	f7ff f872 	bl	8015db6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016cd2:	f001 f927 	bl	8017f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016cd6:	4b0d      	ldr	r3, [pc, #52]	; (8016d0c <prvAddNewTaskToReadyList+0xc0>)
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d00e      	beq.n	8016cfc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016cde:	4b0a      	ldr	r3, [pc, #40]	; (8016d08 <prvAddNewTaskToReadyList+0xbc>)
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ce8:	429a      	cmp	r2, r3
 8016cea:	d207      	bcs.n	8016cfc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016cec:	4b0b      	ldr	r3, [pc, #44]	; (8016d1c <prvAddNewTaskToReadyList+0xd0>)
 8016cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016cf2:	601a      	str	r2, [r3, #0]
 8016cf4:	f3bf 8f4f 	dsb	sy
 8016cf8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016cfc:	bf00      	nop
 8016cfe:	3708      	adds	r7, #8
 8016d00:	46bd      	mov	sp, r7
 8016d02:	bd80      	pop	{r7, pc}
 8016d04:	20041bb4 	.word	0x20041bb4
 8016d08:	20041ab4 	.word	0x20041ab4
 8016d0c:	20041bc0 	.word	0x20041bc0
 8016d10:	20041bd0 	.word	0x20041bd0
 8016d14:	20041bbc 	.word	0x20041bbc
 8016d18:	20041ab8 	.word	0x20041ab8
 8016d1c:	e000ed04 	.word	0xe000ed04

08016d20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b084      	sub	sp, #16
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016d28:	2300      	movs	r3, #0
 8016d2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d019      	beq.n	8016d66 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016d32:	4b14      	ldr	r3, [pc, #80]	; (8016d84 <vTaskDelay+0x64>)
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d00c      	beq.n	8016d54 <vTaskDelay+0x34>
	__asm volatile
 8016d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d3e:	b672      	cpsid	i
 8016d40:	f383 8811 	msr	BASEPRI, r3
 8016d44:	f3bf 8f6f 	isb	sy
 8016d48:	f3bf 8f4f 	dsb	sy
 8016d4c:	b662      	cpsie	i
 8016d4e:	60bb      	str	r3, [r7, #8]
}
 8016d50:	bf00      	nop
 8016d52:	e7fe      	b.n	8016d52 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8016d54:	f000 f888 	bl	8016e68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016d58:	2100      	movs	r1, #0
 8016d5a:	6878      	ldr	r0, [r7, #4]
 8016d5c:	f000 ff3e 	bl	8017bdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016d60:	f000 f890 	bl	8016e84 <xTaskResumeAll>
 8016d64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d107      	bne.n	8016d7c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8016d6c:	4b06      	ldr	r3, [pc, #24]	; (8016d88 <vTaskDelay+0x68>)
 8016d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d72:	601a      	str	r2, [r3, #0]
 8016d74:	f3bf 8f4f 	dsb	sy
 8016d78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016d7c:	bf00      	nop
 8016d7e:	3710      	adds	r7, #16
 8016d80:	46bd      	mov	sp, r7
 8016d82:	bd80      	pop	{r7, pc}
 8016d84:	20041bdc 	.word	0x20041bdc
 8016d88:	e000ed04 	.word	0xe000ed04

08016d8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b08a      	sub	sp, #40	; 0x28
 8016d90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016d92:	2300      	movs	r3, #0
 8016d94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016d96:	2300      	movs	r3, #0
 8016d98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016d9a:	463a      	mov	r2, r7
 8016d9c:	1d39      	adds	r1, r7, #4
 8016d9e:	f107 0308 	add.w	r3, r7, #8
 8016da2:	4618      	mov	r0, r3
 8016da4:	f7ea fe1c 	bl	80019e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016da8:	6839      	ldr	r1, [r7, #0]
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	68ba      	ldr	r2, [r7, #8]
 8016dae:	9202      	str	r2, [sp, #8]
 8016db0:	9301      	str	r3, [sp, #4]
 8016db2:	2300      	movs	r3, #0
 8016db4:	9300      	str	r3, [sp, #0]
 8016db6:	2300      	movs	r3, #0
 8016db8:	460a      	mov	r2, r1
 8016dba:	4923      	ldr	r1, [pc, #140]	; (8016e48 <vTaskStartScheduler+0xbc>)
 8016dbc:	4823      	ldr	r0, [pc, #140]	; (8016e4c <vTaskStartScheduler+0xc0>)
 8016dbe:	f7ff fdf1 	bl	80169a4 <xTaskCreateStatic>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	4a22      	ldr	r2, [pc, #136]	; (8016e50 <vTaskStartScheduler+0xc4>)
 8016dc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016dc8:	4b21      	ldr	r3, [pc, #132]	; (8016e50 <vTaskStartScheduler+0xc4>)
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d002      	beq.n	8016dd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016dd0:	2301      	movs	r3, #1
 8016dd2:	617b      	str	r3, [r7, #20]
 8016dd4:	e001      	b.n	8016dda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016dda:	697b      	ldr	r3, [r7, #20]
 8016ddc:	2b01      	cmp	r3, #1
 8016dde:	d11d      	bne.n	8016e1c <vTaskStartScheduler+0x90>
	__asm volatile
 8016de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016de4:	b672      	cpsid	i
 8016de6:	f383 8811 	msr	BASEPRI, r3
 8016dea:	f3bf 8f6f 	isb	sy
 8016dee:	f3bf 8f4f 	dsb	sy
 8016df2:	b662      	cpsie	i
 8016df4:	613b      	str	r3, [r7, #16]
}
 8016df6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016df8:	4b16      	ldr	r3, [pc, #88]	; (8016e54 <vTaskStartScheduler+0xc8>)
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	3350      	adds	r3, #80	; 0x50
 8016dfe:	4a16      	ldr	r2, [pc, #88]	; (8016e58 <vTaskStartScheduler+0xcc>)
 8016e00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016e02:	4b16      	ldr	r3, [pc, #88]	; (8016e5c <vTaskStartScheduler+0xd0>)
 8016e04:	f04f 32ff 	mov.w	r2, #4294967295
 8016e08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016e0a:	4b15      	ldr	r3, [pc, #84]	; (8016e60 <vTaskStartScheduler+0xd4>)
 8016e0c:	2201      	movs	r2, #1
 8016e0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016e10:	4b14      	ldr	r3, [pc, #80]	; (8016e64 <vTaskStartScheduler+0xd8>)
 8016e12:	2200      	movs	r2, #0
 8016e14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016e16:	f000 ffd3 	bl	8017dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016e1a:	e010      	b.n	8016e3e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016e1c:	697b      	ldr	r3, [r7, #20]
 8016e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e22:	d10c      	bne.n	8016e3e <vTaskStartScheduler+0xb2>
	__asm volatile
 8016e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e28:	b672      	cpsid	i
 8016e2a:	f383 8811 	msr	BASEPRI, r3
 8016e2e:	f3bf 8f6f 	isb	sy
 8016e32:	f3bf 8f4f 	dsb	sy
 8016e36:	b662      	cpsie	i
 8016e38:	60fb      	str	r3, [r7, #12]
}
 8016e3a:	bf00      	nop
 8016e3c:	e7fe      	b.n	8016e3c <vTaskStartScheduler+0xb0>
}
 8016e3e:	bf00      	nop
 8016e40:	3718      	adds	r7, #24
 8016e42:	46bd      	mov	sp, r7
 8016e44:	bd80      	pop	{r7, pc}
 8016e46:	bf00      	nop
 8016e48:	0801cbdc 	.word	0x0801cbdc
 8016e4c:	080174b1 	.word	0x080174b1
 8016e50:	20041bd8 	.word	0x20041bd8
 8016e54:	20041ab4 	.word	0x20041ab4
 8016e58:	20000074 	.word	0x20000074
 8016e5c:	20041bd4 	.word	0x20041bd4
 8016e60:	20041bc0 	.word	0x20041bc0
 8016e64:	20041bb8 	.word	0x20041bb8

08016e68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016e68:	b480      	push	{r7}
 8016e6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016e6c:	4b04      	ldr	r3, [pc, #16]	; (8016e80 <vTaskSuspendAll+0x18>)
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	3301      	adds	r3, #1
 8016e72:	4a03      	ldr	r2, [pc, #12]	; (8016e80 <vTaskSuspendAll+0x18>)
 8016e74:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8016e76:	bf00      	nop
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7e:	4770      	bx	lr
 8016e80:	20041bdc 	.word	0x20041bdc

08016e84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b084      	sub	sp, #16
 8016e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016e92:	4b42      	ldr	r3, [pc, #264]	; (8016f9c <xTaskResumeAll+0x118>)
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d10c      	bne.n	8016eb4 <xTaskResumeAll+0x30>
	__asm volatile
 8016e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e9e:	b672      	cpsid	i
 8016ea0:	f383 8811 	msr	BASEPRI, r3
 8016ea4:	f3bf 8f6f 	isb	sy
 8016ea8:	f3bf 8f4f 	dsb	sy
 8016eac:	b662      	cpsie	i
 8016eae:	603b      	str	r3, [r7, #0]
}
 8016eb0:	bf00      	nop
 8016eb2:	e7fe      	b.n	8016eb2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016eb4:	f001 f802 	bl	8017ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016eb8:	4b38      	ldr	r3, [pc, #224]	; (8016f9c <xTaskResumeAll+0x118>)
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	3b01      	subs	r3, #1
 8016ebe:	4a37      	ldr	r2, [pc, #220]	; (8016f9c <xTaskResumeAll+0x118>)
 8016ec0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016ec2:	4b36      	ldr	r3, [pc, #216]	; (8016f9c <xTaskResumeAll+0x118>)
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d161      	bne.n	8016f8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016eca:	4b35      	ldr	r3, [pc, #212]	; (8016fa0 <xTaskResumeAll+0x11c>)
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d05d      	beq.n	8016f8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016ed2:	e02e      	b.n	8016f32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ed4:	4b33      	ldr	r3, [pc, #204]	; (8016fa4 <xTaskResumeAll+0x120>)
 8016ed6:	68db      	ldr	r3, [r3, #12]
 8016ed8:	68db      	ldr	r3, [r3, #12]
 8016eda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	3318      	adds	r3, #24
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f7fe ffc5 	bl	8015e70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	3304      	adds	r3, #4
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7fe ffc0 	bl	8015e70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ef4:	2201      	movs	r2, #1
 8016ef6:	409a      	lsls	r2, r3
 8016ef8:	4b2b      	ldr	r3, [pc, #172]	; (8016fa8 <xTaskResumeAll+0x124>)
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	4313      	orrs	r3, r2
 8016efe:	4a2a      	ldr	r2, [pc, #168]	; (8016fa8 <xTaskResumeAll+0x124>)
 8016f00:	6013      	str	r3, [r2, #0]
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f06:	4613      	mov	r3, r2
 8016f08:	009b      	lsls	r3, r3, #2
 8016f0a:	4413      	add	r3, r2
 8016f0c:	009b      	lsls	r3, r3, #2
 8016f0e:	4a27      	ldr	r2, [pc, #156]	; (8016fac <xTaskResumeAll+0x128>)
 8016f10:	441a      	add	r2, r3
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	3304      	adds	r3, #4
 8016f16:	4619      	mov	r1, r3
 8016f18:	4610      	mov	r0, r2
 8016f1a:	f7fe ff4c 	bl	8015db6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f22:	4b23      	ldr	r3, [pc, #140]	; (8016fb0 <xTaskResumeAll+0x12c>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f28:	429a      	cmp	r2, r3
 8016f2a:	d302      	bcc.n	8016f32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8016f2c:	4b21      	ldr	r3, [pc, #132]	; (8016fb4 <xTaskResumeAll+0x130>)
 8016f2e:	2201      	movs	r2, #1
 8016f30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016f32:	4b1c      	ldr	r3, [pc, #112]	; (8016fa4 <xTaskResumeAll+0x120>)
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d1cc      	bne.n	8016ed4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d001      	beq.n	8016f44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016f40:	f000 fb74 	bl	801762c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016f44:	4b1c      	ldr	r3, [pc, #112]	; (8016fb8 <xTaskResumeAll+0x134>)
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d010      	beq.n	8016f72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016f50:	f000 f858 	bl	8017004 <xTaskIncrementTick>
 8016f54:	4603      	mov	r3, r0
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d002      	beq.n	8016f60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8016f5a:	4b16      	ldr	r3, [pc, #88]	; (8016fb4 <xTaskResumeAll+0x130>)
 8016f5c:	2201      	movs	r2, #1
 8016f5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	3b01      	subs	r3, #1
 8016f64:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d1f1      	bne.n	8016f50 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8016f6c:	4b12      	ldr	r3, [pc, #72]	; (8016fb8 <xTaskResumeAll+0x134>)
 8016f6e:	2200      	movs	r2, #0
 8016f70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016f72:	4b10      	ldr	r3, [pc, #64]	; (8016fb4 <xTaskResumeAll+0x130>)
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d009      	beq.n	8016f8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016f7a:	2301      	movs	r3, #1
 8016f7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016f7e:	4b0f      	ldr	r3, [pc, #60]	; (8016fbc <xTaskResumeAll+0x138>)
 8016f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f84:	601a      	str	r2, [r3, #0]
 8016f86:	f3bf 8f4f 	dsb	sy
 8016f8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016f8e:	f000 ffc9 	bl	8017f24 <vPortExitCritical>

	return xAlreadyYielded;
 8016f92:	68bb      	ldr	r3, [r7, #8]
}
 8016f94:	4618      	mov	r0, r3
 8016f96:	3710      	adds	r7, #16
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd80      	pop	{r7, pc}
 8016f9c:	20041bdc 	.word	0x20041bdc
 8016fa0:	20041bb4 	.word	0x20041bb4
 8016fa4:	20041b74 	.word	0x20041b74
 8016fa8:	20041bbc 	.word	0x20041bbc
 8016fac:	20041ab8 	.word	0x20041ab8
 8016fb0:	20041ab4 	.word	0x20041ab4
 8016fb4:	20041bc8 	.word	0x20041bc8
 8016fb8:	20041bc4 	.word	0x20041bc4
 8016fbc:	e000ed04 	.word	0xe000ed04

08016fc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016fc0:	b480      	push	{r7}
 8016fc2:	b083      	sub	sp, #12
 8016fc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016fc6:	4b05      	ldr	r3, [pc, #20]	; (8016fdc <xTaskGetTickCount+0x1c>)
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016fcc:	687b      	ldr	r3, [r7, #4]
}
 8016fce:	4618      	mov	r0, r3
 8016fd0:	370c      	adds	r7, #12
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd8:	4770      	bx	lr
 8016fda:	bf00      	nop
 8016fdc:	20041bb8 	.word	0x20041bb8

08016fe0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b082      	sub	sp, #8
 8016fe4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016fe6:	f001 f851 	bl	801808c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8016fea:	2300      	movs	r3, #0
 8016fec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016fee:	4b04      	ldr	r3, [pc, #16]	; (8017000 <xTaskGetTickCountFromISR+0x20>)
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016ff4:	683b      	ldr	r3, [r7, #0]
}
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	3708      	adds	r7, #8
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	bd80      	pop	{r7, pc}
 8016ffe:	bf00      	nop
 8017000:	20041bb8 	.word	0x20041bb8

08017004 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b086      	sub	sp, #24
 8017008:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801700a:	2300      	movs	r3, #0
 801700c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801700e:	4b4f      	ldr	r3, [pc, #316]	; (801714c <xTaskIncrementTick+0x148>)
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	2b00      	cmp	r3, #0
 8017014:	f040 808a 	bne.w	801712c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017018:	4b4d      	ldr	r3, [pc, #308]	; (8017150 <xTaskIncrementTick+0x14c>)
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	3301      	adds	r3, #1
 801701e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017020:	4a4b      	ldr	r2, [pc, #300]	; (8017150 <xTaskIncrementTick+0x14c>)
 8017022:	693b      	ldr	r3, [r7, #16]
 8017024:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017026:	693b      	ldr	r3, [r7, #16]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d122      	bne.n	8017072 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 801702c:	4b49      	ldr	r3, [pc, #292]	; (8017154 <xTaskIncrementTick+0x150>)
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	2b00      	cmp	r3, #0
 8017034:	d00c      	beq.n	8017050 <xTaskIncrementTick+0x4c>
	__asm volatile
 8017036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801703a:	b672      	cpsid	i
 801703c:	f383 8811 	msr	BASEPRI, r3
 8017040:	f3bf 8f6f 	isb	sy
 8017044:	f3bf 8f4f 	dsb	sy
 8017048:	b662      	cpsie	i
 801704a:	603b      	str	r3, [r7, #0]
}
 801704c:	bf00      	nop
 801704e:	e7fe      	b.n	801704e <xTaskIncrementTick+0x4a>
 8017050:	4b40      	ldr	r3, [pc, #256]	; (8017154 <xTaskIncrementTick+0x150>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	60fb      	str	r3, [r7, #12]
 8017056:	4b40      	ldr	r3, [pc, #256]	; (8017158 <xTaskIncrementTick+0x154>)
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	4a3e      	ldr	r2, [pc, #248]	; (8017154 <xTaskIncrementTick+0x150>)
 801705c:	6013      	str	r3, [r2, #0]
 801705e:	4a3e      	ldr	r2, [pc, #248]	; (8017158 <xTaskIncrementTick+0x154>)
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	6013      	str	r3, [r2, #0]
 8017064:	4b3d      	ldr	r3, [pc, #244]	; (801715c <xTaskIncrementTick+0x158>)
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	3301      	adds	r3, #1
 801706a:	4a3c      	ldr	r2, [pc, #240]	; (801715c <xTaskIncrementTick+0x158>)
 801706c:	6013      	str	r3, [r2, #0]
 801706e:	f000 fadd 	bl	801762c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017072:	4b3b      	ldr	r3, [pc, #236]	; (8017160 <xTaskIncrementTick+0x15c>)
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	693a      	ldr	r2, [r7, #16]
 8017078:	429a      	cmp	r2, r3
 801707a:	d348      	bcc.n	801710e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801707c:	4b35      	ldr	r3, [pc, #212]	; (8017154 <xTaskIncrementTick+0x150>)
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d104      	bne.n	8017090 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017086:	4b36      	ldr	r3, [pc, #216]	; (8017160 <xTaskIncrementTick+0x15c>)
 8017088:	f04f 32ff 	mov.w	r2, #4294967295
 801708c:	601a      	str	r2, [r3, #0]
					break;
 801708e:	e03e      	b.n	801710e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017090:	4b30      	ldr	r3, [pc, #192]	; (8017154 <xTaskIncrementTick+0x150>)
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	68db      	ldr	r3, [r3, #12]
 8017096:	68db      	ldr	r3, [r3, #12]
 8017098:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801709a:	68bb      	ldr	r3, [r7, #8]
 801709c:	685b      	ldr	r3, [r3, #4]
 801709e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80170a0:	693a      	ldr	r2, [r7, #16]
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d203      	bcs.n	80170b0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80170a8:	4a2d      	ldr	r2, [pc, #180]	; (8017160 <xTaskIncrementTick+0x15c>)
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80170ae:	e02e      	b.n	801710e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80170b0:	68bb      	ldr	r3, [r7, #8]
 80170b2:	3304      	adds	r3, #4
 80170b4:	4618      	mov	r0, r3
 80170b6:	f7fe fedb 	bl	8015e70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80170ba:	68bb      	ldr	r3, [r7, #8]
 80170bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d004      	beq.n	80170cc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80170c2:	68bb      	ldr	r3, [r7, #8]
 80170c4:	3318      	adds	r3, #24
 80170c6:	4618      	mov	r0, r3
 80170c8:	f7fe fed2 	bl	8015e70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80170cc:	68bb      	ldr	r3, [r7, #8]
 80170ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170d0:	2201      	movs	r2, #1
 80170d2:	409a      	lsls	r2, r3
 80170d4:	4b23      	ldr	r3, [pc, #140]	; (8017164 <xTaskIncrementTick+0x160>)
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	4313      	orrs	r3, r2
 80170da:	4a22      	ldr	r2, [pc, #136]	; (8017164 <xTaskIncrementTick+0x160>)
 80170dc:	6013      	str	r3, [r2, #0]
 80170de:	68bb      	ldr	r3, [r7, #8]
 80170e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170e2:	4613      	mov	r3, r2
 80170e4:	009b      	lsls	r3, r3, #2
 80170e6:	4413      	add	r3, r2
 80170e8:	009b      	lsls	r3, r3, #2
 80170ea:	4a1f      	ldr	r2, [pc, #124]	; (8017168 <xTaskIncrementTick+0x164>)
 80170ec:	441a      	add	r2, r3
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	3304      	adds	r3, #4
 80170f2:	4619      	mov	r1, r3
 80170f4:	4610      	mov	r0, r2
 80170f6:	f7fe fe5e 	bl	8015db6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80170fa:	68bb      	ldr	r3, [r7, #8]
 80170fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170fe:	4b1b      	ldr	r3, [pc, #108]	; (801716c <xTaskIncrementTick+0x168>)
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017104:	429a      	cmp	r2, r3
 8017106:	d3b9      	bcc.n	801707c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8017108:	2301      	movs	r3, #1
 801710a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801710c:	e7b6      	b.n	801707c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801710e:	4b17      	ldr	r3, [pc, #92]	; (801716c <xTaskIncrementTick+0x168>)
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017114:	4914      	ldr	r1, [pc, #80]	; (8017168 <xTaskIncrementTick+0x164>)
 8017116:	4613      	mov	r3, r2
 8017118:	009b      	lsls	r3, r3, #2
 801711a:	4413      	add	r3, r2
 801711c:	009b      	lsls	r3, r3, #2
 801711e:	440b      	add	r3, r1
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	2b01      	cmp	r3, #1
 8017124:	d907      	bls.n	8017136 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8017126:	2301      	movs	r3, #1
 8017128:	617b      	str	r3, [r7, #20]
 801712a:	e004      	b.n	8017136 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801712c:	4b10      	ldr	r3, [pc, #64]	; (8017170 <xTaskIncrementTick+0x16c>)
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	3301      	adds	r3, #1
 8017132:	4a0f      	ldr	r2, [pc, #60]	; (8017170 <xTaskIncrementTick+0x16c>)
 8017134:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8017136:	4b0f      	ldr	r3, [pc, #60]	; (8017174 <xTaskIncrementTick+0x170>)
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d001      	beq.n	8017142 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801713e:	2301      	movs	r3, #1
 8017140:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8017142:	697b      	ldr	r3, [r7, #20]
}
 8017144:	4618      	mov	r0, r3
 8017146:	3718      	adds	r7, #24
 8017148:	46bd      	mov	sp, r7
 801714a:	bd80      	pop	{r7, pc}
 801714c:	20041bdc 	.word	0x20041bdc
 8017150:	20041bb8 	.word	0x20041bb8
 8017154:	20041b6c 	.word	0x20041b6c
 8017158:	20041b70 	.word	0x20041b70
 801715c:	20041bcc 	.word	0x20041bcc
 8017160:	20041bd4 	.word	0x20041bd4
 8017164:	20041bbc 	.word	0x20041bbc
 8017168:	20041ab8 	.word	0x20041ab8
 801716c:	20041ab4 	.word	0x20041ab4
 8017170:	20041bc4 	.word	0x20041bc4
 8017174:	20041bc8 	.word	0x20041bc8

08017178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017178:	b580      	push	{r7, lr}
 801717a:	b088      	sub	sp, #32
 801717c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801717e:	4b3d      	ldr	r3, [pc, #244]	; (8017274 <vTaskSwitchContext+0xfc>)
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d003      	beq.n	801718e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017186:	4b3c      	ldr	r3, [pc, #240]	; (8017278 <vTaskSwitchContext+0x100>)
 8017188:	2201      	movs	r2, #1
 801718a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801718c:	e06d      	b.n	801726a <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 801718e:	4b3a      	ldr	r3, [pc, #232]	; (8017278 <vTaskSwitchContext+0x100>)
 8017190:	2200      	movs	r2, #0
 8017192:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8017194:	4b39      	ldr	r3, [pc, #228]	; (801727c <vTaskSwitchContext+0x104>)
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801719a:	61fb      	str	r3, [r7, #28]
 801719c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80171a0:	61bb      	str	r3, [r7, #24]
 80171a2:	69fb      	ldr	r3, [r7, #28]
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	69ba      	ldr	r2, [r7, #24]
 80171a8:	429a      	cmp	r2, r3
 80171aa:	d111      	bne.n	80171d0 <vTaskSwitchContext+0x58>
 80171ac:	69fb      	ldr	r3, [r7, #28]
 80171ae:	3304      	adds	r3, #4
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	69ba      	ldr	r2, [r7, #24]
 80171b4:	429a      	cmp	r2, r3
 80171b6:	d10b      	bne.n	80171d0 <vTaskSwitchContext+0x58>
 80171b8:	69fb      	ldr	r3, [r7, #28]
 80171ba:	3308      	adds	r3, #8
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	69ba      	ldr	r2, [r7, #24]
 80171c0:	429a      	cmp	r2, r3
 80171c2:	d105      	bne.n	80171d0 <vTaskSwitchContext+0x58>
 80171c4:	69fb      	ldr	r3, [r7, #28]
 80171c6:	330c      	adds	r3, #12
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	69ba      	ldr	r2, [r7, #24]
 80171cc:	429a      	cmp	r2, r3
 80171ce:	d008      	beq.n	80171e2 <vTaskSwitchContext+0x6a>
 80171d0:	4b2a      	ldr	r3, [pc, #168]	; (801727c <vTaskSwitchContext+0x104>)
 80171d2:	681a      	ldr	r2, [r3, #0]
 80171d4:	4b29      	ldr	r3, [pc, #164]	; (801727c <vTaskSwitchContext+0x104>)
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	3334      	adds	r3, #52	; 0x34
 80171da:	4619      	mov	r1, r3
 80171dc:	4610      	mov	r0, r2
 80171de:	f7ea fbec 	bl	80019ba <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80171e2:	4b27      	ldr	r3, [pc, #156]	; (8017280 <vTaskSwitchContext+0x108>)
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	fab3 f383 	clz	r3, r3
 80171ee:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80171f0:	7afb      	ldrb	r3, [r7, #11]
 80171f2:	f1c3 031f 	rsb	r3, r3, #31
 80171f6:	617b      	str	r3, [r7, #20]
 80171f8:	4922      	ldr	r1, [pc, #136]	; (8017284 <vTaskSwitchContext+0x10c>)
 80171fa:	697a      	ldr	r2, [r7, #20]
 80171fc:	4613      	mov	r3, r2
 80171fe:	009b      	lsls	r3, r3, #2
 8017200:	4413      	add	r3, r2
 8017202:	009b      	lsls	r3, r3, #2
 8017204:	440b      	add	r3, r1
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d10c      	bne.n	8017226 <vTaskSwitchContext+0xae>
	__asm volatile
 801720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017210:	b672      	cpsid	i
 8017212:	f383 8811 	msr	BASEPRI, r3
 8017216:	f3bf 8f6f 	isb	sy
 801721a:	f3bf 8f4f 	dsb	sy
 801721e:	b662      	cpsie	i
 8017220:	607b      	str	r3, [r7, #4]
}
 8017222:	bf00      	nop
 8017224:	e7fe      	b.n	8017224 <vTaskSwitchContext+0xac>
 8017226:	697a      	ldr	r2, [r7, #20]
 8017228:	4613      	mov	r3, r2
 801722a:	009b      	lsls	r3, r3, #2
 801722c:	4413      	add	r3, r2
 801722e:	009b      	lsls	r3, r3, #2
 8017230:	4a14      	ldr	r2, [pc, #80]	; (8017284 <vTaskSwitchContext+0x10c>)
 8017232:	4413      	add	r3, r2
 8017234:	613b      	str	r3, [r7, #16]
 8017236:	693b      	ldr	r3, [r7, #16]
 8017238:	685b      	ldr	r3, [r3, #4]
 801723a:	685a      	ldr	r2, [r3, #4]
 801723c:	693b      	ldr	r3, [r7, #16]
 801723e:	605a      	str	r2, [r3, #4]
 8017240:	693b      	ldr	r3, [r7, #16]
 8017242:	685a      	ldr	r2, [r3, #4]
 8017244:	693b      	ldr	r3, [r7, #16]
 8017246:	3308      	adds	r3, #8
 8017248:	429a      	cmp	r2, r3
 801724a:	d104      	bne.n	8017256 <vTaskSwitchContext+0xde>
 801724c:	693b      	ldr	r3, [r7, #16]
 801724e:	685b      	ldr	r3, [r3, #4]
 8017250:	685a      	ldr	r2, [r3, #4]
 8017252:	693b      	ldr	r3, [r7, #16]
 8017254:	605a      	str	r2, [r3, #4]
 8017256:	693b      	ldr	r3, [r7, #16]
 8017258:	685b      	ldr	r3, [r3, #4]
 801725a:	68db      	ldr	r3, [r3, #12]
 801725c:	4a07      	ldr	r2, [pc, #28]	; (801727c <vTaskSwitchContext+0x104>)
 801725e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017260:	4b06      	ldr	r3, [pc, #24]	; (801727c <vTaskSwitchContext+0x104>)
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	3350      	adds	r3, #80	; 0x50
 8017266:	4a08      	ldr	r2, [pc, #32]	; (8017288 <vTaskSwitchContext+0x110>)
 8017268:	6013      	str	r3, [r2, #0]
}
 801726a:	bf00      	nop
 801726c:	3720      	adds	r7, #32
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}
 8017272:	bf00      	nop
 8017274:	20041bdc 	.word	0x20041bdc
 8017278:	20041bc8 	.word	0x20041bc8
 801727c:	20041ab4 	.word	0x20041ab4
 8017280:	20041bbc 	.word	0x20041bbc
 8017284:	20041ab8 	.word	0x20041ab8
 8017288:	20000074 	.word	0x20000074

0801728c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b084      	sub	sp, #16
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
 8017294:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d10c      	bne.n	80172b6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 801729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172a0:	b672      	cpsid	i
 80172a2:	f383 8811 	msr	BASEPRI, r3
 80172a6:	f3bf 8f6f 	isb	sy
 80172aa:	f3bf 8f4f 	dsb	sy
 80172ae:	b662      	cpsie	i
 80172b0:	60fb      	str	r3, [r7, #12]
}
 80172b2:	bf00      	nop
 80172b4:	e7fe      	b.n	80172b4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80172b6:	4b07      	ldr	r3, [pc, #28]	; (80172d4 <vTaskPlaceOnEventList+0x48>)
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	3318      	adds	r3, #24
 80172bc:	4619      	mov	r1, r3
 80172be:	6878      	ldr	r0, [r7, #4]
 80172c0:	f7fe fd9d 	bl	8015dfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80172c4:	2101      	movs	r1, #1
 80172c6:	6838      	ldr	r0, [r7, #0]
 80172c8:	f000 fc88 	bl	8017bdc <prvAddCurrentTaskToDelayedList>
}
 80172cc:	bf00      	nop
 80172ce:	3710      	adds	r7, #16
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bd80      	pop	{r7, pc}
 80172d4:	20041ab4 	.word	0x20041ab4

080172d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b086      	sub	sp, #24
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	68db      	ldr	r3, [r3, #12]
 80172e4:	68db      	ldr	r3, [r3, #12]
 80172e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80172e8:	693b      	ldr	r3, [r7, #16]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d10c      	bne.n	8017308 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80172ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172f2:	b672      	cpsid	i
 80172f4:	f383 8811 	msr	BASEPRI, r3
 80172f8:	f3bf 8f6f 	isb	sy
 80172fc:	f3bf 8f4f 	dsb	sy
 8017300:	b662      	cpsie	i
 8017302:	60fb      	str	r3, [r7, #12]
}
 8017304:	bf00      	nop
 8017306:	e7fe      	b.n	8017306 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017308:	693b      	ldr	r3, [r7, #16]
 801730a:	3318      	adds	r3, #24
 801730c:	4618      	mov	r0, r3
 801730e:	f7fe fdaf 	bl	8015e70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017312:	4b1d      	ldr	r3, [pc, #116]	; (8017388 <xTaskRemoveFromEventList+0xb0>)
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d11c      	bne.n	8017354 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801731a:	693b      	ldr	r3, [r7, #16]
 801731c:	3304      	adds	r3, #4
 801731e:	4618      	mov	r0, r3
 8017320:	f7fe fda6 	bl	8015e70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017324:	693b      	ldr	r3, [r7, #16]
 8017326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017328:	2201      	movs	r2, #1
 801732a:	409a      	lsls	r2, r3
 801732c:	4b17      	ldr	r3, [pc, #92]	; (801738c <xTaskRemoveFromEventList+0xb4>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	4313      	orrs	r3, r2
 8017332:	4a16      	ldr	r2, [pc, #88]	; (801738c <xTaskRemoveFromEventList+0xb4>)
 8017334:	6013      	str	r3, [r2, #0]
 8017336:	693b      	ldr	r3, [r7, #16]
 8017338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801733a:	4613      	mov	r3, r2
 801733c:	009b      	lsls	r3, r3, #2
 801733e:	4413      	add	r3, r2
 8017340:	009b      	lsls	r3, r3, #2
 8017342:	4a13      	ldr	r2, [pc, #76]	; (8017390 <xTaskRemoveFromEventList+0xb8>)
 8017344:	441a      	add	r2, r3
 8017346:	693b      	ldr	r3, [r7, #16]
 8017348:	3304      	adds	r3, #4
 801734a:	4619      	mov	r1, r3
 801734c:	4610      	mov	r0, r2
 801734e:	f7fe fd32 	bl	8015db6 <vListInsertEnd>
 8017352:	e005      	b.n	8017360 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017354:	693b      	ldr	r3, [r7, #16]
 8017356:	3318      	adds	r3, #24
 8017358:	4619      	mov	r1, r3
 801735a:	480e      	ldr	r0, [pc, #56]	; (8017394 <xTaskRemoveFromEventList+0xbc>)
 801735c:	f7fe fd2b 	bl	8015db6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017360:	693b      	ldr	r3, [r7, #16]
 8017362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017364:	4b0c      	ldr	r3, [pc, #48]	; (8017398 <xTaskRemoveFromEventList+0xc0>)
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801736a:	429a      	cmp	r2, r3
 801736c:	d905      	bls.n	801737a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801736e:	2301      	movs	r3, #1
 8017370:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017372:	4b0a      	ldr	r3, [pc, #40]	; (801739c <xTaskRemoveFromEventList+0xc4>)
 8017374:	2201      	movs	r2, #1
 8017376:	601a      	str	r2, [r3, #0]
 8017378:	e001      	b.n	801737e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801737a:	2300      	movs	r3, #0
 801737c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801737e:	697b      	ldr	r3, [r7, #20]
}
 8017380:	4618      	mov	r0, r3
 8017382:	3718      	adds	r7, #24
 8017384:	46bd      	mov	sp, r7
 8017386:	bd80      	pop	{r7, pc}
 8017388:	20041bdc 	.word	0x20041bdc
 801738c:	20041bbc 	.word	0x20041bbc
 8017390:	20041ab8 	.word	0x20041ab8
 8017394:	20041b74 	.word	0x20041b74
 8017398:	20041ab4 	.word	0x20041ab4
 801739c:	20041bc8 	.word	0x20041bc8

080173a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80173a0:	b480      	push	{r7}
 80173a2:	b083      	sub	sp, #12
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80173a8:	4b06      	ldr	r3, [pc, #24]	; (80173c4 <vTaskInternalSetTimeOutState+0x24>)
 80173aa:	681a      	ldr	r2, [r3, #0]
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80173b0:	4b05      	ldr	r3, [pc, #20]	; (80173c8 <vTaskInternalSetTimeOutState+0x28>)
 80173b2:	681a      	ldr	r2, [r3, #0]
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	605a      	str	r2, [r3, #4]
}
 80173b8:	bf00      	nop
 80173ba:	370c      	adds	r7, #12
 80173bc:	46bd      	mov	sp, r7
 80173be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c2:	4770      	bx	lr
 80173c4:	20041bcc 	.word	0x20041bcc
 80173c8:	20041bb8 	.word	0x20041bb8

080173cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b088      	sub	sp, #32
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
 80173d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d10c      	bne.n	80173f6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80173dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173e0:	b672      	cpsid	i
 80173e2:	f383 8811 	msr	BASEPRI, r3
 80173e6:	f3bf 8f6f 	isb	sy
 80173ea:	f3bf 8f4f 	dsb	sy
 80173ee:	b662      	cpsie	i
 80173f0:	613b      	str	r3, [r7, #16]
}
 80173f2:	bf00      	nop
 80173f4:	e7fe      	b.n	80173f4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80173f6:	683b      	ldr	r3, [r7, #0]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d10c      	bne.n	8017416 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80173fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017400:	b672      	cpsid	i
 8017402:	f383 8811 	msr	BASEPRI, r3
 8017406:	f3bf 8f6f 	isb	sy
 801740a:	f3bf 8f4f 	dsb	sy
 801740e:	b662      	cpsie	i
 8017410:	60fb      	str	r3, [r7, #12]
}
 8017412:	bf00      	nop
 8017414:	e7fe      	b.n	8017414 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8017416:	f000 fd51 	bl	8017ebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801741a:	4b1d      	ldr	r3, [pc, #116]	; (8017490 <xTaskCheckForTimeOut+0xc4>)
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	685b      	ldr	r3, [r3, #4]
 8017424:	69ba      	ldr	r2, [r7, #24]
 8017426:	1ad3      	subs	r3, r2, r3
 8017428:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801742a:	683b      	ldr	r3, [r7, #0]
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017432:	d102      	bne.n	801743a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017434:	2300      	movs	r3, #0
 8017436:	61fb      	str	r3, [r7, #28]
 8017438:	e023      	b.n	8017482 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	681a      	ldr	r2, [r3, #0]
 801743e:	4b15      	ldr	r3, [pc, #84]	; (8017494 <xTaskCheckForTimeOut+0xc8>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	429a      	cmp	r2, r3
 8017444:	d007      	beq.n	8017456 <xTaskCheckForTimeOut+0x8a>
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	685b      	ldr	r3, [r3, #4]
 801744a:	69ba      	ldr	r2, [r7, #24]
 801744c:	429a      	cmp	r2, r3
 801744e:	d302      	bcc.n	8017456 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017450:	2301      	movs	r3, #1
 8017452:	61fb      	str	r3, [r7, #28]
 8017454:	e015      	b.n	8017482 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	697a      	ldr	r2, [r7, #20]
 801745c:	429a      	cmp	r2, r3
 801745e:	d20b      	bcs.n	8017478 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017460:	683b      	ldr	r3, [r7, #0]
 8017462:	681a      	ldr	r2, [r3, #0]
 8017464:	697b      	ldr	r3, [r7, #20]
 8017466:	1ad2      	subs	r2, r2, r3
 8017468:	683b      	ldr	r3, [r7, #0]
 801746a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f7ff ff97 	bl	80173a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017472:	2300      	movs	r3, #0
 8017474:	61fb      	str	r3, [r7, #28]
 8017476:	e004      	b.n	8017482 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8017478:	683b      	ldr	r3, [r7, #0]
 801747a:	2200      	movs	r2, #0
 801747c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801747e:	2301      	movs	r3, #1
 8017480:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017482:	f000 fd4f 	bl	8017f24 <vPortExitCritical>

	return xReturn;
 8017486:	69fb      	ldr	r3, [r7, #28]
}
 8017488:	4618      	mov	r0, r3
 801748a:	3720      	adds	r7, #32
 801748c:	46bd      	mov	sp, r7
 801748e:	bd80      	pop	{r7, pc}
 8017490:	20041bb8 	.word	0x20041bb8
 8017494:	20041bcc 	.word	0x20041bcc

08017498 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017498:	b480      	push	{r7}
 801749a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801749c:	4b03      	ldr	r3, [pc, #12]	; (80174ac <vTaskMissedYield+0x14>)
 801749e:	2201      	movs	r2, #1
 80174a0:	601a      	str	r2, [r3, #0]
}
 80174a2:	bf00      	nop
 80174a4:	46bd      	mov	sp, r7
 80174a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174aa:	4770      	bx	lr
 80174ac:	20041bc8 	.word	0x20041bc8

080174b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b082      	sub	sp, #8
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80174b8:	f000 f854 	bl	8017564 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80174bc:	4b07      	ldr	r3, [pc, #28]	; (80174dc <prvIdleTask+0x2c>)
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	2b01      	cmp	r3, #1
 80174c2:	d907      	bls.n	80174d4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80174c4:	4b06      	ldr	r3, [pc, #24]	; (80174e0 <prvIdleTask+0x30>)
 80174c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174ca:	601a      	str	r2, [r3, #0]
 80174cc:	f3bf 8f4f 	dsb	sy
 80174d0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80174d4:	f7ea fa6a 	bl	80019ac <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80174d8:	e7ee      	b.n	80174b8 <prvIdleTask+0x8>
 80174da:	bf00      	nop
 80174dc:	20041ab8 	.word	0x20041ab8
 80174e0:	e000ed04 	.word	0xe000ed04

080174e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b082      	sub	sp, #8
 80174e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80174ea:	2300      	movs	r3, #0
 80174ec:	607b      	str	r3, [r7, #4]
 80174ee:	e00c      	b.n	801750a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80174f0:	687a      	ldr	r2, [r7, #4]
 80174f2:	4613      	mov	r3, r2
 80174f4:	009b      	lsls	r3, r3, #2
 80174f6:	4413      	add	r3, r2
 80174f8:	009b      	lsls	r3, r3, #2
 80174fa:	4a12      	ldr	r2, [pc, #72]	; (8017544 <prvInitialiseTaskLists+0x60>)
 80174fc:	4413      	add	r3, r2
 80174fe:	4618      	mov	r0, r3
 8017500:	f7fe fc2c 	bl	8015d5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	3301      	adds	r3, #1
 8017508:	607b      	str	r3, [r7, #4]
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	2b06      	cmp	r3, #6
 801750e:	d9ef      	bls.n	80174f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017510:	480d      	ldr	r0, [pc, #52]	; (8017548 <prvInitialiseTaskLists+0x64>)
 8017512:	f7fe fc23 	bl	8015d5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017516:	480d      	ldr	r0, [pc, #52]	; (801754c <prvInitialiseTaskLists+0x68>)
 8017518:	f7fe fc20 	bl	8015d5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801751c:	480c      	ldr	r0, [pc, #48]	; (8017550 <prvInitialiseTaskLists+0x6c>)
 801751e:	f7fe fc1d 	bl	8015d5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017522:	480c      	ldr	r0, [pc, #48]	; (8017554 <prvInitialiseTaskLists+0x70>)
 8017524:	f7fe fc1a 	bl	8015d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017528:	480b      	ldr	r0, [pc, #44]	; (8017558 <prvInitialiseTaskLists+0x74>)
 801752a:	f7fe fc17 	bl	8015d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801752e:	4b0b      	ldr	r3, [pc, #44]	; (801755c <prvInitialiseTaskLists+0x78>)
 8017530:	4a05      	ldr	r2, [pc, #20]	; (8017548 <prvInitialiseTaskLists+0x64>)
 8017532:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017534:	4b0a      	ldr	r3, [pc, #40]	; (8017560 <prvInitialiseTaskLists+0x7c>)
 8017536:	4a05      	ldr	r2, [pc, #20]	; (801754c <prvInitialiseTaskLists+0x68>)
 8017538:	601a      	str	r2, [r3, #0]
}
 801753a:	bf00      	nop
 801753c:	3708      	adds	r7, #8
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}
 8017542:	bf00      	nop
 8017544:	20041ab8 	.word	0x20041ab8
 8017548:	20041b44 	.word	0x20041b44
 801754c:	20041b58 	.word	0x20041b58
 8017550:	20041b74 	.word	0x20041b74
 8017554:	20041b88 	.word	0x20041b88
 8017558:	20041ba0 	.word	0x20041ba0
 801755c:	20041b6c 	.word	0x20041b6c
 8017560:	20041b70 	.word	0x20041b70

08017564 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b082      	sub	sp, #8
 8017568:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801756a:	e019      	b.n	80175a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801756c:	f000 fca6 	bl	8017ebc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017570:	4b10      	ldr	r3, [pc, #64]	; (80175b4 <prvCheckTasksWaitingTermination+0x50>)
 8017572:	68db      	ldr	r3, [r3, #12]
 8017574:	68db      	ldr	r3, [r3, #12]
 8017576:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	3304      	adds	r3, #4
 801757c:	4618      	mov	r0, r3
 801757e:	f7fe fc77 	bl	8015e70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017582:	4b0d      	ldr	r3, [pc, #52]	; (80175b8 <prvCheckTasksWaitingTermination+0x54>)
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	3b01      	subs	r3, #1
 8017588:	4a0b      	ldr	r2, [pc, #44]	; (80175b8 <prvCheckTasksWaitingTermination+0x54>)
 801758a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801758c:	4b0b      	ldr	r3, [pc, #44]	; (80175bc <prvCheckTasksWaitingTermination+0x58>)
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	3b01      	subs	r3, #1
 8017592:	4a0a      	ldr	r2, [pc, #40]	; (80175bc <prvCheckTasksWaitingTermination+0x58>)
 8017594:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017596:	f000 fcc5 	bl	8017f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801759a:	6878      	ldr	r0, [r7, #4]
 801759c:	f000 f810 	bl	80175c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80175a0:	4b06      	ldr	r3, [pc, #24]	; (80175bc <prvCheckTasksWaitingTermination+0x58>)
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d1e1      	bne.n	801756c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80175a8:	bf00      	nop
 80175aa:	bf00      	nop
 80175ac:	3708      	adds	r7, #8
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd80      	pop	{r7, pc}
 80175b2:	bf00      	nop
 80175b4:	20041b88 	.word	0x20041b88
 80175b8:	20041bb4 	.word	0x20041bb4
 80175bc:	20041b9c 	.word	0x20041b9c

080175c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b084      	sub	sp, #16
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	3350      	adds	r3, #80	; 0x50
 80175cc:	4618      	mov	r0, r3
 80175ce:	f002 fe4f 	bl	801a270 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d108      	bne.n	80175ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175e0:	4618      	mov	r0, r3
 80175e2:	f000 fe67 	bl	80182b4 <vPortFree>
				vPortFree( pxTCB );
 80175e6:	6878      	ldr	r0, [r7, #4]
 80175e8:	f000 fe64 	bl	80182b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80175ec:	e01a      	b.n	8017624 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80175f4:	2b01      	cmp	r3, #1
 80175f6:	d103      	bne.n	8017600 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80175f8:	6878      	ldr	r0, [r7, #4]
 80175fa:	f000 fe5b 	bl	80182b4 <vPortFree>
	}
 80175fe:	e011      	b.n	8017624 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8017606:	2b02      	cmp	r3, #2
 8017608:	d00c      	beq.n	8017624 <prvDeleteTCB+0x64>
	__asm volatile
 801760a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801760e:	b672      	cpsid	i
 8017610:	f383 8811 	msr	BASEPRI, r3
 8017614:	f3bf 8f6f 	isb	sy
 8017618:	f3bf 8f4f 	dsb	sy
 801761c:	b662      	cpsie	i
 801761e:	60fb      	str	r3, [r7, #12]
}
 8017620:	bf00      	nop
 8017622:	e7fe      	b.n	8017622 <prvDeleteTCB+0x62>
	}
 8017624:	bf00      	nop
 8017626:	3710      	adds	r7, #16
 8017628:	46bd      	mov	sp, r7
 801762a:	bd80      	pop	{r7, pc}

0801762c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801762c:	b480      	push	{r7}
 801762e:	b083      	sub	sp, #12
 8017630:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017632:	4b0c      	ldr	r3, [pc, #48]	; (8017664 <prvResetNextTaskUnblockTime+0x38>)
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d104      	bne.n	8017646 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801763c:	4b0a      	ldr	r3, [pc, #40]	; (8017668 <prvResetNextTaskUnblockTime+0x3c>)
 801763e:	f04f 32ff 	mov.w	r2, #4294967295
 8017642:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017644:	e008      	b.n	8017658 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017646:	4b07      	ldr	r3, [pc, #28]	; (8017664 <prvResetNextTaskUnblockTime+0x38>)
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	68db      	ldr	r3, [r3, #12]
 801764c:	68db      	ldr	r3, [r3, #12]
 801764e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	685b      	ldr	r3, [r3, #4]
 8017654:	4a04      	ldr	r2, [pc, #16]	; (8017668 <prvResetNextTaskUnblockTime+0x3c>)
 8017656:	6013      	str	r3, [r2, #0]
}
 8017658:	bf00      	nop
 801765a:	370c      	adds	r7, #12
 801765c:	46bd      	mov	sp, r7
 801765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017662:	4770      	bx	lr
 8017664:	20041b6c 	.word	0x20041b6c
 8017668:	20041bd4 	.word	0x20041bd4

0801766c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801766c:	b480      	push	{r7}
 801766e:	b083      	sub	sp, #12
 8017670:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017672:	4b0b      	ldr	r3, [pc, #44]	; (80176a0 <xTaskGetSchedulerState+0x34>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d102      	bne.n	8017680 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801767a:	2301      	movs	r3, #1
 801767c:	607b      	str	r3, [r7, #4]
 801767e:	e008      	b.n	8017692 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017680:	4b08      	ldr	r3, [pc, #32]	; (80176a4 <xTaskGetSchedulerState+0x38>)
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	2b00      	cmp	r3, #0
 8017686:	d102      	bne.n	801768e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017688:	2302      	movs	r3, #2
 801768a:	607b      	str	r3, [r7, #4]
 801768c:	e001      	b.n	8017692 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801768e:	2300      	movs	r3, #0
 8017690:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017692:	687b      	ldr	r3, [r7, #4]
	}
 8017694:	4618      	mov	r0, r3
 8017696:	370c      	adds	r7, #12
 8017698:	46bd      	mov	sp, r7
 801769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801769e:	4770      	bx	lr
 80176a0:	20041bc0 	.word	0x20041bc0
 80176a4:	20041bdc 	.word	0x20041bdc

080176a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b086      	sub	sp, #24
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80176b4:	2300      	movs	r3, #0
 80176b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d072      	beq.n	80177a4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80176be:	4b3c      	ldr	r3, [pc, #240]	; (80177b0 <xTaskPriorityDisinherit+0x108>)
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	693a      	ldr	r2, [r7, #16]
 80176c4:	429a      	cmp	r2, r3
 80176c6:	d00c      	beq.n	80176e2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80176c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176cc:	b672      	cpsid	i
 80176ce:	f383 8811 	msr	BASEPRI, r3
 80176d2:	f3bf 8f6f 	isb	sy
 80176d6:	f3bf 8f4f 	dsb	sy
 80176da:	b662      	cpsie	i
 80176dc:	60fb      	str	r3, [r7, #12]
}
 80176de:	bf00      	nop
 80176e0:	e7fe      	b.n	80176e0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80176e2:	693b      	ldr	r3, [r7, #16]
 80176e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d10c      	bne.n	8017704 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80176ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176ee:	b672      	cpsid	i
 80176f0:	f383 8811 	msr	BASEPRI, r3
 80176f4:	f3bf 8f6f 	isb	sy
 80176f8:	f3bf 8f4f 	dsb	sy
 80176fc:	b662      	cpsie	i
 80176fe:	60bb      	str	r3, [r7, #8]
}
 8017700:	bf00      	nop
 8017702:	e7fe      	b.n	8017702 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8017704:	693b      	ldr	r3, [r7, #16]
 8017706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017708:	1e5a      	subs	r2, r3, #1
 801770a:	693b      	ldr	r3, [r7, #16]
 801770c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801770e:	693b      	ldr	r3, [r7, #16]
 8017710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017712:	693b      	ldr	r3, [r7, #16]
 8017714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017716:	429a      	cmp	r2, r3
 8017718:	d044      	beq.n	80177a4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801771a:	693b      	ldr	r3, [r7, #16]
 801771c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801771e:	2b00      	cmp	r3, #0
 8017720:	d140      	bne.n	80177a4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017722:	693b      	ldr	r3, [r7, #16]
 8017724:	3304      	adds	r3, #4
 8017726:	4618      	mov	r0, r3
 8017728:	f7fe fba2 	bl	8015e70 <uxListRemove>
 801772c:	4603      	mov	r3, r0
 801772e:	2b00      	cmp	r3, #0
 8017730:	d115      	bne.n	801775e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017732:	693b      	ldr	r3, [r7, #16]
 8017734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017736:	491f      	ldr	r1, [pc, #124]	; (80177b4 <xTaskPriorityDisinherit+0x10c>)
 8017738:	4613      	mov	r3, r2
 801773a:	009b      	lsls	r3, r3, #2
 801773c:	4413      	add	r3, r2
 801773e:	009b      	lsls	r3, r3, #2
 8017740:	440b      	add	r3, r1
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d10a      	bne.n	801775e <xTaskPriorityDisinherit+0xb6>
 8017748:	693b      	ldr	r3, [r7, #16]
 801774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801774c:	2201      	movs	r2, #1
 801774e:	fa02 f303 	lsl.w	r3, r2, r3
 8017752:	43da      	mvns	r2, r3
 8017754:	4b18      	ldr	r3, [pc, #96]	; (80177b8 <xTaskPriorityDisinherit+0x110>)
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	4013      	ands	r3, r2
 801775a:	4a17      	ldr	r2, [pc, #92]	; (80177b8 <xTaskPriorityDisinherit+0x110>)
 801775c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801775e:	693b      	ldr	r3, [r7, #16]
 8017760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017762:	693b      	ldr	r3, [r7, #16]
 8017764:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017766:	693b      	ldr	r3, [r7, #16]
 8017768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801776a:	f1c3 0207 	rsb	r2, r3, #7
 801776e:	693b      	ldr	r3, [r7, #16]
 8017770:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017772:	693b      	ldr	r3, [r7, #16]
 8017774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017776:	2201      	movs	r2, #1
 8017778:	409a      	lsls	r2, r3
 801777a:	4b0f      	ldr	r3, [pc, #60]	; (80177b8 <xTaskPriorityDisinherit+0x110>)
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	4313      	orrs	r3, r2
 8017780:	4a0d      	ldr	r2, [pc, #52]	; (80177b8 <xTaskPriorityDisinherit+0x110>)
 8017782:	6013      	str	r3, [r2, #0]
 8017784:	693b      	ldr	r3, [r7, #16]
 8017786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017788:	4613      	mov	r3, r2
 801778a:	009b      	lsls	r3, r3, #2
 801778c:	4413      	add	r3, r2
 801778e:	009b      	lsls	r3, r3, #2
 8017790:	4a08      	ldr	r2, [pc, #32]	; (80177b4 <xTaskPriorityDisinherit+0x10c>)
 8017792:	441a      	add	r2, r3
 8017794:	693b      	ldr	r3, [r7, #16]
 8017796:	3304      	adds	r3, #4
 8017798:	4619      	mov	r1, r3
 801779a:	4610      	mov	r0, r2
 801779c:	f7fe fb0b 	bl	8015db6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80177a0:	2301      	movs	r3, #1
 80177a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80177a4:	697b      	ldr	r3, [r7, #20]
	}
 80177a6:	4618      	mov	r0, r3
 80177a8:	3718      	adds	r7, #24
 80177aa:	46bd      	mov	sp, r7
 80177ac:	bd80      	pop	{r7, pc}
 80177ae:	bf00      	nop
 80177b0:	20041ab4 	.word	0x20041ab4
 80177b4:	20041ab8 	.word	0x20041ab8
 80177b8:	20041bbc 	.word	0x20041bbc

080177bc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80177bc:	b580      	push	{r7, lr}
 80177be:	b086      	sub	sp, #24
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	60f8      	str	r0, [r7, #12]
 80177c4:	60b9      	str	r1, [r7, #8]
 80177c6:	607a      	str	r2, [r7, #4]
 80177c8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80177ca:	f000 fb77 	bl	8017ebc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80177ce:	4b29      	ldr	r3, [pc, #164]	; (8017874 <xTaskNotifyWait+0xb8>)
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80177d6:	b2db      	uxtb	r3, r3
 80177d8:	2b02      	cmp	r3, #2
 80177da:	d01c      	beq.n	8017816 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80177dc:	4b25      	ldr	r3, [pc, #148]	; (8017874 <xTaskNotifyWait+0xb8>)
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80177e4:	68fa      	ldr	r2, [r7, #12]
 80177e6:	43d2      	mvns	r2, r2
 80177e8:	400a      	ands	r2, r1
 80177ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80177ee:	4b21      	ldr	r3, [pc, #132]	; (8017874 <xTaskNotifyWait+0xb8>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	2201      	movs	r2, #1
 80177f4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

				if( xTicksToWait > ( TickType_t ) 0 )
 80177f8:	683b      	ldr	r3, [r7, #0]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d00b      	beq.n	8017816 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80177fe:	2101      	movs	r1, #1
 8017800:	6838      	ldr	r0, [r7, #0]
 8017802:	f000 f9eb 	bl	8017bdc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8017806:	4b1c      	ldr	r3, [pc, #112]	; (8017878 <xTaskNotifyWait+0xbc>)
 8017808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801780c:	601a      	str	r2, [r3, #0]
 801780e:	f3bf 8f4f 	dsb	sy
 8017812:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8017816:	f000 fb85 	bl	8017f24 <vPortExitCritical>

		taskENTER_CRITICAL();
 801781a:	f000 fb4f 	bl	8017ebc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d005      	beq.n	8017830 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8017824:	4b13      	ldr	r3, [pc, #76]	; (8017874 <xTaskNotifyWait+0xb8>)
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8017830:	4b10      	ldr	r3, [pc, #64]	; (8017874 <xTaskNotifyWait+0xb8>)
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8017838:	b2db      	uxtb	r3, r3
 801783a:	2b02      	cmp	r3, #2
 801783c:	d002      	beq.n	8017844 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801783e:	2300      	movs	r3, #0
 8017840:	617b      	str	r3, [r7, #20]
 8017842:	e00a      	b.n	801785a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8017844:	4b0b      	ldr	r3, [pc, #44]	; (8017874 <xTaskNotifyWait+0xb8>)
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 801784c:	68ba      	ldr	r2, [r7, #8]
 801784e:	43d2      	mvns	r2, r2
 8017850:	400a      	ands	r2, r1
 8017852:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				xReturn = pdTRUE;
 8017856:	2301      	movs	r3, #1
 8017858:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801785a:	4b06      	ldr	r3, [pc, #24]	; (8017874 <xTaskNotifyWait+0xb8>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	2200      	movs	r2, #0
 8017860:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 8017864:	f000 fb5e 	bl	8017f24 <vPortExitCritical>

		return xReturn;
 8017868:	697b      	ldr	r3, [r7, #20]
	}
 801786a:	4618      	mov	r0, r3
 801786c:	3718      	adds	r7, #24
 801786e:	46bd      	mov	sp, r7
 8017870:	bd80      	pop	{r7, pc}
 8017872:	bf00      	nop
 8017874:	20041ab4 	.word	0x20041ab4
 8017878:	e000ed04 	.word	0xe000ed04

0801787c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801787c:	b580      	push	{r7, lr}
 801787e:	b08a      	sub	sp, #40	; 0x28
 8017880:	af00      	add	r7, sp, #0
 8017882:	60f8      	str	r0, [r7, #12]
 8017884:	60b9      	str	r1, [r7, #8]
 8017886:	603b      	str	r3, [r7, #0]
 8017888:	4613      	mov	r3, r2
 801788a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801788c:	2301      	movs	r3, #1
 801788e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d10c      	bne.n	80178b0 <xTaskGenericNotify+0x34>
	__asm volatile
 8017896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801789a:	b672      	cpsid	i
 801789c:	f383 8811 	msr	BASEPRI, r3
 80178a0:	f3bf 8f6f 	isb	sy
 80178a4:	f3bf 8f4f 	dsb	sy
 80178a8:	b662      	cpsie	i
 80178aa:	61bb      	str	r3, [r7, #24]
}
 80178ac:	bf00      	nop
 80178ae:	e7fe      	b.n	80178ae <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80178b4:	f000 fb02 	bl	8017ebc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80178b8:	683b      	ldr	r3, [r7, #0]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d004      	beq.n	80178c8 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80178be:	6a3b      	ldr	r3, [r7, #32]
 80178c0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80178c4:	683b      	ldr	r3, [r7, #0]
 80178c6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80178c8:	6a3b      	ldr	r3, [r7, #32]
 80178ca:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80178ce:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80178d0:	6a3b      	ldr	r3, [r7, #32]
 80178d2:	2202      	movs	r2, #2
 80178d4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

			switch( eAction )
 80178d8:	79fb      	ldrb	r3, [r7, #7]
 80178da:	2b04      	cmp	r3, #4
 80178dc:	d82d      	bhi.n	801793a <xTaskGenericNotify+0xbe>
 80178de:	a201      	add	r2, pc, #4	; (adr r2, 80178e4 <xTaskGenericNotify+0x68>)
 80178e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178e4:	08017961 	.word	0x08017961
 80178e8:	080178f9 	.word	0x080178f9
 80178ec:	0801790b 	.word	0x0801790b
 80178f0:	0801791b 	.word	0x0801791b
 80178f4:	08017925 	.word	0x08017925
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80178f8:	6a3b      	ldr	r3, [r7, #32]
 80178fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80178fe:	68bb      	ldr	r3, [r7, #8]
 8017900:	431a      	orrs	r2, r3
 8017902:	6a3b      	ldr	r3, [r7, #32]
 8017904:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 8017908:	e02d      	b.n	8017966 <xTaskGenericNotify+0xea>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801790a:	6a3b      	ldr	r3, [r7, #32]
 801790c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017910:	1c5a      	adds	r2, r3, #1
 8017912:	6a3b      	ldr	r3, [r7, #32]
 8017914:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 8017918:	e025      	b.n	8017966 <xTaskGenericNotify+0xea>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801791a:	6a3b      	ldr	r3, [r7, #32]
 801791c:	68ba      	ldr	r2, [r7, #8]
 801791e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 8017922:	e020      	b.n	8017966 <xTaskGenericNotify+0xea>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8017924:	7ffb      	ldrb	r3, [r7, #31]
 8017926:	2b02      	cmp	r3, #2
 8017928:	d004      	beq.n	8017934 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801792a:	6a3b      	ldr	r3, [r7, #32]
 801792c:	68ba      	ldr	r2, [r7, #8]
 801792e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8017932:	e018      	b.n	8017966 <xTaskGenericNotify+0xea>
						xReturn = pdFAIL;
 8017934:	2300      	movs	r3, #0
 8017936:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8017938:	e015      	b.n	8017966 <xTaskGenericNotify+0xea>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801793a:	6a3b      	ldr	r3, [r7, #32]
 801793c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017944:	d00e      	beq.n	8017964 <xTaskGenericNotify+0xe8>
	__asm volatile
 8017946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801794a:	b672      	cpsid	i
 801794c:	f383 8811 	msr	BASEPRI, r3
 8017950:	f3bf 8f6f 	isb	sy
 8017954:	f3bf 8f4f 	dsb	sy
 8017958:	b662      	cpsie	i
 801795a:	617b      	str	r3, [r7, #20]
}
 801795c:	bf00      	nop
 801795e:	e7fe      	b.n	801795e <xTaskGenericNotify+0xe2>
					break;
 8017960:	bf00      	nop
 8017962:	e000      	b.n	8017966 <xTaskGenericNotify+0xea>

					break;
 8017964:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017966:	7ffb      	ldrb	r3, [r7, #31]
 8017968:	2b01      	cmp	r3, #1
 801796a:	d13b      	bne.n	80179e4 <xTaskGenericNotify+0x168>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801796c:	6a3b      	ldr	r3, [r7, #32]
 801796e:	3304      	adds	r3, #4
 8017970:	4618      	mov	r0, r3
 8017972:	f7fe fa7d 	bl	8015e70 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8017976:	6a3b      	ldr	r3, [r7, #32]
 8017978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801797a:	2201      	movs	r2, #1
 801797c:	409a      	lsls	r2, r3
 801797e:	4b1d      	ldr	r3, [pc, #116]	; (80179f4 <xTaskGenericNotify+0x178>)
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	4313      	orrs	r3, r2
 8017984:	4a1b      	ldr	r2, [pc, #108]	; (80179f4 <xTaskGenericNotify+0x178>)
 8017986:	6013      	str	r3, [r2, #0]
 8017988:	6a3b      	ldr	r3, [r7, #32]
 801798a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801798c:	4613      	mov	r3, r2
 801798e:	009b      	lsls	r3, r3, #2
 8017990:	4413      	add	r3, r2
 8017992:	009b      	lsls	r3, r3, #2
 8017994:	4a18      	ldr	r2, [pc, #96]	; (80179f8 <xTaskGenericNotify+0x17c>)
 8017996:	441a      	add	r2, r3
 8017998:	6a3b      	ldr	r3, [r7, #32]
 801799a:	3304      	adds	r3, #4
 801799c:	4619      	mov	r1, r3
 801799e:	4610      	mov	r0, r2
 80179a0:	f7fe fa09 	bl	8015db6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80179a4:	6a3b      	ldr	r3, [r7, #32]
 80179a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d00c      	beq.n	80179c6 <xTaskGenericNotify+0x14a>
	__asm volatile
 80179ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179b0:	b672      	cpsid	i
 80179b2:	f383 8811 	msr	BASEPRI, r3
 80179b6:	f3bf 8f6f 	isb	sy
 80179ba:	f3bf 8f4f 	dsb	sy
 80179be:	b662      	cpsie	i
 80179c0:	613b      	str	r3, [r7, #16]
}
 80179c2:	bf00      	nop
 80179c4:	e7fe      	b.n	80179c4 <xTaskGenericNotify+0x148>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80179c6:	6a3b      	ldr	r3, [r7, #32]
 80179c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179ca:	4b0c      	ldr	r3, [pc, #48]	; (80179fc <xTaskGenericNotify+0x180>)
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179d0:	429a      	cmp	r2, r3
 80179d2:	d907      	bls.n	80179e4 <xTaskGenericNotify+0x168>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80179d4:	4b0a      	ldr	r3, [pc, #40]	; (8017a00 <xTaskGenericNotify+0x184>)
 80179d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80179da:	601a      	str	r2, [r3, #0]
 80179dc:	f3bf 8f4f 	dsb	sy
 80179e0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80179e4:	f000 fa9e 	bl	8017f24 <vPortExitCritical>

		return xReturn;
 80179e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80179ea:	4618      	mov	r0, r3
 80179ec:	3728      	adds	r7, #40	; 0x28
 80179ee:	46bd      	mov	sp, r7
 80179f0:	bd80      	pop	{r7, pc}
 80179f2:	bf00      	nop
 80179f4:	20041bbc 	.word	0x20041bbc
 80179f8:	20041ab8 	.word	0x20041ab8
 80179fc:	20041ab4 	.word	0x20041ab4
 8017a00:	e000ed04 	.word	0xe000ed04

08017a04 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b08e      	sub	sp, #56	; 0x38
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	60f8      	str	r0, [r7, #12]
 8017a0c:	60b9      	str	r1, [r7, #8]
 8017a0e:	603b      	str	r3, [r7, #0]
 8017a10:	4613      	mov	r3, r2
 8017a12:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8017a14:	2301      	movs	r3, #1
 8017a16:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d10c      	bne.n	8017a38 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 8017a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a22:	b672      	cpsid	i
 8017a24:	f383 8811 	msr	BASEPRI, r3
 8017a28:	f3bf 8f6f 	isb	sy
 8017a2c:	f3bf 8f4f 	dsb	sy
 8017a30:	b662      	cpsie	i
 8017a32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017a34:	bf00      	nop
 8017a36:	e7fe      	b.n	8017a36 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017a38:	f000 fb28 	bl	801808c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8017a40:	f3ef 8211 	mrs	r2, BASEPRI
 8017a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a48:	b672      	cpsid	i
 8017a4a:	f383 8811 	msr	BASEPRI, r3
 8017a4e:	f3bf 8f6f 	isb	sy
 8017a52:	f3bf 8f4f 	dsb	sy
 8017a56:	b662      	cpsie	i
 8017a58:	623a      	str	r2, [r7, #32]
 8017a5a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8017a5c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8017a60:	683b      	ldr	r3, [r7, #0]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d004      	beq.n	8017a70 <xTaskGenericNotifyFromISR+0x6c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8017a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a68:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8017a6c:	683b      	ldr	r3, [r7, #0]
 8017a6e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8017a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a72:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8017a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a7c:	2202      	movs	r2, #2
 8017a7e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

			switch( eAction )
 8017a82:	79fb      	ldrb	r3, [r7, #7]
 8017a84:	2b04      	cmp	r3, #4
 8017a86:	d82f      	bhi.n	8017ae8 <xTaskGenericNotifyFromISR+0xe4>
 8017a88:	a201      	add	r2, pc, #4	; (adr r2, 8017a90 <xTaskGenericNotifyFromISR+0x8c>)
 8017a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a8e:	bf00      	nop
 8017a90:	08017b0f 	.word	0x08017b0f
 8017a94:	08017aa5 	.word	0x08017aa5
 8017a98:	08017ab7 	.word	0x08017ab7
 8017a9c:	08017ac7 	.word	0x08017ac7
 8017aa0:	08017ad1 	.word	0x08017ad1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8017aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8017aaa:	68bb      	ldr	r3, [r7, #8]
 8017aac:	431a      	orrs	r2, r3
 8017aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ab0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 8017ab4:	e02e      	b.n	8017b14 <xTaskGenericNotifyFromISR+0x110>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8017ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ab8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017abc:	1c5a      	adds	r2, r3, #1
 8017abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ac0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 8017ac4:	e026      	b.n	8017b14 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8017ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ac8:	68ba      	ldr	r2, [r7, #8]
 8017aca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 8017ace:	e021      	b.n	8017b14 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8017ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017ad4:	2b02      	cmp	r3, #2
 8017ad6:	d004      	beq.n	8017ae2 <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8017ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ada:	68ba      	ldr	r2, [r7, #8]
 8017adc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8017ae0:	e018      	b.n	8017b14 <xTaskGenericNotifyFromISR+0x110>
						xReturn = pdFAIL;
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8017ae6:	e015      	b.n	8017b14 <xTaskGenericNotifyFromISR+0x110>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8017ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017af2:	d00e      	beq.n	8017b12 <xTaskGenericNotifyFromISR+0x10e>
	__asm volatile
 8017af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017af8:	b672      	cpsid	i
 8017afa:	f383 8811 	msr	BASEPRI, r3
 8017afe:	f3bf 8f6f 	isb	sy
 8017b02:	f3bf 8f4f 	dsb	sy
 8017b06:	b662      	cpsie	i
 8017b08:	61bb      	str	r3, [r7, #24]
}
 8017b0a:	bf00      	nop
 8017b0c:	e7fe      	b.n	8017b0c <xTaskGenericNotifyFromISR+0x108>
					break;
 8017b0e:	bf00      	nop
 8017b10:	e000      	b.n	8017b14 <xTaskGenericNotifyFromISR+0x110>
					break;
 8017b12:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017b14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017b18:	2b01      	cmp	r3, #1
 8017b1a:	d147      	bne.n	8017bac <xTaskGenericNotifyFromISR+0x1a8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8017b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d00c      	beq.n	8017b3e <xTaskGenericNotifyFromISR+0x13a>
	__asm volatile
 8017b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b28:	b672      	cpsid	i
 8017b2a:	f383 8811 	msr	BASEPRI, r3
 8017b2e:	f3bf 8f6f 	isb	sy
 8017b32:	f3bf 8f4f 	dsb	sy
 8017b36:	b662      	cpsie	i
 8017b38:	617b      	str	r3, [r7, #20]
}
 8017b3a:	bf00      	nop
 8017b3c:	e7fe      	b.n	8017b3c <xTaskGenericNotifyFromISR+0x138>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017b3e:	4b21      	ldr	r3, [pc, #132]	; (8017bc4 <xTaskGenericNotifyFromISR+0x1c0>)
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d11c      	bne.n	8017b80 <xTaskGenericNotifyFromISR+0x17c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b48:	3304      	adds	r3, #4
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	f7fe f990 	bl	8015e70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b54:	2201      	movs	r2, #1
 8017b56:	409a      	lsls	r2, r3
 8017b58:	4b1b      	ldr	r3, [pc, #108]	; (8017bc8 <xTaskGenericNotifyFromISR+0x1c4>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	4313      	orrs	r3, r2
 8017b5e:	4a1a      	ldr	r2, [pc, #104]	; (8017bc8 <xTaskGenericNotifyFromISR+0x1c4>)
 8017b60:	6013      	str	r3, [r2, #0]
 8017b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b66:	4613      	mov	r3, r2
 8017b68:	009b      	lsls	r3, r3, #2
 8017b6a:	4413      	add	r3, r2
 8017b6c:	009b      	lsls	r3, r3, #2
 8017b6e:	4a17      	ldr	r2, [pc, #92]	; (8017bcc <xTaskGenericNotifyFromISR+0x1c8>)
 8017b70:	441a      	add	r2, r3
 8017b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b74:	3304      	adds	r3, #4
 8017b76:	4619      	mov	r1, r3
 8017b78:	4610      	mov	r0, r2
 8017b7a:	f7fe f91c 	bl	8015db6 <vListInsertEnd>
 8017b7e:	e005      	b.n	8017b8c <xTaskGenericNotifyFromISR+0x188>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8017b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b82:	3318      	adds	r3, #24
 8017b84:	4619      	mov	r1, r3
 8017b86:	4812      	ldr	r0, [pc, #72]	; (8017bd0 <xTaskGenericNotifyFromISR+0x1cc>)
 8017b88:	f7fe f915 	bl	8015db6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b90:	4b10      	ldr	r3, [pc, #64]	; (8017bd4 <xTaskGenericNotifyFromISR+0x1d0>)
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b96:	429a      	cmp	r2, r3
 8017b98:	d908      	bls.n	8017bac <xTaskGenericNotifyFromISR+0x1a8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8017b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d002      	beq.n	8017ba6 <xTaskGenericNotifyFromISR+0x1a2>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8017ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ba2:	2201      	movs	r2, #1
 8017ba4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8017ba6:	4b0c      	ldr	r3, [pc, #48]	; (8017bd8 <xTaskGenericNotifyFromISR+0x1d4>)
 8017ba8:	2201      	movs	r2, #1
 8017baa:	601a      	str	r2, [r3, #0]
 8017bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bae:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017bb0:	693b      	ldr	r3, [r7, #16]
 8017bb2:	f383 8811 	msr	BASEPRI, r3
}
 8017bb6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8017bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8017bba:	4618      	mov	r0, r3
 8017bbc:	3738      	adds	r7, #56	; 0x38
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	bd80      	pop	{r7, pc}
 8017bc2:	bf00      	nop
 8017bc4:	20041bdc 	.word	0x20041bdc
 8017bc8:	20041bbc 	.word	0x20041bbc
 8017bcc:	20041ab8 	.word	0x20041ab8
 8017bd0:	20041b74 	.word	0x20041b74
 8017bd4:	20041ab4 	.word	0x20041ab4
 8017bd8:	20041bc8 	.word	0x20041bc8

08017bdc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b084      	sub	sp, #16
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	6078      	str	r0, [r7, #4]
 8017be4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017be6:	4b29      	ldr	r3, [pc, #164]	; (8017c8c <prvAddCurrentTaskToDelayedList+0xb0>)
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017bec:	4b28      	ldr	r3, [pc, #160]	; (8017c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	3304      	adds	r3, #4
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	f7fe f93c 	bl	8015e70 <uxListRemove>
 8017bf8:	4603      	mov	r3, r0
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d10b      	bne.n	8017c16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8017bfe:	4b24      	ldr	r3, [pc, #144]	; (8017c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c04:	2201      	movs	r2, #1
 8017c06:	fa02 f303 	lsl.w	r3, r2, r3
 8017c0a:	43da      	mvns	r2, r3
 8017c0c:	4b21      	ldr	r3, [pc, #132]	; (8017c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	4013      	ands	r3, r2
 8017c12:	4a20      	ldr	r2, [pc, #128]	; (8017c94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017c14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c1c:	d10a      	bne.n	8017c34 <prvAddCurrentTaskToDelayedList+0x58>
 8017c1e:	683b      	ldr	r3, [r7, #0]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d007      	beq.n	8017c34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017c24:	4b1a      	ldr	r3, [pc, #104]	; (8017c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	3304      	adds	r3, #4
 8017c2a:	4619      	mov	r1, r3
 8017c2c:	481a      	ldr	r0, [pc, #104]	; (8017c98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8017c2e:	f7fe f8c2 	bl	8015db6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017c32:	e026      	b.n	8017c82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017c34:	68fa      	ldr	r2, [r7, #12]
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	4413      	add	r3, r2
 8017c3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017c3c:	4b14      	ldr	r3, [pc, #80]	; (8017c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	68ba      	ldr	r2, [r7, #8]
 8017c42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017c44:	68ba      	ldr	r2, [r7, #8]
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	429a      	cmp	r2, r3
 8017c4a:	d209      	bcs.n	8017c60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017c4c:	4b13      	ldr	r3, [pc, #76]	; (8017c9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8017c4e:	681a      	ldr	r2, [r3, #0]
 8017c50:	4b0f      	ldr	r3, [pc, #60]	; (8017c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	3304      	adds	r3, #4
 8017c56:	4619      	mov	r1, r3
 8017c58:	4610      	mov	r0, r2
 8017c5a:	f7fe f8d0 	bl	8015dfe <vListInsert>
}
 8017c5e:	e010      	b.n	8017c82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017c60:	4b0f      	ldr	r3, [pc, #60]	; (8017ca0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8017c62:	681a      	ldr	r2, [r3, #0]
 8017c64:	4b0a      	ldr	r3, [pc, #40]	; (8017c90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	3304      	adds	r3, #4
 8017c6a:	4619      	mov	r1, r3
 8017c6c:	4610      	mov	r0, r2
 8017c6e:	f7fe f8c6 	bl	8015dfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017c72:	4b0c      	ldr	r3, [pc, #48]	; (8017ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	68ba      	ldr	r2, [r7, #8]
 8017c78:	429a      	cmp	r2, r3
 8017c7a:	d202      	bcs.n	8017c82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8017c7c:	4a09      	ldr	r2, [pc, #36]	; (8017ca4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017c7e:	68bb      	ldr	r3, [r7, #8]
 8017c80:	6013      	str	r3, [r2, #0]
}
 8017c82:	bf00      	nop
 8017c84:	3710      	adds	r7, #16
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bd80      	pop	{r7, pc}
 8017c8a:	bf00      	nop
 8017c8c:	20041bb8 	.word	0x20041bb8
 8017c90:	20041ab4 	.word	0x20041ab4
 8017c94:	20041bbc 	.word	0x20041bbc
 8017c98:	20041ba0 	.word	0x20041ba0
 8017c9c:	20041b70 	.word	0x20041b70
 8017ca0:	20041b6c 	.word	0x20041b6c
 8017ca4:	20041bd4 	.word	0x20041bd4

08017ca8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017ca8:	b480      	push	{r7}
 8017caa:	b085      	sub	sp, #20
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	60f8      	str	r0, [r7, #12]
 8017cb0:	60b9      	str	r1, [r7, #8]
 8017cb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	3b04      	subs	r3, #4
 8017cb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	3b04      	subs	r3, #4
 8017cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017cc8:	68bb      	ldr	r3, [r7, #8]
 8017cca:	f023 0201 	bic.w	r2, r3, #1
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	3b04      	subs	r3, #4
 8017cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017cd8:	4a0c      	ldr	r2, [pc, #48]	; (8017d0c <pxPortInitialiseStack+0x64>)
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	3b14      	subs	r3, #20
 8017ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017ce4:	687a      	ldr	r2, [r7, #4]
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	3b04      	subs	r3, #4
 8017cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	f06f 0202 	mvn.w	r2, #2
 8017cf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	3b20      	subs	r3, #32
 8017cfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017cfe:	68fb      	ldr	r3, [r7, #12]
}
 8017d00:	4618      	mov	r0, r3
 8017d02:	3714      	adds	r7, #20
 8017d04:	46bd      	mov	sp, r7
 8017d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0a:	4770      	bx	lr
 8017d0c:	08017d11 	.word	0x08017d11

08017d10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017d10:	b480      	push	{r7}
 8017d12:	b085      	sub	sp, #20
 8017d14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017d16:	2300      	movs	r3, #0
 8017d18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017d1a:	4b14      	ldr	r3, [pc, #80]	; (8017d6c <prvTaskExitError+0x5c>)
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d22:	d00c      	beq.n	8017d3e <prvTaskExitError+0x2e>
	__asm volatile
 8017d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d28:	b672      	cpsid	i
 8017d2a:	f383 8811 	msr	BASEPRI, r3
 8017d2e:	f3bf 8f6f 	isb	sy
 8017d32:	f3bf 8f4f 	dsb	sy
 8017d36:	b662      	cpsie	i
 8017d38:	60fb      	str	r3, [r7, #12]
}
 8017d3a:	bf00      	nop
 8017d3c:	e7fe      	b.n	8017d3c <prvTaskExitError+0x2c>
	__asm volatile
 8017d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d42:	b672      	cpsid	i
 8017d44:	f383 8811 	msr	BASEPRI, r3
 8017d48:	f3bf 8f6f 	isb	sy
 8017d4c:	f3bf 8f4f 	dsb	sy
 8017d50:	b662      	cpsie	i
 8017d52:	60bb      	str	r3, [r7, #8]
}
 8017d54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017d56:	bf00      	nop
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d0fc      	beq.n	8017d58 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017d5e:	bf00      	nop
 8017d60:	bf00      	nop
 8017d62:	3714      	adds	r7, #20
 8017d64:	46bd      	mov	sp, r7
 8017d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d6a:	4770      	bx	lr
 8017d6c:	20000070 	.word	0x20000070

08017d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017d70:	4b07      	ldr	r3, [pc, #28]	; (8017d90 <pxCurrentTCBConst2>)
 8017d72:	6819      	ldr	r1, [r3, #0]
 8017d74:	6808      	ldr	r0, [r1, #0]
 8017d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d7a:	f380 8809 	msr	PSP, r0
 8017d7e:	f3bf 8f6f 	isb	sy
 8017d82:	f04f 0000 	mov.w	r0, #0
 8017d86:	f380 8811 	msr	BASEPRI, r0
 8017d8a:	4770      	bx	lr
 8017d8c:	f3af 8000 	nop.w

08017d90 <pxCurrentTCBConst2>:
 8017d90:	20041ab4 	.word	0x20041ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017d94:	bf00      	nop
 8017d96:	bf00      	nop

08017d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017d98:	4808      	ldr	r0, [pc, #32]	; (8017dbc <prvPortStartFirstTask+0x24>)
 8017d9a:	6800      	ldr	r0, [r0, #0]
 8017d9c:	6800      	ldr	r0, [r0, #0]
 8017d9e:	f380 8808 	msr	MSP, r0
 8017da2:	f04f 0000 	mov.w	r0, #0
 8017da6:	f380 8814 	msr	CONTROL, r0
 8017daa:	b662      	cpsie	i
 8017dac:	b661      	cpsie	f
 8017dae:	f3bf 8f4f 	dsb	sy
 8017db2:	f3bf 8f6f 	isb	sy
 8017db6:	df00      	svc	0
 8017db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017dba:	bf00      	nop
 8017dbc:	e000ed08 	.word	0xe000ed08

08017dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b084      	sub	sp, #16
 8017dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017dc6:	4b37      	ldr	r3, [pc, #220]	; (8017ea4 <xPortStartScheduler+0xe4>)
 8017dc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	781b      	ldrb	r3, [r3, #0]
 8017dce:	b2db      	uxtb	r3, r3
 8017dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	22ff      	movs	r2, #255	; 0xff
 8017dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	781b      	ldrb	r3, [r3, #0]
 8017ddc:	b2db      	uxtb	r3, r3
 8017dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017de0:	78fb      	ldrb	r3, [r7, #3]
 8017de2:	b2db      	uxtb	r3, r3
 8017de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017de8:	b2da      	uxtb	r2, r3
 8017dea:	4b2f      	ldr	r3, [pc, #188]	; (8017ea8 <xPortStartScheduler+0xe8>)
 8017dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017dee:	4b2f      	ldr	r3, [pc, #188]	; (8017eac <xPortStartScheduler+0xec>)
 8017df0:	2207      	movs	r2, #7
 8017df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017df4:	e009      	b.n	8017e0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8017df6:	4b2d      	ldr	r3, [pc, #180]	; (8017eac <xPortStartScheduler+0xec>)
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	3b01      	subs	r3, #1
 8017dfc:	4a2b      	ldr	r2, [pc, #172]	; (8017eac <xPortStartScheduler+0xec>)
 8017dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017e00:	78fb      	ldrb	r3, [r7, #3]
 8017e02:	b2db      	uxtb	r3, r3
 8017e04:	005b      	lsls	r3, r3, #1
 8017e06:	b2db      	uxtb	r3, r3
 8017e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017e0a:	78fb      	ldrb	r3, [r7, #3]
 8017e0c:	b2db      	uxtb	r3, r3
 8017e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017e12:	2b80      	cmp	r3, #128	; 0x80
 8017e14:	d0ef      	beq.n	8017df6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017e16:	4b25      	ldr	r3, [pc, #148]	; (8017eac <xPortStartScheduler+0xec>)
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	f1c3 0307 	rsb	r3, r3, #7
 8017e1e:	2b04      	cmp	r3, #4
 8017e20:	d00c      	beq.n	8017e3c <xPortStartScheduler+0x7c>
	__asm volatile
 8017e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e26:	b672      	cpsid	i
 8017e28:	f383 8811 	msr	BASEPRI, r3
 8017e2c:	f3bf 8f6f 	isb	sy
 8017e30:	f3bf 8f4f 	dsb	sy
 8017e34:	b662      	cpsie	i
 8017e36:	60bb      	str	r3, [r7, #8]
}
 8017e38:	bf00      	nop
 8017e3a:	e7fe      	b.n	8017e3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017e3c:	4b1b      	ldr	r3, [pc, #108]	; (8017eac <xPortStartScheduler+0xec>)
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	021b      	lsls	r3, r3, #8
 8017e42:	4a1a      	ldr	r2, [pc, #104]	; (8017eac <xPortStartScheduler+0xec>)
 8017e44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017e46:	4b19      	ldr	r3, [pc, #100]	; (8017eac <xPortStartScheduler+0xec>)
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017e4e:	4a17      	ldr	r2, [pc, #92]	; (8017eac <xPortStartScheduler+0xec>)
 8017e50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	b2da      	uxtb	r2, r3
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017e5a:	4b15      	ldr	r3, [pc, #84]	; (8017eb0 <xPortStartScheduler+0xf0>)
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	4a14      	ldr	r2, [pc, #80]	; (8017eb0 <xPortStartScheduler+0xf0>)
 8017e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017e64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017e66:	4b12      	ldr	r3, [pc, #72]	; (8017eb0 <xPortStartScheduler+0xf0>)
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	4a11      	ldr	r2, [pc, #68]	; (8017eb0 <xPortStartScheduler+0xf0>)
 8017e6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017e70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017e72:	f000 f8dd 	bl	8018030 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017e76:	4b0f      	ldr	r3, [pc, #60]	; (8017eb4 <xPortStartScheduler+0xf4>)
 8017e78:	2200      	movs	r2, #0
 8017e7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017e7c:	f000 f8fc 	bl	8018078 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017e80:	4b0d      	ldr	r3, [pc, #52]	; (8017eb8 <xPortStartScheduler+0xf8>)
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	4a0c      	ldr	r2, [pc, #48]	; (8017eb8 <xPortStartScheduler+0xf8>)
 8017e86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017e8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017e8c:	f7ff ff84 	bl	8017d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017e90:	f7ff f972 	bl	8017178 <vTaskSwitchContext>
	prvTaskExitError();
 8017e94:	f7ff ff3c 	bl	8017d10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017e98:	2300      	movs	r3, #0
}
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	3710      	adds	r7, #16
 8017e9e:	46bd      	mov	sp, r7
 8017ea0:	bd80      	pop	{r7, pc}
 8017ea2:	bf00      	nop
 8017ea4:	e000e400 	.word	0xe000e400
 8017ea8:	20041be0 	.word	0x20041be0
 8017eac:	20041be4 	.word	0x20041be4
 8017eb0:	e000ed20 	.word	0xe000ed20
 8017eb4:	20000070 	.word	0x20000070
 8017eb8:	e000ef34 	.word	0xe000ef34

08017ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017ebc:	b480      	push	{r7}
 8017ebe:	b083      	sub	sp, #12
 8017ec0:	af00      	add	r7, sp, #0
	__asm volatile
 8017ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ec6:	b672      	cpsid	i
 8017ec8:	f383 8811 	msr	BASEPRI, r3
 8017ecc:	f3bf 8f6f 	isb	sy
 8017ed0:	f3bf 8f4f 	dsb	sy
 8017ed4:	b662      	cpsie	i
 8017ed6:	607b      	str	r3, [r7, #4]
}
 8017ed8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017eda:	4b10      	ldr	r3, [pc, #64]	; (8017f1c <vPortEnterCritical+0x60>)
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	3301      	adds	r3, #1
 8017ee0:	4a0e      	ldr	r2, [pc, #56]	; (8017f1c <vPortEnterCritical+0x60>)
 8017ee2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017ee4:	4b0d      	ldr	r3, [pc, #52]	; (8017f1c <vPortEnterCritical+0x60>)
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	2b01      	cmp	r3, #1
 8017eea:	d111      	bne.n	8017f10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017eec:	4b0c      	ldr	r3, [pc, #48]	; (8017f20 <vPortEnterCritical+0x64>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	b2db      	uxtb	r3, r3
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d00c      	beq.n	8017f10 <vPortEnterCritical+0x54>
	__asm volatile
 8017ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017efa:	b672      	cpsid	i
 8017efc:	f383 8811 	msr	BASEPRI, r3
 8017f00:	f3bf 8f6f 	isb	sy
 8017f04:	f3bf 8f4f 	dsb	sy
 8017f08:	b662      	cpsie	i
 8017f0a:	603b      	str	r3, [r7, #0]
}
 8017f0c:	bf00      	nop
 8017f0e:	e7fe      	b.n	8017f0e <vPortEnterCritical+0x52>
	}
}
 8017f10:	bf00      	nop
 8017f12:	370c      	adds	r7, #12
 8017f14:	46bd      	mov	sp, r7
 8017f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1a:	4770      	bx	lr
 8017f1c:	20000070 	.word	0x20000070
 8017f20:	e000ed04 	.word	0xe000ed04

08017f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017f24:	b480      	push	{r7}
 8017f26:	b083      	sub	sp, #12
 8017f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017f2a:	4b13      	ldr	r3, [pc, #76]	; (8017f78 <vPortExitCritical+0x54>)
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d10c      	bne.n	8017f4c <vPortExitCritical+0x28>
	__asm volatile
 8017f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f36:	b672      	cpsid	i
 8017f38:	f383 8811 	msr	BASEPRI, r3
 8017f3c:	f3bf 8f6f 	isb	sy
 8017f40:	f3bf 8f4f 	dsb	sy
 8017f44:	b662      	cpsie	i
 8017f46:	607b      	str	r3, [r7, #4]
}
 8017f48:	bf00      	nop
 8017f4a:	e7fe      	b.n	8017f4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8017f4c:	4b0a      	ldr	r3, [pc, #40]	; (8017f78 <vPortExitCritical+0x54>)
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	3b01      	subs	r3, #1
 8017f52:	4a09      	ldr	r2, [pc, #36]	; (8017f78 <vPortExitCritical+0x54>)
 8017f54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017f56:	4b08      	ldr	r3, [pc, #32]	; (8017f78 <vPortExitCritical+0x54>)
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d105      	bne.n	8017f6a <vPortExitCritical+0x46>
 8017f5e:	2300      	movs	r3, #0
 8017f60:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017f62:	683b      	ldr	r3, [r7, #0]
 8017f64:	f383 8811 	msr	BASEPRI, r3
}
 8017f68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017f6a:	bf00      	nop
 8017f6c:	370c      	adds	r7, #12
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f74:	4770      	bx	lr
 8017f76:	bf00      	nop
 8017f78:	20000070 	.word	0x20000070
 8017f7c:	00000000 	.word	0x00000000

08017f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017f80:	f3ef 8009 	mrs	r0, PSP
 8017f84:	f3bf 8f6f 	isb	sy
 8017f88:	4b15      	ldr	r3, [pc, #84]	; (8017fe0 <pxCurrentTCBConst>)
 8017f8a:	681a      	ldr	r2, [r3, #0]
 8017f8c:	f01e 0f10 	tst.w	lr, #16
 8017f90:	bf08      	it	eq
 8017f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f9a:	6010      	str	r0, [r2, #0]
 8017f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017fa4:	b672      	cpsid	i
 8017fa6:	f380 8811 	msr	BASEPRI, r0
 8017faa:	f3bf 8f4f 	dsb	sy
 8017fae:	f3bf 8f6f 	isb	sy
 8017fb2:	b662      	cpsie	i
 8017fb4:	f7ff f8e0 	bl	8017178 <vTaskSwitchContext>
 8017fb8:	f04f 0000 	mov.w	r0, #0
 8017fbc:	f380 8811 	msr	BASEPRI, r0
 8017fc0:	bc09      	pop	{r0, r3}
 8017fc2:	6819      	ldr	r1, [r3, #0]
 8017fc4:	6808      	ldr	r0, [r1, #0]
 8017fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fca:	f01e 0f10 	tst.w	lr, #16
 8017fce:	bf08      	it	eq
 8017fd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017fd4:	f380 8809 	msr	PSP, r0
 8017fd8:	f3bf 8f6f 	isb	sy
 8017fdc:	4770      	bx	lr
 8017fde:	bf00      	nop

08017fe0 <pxCurrentTCBConst>:
 8017fe0:	20041ab4 	.word	0x20041ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017fe4:	bf00      	nop
 8017fe6:	bf00      	nop

08017fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b082      	sub	sp, #8
 8017fec:	af00      	add	r7, sp, #0
	__asm volatile
 8017fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ff2:	b672      	cpsid	i
 8017ff4:	f383 8811 	msr	BASEPRI, r3
 8017ff8:	f3bf 8f6f 	isb	sy
 8017ffc:	f3bf 8f4f 	dsb	sy
 8018000:	b662      	cpsie	i
 8018002:	607b      	str	r3, [r7, #4]
}
 8018004:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018006:	f7fe fffd 	bl	8017004 <xTaskIncrementTick>
 801800a:	4603      	mov	r3, r0
 801800c:	2b00      	cmp	r3, #0
 801800e:	d003      	beq.n	8018018 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018010:	4b06      	ldr	r3, [pc, #24]	; (801802c <SysTick_Handler+0x44>)
 8018012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018016:	601a      	str	r2, [r3, #0]
 8018018:	2300      	movs	r3, #0
 801801a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801801c:	683b      	ldr	r3, [r7, #0]
 801801e:	f383 8811 	msr	BASEPRI, r3
}
 8018022:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018024:	bf00      	nop
 8018026:	3708      	adds	r7, #8
 8018028:	46bd      	mov	sp, r7
 801802a:	bd80      	pop	{r7, pc}
 801802c:	e000ed04 	.word	0xe000ed04

08018030 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018030:	b480      	push	{r7}
 8018032:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018034:	4b0b      	ldr	r3, [pc, #44]	; (8018064 <vPortSetupTimerInterrupt+0x34>)
 8018036:	2200      	movs	r2, #0
 8018038:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801803a:	4b0b      	ldr	r3, [pc, #44]	; (8018068 <vPortSetupTimerInterrupt+0x38>)
 801803c:	2200      	movs	r2, #0
 801803e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018040:	4b0a      	ldr	r3, [pc, #40]	; (801806c <vPortSetupTimerInterrupt+0x3c>)
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	4a0a      	ldr	r2, [pc, #40]	; (8018070 <vPortSetupTimerInterrupt+0x40>)
 8018046:	fba2 2303 	umull	r2, r3, r2, r3
 801804a:	099b      	lsrs	r3, r3, #6
 801804c:	4a09      	ldr	r2, [pc, #36]	; (8018074 <vPortSetupTimerInterrupt+0x44>)
 801804e:	3b01      	subs	r3, #1
 8018050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018052:	4b04      	ldr	r3, [pc, #16]	; (8018064 <vPortSetupTimerInterrupt+0x34>)
 8018054:	2207      	movs	r2, #7
 8018056:	601a      	str	r2, [r3, #0]
}
 8018058:	bf00      	nop
 801805a:	46bd      	mov	sp, r7
 801805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018060:	4770      	bx	lr
 8018062:	bf00      	nop
 8018064:	e000e010 	.word	0xe000e010
 8018068:	e000e018 	.word	0xe000e018
 801806c:	2000002c 	.word	0x2000002c
 8018070:	10624dd3 	.word	0x10624dd3
 8018074:	e000e014 	.word	0xe000e014

08018078 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018078:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018088 <vPortEnableVFP+0x10>
 801807c:	6801      	ldr	r1, [r0, #0]
 801807e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018082:	6001      	str	r1, [r0, #0]
 8018084:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018086:	bf00      	nop
 8018088:	e000ed88 	.word	0xe000ed88

0801808c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801808c:	b480      	push	{r7}
 801808e:	b085      	sub	sp, #20
 8018090:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018092:	f3ef 8305 	mrs	r3, IPSR
 8018096:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	2b0f      	cmp	r3, #15
 801809c:	d916      	bls.n	80180cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801809e:	4a19      	ldr	r2, [pc, #100]	; (8018104 <vPortValidateInterruptPriority+0x78>)
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	4413      	add	r3, r2
 80180a4:	781b      	ldrb	r3, [r3, #0]
 80180a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80180a8:	4b17      	ldr	r3, [pc, #92]	; (8018108 <vPortValidateInterruptPriority+0x7c>)
 80180aa:	781b      	ldrb	r3, [r3, #0]
 80180ac:	7afa      	ldrb	r2, [r7, #11]
 80180ae:	429a      	cmp	r2, r3
 80180b0:	d20c      	bcs.n	80180cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80180b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180b6:	b672      	cpsid	i
 80180b8:	f383 8811 	msr	BASEPRI, r3
 80180bc:	f3bf 8f6f 	isb	sy
 80180c0:	f3bf 8f4f 	dsb	sy
 80180c4:	b662      	cpsie	i
 80180c6:	607b      	str	r3, [r7, #4]
}
 80180c8:	bf00      	nop
 80180ca:	e7fe      	b.n	80180ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80180cc:	4b0f      	ldr	r3, [pc, #60]	; (801810c <vPortValidateInterruptPriority+0x80>)
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80180d4:	4b0e      	ldr	r3, [pc, #56]	; (8018110 <vPortValidateInterruptPriority+0x84>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	429a      	cmp	r2, r3
 80180da:	d90c      	bls.n	80180f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80180dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180e0:	b672      	cpsid	i
 80180e2:	f383 8811 	msr	BASEPRI, r3
 80180e6:	f3bf 8f6f 	isb	sy
 80180ea:	f3bf 8f4f 	dsb	sy
 80180ee:	b662      	cpsie	i
 80180f0:	603b      	str	r3, [r7, #0]
}
 80180f2:	bf00      	nop
 80180f4:	e7fe      	b.n	80180f4 <vPortValidateInterruptPriority+0x68>
	}
 80180f6:	bf00      	nop
 80180f8:	3714      	adds	r7, #20
 80180fa:	46bd      	mov	sp, r7
 80180fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018100:	4770      	bx	lr
 8018102:	bf00      	nop
 8018104:	e000e3f0 	.word	0xe000e3f0
 8018108:	20041be0 	.word	0x20041be0
 801810c:	e000ed0c 	.word	0xe000ed0c
 8018110:	20041be4 	.word	0x20041be4

08018114 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b08a      	sub	sp, #40	; 0x28
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801811c:	2300      	movs	r3, #0
 801811e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018120:	f7fe fea2 	bl	8016e68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018124:	4b5e      	ldr	r3, [pc, #376]	; (80182a0 <pvPortMalloc+0x18c>)
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d101      	bne.n	8018130 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801812c:	f000 f920 	bl	8018370 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018130:	4b5c      	ldr	r3, [pc, #368]	; (80182a4 <pvPortMalloc+0x190>)
 8018132:	681a      	ldr	r2, [r3, #0]
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	4013      	ands	r3, r2
 8018138:	2b00      	cmp	r3, #0
 801813a:	f040 8092 	bne.w	8018262 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d01f      	beq.n	8018184 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8018144:	2208      	movs	r2, #8
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	4413      	add	r3, r2
 801814a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	f003 0307 	and.w	r3, r3, #7
 8018152:	2b00      	cmp	r3, #0
 8018154:	d016      	beq.n	8018184 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	f023 0307 	bic.w	r3, r3, #7
 801815c:	3308      	adds	r3, #8
 801815e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	f003 0307 	and.w	r3, r3, #7
 8018166:	2b00      	cmp	r3, #0
 8018168:	d00c      	beq.n	8018184 <pvPortMalloc+0x70>
	__asm volatile
 801816a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801816e:	b672      	cpsid	i
 8018170:	f383 8811 	msr	BASEPRI, r3
 8018174:	f3bf 8f6f 	isb	sy
 8018178:	f3bf 8f4f 	dsb	sy
 801817c:	b662      	cpsie	i
 801817e:	617b      	str	r3, [r7, #20]
}
 8018180:	bf00      	nop
 8018182:	e7fe      	b.n	8018182 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d06b      	beq.n	8018262 <pvPortMalloc+0x14e>
 801818a:	4b47      	ldr	r3, [pc, #284]	; (80182a8 <pvPortMalloc+0x194>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	687a      	ldr	r2, [r7, #4]
 8018190:	429a      	cmp	r2, r3
 8018192:	d866      	bhi.n	8018262 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018194:	4b45      	ldr	r3, [pc, #276]	; (80182ac <pvPortMalloc+0x198>)
 8018196:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8018198:	4b44      	ldr	r3, [pc, #272]	; (80182ac <pvPortMalloc+0x198>)
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801819e:	e004      	b.n	80181aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80181a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80181a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80181aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ac:	685b      	ldr	r3, [r3, #4]
 80181ae:	687a      	ldr	r2, [r7, #4]
 80181b0:	429a      	cmp	r2, r3
 80181b2:	d903      	bls.n	80181bc <pvPortMalloc+0xa8>
 80181b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d1f1      	bne.n	80181a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80181bc:	4b38      	ldr	r3, [pc, #224]	; (80182a0 <pvPortMalloc+0x18c>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181c2:	429a      	cmp	r2, r3
 80181c4:	d04d      	beq.n	8018262 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80181c6:	6a3b      	ldr	r3, [r7, #32]
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	2208      	movs	r2, #8
 80181cc:	4413      	add	r3, r2
 80181ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80181d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d2:	681a      	ldr	r2, [r3, #0]
 80181d4:	6a3b      	ldr	r3, [r7, #32]
 80181d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80181d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181da:	685a      	ldr	r2, [r3, #4]
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	1ad2      	subs	r2, r2, r3
 80181e0:	2308      	movs	r3, #8
 80181e2:	005b      	lsls	r3, r3, #1
 80181e4:	429a      	cmp	r2, r3
 80181e6:	d921      	bls.n	801822c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80181e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	4413      	add	r3, r2
 80181ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80181f0:	69bb      	ldr	r3, [r7, #24]
 80181f2:	f003 0307 	and.w	r3, r3, #7
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d00c      	beq.n	8018214 <pvPortMalloc+0x100>
	__asm volatile
 80181fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181fe:	b672      	cpsid	i
 8018200:	f383 8811 	msr	BASEPRI, r3
 8018204:	f3bf 8f6f 	isb	sy
 8018208:	f3bf 8f4f 	dsb	sy
 801820c:	b662      	cpsie	i
 801820e:	613b      	str	r3, [r7, #16]
}
 8018210:	bf00      	nop
 8018212:	e7fe      	b.n	8018212 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018216:	685a      	ldr	r2, [r3, #4]
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	1ad2      	subs	r2, r2, r3
 801821c:	69bb      	ldr	r3, [r7, #24]
 801821e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018222:	687a      	ldr	r2, [r7, #4]
 8018224:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018226:	69b8      	ldr	r0, [r7, #24]
 8018228:	f000 f904 	bl	8018434 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801822c:	4b1e      	ldr	r3, [pc, #120]	; (80182a8 <pvPortMalloc+0x194>)
 801822e:	681a      	ldr	r2, [r3, #0]
 8018230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018232:	685b      	ldr	r3, [r3, #4]
 8018234:	1ad3      	subs	r3, r2, r3
 8018236:	4a1c      	ldr	r2, [pc, #112]	; (80182a8 <pvPortMalloc+0x194>)
 8018238:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801823a:	4b1b      	ldr	r3, [pc, #108]	; (80182a8 <pvPortMalloc+0x194>)
 801823c:	681a      	ldr	r2, [r3, #0]
 801823e:	4b1c      	ldr	r3, [pc, #112]	; (80182b0 <pvPortMalloc+0x19c>)
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	429a      	cmp	r2, r3
 8018244:	d203      	bcs.n	801824e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018246:	4b18      	ldr	r3, [pc, #96]	; (80182a8 <pvPortMalloc+0x194>)
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	4a19      	ldr	r2, [pc, #100]	; (80182b0 <pvPortMalloc+0x19c>)
 801824c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018250:	685a      	ldr	r2, [r3, #4]
 8018252:	4b14      	ldr	r3, [pc, #80]	; (80182a4 <pvPortMalloc+0x190>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	431a      	orrs	r2, r3
 8018258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801825a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801825e:	2200      	movs	r2, #0
 8018260:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018262:	f7fe fe0f 	bl	8016e84 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8018266:	69fb      	ldr	r3, [r7, #28]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d101      	bne.n	8018270 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801826c:	f7e9 fbb0 	bl	80019d0 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018270:	69fb      	ldr	r3, [r7, #28]
 8018272:	f003 0307 	and.w	r3, r3, #7
 8018276:	2b00      	cmp	r3, #0
 8018278:	d00c      	beq.n	8018294 <pvPortMalloc+0x180>
	__asm volatile
 801827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801827e:	b672      	cpsid	i
 8018280:	f383 8811 	msr	BASEPRI, r3
 8018284:	f3bf 8f6f 	isb	sy
 8018288:	f3bf 8f4f 	dsb	sy
 801828c:	b662      	cpsie	i
 801828e:	60fb      	str	r3, [r7, #12]
}
 8018290:	bf00      	nop
 8018292:	e7fe      	b.n	8018292 <pvPortMalloc+0x17e>
	return pvReturn;
 8018294:	69fb      	ldr	r3, [r7, #28]
}
 8018296:	4618      	mov	r0, r3
 8018298:	3728      	adds	r7, #40	; 0x28
 801829a:	46bd      	mov	sp, r7
 801829c:	bd80      	pop	{r7, pc}
 801829e:	bf00      	nop
 80182a0:	20049bf0 	.word	0x20049bf0
 80182a4:	20049bfc 	.word	0x20049bfc
 80182a8:	20049bf4 	.word	0x20049bf4
 80182ac:	20049be8 	.word	0x20049be8
 80182b0:	20049bf8 	.word	0x20049bf8

080182b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b086      	sub	sp, #24
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d04c      	beq.n	8018360 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80182c6:	2308      	movs	r3, #8
 80182c8:	425b      	negs	r3, r3
 80182ca:	697a      	ldr	r2, [r7, #20]
 80182cc:	4413      	add	r3, r2
 80182ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80182d0:	697b      	ldr	r3, [r7, #20]
 80182d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80182d4:	693b      	ldr	r3, [r7, #16]
 80182d6:	685a      	ldr	r2, [r3, #4]
 80182d8:	4b23      	ldr	r3, [pc, #140]	; (8018368 <vPortFree+0xb4>)
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	4013      	ands	r3, r2
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d10c      	bne.n	80182fc <vPortFree+0x48>
	__asm volatile
 80182e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182e6:	b672      	cpsid	i
 80182e8:	f383 8811 	msr	BASEPRI, r3
 80182ec:	f3bf 8f6f 	isb	sy
 80182f0:	f3bf 8f4f 	dsb	sy
 80182f4:	b662      	cpsie	i
 80182f6:	60fb      	str	r3, [r7, #12]
}
 80182f8:	bf00      	nop
 80182fa:	e7fe      	b.n	80182fa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80182fc:	693b      	ldr	r3, [r7, #16]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	2b00      	cmp	r3, #0
 8018302:	d00c      	beq.n	801831e <vPortFree+0x6a>
	__asm volatile
 8018304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018308:	b672      	cpsid	i
 801830a:	f383 8811 	msr	BASEPRI, r3
 801830e:	f3bf 8f6f 	isb	sy
 8018312:	f3bf 8f4f 	dsb	sy
 8018316:	b662      	cpsie	i
 8018318:	60bb      	str	r3, [r7, #8]
}
 801831a:	bf00      	nop
 801831c:	e7fe      	b.n	801831c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801831e:	693b      	ldr	r3, [r7, #16]
 8018320:	685a      	ldr	r2, [r3, #4]
 8018322:	4b11      	ldr	r3, [pc, #68]	; (8018368 <vPortFree+0xb4>)
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	4013      	ands	r3, r2
 8018328:	2b00      	cmp	r3, #0
 801832a:	d019      	beq.n	8018360 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801832c:	693b      	ldr	r3, [r7, #16]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d115      	bne.n	8018360 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018334:	693b      	ldr	r3, [r7, #16]
 8018336:	685a      	ldr	r2, [r3, #4]
 8018338:	4b0b      	ldr	r3, [pc, #44]	; (8018368 <vPortFree+0xb4>)
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	43db      	mvns	r3, r3
 801833e:	401a      	ands	r2, r3
 8018340:	693b      	ldr	r3, [r7, #16]
 8018342:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018344:	f7fe fd90 	bl	8016e68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018348:	693b      	ldr	r3, [r7, #16]
 801834a:	685a      	ldr	r2, [r3, #4]
 801834c:	4b07      	ldr	r3, [pc, #28]	; (801836c <vPortFree+0xb8>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	4413      	add	r3, r2
 8018352:	4a06      	ldr	r2, [pc, #24]	; (801836c <vPortFree+0xb8>)
 8018354:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018356:	6938      	ldr	r0, [r7, #16]
 8018358:	f000 f86c 	bl	8018434 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801835c:	f7fe fd92 	bl	8016e84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018360:	bf00      	nop
 8018362:	3718      	adds	r7, #24
 8018364:	46bd      	mov	sp, r7
 8018366:	bd80      	pop	{r7, pc}
 8018368:	20049bfc 	.word	0x20049bfc
 801836c:	20049bf4 	.word	0x20049bf4

08018370 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018370:	b480      	push	{r7}
 8018372:	b085      	sub	sp, #20
 8018374:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801837a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801837c:	4b27      	ldr	r3, [pc, #156]	; (801841c <prvHeapInit+0xac>)
 801837e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	f003 0307 	and.w	r3, r3, #7
 8018386:	2b00      	cmp	r3, #0
 8018388:	d00c      	beq.n	80183a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	3307      	adds	r3, #7
 801838e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	f023 0307 	bic.w	r3, r3, #7
 8018396:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018398:	68ba      	ldr	r2, [r7, #8]
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	1ad3      	subs	r3, r2, r3
 801839e:	4a1f      	ldr	r2, [pc, #124]	; (801841c <prvHeapInit+0xac>)
 80183a0:	4413      	add	r3, r2
 80183a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80183a8:	4a1d      	ldr	r2, [pc, #116]	; (8018420 <prvHeapInit+0xb0>)
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80183ae:	4b1c      	ldr	r3, [pc, #112]	; (8018420 <prvHeapInit+0xb0>)
 80183b0:	2200      	movs	r2, #0
 80183b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	68ba      	ldr	r2, [r7, #8]
 80183b8:	4413      	add	r3, r2
 80183ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80183bc:	2208      	movs	r2, #8
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	1a9b      	subs	r3, r3, r2
 80183c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	f023 0307 	bic.w	r3, r3, #7
 80183ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	4a15      	ldr	r2, [pc, #84]	; (8018424 <prvHeapInit+0xb4>)
 80183d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80183d2:	4b14      	ldr	r3, [pc, #80]	; (8018424 <prvHeapInit+0xb4>)
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	2200      	movs	r2, #0
 80183d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80183da:	4b12      	ldr	r3, [pc, #72]	; (8018424 <prvHeapInit+0xb4>)
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	2200      	movs	r2, #0
 80183e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80183e6:	683b      	ldr	r3, [r7, #0]
 80183e8:	68fa      	ldr	r2, [r7, #12]
 80183ea:	1ad2      	subs	r2, r2, r3
 80183ec:	683b      	ldr	r3, [r7, #0]
 80183ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80183f0:	4b0c      	ldr	r3, [pc, #48]	; (8018424 <prvHeapInit+0xb4>)
 80183f2:	681a      	ldr	r2, [r3, #0]
 80183f4:	683b      	ldr	r3, [r7, #0]
 80183f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80183f8:	683b      	ldr	r3, [r7, #0]
 80183fa:	685b      	ldr	r3, [r3, #4]
 80183fc:	4a0a      	ldr	r2, [pc, #40]	; (8018428 <prvHeapInit+0xb8>)
 80183fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018400:	683b      	ldr	r3, [r7, #0]
 8018402:	685b      	ldr	r3, [r3, #4]
 8018404:	4a09      	ldr	r2, [pc, #36]	; (801842c <prvHeapInit+0xbc>)
 8018406:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018408:	4b09      	ldr	r3, [pc, #36]	; (8018430 <prvHeapInit+0xc0>)
 801840a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801840e:	601a      	str	r2, [r3, #0]
}
 8018410:	bf00      	nop
 8018412:	3714      	adds	r7, #20
 8018414:	46bd      	mov	sp, r7
 8018416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801841a:	4770      	bx	lr
 801841c:	20041be8 	.word	0x20041be8
 8018420:	20049be8 	.word	0x20049be8
 8018424:	20049bf0 	.word	0x20049bf0
 8018428:	20049bf8 	.word	0x20049bf8
 801842c:	20049bf4 	.word	0x20049bf4
 8018430:	20049bfc 	.word	0x20049bfc

08018434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018434:	b480      	push	{r7}
 8018436:	b085      	sub	sp, #20
 8018438:	af00      	add	r7, sp, #0
 801843a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801843c:	4b28      	ldr	r3, [pc, #160]	; (80184e0 <prvInsertBlockIntoFreeList+0xac>)
 801843e:	60fb      	str	r3, [r7, #12]
 8018440:	e002      	b.n	8018448 <prvInsertBlockIntoFreeList+0x14>
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	60fb      	str	r3, [r7, #12]
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	681b      	ldr	r3, [r3, #0]
 801844c:	687a      	ldr	r2, [r7, #4]
 801844e:	429a      	cmp	r2, r3
 8018450:	d8f7      	bhi.n	8018442 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	685b      	ldr	r3, [r3, #4]
 801845a:	68ba      	ldr	r2, [r7, #8]
 801845c:	4413      	add	r3, r2
 801845e:	687a      	ldr	r2, [r7, #4]
 8018460:	429a      	cmp	r2, r3
 8018462:	d108      	bne.n	8018476 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	685a      	ldr	r2, [r3, #4]
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	685b      	ldr	r3, [r3, #4]
 801846c:	441a      	add	r2, r3
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	685b      	ldr	r3, [r3, #4]
 801847e:	68ba      	ldr	r2, [r7, #8]
 8018480:	441a      	add	r2, r3
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	429a      	cmp	r2, r3
 8018488:	d118      	bne.n	80184bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	681a      	ldr	r2, [r3, #0]
 801848e:	4b15      	ldr	r3, [pc, #84]	; (80184e4 <prvInsertBlockIntoFreeList+0xb0>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	429a      	cmp	r2, r3
 8018494:	d00d      	beq.n	80184b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	685a      	ldr	r2, [r3, #4]
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	685b      	ldr	r3, [r3, #4]
 80184a0:	441a      	add	r2, r3
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	681a      	ldr	r2, [r3, #0]
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	601a      	str	r2, [r3, #0]
 80184b0:	e008      	b.n	80184c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80184b2:	4b0c      	ldr	r3, [pc, #48]	; (80184e4 <prvInsertBlockIntoFreeList+0xb0>)
 80184b4:	681a      	ldr	r2, [r3, #0]
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	601a      	str	r2, [r3, #0]
 80184ba:	e003      	b.n	80184c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	681a      	ldr	r2, [r3, #0]
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80184c4:	68fa      	ldr	r2, [r7, #12]
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	429a      	cmp	r2, r3
 80184ca:	d002      	beq.n	80184d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	687a      	ldr	r2, [r7, #4]
 80184d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80184d2:	bf00      	nop
 80184d4:	3714      	adds	r7, #20
 80184d6:	46bd      	mov	sp, r7
 80184d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184dc:	4770      	bx	lr
 80184de:	bf00      	nop
 80184e0:	20049be8 	.word	0x20049be8
 80184e4:	20049bf0 	.word	0x20049bf0

080184e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80184ec:	2201      	movs	r2, #1
 80184ee:	490e      	ldr	r1, [pc, #56]	; (8018528 <MX_USB_HOST_Init+0x40>)
 80184f0:	480e      	ldr	r0, [pc, #56]	; (801852c <MX_USB_HOST_Init+0x44>)
 80184f2:	f7fb fb45 	bl	8013b80 <USBH_Init>
 80184f6:	4603      	mov	r3, r0
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d001      	beq.n	8018500 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80184fc:	f7ea fe86 	bl	800320c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8018500:	490b      	ldr	r1, [pc, #44]	; (8018530 <MX_USB_HOST_Init+0x48>)
 8018502:	480a      	ldr	r0, [pc, #40]	; (801852c <MX_USB_HOST_Init+0x44>)
 8018504:	f7fb fc11 	bl	8013d2a <USBH_RegisterClass>
 8018508:	4603      	mov	r3, r0
 801850a:	2b00      	cmp	r3, #0
 801850c:	d001      	beq.n	8018512 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801850e:	f7ea fe7d 	bl	800320c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8018512:	4806      	ldr	r0, [pc, #24]	; (801852c <MX_USB_HOST_Init+0x44>)
 8018514:	f7fb fc95 	bl	8013e42 <USBH_Start>
 8018518:	4603      	mov	r3, r0
 801851a:	2b00      	cmp	r3, #0
 801851c:	d001      	beq.n	8018522 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801851e:	f7ea fe75 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8018522:	bf00      	nop
 8018524:	bd80      	pop	{r7, pc}
 8018526:	bf00      	nop
 8018528:	08018535 	.word	0x08018535
 801852c:	20049c00 	.word	0x20049c00
 8018530:	20000050 	.word	0x20000050

08018534 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8018534:	b480      	push	{r7}
 8018536:	b083      	sub	sp, #12
 8018538:	af00      	add	r7, sp, #0
 801853a:	6078      	str	r0, [r7, #4]
 801853c:	460b      	mov	r3, r1
 801853e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8018540:	78fb      	ldrb	r3, [r7, #3]
 8018542:	3b01      	subs	r3, #1
 8018544:	2b04      	cmp	r3, #4
 8018546:	d819      	bhi.n	801857c <USBH_UserProcess+0x48>
 8018548:	a201      	add	r2, pc, #4	; (adr r2, 8018550 <USBH_UserProcess+0x1c>)
 801854a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801854e:	bf00      	nop
 8018550:	0801857d 	.word	0x0801857d
 8018554:	0801856d 	.word	0x0801856d
 8018558:	0801857d 	.word	0x0801857d
 801855c:	08018575 	.word	0x08018575
 8018560:	08018565 	.word	0x08018565
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8018564:	4b09      	ldr	r3, [pc, #36]	; (801858c <USBH_UserProcess+0x58>)
 8018566:	2203      	movs	r2, #3
 8018568:	701a      	strb	r2, [r3, #0]
  break;
 801856a:	e008      	b.n	801857e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801856c:	4b07      	ldr	r3, [pc, #28]	; (801858c <USBH_UserProcess+0x58>)
 801856e:	2202      	movs	r2, #2
 8018570:	701a      	strb	r2, [r3, #0]
  break;
 8018572:	e004      	b.n	801857e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8018574:	4b05      	ldr	r3, [pc, #20]	; (801858c <USBH_UserProcess+0x58>)
 8018576:	2201      	movs	r2, #1
 8018578:	701a      	strb	r2, [r3, #0]
  break;
 801857a:	e000      	b.n	801857e <USBH_UserProcess+0x4a>

  default:
  break;
 801857c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801857e:	bf00      	nop
 8018580:	370c      	adds	r7, #12
 8018582:	46bd      	mov	sp, r7
 8018584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018588:	4770      	bx	lr
 801858a:	bf00      	nop
 801858c:	20049fe4 	.word	0x20049fe4

08018590 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b08a      	sub	sp, #40	; 0x28
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018598:	f107 0314 	add.w	r3, r7, #20
 801859c:	2200      	movs	r2, #0
 801859e:	601a      	str	r2, [r3, #0]
 80185a0:	605a      	str	r2, [r3, #4]
 80185a2:	609a      	str	r2, [r3, #8]
 80185a4:	60da      	str	r2, [r3, #12]
 80185a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80185b0:	d13c      	bne.n	801862c <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80185b2:	4b20      	ldr	r3, [pc, #128]	; (8018634 <HAL_HCD_MspInit+0xa4>)
 80185b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185b6:	4a1f      	ldr	r2, [pc, #124]	; (8018634 <HAL_HCD_MspInit+0xa4>)
 80185b8:	f043 0301 	orr.w	r3, r3, #1
 80185bc:	6313      	str	r3, [r2, #48]	; 0x30
 80185be:	4b1d      	ldr	r3, [pc, #116]	; (8018634 <HAL_HCD_MspInit+0xa4>)
 80185c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185c2:	f003 0301 	and.w	r3, r3, #1
 80185c6:	613b      	str	r3, [r7, #16]
 80185c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80185ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80185ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80185d0:	2302      	movs	r3, #2
 80185d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80185d4:	2300      	movs	r3, #0
 80185d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80185d8:	2303      	movs	r3, #3
 80185da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80185dc:	230a      	movs	r3, #10
 80185de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80185e0:	f107 0314 	add.w	r3, r7, #20
 80185e4:	4619      	mov	r1, r3
 80185e6:	4814      	ldr	r0, [pc, #80]	; (8018638 <HAL_HCD_MspInit+0xa8>)
 80185e8:	f7ef fc2a 	bl	8007e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80185ec:	4b11      	ldr	r3, [pc, #68]	; (8018634 <HAL_HCD_MspInit+0xa4>)
 80185ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185f0:	4a10      	ldr	r2, [pc, #64]	; (8018634 <HAL_HCD_MspInit+0xa4>)
 80185f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80185f6:	6353      	str	r3, [r2, #52]	; 0x34
 80185f8:	4b0e      	ldr	r3, [pc, #56]	; (8018634 <HAL_HCD_MspInit+0xa4>)
 80185fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018600:	60fb      	str	r3, [r7, #12]
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	4b0b      	ldr	r3, [pc, #44]	; (8018634 <HAL_HCD_MspInit+0xa4>)
 8018606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018608:	4a0a      	ldr	r2, [pc, #40]	; (8018634 <HAL_HCD_MspInit+0xa4>)
 801860a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801860e:	6453      	str	r3, [r2, #68]	; 0x44
 8018610:	4b08      	ldr	r3, [pc, #32]	; (8018634 <HAL_HCD_MspInit+0xa4>)
 8018612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018618:	60bb      	str	r3, [r7, #8]
 801861a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801861c:	2200      	movs	r2, #0
 801861e:	2105      	movs	r1, #5
 8018620:	2043      	movs	r0, #67	; 0x43
 8018622:	f7ee f9ef 	bl	8006a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018626:	2043      	movs	r0, #67	; 0x43
 8018628:	f7ee fa08 	bl	8006a3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801862c:	bf00      	nop
 801862e:	3728      	adds	r7, #40	; 0x28
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}
 8018634:	40023800 	.word	0x40023800
 8018638:	40020000 	.word	0x40020000

0801863c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801863c:	b580      	push	{r7, lr}
 801863e:	b082      	sub	sp, #8
 8018640:	af00      	add	r7, sp, #0
 8018642:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801864a:	4618      	mov	r0, r3
 801864c:	f7fc f8b1 	bl	80147b2 <USBH_LL_IncTimer>
}
 8018650:	bf00      	nop
 8018652:	3708      	adds	r7, #8
 8018654:	46bd      	mov	sp, r7
 8018656:	bd80      	pop	{r7, pc}

08018658 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b082      	sub	sp, #8
 801865c:	af00      	add	r7, sp, #0
 801865e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018666:	4618      	mov	r0, r3
 8018668:	f7fc f8f5 	bl	8014856 <USBH_LL_Connect>
}
 801866c:	bf00      	nop
 801866e:	3708      	adds	r7, #8
 8018670:	46bd      	mov	sp, r7
 8018672:	bd80      	pop	{r7, pc}

08018674 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b082      	sub	sp, #8
 8018678:	af00      	add	r7, sp, #0
 801867a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8018682:	4618      	mov	r0, r3
 8018684:	f7fc f90a 	bl	801489c <USBH_LL_Disconnect>
}
 8018688:	bf00      	nop
 801868a:	3708      	adds	r7, #8
 801868c:	46bd      	mov	sp, r7
 801868e:	bd80      	pop	{r7, pc}

08018690 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b082      	sub	sp, #8
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
 8018698:	460b      	mov	r3, r1
 801869a:	70fb      	strb	r3, [r7, #3]
 801869c:	4613      	mov	r3, r2
 801869e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80186a6:	4618      	mov	r0, r3
 80186a8:	f7fc f93f 	bl	801492a <USBH_LL_NotifyURBChange>
#endif
}
 80186ac:	bf00      	nop
 80186ae:	3708      	adds	r7, #8
 80186b0:	46bd      	mov	sp, r7
 80186b2:	bd80      	pop	{r7, pc}

080186b4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b082      	sub	sp, #8
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80186c2:	4618      	mov	r0, r3
 80186c4:	f7fc f89f 	bl	8014806 <USBH_LL_PortEnabled>
}
 80186c8:	bf00      	nop
 80186ca:	3708      	adds	r7, #8
 80186cc:	46bd      	mov	sp, r7
 80186ce:	bd80      	pop	{r7, pc}

080186d0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b082      	sub	sp, #8
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80186de:	4618      	mov	r0, r3
 80186e0:	f7fc f8ab 	bl	801483a <USBH_LL_PortDisabled>
}
 80186e4:	bf00      	nop
 80186e6:	3708      	adds	r7, #8
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bd80      	pop	{r7, pc}

080186ec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b082      	sub	sp, #8
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80186fa:	2b01      	cmp	r3, #1
 80186fc:	d12a      	bne.n	8018754 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80186fe:	4a18      	ldr	r2, [pc, #96]	; (8018760 <USBH_LL_Init+0x74>)
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	4a15      	ldr	r2, [pc, #84]	; (8018760 <USBH_LL_Init+0x74>)
 801870a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801870e:	4b14      	ldr	r3, [pc, #80]	; (8018760 <USBH_LL_Init+0x74>)
 8018710:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018714:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8018716:	4b12      	ldr	r3, [pc, #72]	; (8018760 <USBH_LL_Init+0x74>)
 8018718:	2208      	movs	r2, #8
 801871a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801871c:	4b10      	ldr	r3, [pc, #64]	; (8018760 <USBH_LL_Init+0x74>)
 801871e:	2201      	movs	r2, #1
 8018720:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018722:	4b0f      	ldr	r3, [pc, #60]	; (8018760 <USBH_LL_Init+0x74>)
 8018724:	2200      	movs	r2, #0
 8018726:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8018728:	4b0d      	ldr	r3, [pc, #52]	; (8018760 <USBH_LL_Init+0x74>)
 801872a:	2202      	movs	r2, #2
 801872c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801872e:	4b0c      	ldr	r3, [pc, #48]	; (8018760 <USBH_LL_Init+0x74>)
 8018730:	2200      	movs	r2, #0
 8018732:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8018734:	480a      	ldr	r0, [pc, #40]	; (8018760 <USBH_LL_Init+0x74>)
 8018736:	f7ef feaa 	bl	800848e <HAL_HCD_Init>
 801873a:	4603      	mov	r3, r0
 801873c:	2b00      	cmp	r3, #0
 801873e:	d001      	beq.n	8018744 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8018740:	f7ea fd64 	bl	800320c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8018744:	4806      	ldr	r0, [pc, #24]	; (8018760 <USBH_LL_Init+0x74>)
 8018746:	f7f0 fa8e 	bl	8008c66 <HAL_HCD_GetCurrentFrame>
 801874a:	4603      	mov	r3, r0
 801874c:	4619      	mov	r1, r3
 801874e:	6878      	ldr	r0, [r7, #4]
 8018750:	f7fc f820 	bl	8014794 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8018754:	2300      	movs	r3, #0
}
 8018756:	4618      	mov	r0, r3
 8018758:	3708      	adds	r7, #8
 801875a:	46bd      	mov	sp, r7
 801875c:	bd80      	pop	{r7, pc}
 801875e:	bf00      	nop
 8018760:	20049fe8 	.word	0x20049fe8

08018764 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8018764:	b580      	push	{r7, lr}
 8018766:	b084      	sub	sp, #16
 8018768:	af00      	add	r7, sp, #0
 801876a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801876c:	2300      	movs	r3, #0
 801876e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018770:	2300      	movs	r3, #0
 8018772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801877a:	4618      	mov	r0, r3
 801877c:	f7f0 f9fd 	bl	8008b7a <HAL_HCD_Start>
 8018780:	4603      	mov	r3, r0
 8018782:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018784:	7bfb      	ldrb	r3, [r7, #15]
 8018786:	4618      	mov	r0, r3
 8018788:	f000 f95c 	bl	8018a44 <USBH_Get_USB_Status>
 801878c:	4603      	mov	r3, r0
 801878e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018790:	7bbb      	ldrb	r3, [r7, #14]
}
 8018792:	4618      	mov	r0, r3
 8018794:	3710      	adds	r7, #16
 8018796:	46bd      	mov	sp, r7
 8018798:	bd80      	pop	{r7, pc}

0801879a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801879a:	b580      	push	{r7, lr}
 801879c:	b084      	sub	sp, #16
 801879e:	af00      	add	r7, sp, #0
 80187a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187a2:	2300      	movs	r3, #0
 80187a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80187a6:	2300      	movs	r3, #0
 80187a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80187b0:	4618      	mov	r0, r3
 80187b2:	f7f0 fa05 	bl	8008bc0 <HAL_HCD_Stop>
 80187b6:	4603      	mov	r3, r0
 80187b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80187ba:	7bfb      	ldrb	r3, [r7, #15]
 80187bc:	4618      	mov	r0, r3
 80187be:	f000 f941 	bl	8018a44 <USBH_Get_USB_Status>
 80187c2:	4603      	mov	r3, r0
 80187c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80187c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80187c8:	4618      	mov	r0, r3
 80187ca:	3710      	adds	r7, #16
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}

080187d0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b084      	sub	sp, #16
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80187d8:	2301      	movs	r3, #1
 80187da:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7f0 fa4d 	bl	8008c82 <HAL_HCD_GetCurrentSpeed>
 80187e8:	4603      	mov	r3, r0
 80187ea:	2b02      	cmp	r3, #2
 80187ec:	d00c      	beq.n	8018808 <USBH_LL_GetSpeed+0x38>
 80187ee:	2b02      	cmp	r3, #2
 80187f0:	d80d      	bhi.n	801880e <USBH_LL_GetSpeed+0x3e>
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d002      	beq.n	80187fc <USBH_LL_GetSpeed+0x2c>
 80187f6:	2b01      	cmp	r3, #1
 80187f8:	d003      	beq.n	8018802 <USBH_LL_GetSpeed+0x32>
 80187fa:	e008      	b.n	801880e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80187fc:	2300      	movs	r3, #0
 80187fe:	73fb      	strb	r3, [r7, #15]
    break;
 8018800:	e008      	b.n	8018814 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8018802:	2301      	movs	r3, #1
 8018804:	73fb      	strb	r3, [r7, #15]
    break;
 8018806:	e005      	b.n	8018814 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8018808:	2302      	movs	r3, #2
 801880a:	73fb      	strb	r3, [r7, #15]
    break;
 801880c:	e002      	b.n	8018814 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801880e:	2301      	movs	r3, #1
 8018810:	73fb      	strb	r3, [r7, #15]
    break;
 8018812:	bf00      	nop
  }
  return  speed;
 8018814:	7bfb      	ldrb	r3, [r7, #15]
}
 8018816:	4618      	mov	r0, r3
 8018818:	3710      	adds	r7, #16
 801881a:	46bd      	mov	sp, r7
 801881c:	bd80      	pop	{r7, pc}

0801881e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801881e:	b580      	push	{r7, lr}
 8018820:	b084      	sub	sp, #16
 8018822:	af00      	add	r7, sp, #0
 8018824:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018826:	2300      	movs	r3, #0
 8018828:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801882a:	2300      	movs	r3, #0
 801882c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018834:	4618      	mov	r0, r3
 8018836:	f7f0 f9e0 	bl	8008bfa <HAL_HCD_ResetPort>
 801883a:	4603      	mov	r3, r0
 801883c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801883e:	7bfb      	ldrb	r3, [r7, #15]
 8018840:	4618      	mov	r0, r3
 8018842:	f000 f8ff 	bl	8018a44 <USBH_Get_USB_Status>
 8018846:	4603      	mov	r3, r0
 8018848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801884a:	7bbb      	ldrb	r3, [r7, #14]
}
 801884c:	4618      	mov	r0, r3
 801884e:	3710      	adds	r7, #16
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}

08018854 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b082      	sub	sp, #8
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
 801885c:	460b      	mov	r3, r1
 801885e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8018866:	78fa      	ldrb	r2, [r7, #3]
 8018868:	4611      	mov	r1, r2
 801886a:	4618      	mov	r0, r3
 801886c:	f7f0 f9e7 	bl	8008c3e <HAL_HCD_HC_GetXferCount>
 8018870:	4603      	mov	r3, r0
}
 8018872:	4618      	mov	r0, r3
 8018874:	3708      	adds	r7, #8
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}

0801887a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801887a:	b590      	push	{r4, r7, lr}
 801887c:	b089      	sub	sp, #36	; 0x24
 801887e:	af04      	add	r7, sp, #16
 8018880:	6078      	str	r0, [r7, #4]
 8018882:	4608      	mov	r0, r1
 8018884:	4611      	mov	r1, r2
 8018886:	461a      	mov	r2, r3
 8018888:	4603      	mov	r3, r0
 801888a:	70fb      	strb	r3, [r7, #3]
 801888c:	460b      	mov	r3, r1
 801888e:	70bb      	strb	r3, [r7, #2]
 8018890:	4613      	mov	r3, r2
 8018892:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018894:	2300      	movs	r3, #0
 8018896:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018898:	2300      	movs	r3, #0
 801889a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80188a2:	787c      	ldrb	r4, [r7, #1]
 80188a4:	78ba      	ldrb	r2, [r7, #2]
 80188a6:	78f9      	ldrb	r1, [r7, #3]
 80188a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80188aa:	9302      	str	r3, [sp, #8]
 80188ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80188b0:	9301      	str	r3, [sp, #4]
 80188b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80188b6:	9300      	str	r3, [sp, #0]
 80188b8:	4623      	mov	r3, r4
 80188ba:	f7ef fe4a 	bl	8008552 <HAL_HCD_HC_Init>
 80188be:	4603      	mov	r3, r0
 80188c0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80188c2:	7bfb      	ldrb	r3, [r7, #15]
 80188c4:	4618      	mov	r0, r3
 80188c6:	f000 f8bd 	bl	8018a44 <USBH_Get_USB_Status>
 80188ca:	4603      	mov	r3, r0
 80188cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80188ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80188d0:	4618      	mov	r0, r3
 80188d2:	3714      	adds	r7, #20
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bd90      	pop	{r4, r7, pc}

080188d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b084      	sub	sp, #16
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]
 80188e0:	460b      	mov	r3, r1
 80188e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188e4:	2300      	movs	r3, #0
 80188e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80188e8:	2300      	movs	r3, #0
 80188ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80188f2:	78fa      	ldrb	r2, [r7, #3]
 80188f4:	4611      	mov	r1, r2
 80188f6:	4618      	mov	r0, r3
 80188f8:	f7ef feba 	bl	8008670 <HAL_HCD_HC_Halt>
 80188fc:	4603      	mov	r3, r0
 80188fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018900:	7bfb      	ldrb	r3, [r7, #15]
 8018902:	4618      	mov	r0, r3
 8018904:	f000 f89e 	bl	8018a44 <USBH_Get_USB_Status>
 8018908:	4603      	mov	r3, r0
 801890a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801890c:	7bbb      	ldrb	r3, [r7, #14]
}
 801890e:	4618      	mov	r0, r3
 8018910:	3710      	adds	r7, #16
 8018912:	46bd      	mov	sp, r7
 8018914:	bd80      	pop	{r7, pc}

08018916 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8018916:	b590      	push	{r4, r7, lr}
 8018918:	b089      	sub	sp, #36	; 0x24
 801891a:	af04      	add	r7, sp, #16
 801891c:	6078      	str	r0, [r7, #4]
 801891e:	4608      	mov	r0, r1
 8018920:	4611      	mov	r1, r2
 8018922:	461a      	mov	r2, r3
 8018924:	4603      	mov	r3, r0
 8018926:	70fb      	strb	r3, [r7, #3]
 8018928:	460b      	mov	r3, r1
 801892a:	70bb      	strb	r3, [r7, #2]
 801892c:	4613      	mov	r3, r2
 801892e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018930:	2300      	movs	r3, #0
 8018932:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018934:	2300      	movs	r3, #0
 8018936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801893e:	787c      	ldrb	r4, [r7, #1]
 8018940:	78ba      	ldrb	r2, [r7, #2]
 8018942:	78f9      	ldrb	r1, [r7, #3]
 8018944:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018948:	9303      	str	r3, [sp, #12]
 801894a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801894c:	9302      	str	r3, [sp, #8]
 801894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018950:	9301      	str	r3, [sp, #4]
 8018952:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018956:	9300      	str	r3, [sp, #0]
 8018958:	4623      	mov	r3, r4
 801895a:	f7ef fead 	bl	80086b8 <HAL_HCD_HC_SubmitRequest>
 801895e:	4603      	mov	r3, r0
 8018960:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8018962:	7bfb      	ldrb	r3, [r7, #15]
 8018964:	4618      	mov	r0, r3
 8018966:	f000 f86d 	bl	8018a44 <USBH_Get_USB_Status>
 801896a:	4603      	mov	r3, r0
 801896c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801896e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018970:	4618      	mov	r0, r3
 8018972:	3714      	adds	r7, #20
 8018974:	46bd      	mov	sp, r7
 8018976:	bd90      	pop	{r4, r7, pc}

08018978 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b082      	sub	sp, #8
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
 8018980:	460b      	mov	r3, r1
 8018982:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801898a:	78fa      	ldrb	r2, [r7, #3]
 801898c:	4611      	mov	r1, r2
 801898e:	4618      	mov	r0, r3
 8018990:	f7f0 f941 	bl	8008c16 <HAL_HCD_HC_GetURBState>
 8018994:	4603      	mov	r3, r0
}
 8018996:	4618      	mov	r0, r3
 8018998:	3708      	adds	r7, #8
 801899a:	46bd      	mov	sp, r7
 801899c:	bd80      	pop	{r7, pc}

0801899e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801899e:	b580      	push	{r7, lr}
 80189a0:	b082      	sub	sp, #8
 80189a2:	af00      	add	r7, sp, #0
 80189a4:	6078      	str	r0, [r7, #4]
 80189a6:	460b      	mov	r3, r1
 80189a8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80189b0:	2b01      	cmp	r3, #1
 80189b2:	d103      	bne.n	80189bc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80189b4:	78fb      	ldrb	r3, [r7, #3]
 80189b6:	4618      	mov	r0, r3
 80189b8:	f000 f870 	bl	8018a9c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80189bc:	20c8      	movs	r0, #200	; 0xc8
 80189be:	f7ed fc8d 	bl	80062dc <HAL_Delay>
  return USBH_OK;
 80189c2:	2300      	movs	r3, #0
}
 80189c4:	4618      	mov	r0, r3
 80189c6:	3708      	adds	r7, #8
 80189c8:	46bd      	mov	sp, r7
 80189ca:	bd80      	pop	{r7, pc}

080189cc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80189cc:	b480      	push	{r7}
 80189ce:	b085      	sub	sp, #20
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
 80189d4:	460b      	mov	r3, r1
 80189d6:	70fb      	strb	r3, [r7, #3]
 80189d8:	4613      	mov	r3, r2
 80189da:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80189e2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80189e4:	78fb      	ldrb	r3, [r7, #3]
 80189e6:	68fa      	ldr	r2, [r7, #12]
 80189e8:	212c      	movs	r1, #44	; 0x2c
 80189ea:	fb01 f303 	mul.w	r3, r1, r3
 80189ee:	4413      	add	r3, r2
 80189f0:	333b      	adds	r3, #59	; 0x3b
 80189f2:	781b      	ldrb	r3, [r3, #0]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d009      	beq.n	8018a0c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80189f8:	78fb      	ldrb	r3, [r7, #3]
 80189fa:	68fa      	ldr	r2, [r7, #12]
 80189fc:	212c      	movs	r1, #44	; 0x2c
 80189fe:	fb01 f303 	mul.w	r3, r1, r3
 8018a02:	4413      	add	r3, r2
 8018a04:	3354      	adds	r3, #84	; 0x54
 8018a06:	78ba      	ldrb	r2, [r7, #2]
 8018a08:	701a      	strb	r2, [r3, #0]
 8018a0a:	e008      	b.n	8018a1e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8018a0c:	78fb      	ldrb	r3, [r7, #3]
 8018a0e:	68fa      	ldr	r2, [r7, #12]
 8018a10:	212c      	movs	r1, #44	; 0x2c
 8018a12:	fb01 f303 	mul.w	r3, r1, r3
 8018a16:	4413      	add	r3, r2
 8018a18:	3355      	adds	r3, #85	; 0x55
 8018a1a:	78ba      	ldrb	r2, [r7, #2]
 8018a1c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8018a1e:	2300      	movs	r3, #0
}
 8018a20:	4618      	mov	r0, r3
 8018a22:	3714      	adds	r7, #20
 8018a24:	46bd      	mov	sp, r7
 8018a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a2a:	4770      	bx	lr

08018a2c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b082      	sub	sp, #8
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8018a34:	6878      	ldr	r0, [r7, #4]
 8018a36:	f7ed fc51 	bl	80062dc <HAL_Delay>
}
 8018a3a:	bf00      	nop
 8018a3c:	3708      	adds	r7, #8
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd80      	pop	{r7, pc}
	...

08018a44 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018a44:	b480      	push	{r7}
 8018a46:	b085      	sub	sp, #20
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018a4e:	2300      	movs	r3, #0
 8018a50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018a52:	79fb      	ldrb	r3, [r7, #7]
 8018a54:	2b03      	cmp	r3, #3
 8018a56:	d817      	bhi.n	8018a88 <USBH_Get_USB_Status+0x44>
 8018a58:	a201      	add	r2, pc, #4	; (adr r2, 8018a60 <USBH_Get_USB_Status+0x1c>)
 8018a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a5e:	bf00      	nop
 8018a60:	08018a71 	.word	0x08018a71
 8018a64:	08018a77 	.word	0x08018a77
 8018a68:	08018a7d 	.word	0x08018a7d
 8018a6c:	08018a83 	.word	0x08018a83
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8018a70:	2300      	movs	r3, #0
 8018a72:	73fb      	strb	r3, [r7, #15]
    break;
 8018a74:	e00b      	b.n	8018a8e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8018a76:	2302      	movs	r3, #2
 8018a78:	73fb      	strb	r3, [r7, #15]
    break;
 8018a7a:	e008      	b.n	8018a8e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8018a7c:	2301      	movs	r3, #1
 8018a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8018a80:	e005      	b.n	8018a8e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8018a82:	2302      	movs	r3, #2
 8018a84:	73fb      	strb	r3, [r7, #15]
    break;
 8018a86:	e002      	b.n	8018a8e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8018a88:	2302      	movs	r3, #2
 8018a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8018a8c:	bf00      	nop
  }
  return usb_status;
 8018a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a90:	4618      	mov	r0, r3
 8018a92:	3714      	adds	r7, #20
 8018a94:	46bd      	mov	sp, r7
 8018a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9a:	4770      	bx	lr

08018a9c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8018a9c:	b580      	push	{r7, lr}
 8018a9e:	b084      	sub	sp, #16
 8018aa0:	af00      	add	r7, sp, #0
 8018aa2:	4603      	mov	r3, r0
 8018aa4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8018aa6:	79fb      	ldrb	r3, [r7, #7]
 8018aa8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8018aaa:	79fb      	ldrb	r3, [r7, #7]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d102      	bne.n	8018ab6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8018ab0:	2301      	movs	r3, #1
 8018ab2:	73fb      	strb	r3, [r7, #15]
 8018ab4:	e001      	b.n	8018aba <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8018aba:	7bfb      	ldrb	r3, [r7, #15]
 8018abc:	461a      	mov	r2, r3
 8018abe:	2120      	movs	r1, #32
 8018ac0:	4803      	ldr	r0, [pc, #12]	; (8018ad0 <MX_DriverVbusFS+0x34>)
 8018ac2:	f7ef fc8d 	bl	80083e0 <HAL_GPIO_WritePin>
}
 8018ac6:	bf00      	nop
 8018ac8:	3710      	adds	r7, #16
 8018aca:	46bd      	mov	sp, r7
 8018acc:	bd80      	pop	{r7, pc}
 8018ace:	bf00      	nop
 8018ad0:	40020c00 	.word	0x40020c00

08018ad4 <arm_rfft_fast_init_f32>:
 8018ad4:	084b      	lsrs	r3, r1, #1
 8018ad6:	2b80      	cmp	r3, #128	; 0x80
 8018ad8:	b430      	push	{r4, r5}
 8018ada:	8201      	strh	r1, [r0, #16]
 8018adc:	8003      	strh	r3, [r0, #0]
 8018ade:	d070      	beq.n	8018bc2 <arm_rfft_fast_init_f32+0xee>
 8018ae0:	d916      	bls.n	8018b10 <arm_rfft_fast_init_f32+0x3c>
 8018ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ae6:	d05f      	beq.n	8018ba8 <arm_rfft_fast_init_f32+0xd4>
 8018ae8:	d936      	bls.n	8018b58 <arm_rfft_fast_init_f32+0x84>
 8018aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018aee:	d026      	beq.n	8018b3e <arm_rfft_fast_init_f32+0x6a>
 8018af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018af4:	d112      	bne.n	8018b1c <arm_rfft_fast_init_f32+0x48>
 8018af6:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8018afa:	4c38      	ldr	r4, [pc, #224]	; (8018bdc <arm_rfft_fast_init_f32+0x108>)
 8018afc:	4938      	ldr	r1, [pc, #224]	; (8018be0 <arm_rfft_fast_init_f32+0x10c>)
 8018afe:	2300      	movs	r3, #0
 8018b00:	4a38      	ldr	r2, [pc, #224]	; (8018be4 <arm_rfft_fast_init_f32+0x110>)
 8018b02:	8185      	strh	r5, [r0, #12]
 8018b04:	6084      	str	r4, [r0, #8]
 8018b06:	6041      	str	r1, [r0, #4]
 8018b08:	6142      	str	r2, [r0, #20]
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	bc30      	pop	{r4, r5}
 8018b0e:	4770      	bx	lr
 8018b10:	2b20      	cmp	r3, #32
 8018b12:	d031      	beq.n	8018b78 <arm_rfft_fast_init_f32+0xa4>
 8018b14:	2b40      	cmp	r3, #64	; 0x40
 8018b16:	d006      	beq.n	8018b26 <arm_rfft_fast_init_f32+0x52>
 8018b18:	2b10      	cmp	r3, #16
 8018b1a:	d039      	beq.n	8018b90 <arm_rfft_fast_init_f32+0xbc>
 8018b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8018b20:	bc30      	pop	{r4, r5}
 8018b22:	4618      	mov	r0, r3
 8018b24:	4770      	bx	lr
 8018b26:	2538      	movs	r5, #56	; 0x38
 8018b28:	4c2f      	ldr	r4, [pc, #188]	; (8018be8 <arm_rfft_fast_init_f32+0x114>)
 8018b2a:	4930      	ldr	r1, [pc, #192]	; (8018bec <arm_rfft_fast_init_f32+0x118>)
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	4a30      	ldr	r2, [pc, #192]	; (8018bf0 <arm_rfft_fast_init_f32+0x11c>)
 8018b30:	8185      	strh	r5, [r0, #12]
 8018b32:	6084      	str	r4, [r0, #8]
 8018b34:	6041      	str	r1, [r0, #4]
 8018b36:	6142      	str	r2, [r0, #20]
 8018b38:	4618      	mov	r0, r3
 8018b3a:	bc30      	pop	{r4, r5}
 8018b3c:	4770      	bx	lr
 8018b3e:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8018b42:	4c2c      	ldr	r4, [pc, #176]	; (8018bf4 <arm_rfft_fast_init_f32+0x120>)
 8018b44:	492c      	ldr	r1, [pc, #176]	; (8018bf8 <arm_rfft_fast_init_f32+0x124>)
 8018b46:	2300      	movs	r3, #0
 8018b48:	4a2c      	ldr	r2, [pc, #176]	; (8018bfc <arm_rfft_fast_init_f32+0x128>)
 8018b4a:	8185      	strh	r5, [r0, #12]
 8018b4c:	6084      	str	r4, [r0, #8]
 8018b4e:	6041      	str	r1, [r0, #4]
 8018b50:	6142      	str	r2, [r0, #20]
 8018b52:	4618      	mov	r0, r3
 8018b54:	bc30      	pop	{r4, r5}
 8018b56:	4770      	bx	lr
 8018b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018b5c:	d1de      	bne.n	8018b1c <arm_rfft_fast_init_f32+0x48>
 8018b5e:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8018b62:	4c27      	ldr	r4, [pc, #156]	; (8018c00 <arm_rfft_fast_init_f32+0x12c>)
 8018b64:	4927      	ldr	r1, [pc, #156]	; (8018c04 <arm_rfft_fast_init_f32+0x130>)
 8018b66:	2300      	movs	r3, #0
 8018b68:	4a27      	ldr	r2, [pc, #156]	; (8018c08 <arm_rfft_fast_init_f32+0x134>)
 8018b6a:	8185      	strh	r5, [r0, #12]
 8018b6c:	6084      	str	r4, [r0, #8]
 8018b6e:	6041      	str	r1, [r0, #4]
 8018b70:	6142      	str	r2, [r0, #20]
 8018b72:	4618      	mov	r0, r3
 8018b74:	bc30      	pop	{r4, r5}
 8018b76:	4770      	bx	lr
 8018b78:	2530      	movs	r5, #48	; 0x30
 8018b7a:	4c24      	ldr	r4, [pc, #144]	; (8018c0c <arm_rfft_fast_init_f32+0x138>)
 8018b7c:	4924      	ldr	r1, [pc, #144]	; (8018c10 <arm_rfft_fast_init_f32+0x13c>)
 8018b7e:	2300      	movs	r3, #0
 8018b80:	4a24      	ldr	r2, [pc, #144]	; (8018c14 <arm_rfft_fast_init_f32+0x140>)
 8018b82:	8185      	strh	r5, [r0, #12]
 8018b84:	6084      	str	r4, [r0, #8]
 8018b86:	6041      	str	r1, [r0, #4]
 8018b88:	6142      	str	r2, [r0, #20]
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	bc30      	pop	{r4, r5}
 8018b8e:	4770      	bx	lr
 8018b90:	2514      	movs	r5, #20
 8018b92:	4c21      	ldr	r4, [pc, #132]	; (8018c18 <arm_rfft_fast_init_f32+0x144>)
 8018b94:	4921      	ldr	r1, [pc, #132]	; (8018c1c <arm_rfft_fast_init_f32+0x148>)
 8018b96:	2300      	movs	r3, #0
 8018b98:	4a21      	ldr	r2, [pc, #132]	; (8018c20 <arm_rfft_fast_init_f32+0x14c>)
 8018b9a:	8185      	strh	r5, [r0, #12]
 8018b9c:	6084      	str	r4, [r0, #8]
 8018b9e:	6041      	str	r1, [r0, #4]
 8018ba0:	6142      	str	r2, [r0, #20]
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	bc30      	pop	{r4, r5}
 8018ba6:	4770      	bx	lr
 8018ba8:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8018bac:	4c1d      	ldr	r4, [pc, #116]	; (8018c24 <arm_rfft_fast_init_f32+0x150>)
 8018bae:	491e      	ldr	r1, [pc, #120]	; (8018c28 <arm_rfft_fast_init_f32+0x154>)
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	4a1e      	ldr	r2, [pc, #120]	; (8018c2c <arm_rfft_fast_init_f32+0x158>)
 8018bb4:	8185      	strh	r5, [r0, #12]
 8018bb6:	6084      	str	r4, [r0, #8]
 8018bb8:	6041      	str	r1, [r0, #4]
 8018bba:	6142      	str	r2, [r0, #20]
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	bc30      	pop	{r4, r5}
 8018bc0:	4770      	bx	lr
 8018bc2:	25d0      	movs	r5, #208	; 0xd0
 8018bc4:	4c1a      	ldr	r4, [pc, #104]	; (8018c30 <arm_rfft_fast_init_f32+0x15c>)
 8018bc6:	491b      	ldr	r1, [pc, #108]	; (8018c34 <arm_rfft_fast_init_f32+0x160>)
 8018bc8:	2300      	movs	r3, #0
 8018bca:	4a1b      	ldr	r2, [pc, #108]	; (8018c38 <arm_rfft_fast_init_f32+0x164>)
 8018bcc:	8185      	strh	r5, [r0, #12]
 8018bce:	6084      	str	r4, [r0, #8]
 8018bd0:	6041      	str	r1, [r0, #4]
 8018bd2:	6142      	str	r2, [r0, #20]
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	bc30      	pop	{r4, r5}
 8018bd8:	4770      	bx	lr
 8018bda:	bf00      	nop
 8018bdc:	0802d94c 	.word	0x0802d94c
 8018be0:	0801eb44 	.word	0x0801eb44
 8018be4:	08024cb4 	.word	0x08024cb4
 8018be8:	08022c44 	.word	0x08022c44
 8018bec:	0802f70c 	.word	0x0802f70c
 8018bf0:	08031bfc 	.word	0x08031bfc
 8018bf4:	0802b634 	.word	0x0802b634
 8018bf8:	08029534 	.word	0x08029534
 8018bfc:	08022cb4 	.word	0x08022cb4
 8018c00:	0803188c 	.word	0x0803188c
 8018c04:	08028cb4 	.word	0x08028cb4
 8018c08:	0802f90c 	.word	0x0802f90c
 8018c0c:	0802c4ec 	.word	0x0802c4ec
 8018c10:	0802b534 	.word	0x0802b534
 8018c14:	08022b44 	.word	0x08022b44
 8018c18:	0802c444 	.word	0x0802c444
 8018c1c:	080294b4 	.word	0x080294b4
 8018c20:	0802c46c 	.word	0x0802c46c
 8018c24:	0803010c 	.word	0x0803010c
 8018c28:	0802c94c 	.word	0x0802c94c
 8018c2c:	0803048c 	.word	0x0803048c
 8018c30:	08031dfc 	.word	0x08031dfc
 8018c34:	0802c54c 	.word	0x0802c54c
 8018c38:	0803148c 	.word	0x0803148c

08018c3c <arm_rfft_fast_f32>:
 8018c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c40:	8a05      	ldrh	r5, [r0, #16]
 8018c42:	4606      	mov	r6, r0
 8018c44:	4617      	mov	r7, r2
 8018c46:	460c      	mov	r4, r1
 8018c48:	086d      	lsrs	r5, r5, #1
 8018c4a:	8005      	strh	r5, [r0, #0]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d15e      	bne.n	8018d0e <arm_rfft_fast_f32+0xd2>
 8018c50:	461a      	mov	r2, r3
 8018c52:	2301      	movs	r3, #1
 8018c54:	f000 fbde 	bl	8019414 <arm_cfft_f32>
 8018c58:	edd4 7a00 	vldr	s15, [r4]
 8018c5c:	ed94 7a01 	vldr	s14, [r4, #4]
 8018c60:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8018c64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018c68:	8832      	ldrh	r2, [r6, #0]
 8018c6a:	ee37 7a07 	vadd.f32	s14, s14, s14
 8018c6e:	6975      	ldr	r5, [r6, #20]
 8018c70:	3a01      	subs	r2, #1
 8018c72:	eeb0 3a46 	vmov.f32	s6, s12
 8018c76:	3510      	adds	r5, #16
 8018c78:	f107 0610 	add.w	r6, r7, #16
 8018c7c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8018c80:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8018c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018c88:	f104 0310 	add.w	r3, r4, #16
 8018c8c:	3808      	subs	r0, #8
 8018c8e:	ee26 7a86 	vmul.f32	s14, s13, s12
 8018c92:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018c96:	ed87 7a00 	vstr	s14, [r7]
 8018c9a:	edc7 7a01 	vstr	s15, [r7, #4]
 8018c9e:	ed90 7a02 	vldr	s14, [r0, #8]
 8018ca2:	3a01      	subs	r2, #1
 8018ca4:	ed53 6a02 	vldr	s13, [r3, #-8]
 8018ca8:	f1a0 0008 	sub.w	r0, r0, #8
 8018cac:	ed15 6a02 	vldr	s12, [r5, #-8]
 8018cb0:	f103 0308 	add.w	r3, r3, #8
 8018cb4:	ee77 7a66 	vsub.f32	s15, s14, s13
 8018cb8:	edd0 3a05 	vldr	s7, [r0, #20]
 8018cbc:	ed13 5a03 	vldr	s10, [r3, #-12]
 8018cc0:	ee77 4a26 	vadd.f32	s9, s14, s13
 8018cc4:	ed55 5a01 	vldr	s11, [r5, #-4]
 8018cc8:	f106 0608 	add.w	r6, r6, #8
 8018ccc:	ee66 6a27 	vmul.f32	s13, s12, s15
 8018cd0:	f105 0508 	add.w	r5, r5, #8
 8018cd4:	ee33 4a85 	vadd.f32	s8, s7, s10
 8018cd8:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8018cdc:	ee35 5a63 	vsub.f32	s10, s10, s7
 8018ce0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018ce4:	ee26 6a04 	vmul.f32	s12, s12, s8
 8018ce8:	ee77 7a05 	vadd.f32	s15, s14, s10
 8018cec:	ee65 5a84 	vmul.f32	s11, s11, s8
 8018cf0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018cf4:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8018cf8:	ee67 7a83 	vmul.f32	s15, s15, s6
 8018cfc:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018d00:	ed46 7a03 	vstr	s15, [r6, #-12]
 8018d04:	ed06 7a04 	vstr	s14, [r6, #-16]
 8018d08:	d1c9      	bne.n	8018c9e <arm_rfft_fast_f32+0x62>
 8018d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d0e:	edd1 7a00 	vldr	s15, [r1]
 8018d12:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8018d16:	edd1 6a01 	vldr	s13, [r1, #4]
 8018d1a:	1e68      	subs	r0, r5, #1
 8018d1c:	6975      	ldr	r5, [r6, #20]
 8018d1e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018d22:	00c1      	lsls	r1, r0, #3
 8018d24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018d28:	ee27 7a23 	vmul.f32	s14, s14, s7
 8018d2c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8018d30:	ed82 7a00 	vstr	s14, [r2]
 8018d34:	edc2 7a01 	vstr	s15, [r2, #4]
 8018d38:	b3e0      	cbz	r0, 8018db4 <arm_rfft_fast_f32+0x178>
 8018d3a:	3908      	subs	r1, #8
 8018d3c:	f104 0210 	add.w	r2, r4, #16
 8018d40:	3510      	adds	r5, #16
 8018d42:	440c      	add	r4, r1
 8018d44:	f107 0110 	add.w	r1, r7, #16
 8018d48:	ed94 7a02 	vldr	s14, [r4, #8]
 8018d4c:	3801      	subs	r0, #1
 8018d4e:	ed52 6a02 	vldr	s13, [r2, #-8]
 8018d52:	f1a4 0408 	sub.w	r4, r4, #8
 8018d56:	ed15 6a02 	vldr	s12, [r5, #-8]
 8018d5a:	f102 0208 	add.w	r2, r2, #8
 8018d5e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8018d62:	ed94 4a05 	vldr	s8, [r4, #20]
 8018d66:	ed12 5a03 	vldr	s10, [r2, #-12]
 8018d6a:	ee77 6a26 	vadd.f32	s13, s14, s13
 8018d6e:	ed55 5a01 	vldr	s11, [r5, #-4]
 8018d72:	f101 0108 	add.w	r1, r1, #8
 8018d76:	ee26 3a27 	vmul.f32	s6, s12, s15
 8018d7a:	f105 0508 	add.w	r5, r5, #8
 8018d7e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8018d82:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8018d86:	ee35 5a44 	vsub.f32	s10, s10, s8
 8018d8a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8018d8e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018d92:	ee77 7a05 	vadd.f32	s15, s14, s10
 8018d96:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8018d9a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018d9e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8018da2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8018da6:	ee27 7a23 	vmul.f32	s14, s14, s7
 8018daa:	ed41 7a03 	vstr	s15, [r1, #-12]
 8018dae:	ed01 7a04 	vstr	s14, [r1, #-16]
 8018db2:	d1c9      	bne.n	8018d48 <arm_rfft_fast_f32+0x10c>
 8018db4:	461a      	mov	r2, r3
 8018db6:	4639      	mov	r1, r7
 8018db8:	4630      	mov	r0, r6
 8018dba:	2301      	movs	r3, #1
 8018dbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018dc0:	f000 bb28 	b.w	8019414 <arm_cfft_f32>

08018dc4 <arm_cfft_radix8by2_f32>:
 8018dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dc8:	4607      	mov	r7, r0
 8018dca:	4608      	mov	r0, r1
 8018dcc:	ed2d 8b06 	vpush	{d8-d10}
 8018dd0:	f8b7 e000 	ldrh.w	lr, [r7]
 8018dd4:	687a      	ldr	r2, [r7, #4]
 8018dd6:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8018dda:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8018dde:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8018de2:	f000 80b0 	beq.w	8018f46 <arm_cfft_radix8by2_f32+0x182>
 8018de6:	008b      	lsls	r3, r1, #2
 8018de8:	3210      	adds	r2, #16
 8018dea:	f100 0610 	add.w	r6, r0, #16
 8018dee:	f108 0510 	add.w	r5, r8, #16
 8018df2:	3310      	adds	r3, #16
 8018df4:	18c4      	adds	r4, r0, r3
 8018df6:	4443      	add	r3, r8
 8018df8:	ed55 6a04 	vldr	s13, [r5, #-16]
 8018dfc:	f1be 0e01 	subs.w	lr, lr, #1
 8018e00:	ed56 4a04 	vldr	s9, [r6, #-16]
 8018e04:	f104 0410 	add.w	r4, r4, #16
 8018e08:	ed15 7a03 	vldr	s14, [r5, #-12]
 8018e0c:	f106 0610 	add.w	r6, r6, #16
 8018e10:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8018e14:	ed55 7a02 	vldr	s15, [r5, #-8]
 8018e18:	ed55 2a01 	vldr	s5, [r5, #-4]
 8018e1c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8018e20:	ed53 0a04 	vldr	s1, [r3, #-16]
 8018e24:	f102 0210 	add.w	r2, r2, #16
 8018e28:	ed13 5a03 	vldr	s10, [r3, #-12]
 8018e2c:	f105 0510 	add.w	r5, r5, #16
 8018e30:	ed13 3a02 	vldr	s6, [r3, #-8]
 8018e34:	f103 0310 	add.w	r3, r3, #16
 8018e38:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8018e3c:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8018e40:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8018e44:	ee33 8a83 	vadd.f32	s16, s7, s6
 8018e48:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8018e4c:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8018e50:	ee34 0a06 	vadd.f32	s0, s8, s12
 8018e54:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8018e58:	ee76 aa87 	vadd.f32	s21, s13, s14
 8018e5c:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8018e60:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8018e64:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8018e68:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8018e6c:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8018e70:	ee71 8a05 	vadd.f32	s17, s2, s10
 8018e74:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8018e78:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8018e7c:	ee72 9a22 	vadd.f32	s19, s4, s5
 8018e80:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8018e84:	ee35 5a41 	vsub.f32	s10, s10, s2
 8018e88:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8018e8c:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8018e90:	ee36 6a44 	vsub.f32	s12, s12, s8
 8018e94:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8018e98:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8018e9c:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8018ea0:	ee72 7a62 	vsub.f32	s15, s4, s5
 8018ea4:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8018ea8:	ee73 2a63 	vsub.f32	s5, s6, s7
 8018eac:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8018eb0:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8018eb4:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8018eb8:	ee24 3a84 	vmul.f32	s6, s9, s8
 8018ebc:	ee27 2a26 	vmul.f32	s4, s14, s13
 8018ec0:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8018ec4:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8018ec8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018ecc:	ee65 5a84 	vmul.f32	s11, s11, s8
 8018ed0:	ee65 6a26 	vmul.f32	s13, s10, s13
 8018ed4:	ee25 5a04 	vmul.f32	s10, s10, s8
 8018ed8:	ee37 7a64 	vsub.f32	s14, s14, s9
 8018edc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018ee0:	ee33 4a02 	vadd.f32	s8, s6, s4
 8018ee4:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8018ee8:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8018eec:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8018ef0:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8018ef4:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8018ef8:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8018efc:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8018f00:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8018f04:	ee27 4a87 	vmul.f32	s8, s15, s14
 8018f08:	ee61 5a87 	vmul.f32	s11, s3, s14
 8018f0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018f10:	ee22 5a87 	vmul.f32	s10, s5, s14
 8018f14:	ee26 7a07 	vmul.f32	s14, s12, s14
 8018f18:	ee26 6a26 	vmul.f32	s12, s12, s13
 8018f1c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8018f20:	ee74 4a84 	vadd.f32	s9, s9, s8
 8018f24:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8018f28:	ee35 6a46 	vsub.f32	s12, s10, s12
 8018f2c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8018f30:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8018f34:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8018f38:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8018f3c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8018f40:	f47f af5a 	bne.w	8018df8 <arm_cfft_radix8by2_f32+0x34>
 8018f44:	687a      	ldr	r2, [r7, #4]
 8018f46:	b28c      	uxth	r4, r1
 8018f48:	2302      	movs	r3, #2
 8018f4a:	4621      	mov	r1, r4
 8018f4c:	f000 fbc2 	bl	80196d4 <arm_radix8_butterfly_f32>
 8018f50:	4621      	mov	r1, r4
 8018f52:	687a      	ldr	r2, [r7, #4]
 8018f54:	4640      	mov	r0, r8
 8018f56:	2302      	movs	r3, #2
 8018f58:	ecbd 8b06 	vpop	{d8-d10}
 8018f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f60:	f000 bbb8 	b.w	80196d4 <arm_radix8_butterfly_f32>

08018f64 <arm_cfft_radix8by4_f32>:
 8018f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f68:	ed2d 8b06 	vpush	{d8-d10}
 8018f6c:	8804      	ldrh	r4, [r0, #0]
 8018f6e:	b08f      	sub	sp, #60	; 0x3c
 8018f70:	ed91 6a00 	vldr	s12, [r1]
 8018f74:	460a      	mov	r2, r1
 8018f76:	0864      	lsrs	r4, r4, #1
 8018f78:	ed91 7a01 	vldr	s14, [r1, #4]
 8018f7c:	9101      	str	r1, [sp, #4]
 8018f7e:	00a3      	lsls	r3, r4, #2
 8018f80:	6841      	ldr	r1, [r0, #4]
 8018f82:	0864      	lsrs	r4, r4, #1
 8018f84:	900c      	str	r0, [sp, #48]	; 0x30
 8018f86:	9205      	str	r2, [sp, #20]
 8018f88:	f101 0610 	add.w	r6, r1, #16
 8018f8c:	4625      	mov	r5, r4
 8018f8e:	940b      	str	r4, [sp, #44]	; 0x2c
 8018f90:	f101 0408 	add.w	r4, r1, #8
 8018f94:	9602      	str	r6, [sp, #8]
 8018f96:	9407      	str	r4, [sp, #28]
 8018f98:	18d4      	adds	r4, r2, r3
 8018f9a:	1eaa      	subs	r2, r5, #2
 8018f9c:	f101 0518 	add.w	r5, r1, #24
 8018fa0:	18e0      	adds	r0, r4, r3
 8018fa2:	edd4 4a00 	vldr	s9, [r4]
 8018fa6:	ed94 4a01 	vldr	s8, [r4, #4]
 8018faa:	46a6      	mov	lr, r4
 8018fac:	edd0 6a00 	vldr	s13, [r0]
 8018fb0:	18c7      	adds	r7, r0, r3
 8018fb2:	edd0 7a01 	vldr	s15, [r0, #4]
 8018fb6:	46a0      	mov	r8, r4
 8018fb8:	ee76 5a26 	vadd.f32	s11, s12, s13
 8018fbc:	ed97 5a00 	vldr	s10, [r7]
 8018fc0:	ee76 6a66 	vsub.f32	s13, s12, s13
 8018fc4:	4604      	mov	r4, r0
 8018fc6:	9506      	str	r5, [sp, #24]
 8018fc8:	4605      	mov	r5, r0
 8018fca:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8018fce:	900a      	str	r0, [sp, #40]	; 0x28
 8018fd0:	9801      	ldr	r0, [sp, #4]
 8018fd2:	ee37 6a27 	vadd.f32	s12, s14, s15
 8018fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018fda:	ed97 3a01 	vldr	s6, [r7, #4]
 8018fde:	ee72 2a85 	vadd.f32	s5, s5, s10
 8018fe2:	46bc      	mov	ip, r7
 8018fe4:	ee76 3a84 	vadd.f32	s7, s13, s8
 8018fe8:	9704      	str	r7, [sp, #16]
 8018fea:	ee36 7a44 	vsub.f32	s14, s12, s8
 8018fee:	f8cd e00c 	str.w	lr, [sp, #12]
 8018ff2:	ee12 9a90 	vmov	r9, s5
 8018ff6:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8018ffa:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8018ffe:	1f3e      	subs	r6, r7, #4
 8019000:	f840 9b08 	str.w	r9, [r0], #8
 8019004:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8019008:	edde 2a01 	vldr	s5, [lr, #4]
 801900c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8019010:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8019014:	eddc 4a01 	vldr	s9, [ip, #4]
 8019018:	ee36 6a22 	vadd.f32	s12, s12, s5
 801901c:	9001      	str	r0, [sp, #4]
 801901e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019022:	9805      	ldr	r0, [sp, #20]
 8019024:	ee13 9a90 	vmov	r9, s7
 8019028:	ee37 7a43 	vsub.f32	s14, s14, s6
 801902c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8019030:	f1ae 0704 	sub.w	r7, lr, #4
 8019034:	ee74 4a05 	vadd.f32	s9, s8, s10
 8019038:	ee76 6a83 	vadd.f32	s13, s13, s6
 801903c:	ed80 6a01 	vstr	s12, [r0, #4]
 8019040:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8019044:	f848 9b08 	str.w	r9, [r8], #8
 8019048:	edce 4a01 	vstr	s9, [lr, #4]
 801904c:	ee15 ea90 	vmov	lr, s11
 8019050:	f844 eb08 	str.w	lr, [r4], #8
 8019054:	ee16 ea90 	vmov	lr, s13
 8019058:	9408      	str	r4, [sp, #32]
 801905a:	462c      	mov	r4, r5
 801905c:	ed85 7a01 	vstr	s14, [r5, #4]
 8019060:	9d04      	ldr	r5, [sp, #16]
 8019062:	f84c eb08 	str.w	lr, [ip], #8
 8019066:	edc5 7a01 	vstr	s15, [r5, #4]
 801906a:	0855      	lsrs	r5, r2, #1
 801906c:	9509      	str	r5, [sp, #36]	; 0x24
 801906e:	f000 8130 	beq.w	80192d2 <arm_cfft_radix8by4_f32+0x36e>
 8019072:	9805      	ldr	r0, [sp, #20]
 8019074:	3b08      	subs	r3, #8
 8019076:	46ab      	mov	fp, r5
 8019078:	f1a4 020c 	sub.w	r2, r4, #12
 801907c:	f100 0510 	add.w	r5, r0, #16
 8019080:	f101 0920 	add.w	r9, r1, #32
 8019084:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8019088:	f8dd a008 	ldr.w	sl, [sp, #8]
 801908c:	4433      	add	r3, r6
 801908e:	3410      	adds	r4, #16
 8019090:	4660      	mov	r0, ip
 8019092:	4641      	mov	r1, r8
 8019094:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8019098:	ed54 6a02 	vldr	s13, [r4, #-8]
 801909c:	f1bb 0b01 	subs.w	fp, fp, #1
 80190a0:	ed55 5a02 	vldr	s11, [r5, #-8]
 80190a4:	f10a 0a08 	add.w	sl, sl, #8
 80190a8:	edd1 7a00 	vldr	s15, [r1]
 80190ac:	f105 0508 	add.w	r5, r5, #8
 80190b0:	ee75 3aa6 	vadd.f32	s7, s11, s13
 80190b4:	edd0 2a00 	vldr	s5, [r0]
 80190b8:	ed14 7a01 	vldr	s14, [r4, #-4]
 80190bc:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80190c0:	ed55 6a03 	vldr	s13, [r5, #-12]
 80190c4:	f1a2 0208 	sub.w	r2, r2, #8
 80190c8:	ee73 4aa7 	vadd.f32	s9, s7, s15
 80190cc:	ed90 2a01 	vldr	s4, [r0, #4]
 80190d0:	ee36 5a87 	vadd.f32	s10, s13, s14
 80190d4:	ed91 6a01 	vldr	s12, [r1, #4]
 80190d8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80190dc:	f109 0910 	add.w	r9, r9, #16
 80190e0:	ee74 6aa2 	vadd.f32	s13, s9, s5
 80190e4:	f104 0408 	add.w	r4, r4, #8
 80190e8:	ee73 3ae7 	vsub.f32	s7, s7, s15
 80190ec:	f10e 0e18 	add.w	lr, lr, #24
 80190f0:	ee37 3a67 	vsub.f32	s6, s14, s15
 80190f4:	f1a3 0308 	sub.w	r3, r3, #8
 80190f8:	ed45 6a04 	vstr	s13, [r5, #-16]
 80190fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019100:	edd1 6a01 	vldr	s13, [r1, #4]
 8019104:	ee75 1a86 	vadd.f32	s3, s11, s12
 8019108:	edd0 4a01 	vldr	s9, [r0, #4]
 801910c:	ee33 3a22 	vadd.f32	s6, s6, s5
 8019110:	ee75 6a26 	vadd.f32	s13, s10, s13
 8019114:	ee35 5a46 	vsub.f32	s10, s10, s12
 8019118:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801911c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019120:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8019124:	ee35 5a42 	vsub.f32	s10, s10, s4
 8019128:	ed45 6a03 	vstr	s13, [r5, #-12]
 801912c:	ee36 2a02 	vadd.f32	s4, s12, s4
 8019130:	edd6 7a00 	vldr	s15, [r6]
 8019134:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8019138:	ed97 1a00 	vldr	s2, [r7]
 801913c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019140:	ed92 8a04 	vldr	s16, [r2, #16]
 8019144:	ee71 8a27 	vadd.f32	s17, s2, s15
 8019148:	ed93 aa04 	vldr	s20, [r3, #16]
 801914c:	ed16 7a01 	vldr	s14, [r6, #-4]
 8019150:	ee71 7a67 	vsub.f32	s15, s2, s15
 8019154:	ed57 0a01 	vldr	s1, [r7, #-4]
 8019158:	ee38 1a4a 	vsub.f32	s2, s16, s20
 801915c:	ee38 6a88 	vadd.f32	s12, s17, s16
 8019160:	edd3 9a03 	vldr	s19, [r3, #12]
 8019164:	ee30 0a87 	vadd.f32	s0, s1, s14
 8019168:	ed92 9a03 	vldr	s18, [r2, #12]
 801916c:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8019170:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8019174:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8019178:	ee37 4ac9 	vsub.f32	s8, s15, s18
 801917c:	ee16 ca10 	vmov	ip, s12
 8019180:	ee30 6a49 	vsub.f32	s12, s0, s18
 8019184:	ee77 4a01 	vadd.f32	s9, s14, s2
 8019188:	f847 c908 	str.w	ip, [r7], #-8
 801918c:	ee34 4a29 	vadd.f32	s8, s8, s19
 8019190:	edd2 8a03 	vldr	s17, [r2, #12]
 8019194:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8019198:	ed93 8a03 	vldr	s16, [r3, #12]
 801919c:	ee71 0a47 	vsub.f32	s1, s2, s14
 80191a0:	ee30 0a28 	vadd.f32	s0, s0, s17
 80191a4:	ee39 1a67 	vsub.f32	s2, s18, s15
 80191a8:	ee36 6a69 	vsub.f32	s12, s12, s19
 80191ac:	ee30 0a08 	vadd.f32	s0, s0, s16
 80191b0:	ee75 5aca 	vsub.f32	s11, s11, s20
 80191b4:	ed87 0a01 	vstr	s0, [r7, #4]
 80191b8:	ed1a 0a04 	vldr	s0, [sl, #-16]
 80191bc:	ed5a 6a03 	vldr	s13, [sl, #-12]
 80191c0:	ee21 8a80 	vmul.f32	s16, s3, s0
 80191c4:	ee23 7a26 	vmul.f32	s14, s6, s13
 80191c8:	ee64 7a26 	vmul.f32	s15, s8, s13
 80191cc:	ee61 1aa6 	vmul.f32	s3, s3, s13
 80191d0:	ee24 4a00 	vmul.f32	s8, s8, s0
 80191d4:	ee23 3a00 	vmul.f32	s6, s6, s0
 80191d8:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80191dc:	ee24 0a80 	vmul.f32	s0, s9, s0
 80191e0:	ee38 7a07 	vadd.f32	s14, s16, s14
 80191e4:	ee76 6a84 	vadd.f32	s13, s13, s8
 80191e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80191ec:	ee33 3a61 	vsub.f32	s6, s6, s3
 80191f0:	ee17 ca10 	vmov	ip, s14
 80191f4:	f841 cb08 	str.w	ip, [r1], #8
 80191f8:	ed01 3a01 	vstr	s6, [r1, #-4]
 80191fc:	ed82 0a04 	vstr	s0, [r2, #16]
 8019200:	edc2 6a03 	vstr	s13, [r2, #12]
 8019204:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8019208:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 801920c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8019210:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8019214:	ee65 4a27 	vmul.f32	s9, s10, s15
 8019218:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801921c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8019220:	ee66 7a27 	vmul.f32	s15, s12, s15
 8019224:	ee25 5a26 	vmul.f32	s10, s10, s13
 8019228:	ee66 6a26 	vmul.f32	s13, s12, s13
 801922c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019230:	ee34 6a24 	vadd.f32	s12, s8, s9
 8019234:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8019238:	ee35 5a63 	vsub.f32	s10, s10, s7
 801923c:	ee17 ca90 	vmov	ip, s15
 8019240:	ed04 6a04 	vstr	s12, [r4, #-16]
 8019244:	ed04 5a03 	vstr	s10, [r4, #-12]
 8019248:	f846 c908 	str.w	ip, [r6], #-8
 801924c:	edc6 6a01 	vstr	s13, [r6, #4]
 8019250:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8019254:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8019258:	ee62 5a27 	vmul.f32	s11, s4, s15
 801925c:	ee22 6a87 	vmul.f32	s12, s5, s14
 8019260:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019264:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8019268:	ee61 6a07 	vmul.f32	s13, s2, s14
 801926c:	ee20 7a87 	vmul.f32	s14, s1, s14
 8019270:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8019274:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019278:	ee35 6a86 	vadd.f32	s12, s11, s12
 801927c:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8019280:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8019284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019288:	ee16 ca10 	vmov	ip, s12
 801928c:	f840 cb08 	str.w	ip, [r0], #8
 8019290:	ed40 2a01 	vstr	s5, [r0, #-4]
 8019294:	edc3 0a04 	vstr	s1, [r3, #16]
 8019298:	edc3 7a03 	vstr	s15, [r3, #12]
 801929c:	f47f aefc 	bne.w	8019098 <arm_cfft_radix8by4_f32+0x134>
 80192a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80192a2:	9802      	ldr	r0, [sp, #8]
 80192a4:	00cb      	lsls	r3, r1, #3
 80192a6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80192aa:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80192ae:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80192b2:	4498      	add	r8, r3
 80192b4:	449c      	add	ip, r3
 80192b6:	9102      	str	r1, [sp, #8]
 80192b8:	9901      	ldr	r1, [sp, #4]
 80192ba:	4419      	add	r1, r3
 80192bc:	9101      	str	r1, [sp, #4]
 80192be:	9907      	ldr	r1, [sp, #28]
 80192c0:	4419      	add	r1, r3
 80192c2:	9107      	str	r1, [sp, #28]
 80192c4:	9908      	ldr	r1, [sp, #32]
 80192c6:	4419      	add	r1, r3
 80192c8:	9b06      	ldr	r3, [sp, #24]
 80192ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80192ce:	9108      	str	r1, [sp, #32]
 80192d0:	9306      	str	r3, [sp, #24]
 80192d2:	9a01      	ldr	r2, [sp, #4]
 80192d4:	2304      	movs	r3, #4
 80192d6:	9e08      	ldr	r6, [sp, #32]
 80192d8:	edd2 7a00 	vldr	s15, [r2]
 80192dc:	ed96 7a00 	vldr	s14, [r6]
 80192e0:	edd8 2a00 	vldr	s5, [r8]
 80192e4:	ee77 5a87 	vadd.f32	s11, s15, s14
 80192e8:	ed9c 3a00 	vldr	s6, [ip]
 80192ec:	ed92 6a01 	vldr	s12, [r2, #4]
 80192f0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80192f4:	edd6 6a01 	vldr	s13, [r6, #4]
 80192f8:	ee75 4aa2 	vadd.f32	s9, s11, s5
 80192fc:	ed9c 2a01 	vldr	s4, [ip, #4]
 8019300:	ee36 5a26 	vadd.f32	s10, s12, s13
 8019304:	edd8 7a01 	vldr	s15, [r8, #4]
 8019308:	ee76 6a66 	vsub.f32	s13, s12, s13
 801930c:	9d02      	ldr	r5, [sp, #8]
 801930e:	ee34 6a83 	vadd.f32	s12, s9, s6
 8019312:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8019316:	ee37 4a27 	vadd.f32	s8, s14, s15
 801931a:	9805      	ldr	r0, [sp, #20]
 801931c:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8019320:	4621      	mov	r1, r4
 8019322:	ed82 6a00 	vstr	s12, [r2]
 8019326:	ee35 6ae2 	vsub.f32	s12, s11, s5
 801932a:	edd8 3a01 	vldr	s7, [r8, #4]
 801932e:	ee75 5a67 	vsub.f32	s11, s10, s15
 8019332:	eddc 1a01 	vldr	s3, [ip, #4]
 8019336:	ee34 4a42 	vsub.f32	s8, s8, s4
 801933a:	ee75 3a23 	vadd.f32	s7, s10, s7
 801933e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8019342:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8019346:	ee33 5aa1 	vadd.f32	s10, s7, s3
 801934a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801934e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8019352:	ed82 5a01 	vstr	s10, [r2, #4]
 8019356:	ee75 5ac2 	vsub.f32	s11, s11, s4
 801935a:	9a07      	ldr	r2, [sp, #28]
 801935c:	ee77 7a02 	vadd.f32	s15, s14, s4
 8019360:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8019364:	edd2 2a00 	vldr	s5, [r2]
 8019368:	ed92 5a01 	vldr	s10, [r2, #4]
 801936c:	ee64 3a22 	vmul.f32	s7, s8, s5
 8019370:	ee24 4a05 	vmul.f32	s8, s8, s10
 8019374:	ee24 5a85 	vmul.f32	s10, s9, s10
 8019378:	ee64 4aa2 	vmul.f32	s9, s9, s5
 801937c:	ee33 5a85 	vadd.f32	s10, s7, s10
 8019380:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8019384:	ed88 5a00 	vstr	s10, [r8]
 8019388:	edc8 4a01 	vstr	s9, [r8, #4]
 801938c:	edd5 4a01 	vldr	s9, [r5, #4]
 8019390:	edd5 6a00 	vldr	s13, [r5]
 8019394:	9d06      	ldr	r5, [sp, #24]
 8019396:	ee26 5a26 	vmul.f32	s10, s12, s13
 801939a:	ee26 6a24 	vmul.f32	s12, s12, s9
 801939e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80193a2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80193a6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80193aa:	ee75 5a25 	vadd.f32	s11, s10, s11
 80193ae:	ed86 6a01 	vstr	s12, [r6, #4]
 80193b2:	edc6 5a00 	vstr	s11, [r6]
 80193b6:	edd5 5a01 	vldr	s11, [r5, #4]
 80193ba:	edd5 6a00 	vldr	s13, [r5]
 80193be:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80193c0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80193c4:	ee67 6a26 	vmul.f32	s13, s14, s13
 80193c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80193cc:	ee27 7a25 	vmul.f32	s14, s14, s11
 80193d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80193d4:	ee36 7a07 	vadd.f32	s14, s12, s14
 80193d8:	edcc 7a01 	vstr	s15, [ip, #4]
 80193dc:	ed8c 7a00 	vstr	s14, [ip]
 80193e0:	6872      	ldr	r2, [r6, #4]
 80193e2:	f000 f977 	bl	80196d4 <arm_radix8_butterfly_f32>
 80193e6:	9803      	ldr	r0, [sp, #12]
 80193e8:	4621      	mov	r1, r4
 80193ea:	6872      	ldr	r2, [r6, #4]
 80193ec:	2304      	movs	r3, #4
 80193ee:	f000 f971 	bl	80196d4 <arm_radix8_butterfly_f32>
 80193f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80193f4:	4621      	mov	r1, r4
 80193f6:	6872      	ldr	r2, [r6, #4]
 80193f8:	2304      	movs	r3, #4
 80193fa:	f000 f96b 	bl	80196d4 <arm_radix8_butterfly_f32>
 80193fe:	4621      	mov	r1, r4
 8019400:	6872      	ldr	r2, [r6, #4]
 8019402:	2304      	movs	r3, #4
 8019404:	9804      	ldr	r0, [sp, #16]
 8019406:	b00f      	add	sp, #60	; 0x3c
 8019408:	ecbd 8b06 	vpop	{d8-d10}
 801940c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019410:	f000 b960 	b.w	80196d4 <arm_radix8_butterfly_f32>

08019414 <arm_cfft_f32>:
 8019414:	2a01      	cmp	r2, #1
 8019416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801941a:	4606      	mov	r6, r0
 801941c:	4617      	mov	r7, r2
 801941e:	460c      	mov	r4, r1
 8019420:	4698      	mov	r8, r3
 8019422:	8805      	ldrh	r5, [r0, #0]
 8019424:	d053      	beq.n	80194ce <arm_cfft_f32+0xba>
 8019426:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801942a:	d04b      	beq.n	80194c4 <arm_cfft_f32+0xb0>
 801942c:	d916      	bls.n	801945c <arm_cfft_f32+0x48>
 801942e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8019432:	d01a      	beq.n	801946a <arm_cfft_f32+0x56>
 8019434:	d95a      	bls.n	80194ec <arm_cfft_f32+0xd8>
 8019436:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801943a:	d043      	beq.n	80194c4 <arm_cfft_f32+0xb0>
 801943c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8019440:	d105      	bne.n	801944e <arm_cfft_f32+0x3a>
 8019442:	2301      	movs	r3, #1
 8019444:	6872      	ldr	r2, [r6, #4]
 8019446:	4629      	mov	r1, r5
 8019448:	4620      	mov	r0, r4
 801944a:	f000 f943 	bl	80196d4 <arm_radix8_butterfly_f32>
 801944e:	f1b8 0f00 	cmp.w	r8, #0
 8019452:	d111      	bne.n	8019478 <arm_cfft_f32+0x64>
 8019454:	2f01      	cmp	r7, #1
 8019456:	d016      	beq.n	8019486 <arm_cfft_f32+0x72>
 8019458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801945c:	2d20      	cmp	r5, #32
 801945e:	d031      	beq.n	80194c4 <arm_cfft_f32+0xb0>
 8019460:	d948      	bls.n	80194f4 <arm_cfft_f32+0xe0>
 8019462:	2d40      	cmp	r5, #64	; 0x40
 8019464:	d0ed      	beq.n	8019442 <arm_cfft_f32+0x2e>
 8019466:	2d80      	cmp	r5, #128	; 0x80
 8019468:	d1f1      	bne.n	801944e <arm_cfft_f32+0x3a>
 801946a:	4621      	mov	r1, r4
 801946c:	4630      	mov	r0, r6
 801946e:	f7ff fca9 	bl	8018dc4 <arm_cfft_radix8by2_f32>
 8019472:	f1b8 0f00 	cmp.w	r8, #0
 8019476:	d0ed      	beq.n	8019454 <arm_cfft_f32+0x40>
 8019478:	68b2      	ldr	r2, [r6, #8]
 801947a:	4620      	mov	r0, r4
 801947c:	89b1      	ldrh	r1, [r6, #12]
 801947e:	f7e6 fec7 	bl	8000210 <arm_bitreversal_32>
 8019482:	2f01      	cmp	r7, #1
 8019484:	d1e8      	bne.n	8019458 <arm_cfft_f32+0x44>
 8019486:	ee07 5a90 	vmov	s15, r5
 801948a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801948e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019492:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019496:	2d00      	cmp	r5, #0
 8019498:	d0de      	beq.n	8019458 <arm_cfft_f32+0x44>
 801949a:	f104 0108 	add.w	r1, r4, #8
 801949e:	2300      	movs	r3, #0
 80194a0:	ed11 7a02 	vldr	s14, [r1, #-8]
 80194a4:	3301      	adds	r3, #1
 80194a6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80194aa:	3108      	adds	r1, #8
 80194ac:	429d      	cmp	r5, r3
 80194ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 80194b2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80194b6:	ed01 7a04 	vstr	s14, [r1, #-16]
 80194ba:	ed41 7a03 	vstr	s15, [r1, #-12]
 80194be:	d1ef      	bne.n	80194a0 <arm_cfft_f32+0x8c>
 80194c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194c4:	4621      	mov	r1, r4
 80194c6:	4630      	mov	r0, r6
 80194c8:	f7ff fd4c 	bl	8018f64 <arm_cfft_radix8by4_f32>
 80194cc:	e7bf      	b.n	801944e <arm_cfft_f32+0x3a>
 80194ce:	b1a5      	cbz	r5, 80194fa <arm_cfft_f32+0xe6>
 80194d0:	f101 030c 	add.w	r3, r1, #12
 80194d4:	2200      	movs	r2, #0
 80194d6:	ed53 7a02 	vldr	s15, [r3, #-8]
 80194da:	3201      	adds	r2, #1
 80194dc:	3308      	adds	r3, #8
 80194de:	eef1 7a67 	vneg.f32	s15, s15
 80194e2:	4295      	cmp	r5, r2
 80194e4:	ed43 7a04 	vstr	s15, [r3, #-16]
 80194e8:	d1f5      	bne.n	80194d6 <arm_cfft_f32+0xc2>
 80194ea:	e79c      	b.n	8019426 <arm_cfft_f32+0x12>
 80194ec:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80194f0:	d0a7      	beq.n	8019442 <arm_cfft_f32+0x2e>
 80194f2:	e7ac      	b.n	801944e <arm_cfft_f32+0x3a>
 80194f4:	2d10      	cmp	r5, #16
 80194f6:	d0b8      	beq.n	801946a <arm_cfft_f32+0x56>
 80194f8:	e7a9      	b.n	801944e <arm_cfft_f32+0x3a>
 80194fa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80194fe:	d896      	bhi.n	801942e <arm_cfft_f32+0x1a>
 8019500:	e7ac      	b.n	801945c <arm_cfft_f32+0x48>
 8019502:	bf00      	nop

08019504 <arm_cmplx_mag_f32>:
 8019504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019508:	ea5f 0892 	movs.w	r8, r2, lsr #2
 801950c:	b084      	sub	sp, #16
 801950e:	d07f      	beq.n	8019610 <arm_cmplx_mag_f32+0x10c>
 8019510:	f100 0420 	add.w	r4, r0, #32
 8019514:	f101 0510 	add.w	r5, r1, #16
 8019518:	4646      	mov	r6, r8
 801951a:	2700      	movs	r7, #0
 801951c:	e05a      	b.n	80195d4 <arm_cmplx_mag_f32+0xd0>
 801951e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019522:	eeb4 0a40 	vcmp.f32	s0, s0
 8019526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801952a:	f040 80a4 	bne.w	8019676 <arm_cmplx_mag_f32+0x172>
 801952e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8019532:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8019536:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 801953a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801953e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019542:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019546:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801954a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801954e:	f2c0 808f 	blt.w	8019670 <arm_cmplx_mag_f32+0x16c>
 8019552:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019556:	eeb4 0a40 	vcmp.f32	s0, s0
 801955a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801955e:	f040 80af 	bne.w	80196c0 <arm_cmplx_mag_f32+0x1bc>
 8019562:	ed05 0a03 	vstr	s0, [r5, #-12]
 8019566:	ed54 7a04 	vldr	s15, [r4, #-16]
 801956a:	ed14 0a03 	vldr	s0, [r4, #-12]
 801956e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019572:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019576:	ee77 7a80 	vadd.f32	s15, s15, s0
 801957a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801957e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019582:	db72      	blt.n	801966a <arm_cmplx_mag_f32+0x166>
 8019584:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019588:	eeb4 0a40 	vcmp.f32	s0, s0
 801958c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019590:	f040 808c 	bne.w	80196ac <arm_cmplx_mag_f32+0x1a8>
 8019594:	ed05 0a02 	vstr	s0, [r5, #-8]
 8019598:	ed54 7a02 	vldr	s15, [r4, #-8]
 801959c:	ed14 0a01 	vldr	s0, [r4, #-4]
 80195a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80195a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80195a8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80195ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80195b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195b4:	db20      	blt.n	80195f8 <arm_cmplx_mag_f32+0xf4>
 80195b6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80195ba:	eeb4 0a40 	vcmp.f32	s0, s0
 80195be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195c2:	d169      	bne.n	8019698 <arm_cmplx_mag_f32+0x194>
 80195c4:	3e01      	subs	r6, #1
 80195c6:	ed05 0a01 	vstr	s0, [r5, #-4]
 80195ca:	f104 0420 	add.w	r4, r4, #32
 80195ce:	f105 0510 	add.w	r5, r5, #16
 80195d2:	d019      	beq.n	8019608 <arm_cmplx_mag_f32+0x104>
 80195d4:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80195d8:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 80195dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80195e0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80195e4:	ee77 7a80 	vadd.f32	s15, s15, s0
 80195e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80195ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195f0:	da95      	bge.n	801951e <arm_cmplx_mag_f32+0x1a>
 80195f2:	f845 7c10 	str.w	r7, [r5, #-16]
 80195f6:	e79c      	b.n	8019532 <arm_cmplx_mag_f32+0x2e>
 80195f8:	3e01      	subs	r6, #1
 80195fa:	f845 7c04 	str.w	r7, [r5, #-4]
 80195fe:	f104 0420 	add.w	r4, r4, #32
 8019602:	f105 0510 	add.w	r5, r5, #16
 8019606:	d1e5      	bne.n	80195d4 <arm_cmplx_mag_f32+0xd0>
 8019608:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 801960c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8019610:	f012 0503 	ands.w	r5, r2, #3
 8019614:	d026      	beq.n	8019664 <arm_cmplx_mag_f32+0x160>
 8019616:	f100 0408 	add.w	r4, r0, #8
 801961a:	2600      	movs	r6, #0
 801961c:	e00c      	b.n	8019638 <arm_cmplx_mag_f32+0x134>
 801961e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8019622:	eeb4 0a40 	vcmp.f32	s0, s0
 8019626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801962a:	d12e      	bne.n	801968a <arm_cmplx_mag_f32+0x186>
 801962c:	3d01      	subs	r5, #1
 801962e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8019632:	f104 0408 	add.w	r4, r4, #8
 8019636:	d015      	beq.n	8019664 <arm_cmplx_mag_f32+0x160>
 8019638:	ed54 7a02 	vldr	s15, [r4, #-8]
 801963c:	3104      	adds	r1, #4
 801963e:	ed14 0a01 	vldr	s0, [r4, #-4]
 8019642:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019646:	ee20 0a00 	vmul.f32	s0, s0, s0
 801964a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801964e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019656:	dae2      	bge.n	801961e <arm_cmplx_mag_f32+0x11a>
 8019658:	3d01      	subs	r5, #1
 801965a:	f841 6c04 	str.w	r6, [r1, #-4]
 801965e:	f104 0408 	add.w	r4, r4, #8
 8019662:	d1e9      	bne.n	8019638 <arm_cmplx_mag_f32+0x134>
 8019664:	b004      	add	sp, #16
 8019666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801966a:	f845 7c08 	str.w	r7, [r5, #-8]
 801966e:	e793      	b.n	8019598 <arm_cmplx_mag_f32+0x94>
 8019670:	f845 7c0c 	str.w	r7, [r5, #-12]
 8019674:	e777      	b.n	8019566 <arm_cmplx_mag_f32+0x62>
 8019676:	eeb0 0a67 	vmov.f32	s0, s15
 801967a:	9203      	str	r2, [sp, #12]
 801967c:	9102      	str	r1, [sp, #8]
 801967e:	9001      	str	r0, [sp, #4]
 8019680:	f001 fe78 	bl	801b374 <sqrtf>
 8019684:	a801      	add	r0, sp, #4
 8019686:	c807      	ldmia	r0, {r0, r1, r2}
 8019688:	e751      	b.n	801952e <arm_cmplx_mag_f32+0x2a>
 801968a:	eeb0 0a67 	vmov.f32	s0, s15
 801968e:	9101      	str	r1, [sp, #4]
 8019690:	f001 fe70 	bl	801b374 <sqrtf>
 8019694:	9901      	ldr	r1, [sp, #4]
 8019696:	e7c9      	b.n	801962c <arm_cmplx_mag_f32+0x128>
 8019698:	eeb0 0a67 	vmov.f32	s0, s15
 801969c:	9203      	str	r2, [sp, #12]
 801969e:	9102      	str	r1, [sp, #8]
 80196a0:	9001      	str	r0, [sp, #4]
 80196a2:	f001 fe67 	bl	801b374 <sqrtf>
 80196a6:	a801      	add	r0, sp, #4
 80196a8:	c807      	ldmia	r0, {r0, r1, r2}
 80196aa:	e78b      	b.n	80195c4 <arm_cmplx_mag_f32+0xc0>
 80196ac:	eeb0 0a67 	vmov.f32	s0, s15
 80196b0:	9203      	str	r2, [sp, #12]
 80196b2:	9102      	str	r1, [sp, #8]
 80196b4:	9001      	str	r0, [sp, #4]
 80196b6:	f001 fe5d 	bl	801b374 <sqrtf>
 80196ba:	a801      	add	r0, sp, #4
 80196bc:	c807      	ldmia	r0, {r0, r1, r2}
 80196be:	e769      	b.n	8019594 <arm_cmplx_mag_f32+0x90>
 80196c0:	eeb0 0a67 	vmov.f32	s0, s15
 80196c4:	9203      	str	r2, [sp, #12]
 80196c6:	9102      	str	r1, [sp, #8]
 80196c8:	9001      	str	r0, [sp, #4]
 80196ca:	f001 fe53 	bl	801b374 <sqrtf>
 80196ce:	a801      	add	r0, sp, #4
 80196d0:	c807      	ldmia	r0, {r0, r1, r2}
 80196d2:	e746      	b.n	8019562 <arm_cmplx_mag_f32+0x5e>

080196d4 <arm_radix8_butterfly_f32>:
 80196d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196d8:	469e      	mov	lr, r3
 80196da:	4603      	mov	r3, r0
 80196dc:	468a      	mov	sl, r1
 80196de:	468b      	mov	fp, r1
 80196e0:	3304      	adds	r3, #4
 80196e2:	ed2d 8b10 	vpush	{d8-d15}
 80196e6:	469c      	mov	ip, r3
 80196e8:	b09d      	sub	sp, #116	; 0x74
 80196ea:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 80199f8 <arm_radix8_butterfly_f32+0x324>
 80196ee:	9019      	str	r0, [sp, #100]	; 0x64
 80196f0:	921a      	str	r2, [sp, #104]	; 0x68
 80196f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80196f4:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80196f8:	f04f 0800 	mov.w	r8, #0
 80196fc:	461a      	mov	r2, r3
 80196fe:	9311      	str	r3, [sp, #68]	; 0x44
 8019700:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8019704:	4611      	mov	r1, r2
 8019706:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801970a:	9300      	str	r3, [sp, #0]
 801970c:	0053      	lsls	r3, r2, #1
 801970e:	18d5      	adds	r5, r2, r3
 8019710:	9301      	str	r3, [sp, #4]
 8019712:	0113      	lsls	r3, r2, #4
 8019714:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019716:	194c      	adds	r4, r1, r5
 8019718:	eb02 0609 	add.w	r6, r2, r9
 801971c:	9302      	str	r3, [sp, #8]
 801971e:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8019722:	4613      	mov	r3, r2
 8019724:	190a      	adds	r2, r1, r4
 8019726:	eb06 0709 	add.w	r7, r6, r9
 801972a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801972e:	1888      	adds	r0, r1, r2
 8019730:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019734:	4401      	add	r1, r0
 8019736:	3204      	adds	r2, #4
 8019738:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801973c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019740:	9b00      	ldr	r3, [sp, #0]
 8019742:	3104      	adds	r1, #4
 8019744:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8019748:	44d8      	add	r8, fp
 801974a:	ed90 7a00 	vldr	s14, [r0]
 801974e:	ed94 5a00 	vldr	s10, [r4]
 8019752:	45c2      	cmp	sl, r8
 8019754:	edd7 3a00 	vldr	s7, [r7]
 8019758:	ed96 6a00 	vldr	s12, [r6]
 801975c:	ee37 1a85 	vadd.f32	s2, s15, s10
 8019760:	ed52 6a01 	vldr	s13, [r2, #-4]
 8019764:	ee73 4a87 	vadd.f32	s9, s7, s14
 8019768:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801976c:	edd5 7a00 	vldr	s15, [r5]
 8019770:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8019774:	ed11 7a01 	vldr	s14, [r1, #-4]
 8019778:	ee36 2a26 	vadd.f32	s4, s12, s13
 801977c:	ee37 4a87 	vadd.f32	s8, s15, s14
 8019780:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019784:	ee71 5a24 	vadd.f32	s11, s2, s9
 8019788:	ee32 6a04 	vadd.f32	s12, s4, s8
 801978c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8019790:	ee31 1a64 	vsub.f32	s2, s2, s9
 8019794:	ee75 4a86 	vadd.f32	s9, s11, s12
 8019798:	ee76 7ac7 	vsub.f32	s15, s13, s14
 801979c:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80197a0:	ed4c 4a01 	vstr	s9, [ip, #-4]
 80197a4:	ee32 2a44 	vsub.f32	s4, s4, s8
 80197a8:	ee67 7a89 	vmul.f32	s15, s15, s18
 80197ac:	ed94 0a01 	vldr	s0, [r4, #4]
 80197b0:	edc4 5a00 	vstr	s11, [r4]
 80197b4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80197b8:	edd6 5a01 	vldr	s11, [r6, #4]
 80197bc:	edd5 2a01 	vldr	s5, [r5, #4]
 80197c0:	ee75 1a27 	vadd.f32	s3, s10, s15
 80197c4:	ed92 4a00 	vldr	s8, [r2]
 80197c8:	ee75 7a67 	vsub.f32	s15, s10, s15
 80197cc:	edd1 4a00 	vldr	s9, [r1]
 80197d0:	ee27 7a09 	vmul.f32	s14, s14, s18
 80197d4:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80197d8:	ed9c 6a00 	vldr	s12, [ip]
 80197dc:	ee72 6ae4 	vsub.f32	s13, s5, s9
 80197e0:	edd0 0a01 	vldr	s1, [r0, #4]
 80197e4:	ed97 5a01 	vldr	s10, [r7, #4]
 80197e8:	ee35 4a84 	vadd.f32	s8, s11, s8
 80197ec:	ee72 4aa4 	vadd.f32	s9, s5, s9
 80197f0:	ee73 5a26 	vadd.f32	s11, s6, s13
 80197f4:	ee76 2a00 	vadd.f32	s5, s12, s0
 80197f8:	ee73 6a66 	vsub.f32	s13, s6, s13
 80197fc:	ee36 6a40 	vsub.f32	s12, s12, s0
 8019800:	ee35 0a20 	vadd.f32	s0, s10, s1
 8019804:	ee65 5a89 	vmul.f32	s11, s11, s18
 8019808:	ee35 5a60 	vsub.f32	s10, s10, s1
 801980c:	ee32 3a80 	vadd.f32	s6, s5, s0
 8019810:	ee74 0a24 	vadd.f32	s1, s8, s9
 8019814:	ee66 6a89 	vmul.f32	s13, s13, s18
 8019818:	ee74 4a64 	vsub.f32	s9, s8, s9
 801981c:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8019820:	ee75 2a25 	vadd.f32	s5, s10, s11
 8019824:	ee33 0a20 	vadd.f32	s0, s6, s1
 8019828:	ee75 5a65 	vsub.f32	s11, s10, s11
 801982c:	ee33 3a60 	vsub.f32	s6, s6, s1
 8019830:	ee36 5a26 	vadd.f32	s10, s12, s13
 8019834:	ed8c 0a00 	vstr	s0, [ip]
 8019838:	ee76 6a66 	vsub.f32	s13, s12, s13
 801983c:	449c      	add	ip, r3
 801983e:	ee33 6a87 	vadd.f32	s12, s7, s14
 8019842:	ed84 3a01 	vstr	s6, [r4, #4]
 8019846:	ee33 7ac7 	vsub.f32	s14, s7, s14
 801984a:	441c      	add	r4, r3
 801984c:	ee71 3a24 	vadd.f32	s7, s2, s9
 8019850:	ee71 4a64 	vsub.f32	s9, s2, s9
 8019854:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8019858:	edc7 3a00 	vstr	s7, [r7]
 801985c:	ee34 1a42 	vsub.f32	s2, s8, s4
 8019860:	edc0 4a00 	vstr	s9, [r0]
 8019864:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8019868:	ee75 4a46 	vsub.f32	s9, s10, s12
 801986c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019870:	ed87 1a01 	vstr	s2, [r7, #4]
 8019874:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8019878:	441f      	add	r7, r3
 801987a:	ee32 4a04 	vadd.f32	s8, s4, s8
 801987e:	ee71 1ae2 	vsub.f32	s3, s3, s5
 8019882:	ee36 6a05 	vadd.f32	s12, s12, s10
 8019886:	ee37 7a26 	vadd.f32	s14, s14, s13
 801988a:	ed80 4a01 	vstr	s8, [r0, #4]
 801988e:	ed86 3a00 	vstr	s6, [r6]
 8019892:	4418      	add	r0, r3
 8019894:	ed41 1a01 	vstr	s3, [r1, #-4]
 8019898:	ed42 3a01 	vstr	s7, [r2, #-4]
 801989c:	edc5 7a00 	vstr	s15, [r5]
 80198a0:	edc6 4a01 	vstr	s9, [r6, #4]
 80198a4:	441e      	add	r6, r3
 80198a6:	ed81 6a00 	vstr	s12, [r1]
 80198aa:	4419      	add	r1, r3
 80198ac:	edc2 5a00 	vstr	s11, [r2]
 80198b0:	441a      	add	r2, r3
 80198b2:	ed85 7a01 	vstr	s14, [r5, #4]
 80198b6:	441d      	add	r5, r3
 80198b8:	f63f af44 	bhi.w	8019744 <arm_radix8_butterfly_f32+0x70>
 80198bc:	9300      	str	r3, [sp, #0]
 80198be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80198c0:	2b07      	cmp	r3, #7
 80198c2:	f240 81f4 	bls.w	8019cae <arm_radix8_butterfly_f32+0x5da>
 80198c6:	9901      	ldr	r1, [sp, #4]
 80198c8:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80198cc:	9d02      	ldr	r5, [sp, #8]
 80198ce:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 80198d2:	3101      	adds	r1, #1
 80198d4:	eb04 000e 	add.w	r0, r4, lr
 80198d8:	00e4      	lsls	r4, r4, #3
 80198da:	3508      	adds	r5, #8
 80198dc:	4419      	add	r1, r3
 80198de:	eb00 0c0e 	add.w	ip, r0, lr
 80198e2:	9413      	str	r4, [sp, #76]	; 0x4c
 80198e4:	00c0      	lsls	r0, r0, #3
 80198e6:	185e      	adds	r6, r3, r1
 80198e8:	4617      	mov	r7, r2
 80198ea:	9218      	str	r2, [sp, #96]	; 0x60
 80198ec:	f109 0908 	add.w	r9, r9, #8
 80198f0:	199c      	adds	r4, r3, r6
 80198f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80198f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80198f6:	9012      	str	r0, [sp, #72]	; 0x48
 80198f8:	195d      	adds	r5, r3, r5
 80198fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80198fc:	443a      	add	r2, r7
 80198fe:	950c      	str	r5, [sp, #48]	; 0x30
 8019900:	4698      	mov	r8, r3
 8019902:	4420      	add	r0, r4
 8019904:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019906:	19d7      	adds	r7, r2, r7
 8019908:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801990c:	4405      	add	r5, r0
 801990e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8019912:	9710      	str	r7, [sp, #64]	; 0x40
 8019914:	eb0c 070e 	add.w	r7, ip, lr
 8019918:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801991c:	3404      	adds	r4, #4
 801991e:	3004      	adds	r0, #4
 8019920:	44c8      	add	r8, r9
 8019922:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8019926:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019928:	940a      	str	r4, [sp, #40]	; 0x28
 801992a:	9009      	str	r0, [sp, #36]	; 0x24
 801992c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8019930:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8019932:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8019936:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019938:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801993c:	eb07 080e 	add.w	r8, r7, lr
 8019940:	eb04 0900 	add.w	r9, r4, r0
 8019944:	00f8      	lsls	r0, r7, #3
 8019946:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 801994a:	3504      	adds	r5, #4
 801994c:	4607      	mov	r7, r0
 801994e:	9017      	str	r0, [sp, #92]	; 0x5c
 8019950:	910b      	str	r1, [sp, #44]	; 0x2c
 8019952:	4618      	mov	r0, r3
 8019954:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8019958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801995a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 801995e:	18e3      	adds	r3, r4, r3
 8019960:	9508      	str	r5, [sp, #32]
 8019962:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019964:	910e      	str	r1, [sp, #56]	; 0x38
 8019966:	4621      	mov	r1, r4
 8019968:	eb04 0805 	add.w	r8, r4, r5
 801996c:	9304      	str	r3, [sp, #16]
 801996e:	19e5      	adds	r5, r4, r7
 8019970:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8019974:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019976:	9316      	str	r3, [sp, #88]	; 0x58
 8019978:	190b      	adds	r3, r1, r4
 801997a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801997c:	9505      	str	r5, [sp, #20]
 801997e:	9303      	str	r3, [sp, #12]
 8019980:	f100 0308 	add.w	r3, r0, #8
 8019984:	9707      	str	r7, [sp, #28]
 8019986:	4638      	mov	r0, r7
 8019988:	930f      	str	r3, [sp, #60]	; 0x3c
 801998a:	2301      	movs	r3, #1
 801998c:	9306      	str	r3, [sp, #24]
 801998e:	9b00      	ldr	r3, [sp, #0]
 8019990:	ed90 fa00 	vldr	s30, [r0]
 8019994:	edd0 ba01 	vldr	s23, [r0, #4]
 8019998:	9803      	ldr	r0, [sp, #12]
 801999a:	9903      	ldr	r1, [sp, #12]
 801999c:	ed90 ba01 	vldr	s22, [r0, #4]
 80199a0:	9804      	ldr	r0, [sp, #16]
 80199a2:	edd1 ea00 	vldr	s29, [r1]
 80199a6:	edd0 aa01 	vldr	s21, [r0, #4]
 80199aa:	9805      	ldr	r0, [sp, #20]
 80199ac:	9905      	ldr	r1, [sp, #20]
 80199ae:	edd0 7a01 	vldr	s15, [r0, #4]
 80199b2:	ed91 da00 	vldr	s26, [r1]
 80199b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80199b8:	9c04      	ldr	r4, [sp, #16]
 80199ba:	edcd 7a01 	vstr	s15, [sp, #4]
 80199be:	edd8 7a01 	vldr	s15, [r8, #4]
 80199c2:	9100      	str	r1, [sp, #0]
 80199c4:	edd2 fa00 	vldr	s31, [r2]
 80199c8:	ed94 ea00 	vldr	s28, [r4]
 80199cc:	ed92 ca01 	vldr	s24, [r2, #4]
 80199d0:	f8dd e020 	ldr.w	lr, [sp, #32]
 80199d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80199d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80199d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80199da:	edd9 da00 	vldr	s27, [r9]
 80199de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80199e0:	edd8 ca00 	vldr	s25, [r8]
 80199e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80199e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80199e8:	f8dd c018 	ldr.w	ip, [sp, #24]
 80199ec:	ed99 aa01 	vldr	s20, [r9, #4]
 80199f0:	edcd 7a02 	vstr	s15, [sp, #8]
 80199f4:	9800      	ldr	r0, [sp, #0]
 80199f6:	e001      	b.n	80199fc <arm_radix8_butterfly_f32+0x328>
 80199f8:	3f3504f3 	.word	0x3f3504f3
 80199fc:	edd5 3a00 	vldr	s7, [r5]
 8019a00:	44dc      	add	ip, fp
 8019a02:	ed91 7a00 	vldr	s14, [r1]
 8019a06:	edd4 8a00 	vldr	s17, [r4]
 8019a0a:	45e2      	cmp	sl, ip
 8019a0c:	ed57 7a01 	vldr	s15, [r7, #-4]
 8019a10:	ed90 5a00 	vldr	s10, [r0]
 8019a14:	ed56 5a01 	vldr	s11, [r6, #-4]
 8019a18:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8019a1c:	ed92 1a00 	vldr	s2, [r2]
 8019a20:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8019a24:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8019a28:	ee75 9a25 	vadd.f32	s19, s10, s11
 8019a2c:	ee31 3a07 	vadd.f32	s6, s2, s14
 8019a30:	ed92 8a01 	vldr	s16, [r2, #4]
 8019a34:	ee73 6a84 	vadd.f32	s13, s7, s8
 8019a38:	ee75 5a65 	vsub.f32	s11, s10, s11
 8019a3c:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8019a40:	ee73 1a06 	vadd.f32	s3, s6, s12
 8019a44:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8019a48:	ee75 7a84 	vadd.f32	s15, s11, s8
 8019a4c:	ee31 1a47 	vsub.f32	s2, s2, s14
 8019a50:	ee31 7a85 	vadd.f32	s14, s3, s10
 8019a54:	ee67 7a89 	vmul.f32	s15, s15, s18
 8019a58:	ee33 3a46 	vsub.f32	s6, s6, s12
 8019a5c:	ed82 7a00 	vstr	s14, [r2]
 8019a60:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8019a64:	ed96 6a00 	vldr	s12, [r6]
 8019a68:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8019a6c:	edd5 3a01 	vldr	s7, [r5, #4]
 8019a70:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8019a74:	ed90 7a01 	vldr	s14, [r0, #4]
 8019a78:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8019a7c:	edde 4a00 	vldr	s9, [lr]
 8019a80:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8019a84:	ee77 2a46 	vsub.f32	s5, s14, s12
 8019a88:	edd1 6a01 	vldr	s13, [r1, #4]
 8019a8c:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8019a90:	edd7 0a00 	vldr	s1, [r7]
 8019a94:	ee77 5a06 	vadd.f32	s11, s14, s12
 8019a98:	ed94 7a01 	vldr	s14, [r4, #4]
 8019a9c:	ee33 6aa4 	vadd.f32	s12, s7, s9
 8019aa0:	ee32 0ae7 	vsub.f32	s0, s5, s15
 8019aa4:	ee78 4a66 	vsub.f32	s9, s16, s13
 8019aa8:	ee78 3a26 	vadd.f32	s7, s16, s13
 8019aac:	ee72 2aa7 	vadd.f32	s5, s5, s15
 8019ab0:	ee77 6a20 	vadd.f32	s13, s14, s1
 8019ab4:	ee24 4a09 	vmul.f32	s8, s8, s18
 8019ab8:	ee37 7a60 	vsub.f32	s14, s14, s1
 8019abc:	ee20 8a09 	vmul.f32	s16, s0, s18
 8019ac0:	ee75 0a86 	vadd.f32	s1, s11, s12
 8019ac4:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8019ac8:	ee62 2a89 	vmul.f32	s5, s5, s18
 8019acc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8019ad0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8019ad4:	ee77 7a62 	vsub.f32	s15, s14, s5
 8019ad8:	ee74 5a88 	vadd.f32	s11, s9, s16
 8019adc:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8019ae0:	ee77 4a22 	vadd.f32	s9, s14, s5
 8019ae4:	ee71 2a04 	vadd.f32	s5, s2, s8
 8019ae8:	ee31 7a44 	vsub.f32	s14, s2, s8
 8019aec:	ee30 1a60 	vsub.f32	s2, s0, s1
 8019af0:	ee73 1a06 	vadd.f32	s3, s6, s12
 8019af4:	ee33 6a46 	vsub.f32	s12, s6, s12
 8019af8:	ee33 3ae9 	vsub.f32	s6, s7, s19
 8019afc:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8019b00:	ee38 4a68 	vsub.f32	s8, s16, s17
 8019b04:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8019b08:	ee72 5a25 	vadd.f32	s11, s4, s11
 8019b0c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8019b10:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8019b14:	ee77 2a27 	vadd.f32	s5, s14, s15
 8019b18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019b1c:	ee78 7a88 	vadd.f32	s15, s17, s16
 8019b20:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8019b24:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8019b28:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8019b2c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8019b30:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8019b34:	ee70 0a20 	vadd.f32	s1, s0, s1
 8019b38:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8019b3c:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8019b40:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8019b44:	edc2 0a01 	vstr	s1, [r2, #4]
 8019b48:	ee38 8a88 	vadd.f32	s16, s17, s16
 8019b4c:	441a      	add	r2, r3
 8019b4e:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8019b52:	ee31 5a45 	vsub.f32	s10, s2, s10
 8019b56:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8019b5a:	ed81 8a00 	vstr	s16, [r1]
 8019b5e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8019b62:	ee33 3a61 	vsub.f32	s6, s6, s3
 8019b66:	ed81 5a01 	vstr	s10, [r1, #4]
 8019b6a:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8019b6e:	edcd 3a00 	vstr	s7, [sp]
 8019b72:	ed9d 5a02 	vldr	s10, [sp, #8]
 8019b76:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8019b7a:	eddd 3a01 	vldr	s7, [sp, #4]
 8019b7e:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8019b82:	ed84 0a00 	vstr	s0, [r4]
 8019b86:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019b8a:	ed84 3a01 	vstr	s6, [r4, #4]
 8019b8e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8019b92:	ee23 6a86 	vmul.f32	s12, s7, s12
 8019b96:	eddd 3a00 	vldr	s7, [sp]
 8019b9a:	ee25 5a25 	vmul.f32	s10, s10, s11
 8019b9e:	4419      	add	r1, r3
 8019ba0:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8019ba4:	441c      	add	r4, r3
 8019ba6:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8019baa:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8019bae:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8019bb2:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8019bb6:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8019bba:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8019bbe:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8019bc2:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8019bc6:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8019bca:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8019bce:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8019bd2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8019bd6:	ee38 8a01 	vadd.f32	s16, s16, s2
 8019bda:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8019bde:	ee39 5a85 	vadd.f32	s10, s19, s10
 8019be2:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8019be6:	ed07 8a01 	vstr	s16, [r7, #-4]
 8019bea:	ee30 0a21 	vadd.f32	s0, s0, s3
 8019bee:	ed87 6a00 	vstr	s12, [r7]
 8019bf2:	ee74 2a62 	vsub.f32	s5, s8, s5
 8019bf6:	edc0 0a00 	vstr	s1, [r0]
 8019bfa:	ee33 3a28 	vadd.f32	s6, s6, s17
 8019bfe:	edc0 3a01 	vstr	s7, [r0, #4]
 8019c02:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8019c06:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8019c0a:	edce 4a00 	vstr	s9, [lr]
 8019c0e:	4418      	add	r0, r3
 8019c10:	ed06 0a01 	vstr	s0, [r6, #-4]
 8019c14:	441f      	add	r7, r3
 8019c16:	edc6 2a00 	vstr	s5, [r6]
 8019c1a:	449e      	add	lr, r3
 8019c1c:	ed85 3a00 	vstr	s6, [r5]
 8019c20:	441e      	add	r6, r3
 8019c22:	ed85 7a01 	vstr	s14, [r5, #4]
 8019c26:	441d      	add	r5, r3
 8019c28:	f63f aee8 	bhi.w	80199fc <arm_radix8_butterfly_f32+0x328>
 8019c2c:	9a06      	ldr	r2, [sp, #24]
 8019c2e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019c30:	3201      	adds	r2, #1
 8019c32:	4611      	mov	r1, r2
 8019c34:	9206      	str	r2, [sp, #24]
 8019c36:	9a07      	ldr	r2, [sp, #28]
 8019c38:	4402      	add	r2, r0
 8019c3a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019c3c:	9207      	str	r2, [sp, #28]
 8019c3e:	9a03      	ldr	r2, [sp, #12]
 8019c40:	4402      	add	r2, r0
 8019c42:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019c44:	9203      	str	r2, [sp, #12]
 8019c46:	9a04      	ldr	r2, [sp, #16]
 8019c48:	4402      	add	r2, r0
 8019c4a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019c4c:	9204      	str	r2, [sp, #16]
 8019c4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019c50:	4491      	add	r9, r2
 8019c52:	9a05      	ldr	r2, [sp, #20]
 8019c54:	4402      	add	r2, r0
 8019c56:	9205      	str	r2, [sp, #20]
 8019c58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019c5a:	4490      	add	r8, r2
 8019c5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019c5e:	3208      	adds	r2, #8
 8019c60:	920f      	str	r2, [sp, #60]	; 0x3c
 8019c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019c64:	3208      	adds	r2, #8
 8019c66:	920e      	str	r2, [sp, #56]	; 0x38
 8019c68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019c6a:	3208      	adds	r2, #8
 8019c6c:	920d      	str	r2, [sp, #52]	; 0x34
 8019c6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019c70:	3208      	adds	r2, #8
 8019c72:	920c      	str	r2, [sp, #48]	; 0x30
 8019c74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019c76:	3208      	adds	r2, #8
 8019c78:	920b      	str	r2, [sp, #44]	; 0x2c
 8019c7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019c7c:	3208      	adds	r2, #8
 8019c7e:	920a      	str	r2, [sp, #40]	; 0x28
 8019c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c82:	3208      	adds	r2, #8
 8019c84:	9209      	str	r2, [sp, #36]	; 0x24
 8019c86:	9a08      	ldr	r2, [sp, #32]
 8019c88:	3208      	adds	r2, #8
 8019c8a:	9208      	str	r2, [sp, #32]
 8019c8c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019c8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019c90:	4622      	mov	r2, r4
 8019c92:	4288      	cmp	r0, r1
 8019c94:	d005      	beq.n	8019ca2 <arm_radix8_butterfly_f32+0x5ce>
 8019c96:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019c98:	4621      	mov	r1, r4
 8019c9a:	4401      	add	r1, r0
 8019c9c:	9807      	ldr	r0, [sp, #28]
 8019c9e:	9110      	str	r1, [sp, #64]	; 0x40
 8019ca0:	e676      	b.n	8019990 <arm_radix8_butterfly_f32+0x2bc>
 8019ca2:	4683      	mov	fp, r0
 8019ca4:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 8019ca8:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8019cac:	e522      	b.n	80196f4 <arm_radix8_butterfly_f32+0x20>
 8019cae:	b01d      	add	sp, #116	; 0x74
 8019cb0:	ecbd 8b10 	vpop	{d8-d15}
 8019cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019cb8 <__errno>:
 8019cb8:	4b01      	ldr	r3, [pc, #4]	; (8019cc0 <__errno+0x8>)
 8019cba:	6818      	ldr	r0, [r3, #0]
 8019cbc:	4770      	bx	lr
 8019cbe:	bf00      	nop
 8019cc0:	20000074 	.word	0x20000074

08019cc4 <std>:
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	b510      	push	{r4, lr}
 8019cc8:	4604      	mov	r4, r0
 8019cca:	e9c0 3300 	strd	r3, r3, [r0]
 8019cce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019cd2:	6083      	str	r3, [r0, #8]
 8019cd4:	8181      	strh	r1, [r0, #12]
 8019cd6:	6643      	str	r3, [r0, #100]	; 0x64
 8019cd8:	81c2      	strh	r2, [r0, #14]
 8019cda:	6183      	str	r3, [r0, #24]
 8019cdc:	4619      	mov	r1, r3
 8019cde:	2208      	movs	r2, #8
 8019ce0:	305c      	adds	r0, #92	; 0x5c
 8019ce2:	f000 f92b 	bl	8019f3c <memset>
 8019ce6:	4b05      	ldr	r3, [pc, #20]	; (8019cfc <std+0x38>)
 8019ce8:	6263      	str	r3, [r4, #36]	; 0x24
 8019cea:	4b05      	ldr	r3, [pc, #20]	; (8019d00 <std+0x3c>)
 8019cec:	62a3      	str	r3, [r4, #40]	; 0x28
 8019cee:	4b05      	ldr	r3, [pc, #20]	; (8019d04 <std+0x40>)
 8019cf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019cf2:	4b05      	ldr	r3, [pc, #20]	; (8019d08 <std+0x44>)
 8019cf4:	6224      	str	r4, [r4, #32]
 8019cf6:	6323      	str	r3, [r4, #48]	; 0x30
 8019cf8:	bd10      	pop	{r4, pc}
 8019cfa:	bf00      	nop
 8019cfc:	0801a389 	.word	0x0801a389
 8019d00:	0801a3ab 	.word	0x0801a3ab
 8019d04:	0801a3e3 	.word	0x0801a3e3
 8019d08:	0801a407 	.word	0x0801a407

08019d0c <_cleanup_r>:
 8019d0c:	4901      	ldr	r1, [pc, #4]	; (8019d14 <_cleanup_r+0x8>)
 8019d0e:	f000 b8af 	b.w	8019e70 <_fwalk_reent>
 8019d12:	bf00      	nop
 8019d14:	0801a6e1 	.word	0x0801a6e1

08019d18 <__sfmoreglue>:
 8019d18:	b570      	push	{r4, r5, r6, lr}
 8019d1a:	2268      	movs	r2, #104	; 0x68
 8019d1c:	1e4d      	subs	r5, r1, #1
 8019d1e:	4355      	muls	r5, r2
 8019d20:	460e      	mov	r6, r1
 8019d22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019d26:	f000 f97d 	bl	801a024 <_malloc_r>
 8019d2a:	4604      	mov	r4, r0
 8019d2c:	b140      	cbz	r0, 8019d40 <__sfmoreglue+0x28>
 8019d2e:	2100      	movs	r1, #0
 8019d30:	e9c0 1600 	strd	r1, r6, [r0]
 8019d34:	300c      	adds	r0, #12
 8019d36:	60a0      	str	r0, [r4, #8]
 8019d38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019d3c:	f000 f8fe 	bl	8019f3c <memset>
 8019d40:	4620      	mov	r0, r4
 8019d42:	bd70      	pop	{r4, r5, r6, pc}

08019d44 <__sfp_lock_acquire>:
 8019d44:	4801      	ldr	r0, [pc, #4]	; (8019d4c <__sfp_lock_acquire+0x8>)
 8019d46:	f000 b8d8 	b.w	8019efa <__retarget_lock_acquire_recursive>
 8019d4a:	bf00      	nop
 8019d4c:	2004a2ed 	.word	0x2004a2ed

08019d50 <__sfp_lock_release>:
 8019d50:	4801      	ldr	r0, [pc, #4]	; (8019d58 <__sfp_lock_release+0x8>)
 8019d52:	f000 b8d3 	b.w	8019efc <__retarget_lock_release_recursive>
 8019d56:	bf00      	nop
 8019d58:	2004a2ed 	.word	0x2004a2ed

08019d5c <__sinit_lock_acquire>:
 8019d5c:	4801      	ldr	r0, [pc, #4]	; (8019d64 <__sinit_lock_acquire+0x8>)
 8019d5e:	f000 b8cc 	b.w	8019efa <__retarget_lock_acquire_recursive>
 8019d62:	bf00      	nop
 8019d64:	2004a2ee 	.word	0x2004a2ee

08019d68 <__sinit_lock_release>:
 8019d68:	4801      	ldr	r0, [pc, #4]	; (8019d70 <__sinit_lock_release+0x8>)
 8019d6a:	f000 b8c7 	b.w	8019efc <__retarget_lock_release_recursive>
 8019d6e:	bf00      	nop
 8019d70:	2004a2ee 	.word	0x2004a2ee

08019d74 <__sinit>:
 8019d74:	b510      	push	{r4, lr}
 8019d76:	4604      	mov	r4, r0
 8019d78:	f7ff fff0 	bl	8019d5c <__sinit_lock_acquire>
 8019d7c:	69a3      	ldr	r3, [r4, #24]
 8019d7e:	b11b      	cbz	r3, 8019d88 <__sinit+0x14>
 8019d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d84:	f7ff bff0 	b.w	8019d68 <__sinit_lock_release>
 8019d88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019d8c:	6523      	str	r3, [r4, #80]	; 0x50
 8019d8e:	4b13      	ldr	r3, [pc, #76]	; (8019ddc <__sinit+0x68>)
 8019d90:	4a13      	ldr	r2, [pc, #76]	; (8019de0 <__sinit+0x6c>)
 8019d92:	681b      	ldr	r3, [r3, #0]
 8019d94:	62a2      	str	r2, [r4, #40]	; 0x28
 8019d96:	42a3      	cmp	r3, r4
 8019d98:	bf04      	itt	eq
 8019d9a:	2301      	moveq	r3, #1
 8019d9c:	61a3      	streq	r3, [r4, #24]
 8019d9e:	4620      	mov	r0, r4
 8019da0:	f000 f820 	bl	8019de4 <__sfp>
 8019da4:	6060      	str	r0, [r4, #4]
 8019da6:	4620      	mov	r0, r4
 8019da8:	f000 f81c 	bl	8019de4 <__sfp>
 8019dac:	60a0      	str	r0, [r4, #8]
 8019dae:	4620      	mov	r0, r4
 8019db0:	f000 f818 	bl	8019de4 <__sfp>
 8019db4:	2200      	movs	r2, #0
 8019db6:	60e0      	str	r0, [r4, #12]
 8019db8:	2104      	movs	r1, #4
 8019dba:	6860      	ldr	r0, [r4, #4]
 8019dbc:	f7ff ff82 	bl	8019cc4 <std>
 8019dc0:	68a0      	ldr	r0, [r4, #8]
 8019dc2:	2201      	movs	r2, #1
 8019dc4:	2109      	movs	r1, #9
 8019dc6:	f7ff ff7d 	bl	8019cc4 <std>
 8019dca:	68e0      	ldr	r0, [r4, #12]
 8019dcc:	2202      	movs	r2, #2
 8019dce:	2112      	movs	r1, #18
 8019dd0:	f7ff ff78 	bl	8019cc4 <std>
 8019dd4:	2301      	movs	r3, #1
 8019dd6:	61a3      	str	r3, [r4, #24]
 8019dd8:	e7d2      	b.n	8019d80 <__sinit+0xc>
 8019dda:	bf00      	nop
 8019ddc:	08031ffc 	.word	0x08031ffc
 8019de0:	08019d0d 	.word	0x08019d0d

08019de4 <__sfp>:
 8019de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019de6:	4607      	mov	r7, r0
 8019de8:	f7ff ffac 	bl	8019d44 <__sfp_lock_acquire>
 8019dec:	4b1e      	ldr	r3, [pc, #120]	; (8019e68 <__sfp+0x84>)
 8019dee:	681e      	ldr	r6, [r3, #0]
 8019df0:	69b3      	ldr	r3, [r6, #24]
 8019df2:	b913      	cbnz	r3, 8019dfa <__sfp+0x16>
 8019df4:	4630      	mov	r0, r6
 8019df6:	f7ff ffbd 	bl	8019d74 <__sinit>
 8019dfa:	3648      	adds	r6, #72	; 0x48
 8019dfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019e00:	3b01      	subs	r3, #1
 8019e02:	d503      	bpl.n	8019e0c <__sfp+0x28>
 8019e04:	6833      	ldr	r3, [r6, #0]
 8019e06:	b30b      	cbz	r3, 8019e4c <__sfp+0x68>
 8019e08:	6836      	ldr	r6, [r6, #0]
 8019e0a:	e7f7      	b.n	8019dfc <__sfp+0x18>
 8019e0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019e10:	b9d5      	cbnz	r5, 8019e48 <__sfp+0x64>
 8019e12:	4b16      	ldr	r3, [pc, #88]	; (8019e6c <__sfp+0x88>)
 8019e14:	60e3      	str	r3, [r4, #12]
 8019e16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019e1a:	6665      	str	r5, [r4, #100]	; 0x64
 8019e1c:	f000 f86c 	bl	8019ef8 <__retarget_lock_init_recursive>
 8019e20:	f7ff ff96 	bl	8019d50 <__sfp_lock_release>
 8019e24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019e28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019e2c:	6025      	str	r5, [r4, #0]
 8019e2e:	61a5      	str	r5, [r4, #24]
 8019e30:	2208      	movs	r2, #8
 8019e32:	4629      	mov	r1, r5
 8019e34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019e38:	f000 f880 	bl	8019f3c <memset>
 8019e3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019e40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019e44:	4620      	mov	r0, r4
 8019e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e48:	3468      	adds	r4, #104	; 0x68
 8019e4a:	e7d9      	b.n	8019e00 <__sfp+0x1c>
 8019e4c:	2104      	movs	r1, #4
 8019e4e:	4638      	mov	r0, r7
 8019e50:	f7ff ff62 	bl	8019d18 <__sfmoreglue>
 8019e54:	4604      	mov	r4, r0
 8019e56:	6030      	str	r0, [r6, #0]
 8019e58:	2800      	cmp	r0, #0
 8019e5a:	d1d5      	bne.n	8019e08 <__sfp+0x24>
 8019e5c:	f7ff ff78 	bl	8019d50 <__sfp_lock_release>
 8019e60:	230c      	movs	r3, #12
 8019e62:	603b      	str	r3, [r7, #0]
 8019e64:	e7ee      	b.n	8019e44 <__sfp+0x60>
 8019e66:	bf00      	nop
 8019e68:	08031ffc 	.word	0x08031ffc
 8019e6c:	ffff0001 	.word	0xffff0001

08019e70 <_fwalk_reent>:
 8019e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e74:	4606      	mov	r6, r0
 8019e76:	4688      	mov	r8, r1
 8019e78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019e7c:	2700      	movs	r7, #0
 8019e7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019e82:	f1b9 0901 	subs.w	r9, r9, #1
 8019e86:	d505      	bpl.n	8019e94 <_fwalk_reent+0x24>
 8019e88:	6824      	ldr	r4, [r4, #0]
 8019e8a:	2c00      	cmp	r4, #0
 8019e8c:	d1f7      	bne.n	8019e7e <_fwalk_reent+0xe>
 8019e8e:	4638      	mov	r0, r7
 8019e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e94:	89ab      	ldrh	r3, [r5, #12]
 8019e96:	2b01      	cmp	r3, #1
 8019e98:	d907      	bls.n	8019eaa <_fwalk_reent+0x3a>
 8019e9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019e9e:	3301      	adds	r3, #1
 8019ea0:	d003      	beq.n	8019eaa <_fwalk_reent+0x3a>
 8019ea2:	4629      	mov	r1, r5
 8019ea4:	4630      	mov	r0, r6
 8019ea6:	47c0      	blx	r8
 8019ea8:	4307      	orrs	r7, r0
 8019eaa:	3568      	adds	r5, #104	; 0x68
 8019eac:	e7e9      	b.n	8019e82 <_fwalk_reent+0x12>
	...

08019eb0 <__libc_init_array>:
 8019eb0:	b570      	push	{r4, r5, r6, lr}
 8019eb2:	4d0d      	ldr	r5, [pc, #52]	; (8019ee8 <__libc_init_array+0x38>)
 8019eb4:	4c0d      	ldr	r4, [pc, #52]	; (8019eec <__libc_init_array+0x3c>)
 8019eb6:	1b64      	subs	r4, r4, r5
 8019eb8:	10a4      	asrs	r4, r4, #2
 8019eba:	2600      	movs	r6, #0
 8019ebc:	42a6      	cmp	r6, r4
 8019ebe:	d109      	bne.n	8019ed4 <__libc_init_array+0x24>
 8019ec0:	4d0b      	ldr	r5, [pc, #44]	; (8019ef0 <__libc_init_array+0x40>)
 8019ec2:	4c0c      	ldr	r4, [pc, #48]	; (8019ef4 <__libc_init_array+0x44>)
 8019ec4:	f002 fd6e 	bl	801c9a4 <_init>
 8019ec8:	1b64      	subs	r4, r4, r5
 8019eca:	10a4      	asrs	r4, r4, #2
 8019ecc:	2600      	movs	r6, #0
 8019ece:	42a6      	cmp	r6, r4
 8019ed0:	d105      	bne.n	8019ede <__libc_init_array+0x2e>
 8019ed2:	bd70      	pop	{r4, r5, r6, pc}
 8019ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ed8:	4798      	blx	r3
 8019eda:	3601      	adds	r6, #1
 8019edc:	e7ee      	b.n	8019ebc <__libc_init_array+0xc>
 8019ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ee2:	4798      	blx	r3
 8019ee4:	3601      	adds	r6, #1
 8019ee6:	e7f2      	b.n	8019ece <__libc_init_array+0x1e>
 8019ee8:	08032218 	.word	0x08032218
 8019eec:	08032218 	.word	0x08032218
 8019ef0:	08032218 	.word	0x08032218
 8019ef4:	0803221c 	.word	0x0803221c

08019ef8 <__retarget_lock_init_recursive>:
 8019ef8:	4770      	bx	lr

08019efa <__retarget_lock_acquire_recursive>:
 8019efa:	4770      	bx	lr

08019efc <__retarget_lock_release_recursive>:
 8019efc:	4770      	bx	lr
	...

08019f00 <malloc>:
 8019f00:	4b02      	ldr	r3, [pc, #8]	; (8019f0c <malloc+0xc>)
 8019f02:	4601      	mov	r1, r0
 8019f04:	6818      	ldr	r0, [r3, #0]
 8019f06:	f000 b88d 	b.w	801a024 <_malloc_r>
 8019f0a:	bf00      	nop
 8019f0c:	20000074 	.word	0x20000074

08019f10 <free>:
 8019f10:	4b02      	ldr	r3, [pc, #8]	; (8019f1c <free+0xc>)
 8019f12:	4601      	mov	r1, r0
 8019f14:	6818      	ldr	r0, [r3, #0]
 8019f16:	f000 b819 	b.w	8019f4c <_free_r>
 8019f1a:	bf00      	nop
 8019f1c:	20000074 	.word	0x20000074

08019f20 <memcpy>:
 8019f20:	440a      	add	r2, r1
 8019f22:	4291      	cmp	r1, r2
 8019f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8019f28:	d100      	bne.n	8019f2c <memcpy+0xc>
 8019f2a:	4770      	bx	lr
 8019f2c:	b510      	push	{r4, lr}
 8019f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019f36:	4291      	cmp	r1, r2
 8019f38:	d1f9      	bne.n	8019f2e <memcpy+0xe>
 8019f3a:	bd10      	pop	{r4, pc}

08019f3c <memset>:
 8019f3c:	4402      	add	r2, r0
 8019f3e:	4603      	mov	r3, r0
 8019f40:	4293      	cmp	r3, r2
 8019f42:	d100      	bne.n	8019f46 <memset+0xa>
 8019f44:	4770      	bx	lr
 8019f46:	f803 1b01 	strb.w	r1, [r3], #1
 8019f4a:	e7f9      	b.n	8019f40 <memset+0x4>

08019f4c <_free_r>:
 8019f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019f4e:	2900      	cmp	r1, #0
 8019f50:	d044      	beq.n	8019fdc <_free_r+0x90>
 8019f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019f56:	9001      	str	r0, [sp, #4]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8019f5e:	bfb8      	it	lt
 8019f60:	18e4      	addlt	r4, r4, r3
 8019f62:	f000 fc71 	bl	801a848 <__malloc_lock>
 8019f66:	4a1e      	ldr	r2, [pc, #120]	; (8019fe0 <_free_r+0x94>)
 8019f68:	9801      	ldr	r0, [sp, #4]
 8019f6a:	6813      	ldr	r3, [r2, #0]
 8019f6c:	b933      	cbnz	r3, 8019f7c <_free_r+0x30>
 8019f6e:	6063      	str	r3, [r4, #4]
 8019f70:	6014      	str	r4, [r2, #0]
 8019f72:	b003      	add	sp, #12
 8019f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f78:	f000 bc6c 	b.w	801a854 <__malloc_unlock>
 8019f7c:	42a3      	cmp	r3, r4
 8019f7e:	d908      	bls.n	8019f92 <_free_r+0x46>
 8019f80:	6825      	ldr	r5, [r4, #0]
 8019f82:	1961      	adds	r1, r4, r5
 8019f84:	428b      	cmp	r3, r1
 8019f86:	bf01      	itttt	eq
 8019f88:	6819      	ldreq	r1, [r3, #0]
 8019f8a:	685b      	ldreq	r3, [r3, #4]
 8019f8c:	1949      	addeq	r1, r1, r5
 8019f8e:	6021      	streq	r1, [r4, #0]
 8019f90:	e7ed      	b.n	8019f6e <_free_r+0x22>
 8019f92:	461a      	mov	r2, r3
 8019f94:	685b      	ldr	r3, [r3, #4]
 8019f96:	b10b      	cbz	r3, 8019f9c <_free_r+0x50>
 8019f98:	42a3      	cmp	r3, r4
 8019f9a:	d9fa      	bls.n	8019f92 <_free_r+0x46>
 8019f9c:	6811      	ldr	r1, [r2, #0]
 8019f9e:	1855      	adds	r5, r2, r1
 8019fa0:	42a5      	cmp	r5, r4
 8019fa2:	d10b      	bne.n	8019fbc <_free_r+0x70>
 8019fa4:	6824      	ldr	r4, [r4, #0]
 8019fa6:	4421      	add	r1, r4
 8019fa8:	1854      	adds	r4, r2, r1
 8019faa:	42a3      	cmp	r3, r4
 8019fac:	6011      	str	r1, [r2, #0]
 8019fae:	d1e0      	bne.n	8019f72 <_free_r+0x26>
 8019fb0:	681c      	ldr	r4, [r3, #0]
 8019fb2:	685b      	ldr	r3, [r3, #4]
 8019fb4:	6053      	str	r3, [r2, #4]
 8019fb6:	4421      	add	r1, r4
 8019fb8:	6011      	str	r1, [r2, #0]
 8019fba:	e7da      	b.n	8019f72 <_free_r+0x26>
 8019fbc:	d902      	bls.n	8019fc4 <_free_r+0x78>
 8019fbe:	230c      	movs	r3, #12
 8019fc0:	6003      	str	r3, [r0, #0]
 8019fc2:	e7d6      	b.n	8019f72 <_free_r+0x26>
 8019fc4:	6825      	ldr	r5, [r4, #0]
 8019fc6:	1961      	adds	r1, r4, r5
 8019fc8:	428b      	cmp	r3, r1
 8019fca:	bf04      	itt	eq
 8019fcc:	6819      	ldreq	r1, [r3, #0]
 8019fce:	685b      	ldreq	r3, [r3, #4]
 8019fd0:	6063      	str	r3, [r4, #4]
 8019fd2:	bf04      	itt	eq
 8019fd4:	1949      	addeq	r1, r1, r5
 8019fd6:	6021      	streq	r1, [r4, #0]
 8019fd8:	6054      	str	r4, [r2, #4]
 8019fda:	e7ca      	b.n	8019f72 <_free_r+0x26>
 8019fdc:	b003      	add	sp, #12
 8019fde:	bd30      	pop	{r4, r5, pc}
 8019fe0:	2004a2f0 	.word	0x2004a2f0

08019fe4 <sbrk_aligned>:
 8019fe4:	b570      	push	{r4, r5, r6, lr}
 8019fe6:	4e0e      	ldr	r6, [pc, #56]	; (801a020 <sbrk_aligned+0x3c>)
 8019fe8:	460c      	mov	r4, r1
 8019fea:	6831      	ldr	r1, [r6, #0]
 8019fec:	4605      	mov	r5, r0
 8019fee:	b911      	cbnz	r1, 8019ff6 <sbrk_aligned+0x12>
 8019ff0:	f000 f99a 	bl	801a328 <_sbrk_r>
 8019ff4:	6030      	str	r0, [r6, #0]
 8019ff6:	4621      	mov	r1, r4
 8019ff8:	4628      	mov	r0, r5
 8019ffa:	f000 f995 	bl	801a328 <_sbrk_r>
 8019ffe:	1c43      	adds	r3, r0, #1
 801a000:	d00a      	beq.n	801a018 <sbrk_aligned+0x34>
 801a002:	1cc4      	adds	r4, r0, #3
 801a004:	f024 0403 	bic.w	r4, r4, #3
 801a008:	42a0      	cmp	r0, r4
 801a00a:	d007      	beq.n	801a01c <sbrk_aligned+0x38>
 801a00c:	1a21      	subs	r1, r4, r0
 801a00e:	4628      	mov	r0, r5
 801a010:	f000 f98a 	bl	801a328 <_sbrk_r>
 801a014:	3001      	adds	r0, #1
 801a016:	d101      	bne.n	801a01c <sbrk_aligned+0x38>
 801a018:	f04f 34ff 	mov.w	r4, #4294967295
 801a01c:	4620      	mov	r0, r4
 801a01e:	bd70      	pop	{r4, r5, r6, pc}
 801a020:	2004a2f4 	.word	0x2004a2f4

0801a024 <_malloc_r>:
 801a024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a028:	1ccd      	adds	r5, r1, #3
 801a02a:	f025 0503 	bic.w	r5, r5, #3
 801a02e:	3508      	adds	r5, #8
 801a030:	2d0c      	cmp	r5, #12
 801a032:	bf38      	it	cc
 801a034:	250c      	movcc	r5, #12
 801a036:	2d00      	cmp	r5, #0
 801a038:	4607      	mov	r7, r0
 801a03a:	db01      	blt.n	801a040 <_malloc_r+0x1c>
 801a03c:	42a9      	cmp	r1, r5
 801a03e:	d905      	bls.n	801a04c <_malloc_r+0x28>
 801a040:	230c      	movs	r3, #12
 801a042:	603b      	str	r3, [r7, #0]
 801a044:	2600      	movs	r6, #0
 801a046:	4630      	mov	r0, r6
 801a048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a04c:	4e2e      	ldr	r6, [pc, #184]	; (801a108 <_malloc_r+0xe4>)
 801a04e:	f000 fbfb 	bl	801a848 <__malloc_lock>
 801a052:	6833      	ldr	r3, [r6, #0]
 801a054:	461c      	mov	r4, r3
 801a056:	bb34      	cbnz	r4, 801a0a6 <_malloc_r+0x82>
 801a058:	4629      	mov	r1, r5
 801a05a:	4638      	mov	r0, r7
 801a05c:	f7ff ffc2 	bl	8019fe4 <sbrk_aligned>
 801a060:	1c43      	adds	r3, r0, #1
 801a062:	4604      	mov	r4, r0
 801a064:	d14d      	bne.n	801a102 <_malloc_r+0xde>
 801a066:	6834      	ldr	r4, [r6, #0]
 801a068:	4626      	mov	r6, r4
 801a06a:	2e00      	cmp	r6, #0
 801a06c:	d140      	bne.n	801a0f0 <_malloc_r+0xcc>
 801a06e:	6823      	ldr	r3, [r4, #0]
 801a070:	4631      	mov	r1, r6
 801a072:	4638      	mov	r0, r7
 801a074:	eb04 0803 	add.w	r8, r4, r3
 801a078:	f000 f956 	bl	801a328 <_sbrk_r>
 801a07c:	4580      	cmp	r8, r0
 801a07e:	d13a      	bne.n	801a0f6 <_malloc_r+0xd2>
 801a080:	6821      	ldr	r1, [r4, #0]
 801a082:	3503      	adds	r5, #3
 801a084:	1a6d      	subs	r5, r5, r1
 801a086:	f025 0503 	bic.w	r5, r5, #3
 801a08a:	3508      	adds	r5, #8
 801a08c:	2d0c      	cmp	r5, #12
 801a08e:	bf38      	it	cc
 801a090:	250c      	movcc	r5, #12
 801a092:	4629      	mov	r1, r5
 801a094:	4638      	mov	r0, r7
 801a096:	f7ff ffa5 	bl	8019fe4 <sbrk_aligned>
 801a09a:	3001      	adds	r0, #1
 801a09c:	d02b      	beq.n	801a0f6 <_malloc_r+0xd2>
 801a09e:	6823      	ldr	r3, [r4, #0]
 801a0a0:	442b      	add	r3, r5
 801a0a2:	6023      	str	r3, [r4, #0]
 801a0a4:	e00e      	b.n	801a0c4 <_malloc_r+0xa0>
 801a0a6:	6822      	ldr	r2, [r4, #0]
 801a0a8:	1b52      	subs	r2, r2, r5
 801a0aa:	d41e      	bmi.n	801a0ea <_malloc_r+0xc6>
 801a0ac:	2a0b      	cmp	r2, #11
 801a0ae:	d916      	bls.n	801a0de <_malloc_r+0xba>
 801a0b0:	1961      	adds	r1, r4, r5
 801a0b2:	42a3      	cmp	r3, r4
 801a0b4:	6025      	str	r5, [r4, #0]
 801a0b6:	bf18      	it	ne
 801a0b8:	6059      	strne	r1, [r3, #4]
 801a0ba:	6863      	ldr	r3, [r4, #4]
 801a0bc:	bf08      	it	eq
 801a0be:	6031      	streq	r1, [r6, #0]
 801a0c0:	5162      	str	r2, [r4, r5]
 801a0c2:	604b      	str	r3, [r1, #4]
 801a0c4:	4638      	mov	r0, r7
 801a0c6:	f104 060b 	add.w	r6, r4, #11
 801a0ca:	f000 fbc3 	bl	801a854 <__malloc_unlock>
 801a0ce:	f026 0607 	bic.w	r6, r6, #7
 801a0d2:	1d23      	adds	r3, r4, #4
 801a0d4:	1af2      	subs	r2, r6, r3
 801a0d6:	d0b6      	beq.n	801a046 <_malloc_r+0x22>
 801a0d8:	1b9b      	subs	r3, r3, r6
 801a0da:	50a3      	str	r3, [r4, r2]
 801a0dc:	e7b3      	b.n	801a046 <_malloc_r+0x22>
 801a0de:	6862      	ldr	r2, [r4, #4]
 801a0e0:	42a3      	cmp	r3, r4
 801a0e2:	bf0c      	ite	eq
 801a0e4:	6032      	streq	r2, [r6, #0]
 801a0e6:	605a      	strne	r2, [r3, #4]
 801a0e8:	e7ec      	b.n	801a0c4 <_malloc_r+0xa0>
 801a0ea:	4623      	mov	r3, r4
 801a0ec:	6864      	ldr	r4, [r4, #4]
 801a0ee:	e7b2      	b.n	801a056 <_malloc_r+0x32>
 801a0f0:	4634      	mov	r4, r6
 801a0f2:	6876      	ldr	r6, [r6, #4]
 801a0f4:	e7b9      	b.n	801a06a <_malloc_r+0x46>
 801a0f6:	230c      	movs	r3, #12
 801a0f8:	603b      	str	r3, [r7, #0]
 801a0fa:	4638      	mov	r0, r7
 801a0fc:	f000 fbaa 	bl	801a854 <__malloc_unlock>
 801a100:	e7a1      	b.n	801a046 <_malloc_r+0x22>
 801a102:	6025      	str	r5, [r4, #0]
 801a104:	e7de      	b.n	801a0c4 <_malloc_r+0xa0>
 801a106:	bf00      	nop
 801a108:	2004a2f0 	.word	0x2004a2f0

0801a10c <iprintf>:
 801a10c:	b40f      	push	{r0, r1, r2, r3}
 801a10e:	4b0a      	ldr	r3, [pc, #40]	; (801a138 <iprintf+0x2c>)
 801a110:	b513      	push	{r0, r1, r4, lr}
 801a112:	681c      	ldr	r4, [r3, #0]
 801a114:	b124      	cbz	r4, 801a120 <iprintf+0x14>
 801a116:	69a3      	ldr	r3, [r4, #24]
 801a118:	b913      	cbnz	r3, 801a120 <iprintf+0x14>
 801a11a:	4620      	mov	r0, r4
 801a11c:	f7ff fe2a 	bl	8019d74 <__sinit>
 801a120:	ab05      	add	r3, sp, #20
 801a122:	9a04      	ldr	r2, [sp, #16]
 801a124:	68a1      	ldr	r1, [r4, #8]
 801a126:	9301      	str	r3, [sp, #4]
 801a128:	4620      	mov	r0, r4
 801a12a:	f000 fd4d 	bl	801abc8 <_vfiprintf_r>
 801a12e:	b002      	add	sp, #8
 801a130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a134:	b004      	add	sp, #16
 801a136:	4770      	bx	lr
 801a138:	20000074 	.word	0x20000074

0801a13c <putchar>:
 801a13c:	4b09      	ldr	r3, [pc, #36]	; (801a164 <putchar+0x28>)
 801a13e:	b513      	push	{r0, r1, r4, lr}
 801a140:	681c      	ldr	r4, [r3, #0]
 801a142:	4601      	mov	r1, r0
 801a144:	b134      	cbz	r4, 801a154 <putchar+0x18>
 801a146:	69a3      	ldr	r3, [r4, #24]
 801a148:	b923      	cbnz	r3, 801a154 <putchar+0x18>
 801a14a:	9001      	str	r0, [sp, #4]
 801a14c:	4620      	mov	r0, r4
 801a14e:	f7ff fe11 	bl	8019d74 <__sinit>
 801a152:	9901      	ldr	r1, [sp, #4]
 801a154:	68a2      	ldr	r2, [r4, #8]
 801a156:	4620      	mov	r0, r4
 801a158:	b002      	add	sp, #8
 801a15a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a15e:	f000 bff7 	b.w	801b150 <_putc_r>
 801a162:	bf00      	nop
 801a164:	20000074 	.word	0x20000074

0801a168 <_puts_r>:
 801a168:	b570      	push	{r4, r5, r6, lr}
 801a16a:	460e      	mov	r6, r1
 801a16c:	4605      	mov	r5, r0
 801a16e:	b118      	cbz	r0, 801a178 <_puts_r+0x10>
 801a170:	6983      	ldr	r3, [r0, #24]
 801a172:	b90b      	cbnz	r3, 801a178 <_puts_r+0x10>
 801a174:	f7ff fdfe 	bl	8019d74 <__sinit>
 801a178:	69ab      	ldr	r3, [r5, #24]
 801a17a:	68ac      	ldr	r4, [r5, #8]
 801a17c:	b913      	cbnz	r3, 801a184 <_puts_r+0x1c>
 801a17e:	4628      	mov	r0, r5
 801a180:	f7ff fdf8 	bl	8019d74 <__sinit>
 801a184:	4b2c      	ldr	r3, [pc, #176]	; (801a238 <_puts_r+0xd0>)
 801a186:	429c      	cmp	r4, r3
 801a188:	d120      	bne.n	801a1cc <_puts_r+0x64>
 801a18a:	686c      	ldr	r4, [r5, #4]
 801a18c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a18e:	07db      	lsls	r3, r3, #31
 801a190:	d405      	bmi.n	801a19e <_puts_r+0x36>
 801a192:	89a3      	ldrh	r3, [r4, #12]
 801a194:	0598      	lsls	r0, r3, #22
 801a196:	d402      	bmi.n	801a19e <_puts_r+0x36>
 801a198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a19a:	f7ff feae 	bl	8019efa <__retarget_lock_acquire_recursive>
 801a19e:	89a3      	ldrh	r3, [r4, #12]
 801a1a0:	0719      	lsls	r1, r3, #28
 801a1a2:	d51d      	bpl.n	801a1e0 <_puts_r+0x78>
 801a1a4:	6923      	ldr	r3, [r4, #16]
 801a1a6:	b1db      	cbz	r3, 801a1e0 <_puts_r+0x78>
 801a1a8:	3e01      	subs	r6, #1
 801a1aa:	68a3      	ldr	r3, [r4, #8]
 801a1ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a1b0:	3b01      	subs	r3, #1
 801a1b2:	60a3      	str	r3, [r4, #8]
 801a1b4:	bb39      	cbnz	r1, 801a206 <_puts_r+0x9e>
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	da38      	bge.n	801a22c <_puts_r+0xc4>
 801a1ba:	4622      	mov	r2, r4
 801a1bc:	210a      	movs	r1, #10
 801a1be:	4628      	mov	r0, r5
 801a1c0:	f000 f926 	bl	801a410 <__swbuf_r>
 801a1c4:	3001      	adds	r0, #1
 801a1c6:	d011      	beq.n	801a1ec <_puts_r+0x84>
 801a1c8:	250a      	movs	r5, #10
 801a1ca:	e011      	b.n	801a1f0 <_puts_r+0x88>
 801a1cc:	4b1b      	ldr	r3, [pc, #108]	; (801a23c <_puts_r+0xd4>)
 801a1ce:	429c      	cmp	r4, r3
 801a1d0:	d101      	bne.n	801a1d6 <_puts_r+0x6e>
 801a1d2:	68ac      	ldr	r4, [r5, #8]
 801a1d4:	e7da      	b.n	801a18c <_puts_r+0x24>
 801a1d6:	4b1a      	ldr	r3, [pc, #104]	; (801a240 <_puts_r+0xd8>)
 801a1d8:	429c      	cmp	r4, r3
 801a1da:	bf08      	it	eq
 801a1dc:	68ec      	ldreq	r4, [r5, #12]
 801a1de:	e7d5      	b.n	801a18c <_puts_r+0x24>
 801a1e0:	4621      	mov	r1, r4
 801a1e2:	4628      	mov	r0, r5
 801a1e4:	f000 f978 	bl	801a4d8 <__swsetup_r>
 801a1e8:	2800      	cmp	r0, #0
 801a1ea:	d0dd      	beq.n	801a1a8 <_puts_r+0x40>
 801a1ec:	f04f 35ff 	mov.w	r5, #4294967295
 801a1f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a1f2:	07da      	lsls	r2, r3, #31
 801a1f4:	d405      	bmi.n	801a202 <_puts_r+0x9a>
 801a1f6:	89a3      	ldrh	r3, [r4, #12]
 801a1f8:	059b      	lsls	r3, r3, #22
 801a1fa:	d402      	bmi.n	801a202 <_puts_r+0x9a>
 801a1fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a1fe:	f7ff fe7d 	bl	8019efc <__retarget_lock_release_recursive>
 801a202:	4628      	mov	r0, r5
 801a204:	bd70      	pop	{r4, r5, r6, pc}
 801a206:	2b00      	cmp	r3, #0
 801a208:	da04      	bge.n	801a214 <_puts_r+0xac>
 801a20a:	69a2      	ldr	r2, [r4, #24]
 801a20c:	429a      	cmp	r2, r3
 801a20e:	dc06      	bgt.n	801a21e <_puts_r+0xb6>
 801a210:	290a      	cmp	r1, #10
 801a212:	d004      	beq.n	801a21e <_puts_r+0xb6>
 801a214:	6823      	ldr	r3, [r4, #0]
 801a216:	1c5a      	adds	r2, r3, #1
 801a218:	6022      	str	r2, [r4, #0]
 801a21a:	7019      	strb	r1, [r3, #0]
 801a21c:	e7c5      	b.n	801a1aa <_puts_r+0x42>
 801a21e:	4622      	mov	r2, r4
 801a220:	4628      	mov	r0, r5
 801a222:	f000 f8f5 	bl	801a410 <__swbuf_r>
 801a226:	3001      	adds	r0, #1
 801a228:	d1bf      	bne.n	801a1aa <_puts_r+0x42>
 801a22a:	e7df      	b.n	801a1ec <_puts_r+0x84>
 801a22c:	6823      	ldr	r3, [r4, #0]
 801a22e:	250a      	movs	r5, #10
 801a230:	1c5a      	adds	r2, r3, #1
 801a232:	6022      	str	r2, [r4, #0]
 801a234:	701d      	strb	r5, [r3, #0]
 801a236:	e7db      	b.n	801a1f0 <_puts_r+0x88>
 801a238:	08031fbc 	.word	0x08031fbc
 801a23c:	08031fdc 	.word	0x08031fdc
 801a240:	08031f9c 	.word	0x08031f9c

0801a244 <puts>:
 801a244:	4b02      	ldr	r3, [pc, #8]	; (801a250 <puts+0xc>)
 801a246:	4601      	mov	r1, r0
 801a248:	6818      	ldr	r0, [r3, #0]
 801a24a:	f7ff bf8d 	b.w	801a168 <_puts_r>
 801a24e:	bf00      	nop
 801a250:	20000074 	.word	0x20000074

0801a254 <cleanup_glue>:
 801a254:	b538      	push	{r3, r4, r5, lr}
 801a256:	460c      	mov	r4, r1
 801a258:	6809      	ldr	r1, [r1, #0]
 801a25a:	4605      	mov	r5, r0
 801a25c:	b109      	cbz	r1, 801a262 <cleanup_glue+0xe>
 801a25e:	f7ff fff9 	bl	801a254 <cleanup_glue>
 801a262:	4621      	mov	r1, r4
 801a264:	4628      	mov	r0, r5
 801a266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a26a:	f7ff be6f 	b.w	8019f4c <_free_r>
	...

0801a270 <_reclaim_reent>:
 801a270:	4b2c      	ldr	r3, [pc, #176]	; (801a324 <_reclaim_reent+0xb4>)
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	4283      	cmp	r3, r0
 801a276:	b570      	push	{r4, r5, r6, lr}
 801a278:	4604      	mov	r4, r0
 801a27a:	d051      	beq.n	801a320 <_reclaim_reent+0xb0>
 801a27c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a27e:	b143      	cbz	r3, 801a292 <_reclaim_reent+0x22>
 801a280:	68db      	ldr	r3, [r3, #12]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d14a      	bne.n	801a31c <_reclaim_reent+0xac>
 801a286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a288:	6819      	ldr	r1, [r3, #0]
 801a28a:	b111      	cbz	r1, 801a292 <_reclaim_reent+0x22>
 801a28c:	4620      	mov	r0, r4
 801a28e:	f7ff fe5d 	bl	8019f4c <_free_r>
 801a292:	6961      	ldr	r1, [r4, #20]
 801a294:	b111      	cbz	r1, 801a29c <_reclaim_reent+0x2c>
 801a296:	4620      	mov	r0, r4
 801a298:	f7ff fe58 	bl	8019f4c <_free_r>
 801a29c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a29e:	b111      	cbz	r1, 801a2a6 <_reclaim_reent+0x36>
 801a2a0:	4620      	mov	r0, r4
 801a2a2:	f7ff fe53 	bl	8019f4c <_free_r>
 801a2a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a2a8:	b111      	cbz	r1, 801a2b0 <_reclaim_reent+0x40>
 801a2aa:	4620      	mov	r0, r4
 801a2ac:	f7ff fe4e 	bl	8019f4c <_free_r>
 801a2b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a2b2:	b111      	cbz	r1, 801a2ba <_reclaim_reent+0x4a>
 801a2b4:	4620      	mov	r0, r4
 801a2b6:	f7ff fe49 	bl	8019f4c <_free_r>
 801a2ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801a2bc:	b111      	cbz	r1, 801a2c4 <_reclaim_reent+0x54>
 801a2be:	4620      	mov	r0, r4
 801a2c0:	f7ff fe44 	bl	8019f4c <_free_r>
 801a2c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801a2c6:	b111      	cbz	r1, 801a2ce <_reclaim_reent+0x5e>
 801a2c8:	4620      	mov	r0, r4
 801a2ca:	f7ff fe3f 	bl	8019f4c <_free_r>
 801a2ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a2d0:	b111      	cbz	r1, 801a2d8 <_reclaim_reent+0x68>
 801a2d2:	4620      	mov	r0, r4
 801a2d4:	f7ff fe3a 	bl	8019f4c <_free_r>
 801a2d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a2da:	b111      	cbz	r1, 801a2e2 <_reclaim_reent+0x72>
 801a2dc:	4620      	mov	r0, r4
 801a2de:	f7ff fe35 	bl	8019f4c <_free_r>
 801a2e2:	69a3      	ldr	r3, [r4, #24]
 801a2e4:	b1e3      	cbz	r3, 801a320 <_reclaim_reent+0xb0>
 801a2e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a2e8:	4620      	mov	r0, r4
 801a2ea:	4798      	blx	r3
 801a2ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a2ee:	b1b9      	cbz	r1, 801a320 <_reclaim_reent+0xb0>
 801a2f0:	4620      	mov	r0, r4
 801a2f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2f6:	f7ff bfad 	b.w	801a254 <cleanup_glue>
 801a2fa:	5949      	ldr	r1, [r1, r5]
 801a2fc:	b941      	cbnz	r1, 801a310 <_reclaim_reent+0xa0>
 801a2fe:	3504      	adds	r5, #4
 801a300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a302:	2d80      	cmp	r5, #128	; 0x80
 801a304:	68d9      	ldr	r1, [r3, #12]
 801a306:	d1f8      	bne.n	801a2fa <_reclaim_reent+0x8a>
 801a308:	4620      	mov	r0, r4
 801a30a:	f7ff fe1f 	bl	8019f4c <_free_r>
 801a30e:	e7ba      	b.n	801a286 <_reclaim_reent+0x16>
 801a310:	680e      	ldr	r6, [r1, #0]
 801a312:	4620      	mov	r0, r4
 801a314:	f7ff fe1a 	bl	8019f4c <_free_r>
 801a318:	4631      	mov	r1, r6
 801a31a:	e7ef      	b.n	801a2fc <_reclaim_reent+0x8c>
 801a31c:	2500      	movs	r5, #0
 801a31e:	e7ef      	b.n	801a300 <_reclaim_reent+0x90>
 801a320:	bd70      	pop	{r4, r5, r6, pc}
 801a322:	bf00      	nop
 801a324:	20000074 	.word	0x20000074

0801a328 <_sbrk_r>:
 801a328:	b538      	push	{r3, r4, r5, lr}
 801a32a:	4d06      	ldr	r5, [pc, #24]	; (801a344 <_sbrk_r+0x1c>)
 801a32c:	2300      	movs	r3, #0
 801a32e:	4604      	mov	r4, r0
 801a330:	4608      	mov	r0, r1
 801a332:	602b      	str	r3, [r5, #0]
 801a334:	f7ea f918 	bl	8004568 <_sbrk>
 801a338:	1c43      	adds	r3, r0, #1
 801a33a:	d102      	bne.n	801a342 <_sbrk_r+0x1a>
 801a33c:	682b      	ldr	r3, [r5, #0]
 801a33e:	b103      	cbz	r3, 801a342 <_sbrk_r+0x1a>
 801a340:	6023      	str	r3, [r4, #0]
 801a342:	bd38      	pop	{r3, r4, r5, pc}
 801a344:	2004a2f8 	.word	0x2004a2f8

0801a348 <siprintf>:
 801a348:	b40e      	push	{r1, r2, r3}
 801a34a:	b500      	push	{lr}
 801a34c:	b09c      	sub	sp, #112	; 0x70
 801a34e:	ab1d      	add	r3, sp, #116	; 0x74
 801a350:	9002      	str	r0, [sp, #8]
 801a352:	9006      	str	r0, [sp, #24]
 801a354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a358:	4809      	ldr	r0, [pc, #36]	; (801a380 <siprintf+0x38>)
 801a35a:	9107      	str	r1, [sp, #28]
 801a35c:	9104      	str	r1, [sp, #16]
 801a35e:	4909      	ldr	r1, [pc, #36]	; (801a384 <siprintf+0x3c>)
 801a360:	f853 2b04 	ldr.w	r2, [r3], #4
 801a364:	9105      	str	r1, [sp, #20]
 801a366:	6800      	ldr	r0, [r0, #0]
 801a368:	9301      	str	r3, [sp, #4]
 801a36a:	a902      	add	r1, sp, #8
 801a36c:	f000 fb02 	bl	801a974 <_svfiprintf_r>
 801a370:	9b02      	ldr	r3, [sp, #8]
 801a372:	2200      	movs	r2, #0
 801a374:	701a      	strb	r2, [r3, #0]
 801a376:	b01c      	add	sp, #112	; 0x70
 801a378:	f85d eb04 	ldr.w	lr, [sp], #4
 801a37c:	b003      	add	sp, #12
 801a37e:	4770      	bx	lr
 801a380:	20000074 	.word	0x20000074
 801a384:	ffff0208 	.word	0xffff0208

0801a388 <__sread>:
 801a388:	b510      	push	{r4, lr}
 801a38a:	460c      	mov	r4, r1
 801a38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a390:	f000 ff26 	bl	801b1e0 <_read_r>
 801a394:	2800      	cmp	r0, #0
 801a396:	bfab      	itete	ge
 801a398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a39a:	89a3      	ldrhlt	r3, [r4, #12]
 801a39c:	181b      	addge	r3, r3, r0
 801a39e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a3a2:	bfac      	ite	ge
 801a3a4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a3a6:	81a3      	strhlt	r3, [r4, #12]
 801a3a8:	bd10      	pop	{r4, pc}

0801a3aa <__swrite>:
 801a3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3ae:	461f      	mov	r7, r3
 801a3b0:	898b      	ldrh	r3, [r1, #12]
 801a3b2:	05db      	lsls	r3, r3, #23
 801a3b4:	4605      	mov	r5, r0
 801a3b6:	460c      	mov	r4, r1
 801a3b8:	4616      	mov	r6, r2
 801a3ba:	d505      	bpl.n	801a3c8 <__swrite+0x1e>
 801a3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3c0:	2302      	movs	r3, #2
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	f000 f9c8 	bl	801a758 <_lseek_r>
 801a3c8:	89a3      	ldrh	r3, [r4, #12]
 801a3ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a3ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a3d2:	81a3      	strh	r3, [r4, #12]
 801a3d4:	4632      	mov	r2, r6
 801a3d6:	463b      	mov	r3, r7
 801a3d8:	4628      	mov	r0, r5
 801a3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a3de:	f000 b869 	b.w	801a4b4 <_write_r>

0801a3e2 <__sseek>:
 801a3e2:	b510      	push	{r4, lr}
 801a3e4:	460c      	mov	r4, r1
 801a3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3ea:	f000 f9b5 	bl	801a758 <_lseek_r>
 801a3ee:	1c43      	adds	r3, r0, #1
 801a3f0:	89a3      	ldrh	r3, [r4, #12]
 801a3f2:	bf15      	itete	ne
 801a3f4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a3f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a3fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a3fe:	81a3      	strheq	r3, [r4, #12]
 801a400:	bf18      	it	ne
 801a402:	81a3      	strhne	r3, [r4, #12]
 801a404:	bd10      	pop	{r4, pc}

0801a406 <__sclose>:
 801a406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a40a:	f000 b8d3 	b.w	801a5b4 <_close_r>
	...

0801a410 <__swbuf_r>:
 801a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a412:	460e      	mov	r6, r1
 801a414:	4614      	mov	r4, r2
 801a416:	4605      	mov	r5, r0
 801a418:	b118      	cbz	r0, 801a422 <__swbuf_r+0x12>
 801a41a:	6983      	ldr	r3, [r0, #24]
 801a41c:	b90b      	cbnz	r3, 801a422 <__swbuf_r+0x12>
 801a41e:	f7ff fca9 	bl	8019d74 <__sinit>
 801a422:	4b21      	ldr	r3, [pc, #132]	; (801a4a8 <__swbuf_r+0x98>)
 801a424:	429c      	cmp	r4, r3
 801a426:	d12b      	bne.n	801a480 <__swbuf_r+0x70>
 801a428:	686c      	ldr	r4, [r5, #4]
 801a42a:	69a3      	ldr	r3, [r4, #24]
 801a42c:	60a3      	str	r3, [r4, #8]
 801a42e:	89a3      	ldrh	r3, [r4, #12]
 801a430:	071a      	lsls	r2, r3, #28
 801a432:	d52f      	bpl.n	801a494 <__swbuf_r+0x84>
 801a434:	6923      	ldr	r3, [r4, #16]
 801a436:	b36b      	cbz	r3, 801a494 <__swbuf_r+0x84>
 801a438:	6923      	ldr	r3, [r4, #16]
 801a43a:	6820      	ldr	r0, [r4, #0]
 801a43c:	1ac0      	subs	r0, r0, r3
 801a43e:	6963      	ldr	r3, [r4, #20]
 801a440:	b2f6      	uxtb	r6, r6
 801a442:	4283      	cmp	r3, r0
 801a444:	4637      	mov	r7, r6
 801a446:	dc04      	bgt.n	801a452 <__swbuf_r+0x42>
 801a448:	4621      	mov	r1, r4
 801a44a:	4628      	mov	r0, r5
 801a44c:	f000 f948 	bl	801a6e0 <_fflush_r>
 801a450:	bb30      	cbnz	r0, 801a4a0 <__swbuf_r+0x90>
 801a452:	68a3      	ldr	r3, [r4, #8]
 801a454:	3b01      	subs	r3, #1
 801a456:	60a3      	str	r3, [r4, #8]
 801a458:	6823      	ldr	r3, [r4, #0]
 801a45a:	1c5a      	adds	r2, r3, #1
 801a45c:	6022      	str	r2, [r4, #0]
 801a45e:	701e      	strb	r6, [r3, #0]
 801a460:	6963      	ldr	r3, [r4, #20]
 801a462:	3001      	adds	r0, #1
 801a464:	4283      	cmp	r3, r0
 801a466:	d004      	beq.n	801a472 <__swbuf_r+0x62>
 801a468:	89a3      	ldrh	r3, [r4, #12]
 801a46a:	07db      	lsls	r3, r3, #31
 801a46c:	d506      	bpl.n	801a47c <__swbuf_r+0x6c>
 801a46e:	2e0a      	cmp	r6, #10
 801a470:	d104      	bne.n	801a47c <__swbuf_r+0x6c>
 801a472:	4621      	mov	r1, r4
 801a474:	4628      	mov	r0, r5
 801a476:	f000 f933 	bl	801a6e0 <_fflush_r>
 801a47a:	b988      	cbnz	r0, 801a4a0 <__swbuf_r+0x90>
 801a47c:	4638      	mov	r0, r7
 801a47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a480:	4b0a      	ldr	r3, [pc, #40]	; (801a4ac <__swbuf_r+0x9c>)
 801a482:	429c      	cmp	r4, r3
 801a484:	d101      	bne.n	801a48a <__swbuf_r+0x7a>
 801a486:	68ac      	ldr	r4, [r5, #8]
 801a488:	e7cf      	b.n	801a42a <__swbuf_r+0x1a>
 801a48a:	4b09      	ldr	r3, [pc, #36]	; (801a4b0 <__swbuf_r+0xa0>)
 801a48c:	429c      	cmp	r4, r3
 801a48e:	bf08      	it	eq
 801a490:	68ec      	ldreq	r4, [r5, #12]
 801a492:	e7ca      	b.n	801a42a <__swbuf_r+0x1a>
 801a494:	4621      	mov	r1, r4
 801a496:	4628      	mov	r0, r5
 801a498:	f000 f81e 	bl	801a4d8 <__swsetup_r>
 801a49c:	2800      	cmp	r0, #0
 801a49e:	d0cb      	beq.n	801a438 <__swbuf_r+0x28>
 801a4a0:	f04f 37ff 	mov.w	r7, #4294967295
 801a4a4:	e7ea      	b.n	801a47c <__swbuf_r+0x6c>
 801a4a6:	bf00      	nop
 801a4a8:	08031fbc 	.word	0x08031fbc
 801a4ac:	08031fdc 	.word	0x08031fdc
 801a4b0:	08031f9c 	.word	0x08031f9c

0801a4b4 <_write_r>:
 801a4b4:	b538      	push	{r3, r4, r5, lr}
 801a4b6:	4d07      	ldr	r5, [pc, #28]	; (801a4d4 <_write_r+0x20>)
 801a4b8:	4604      	mov	r4, r0
 801a4ba:	4608      	mov	r0, r1
 801a4bc:	4611      	mov	r1, r2
 801a4be:	2200      	movs	r2, #0
 801a4c0:	602a      	str	r2, [r5, #0]
 801a4c2:	461a      	mov	r2, r3
 801a4c4:	f002 fa66 	bl	801c994 <_write>
 801a4c8:	1c43      	adds	r3, r0, #1
 801a4ca:	d102      	bne.n	801a4d2 <_write_r+0x1e>
 801a4cc:	682b      	ldr	r3, [r5, #0]
 801a4ce:	b103      	cbz	r3, 801a4d2 <_write_r+0x1e>
 801a4d0:	6023      	str	r3, [r4, #0]
 801a4d2:	bd38      	pop	{r3, r4, r5, pc}
 801a4d4:	2004a2f8 	.word	0x2004a2f8

0801a4d8 <__swsetup_r>:
 801a4d8:	4b32      	ldr	r3, [pc, #200]	; (801a5a4 <__swsetup_r+0xcc>)
 801a4da:	b570      	push	{r4, r5, r6, lr}
 801a4dc:	681d      	ldr	r5, [r3, #0]
 801a4de:	4606      	mov	r6, r0
 801a4e0:	460c      	mov	r4, r1
 801a4e2:	b125      	cbz	r5, 801a4ee <__swsetup_r+0x16>
 801a4e4:	69ab      	ldr	r3, [r5, #24]
 801a4e6:	b913      	cbnz	r3, 801a4ee <__swsetup_r+0x16>
 801a4e8:	4628      	mov	r0, r5
 801a4ea:	f7ff fc43 	bl	8019d74 <__sinit>
 801a4ee:	4b2e      	ldr	r3, [pc, #184]	; (801a5a8 <__swsetup_r+0xd0>)
 801a4f0:	429c      	cmp	r4, r3
 801a4f2:	d10f      	bne.n	801a514 <__swsetup_r+0x3c>
 801a4f4:	686c      	ldr	r4, [r5, #4]
 801a4f6:	89a3      	ldrh	r3, [r4, #12]
 801a4f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a4fc:	0719      	lsls	r1, r3, #28
 801a4fe:	d42c      	bmi.n	801a55a <__swsetup_r+0x82>
 801a500:	06dd      	lsls	r5, r3, #27
 801a502:	d411      	bmi.n	801a528 <__swsetup_r+0x50>
 801a504:	2309      	movs	r3, #9
 801a506:	6033      	str	r3, [r6, #0]
 801a508:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a50c:	81a3      	strh	r3, [r4, #12]
 801a50e:	f04f 30ff 	mov.w	r0, #4294967295
 801a512:	e03e      	b.n	801a592 <__swsetup_r+0xba>
 801a514:	4b25      	ldr	r3, [pc, #148]	; (801a5ac <__swsetup_r+0xd4>)
 801a516:	429c      	cmp	r4, r3
 801a518:	d101      	bne.n	801a51e <__swsetup_r+0x46>
 801a51a:	68ac      	ldr	r4, [r5, #8]
 801a51c:	e7eb      	b.n	801a4f6 <__swsetup_r+0x1e>
 801a51e:	4b24      	ldr	r3, [pc, #144]	; (801a5b0 <__swsetup_r+0xd8>)
 801a520:	429c      	cmp	r4, r3
 801a522:	bf08      	it	eq
 801a524:	68ec      	ldreq	r4, [r5, #12]
 801a526:	e7e6      	b.n	801a4f6 <__swsetup_r+0x1e>
 801a528:	0758      	lsls	r0, r3, #29
 801a52a:	d512      	bpl.n	801a552 <__swsetup_r+0x7a>
 801a52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a52e:	b141      	cbz	r1, 801a542 <__swsetup_r+0x6a>
 801a530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a534:	4299      	cmp	r1, r3
 801a536:	d002      	beq.n	801a53e <__swsetup_r+0x66>
 801a538:	4630      	mov	r0, r6
 801a53a:	f7ff fd07 	bl	8019f4c <_free_r>
 801a53e:	2300      	movs	r3, #0
 801a540:	6363      	str	r3, [r4, #52]	; 0x34
 801a542:	89a3      	ldrh	r3, [r4, #12]
 801a544:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a548:	81a3      	strh	r3, [r4, #12]
 801a54a:	2300      	movs	r3, #0
 801a54c:	6063      	str	r3, [r4, #4]
 801a54e:	6923      	ldr	r3, [r4, #16]
 801a550:	6023      	str	r3, [r4, #0]
 801a552:	89a3      	ldrh	r3, [r4, #12]
 801a554:	f043 0308 	orr.w	r3, r3, #8
 801a558:	81a3      	strh	r3, [r4, #12]
 801a55a:	6923      	ldr	r3, [r4, #16]
 801a55c:	b94b      	cbnz	r3, 801a572 <__swsetup_r+0x9a>
 801a55e:	89a3      	ldrh	r3, [r4, #12]
 801a560:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a568:	d003      	beq.n	801a572 <__swsetup_r+0x9a>
 801a56a:	4621      	mov	r1, r4
 801a56c:	4630      	mov	r0, r6
 801a56e:	f000 f92b 	bl	801a7c8 <__smakebuf_r>
 801a572:	89a0      	ldrh	r0, [r4, #12]
 801a574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a578:	f010 0301 	ands.w	r3, r0, #1
 801a57c:	d00a      	beq.n	801a594 <__swsetup_r+0xbc>
 801a57e:	2300      	movs	r3, #0
 801a580:	60a3      	str	r3, [r4, #8]
 801a582:	6963      	ldr	r3, [r4, #20]
 801a584:	425b      	negs	r3, r3
 801a586:	61a3      	str	r3, [r4, #24]
 801a588:	6923      	ldr	r3, [r4, #16]
 801a58a:	b943      	cbnz	r3, 801a59e <__swsetup_r+0xc6>
 801a58c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a590:	d1ba      	bne.n	801a508 <__swsetup_r+0x30>
 801a592:	bd70      	pop	{r4, r5, r6, pc}
 801a594:	0781      	lsls	r1, r0, #30
 801a596:	bf58      	it	pl
 801a598:	6963      	ldrpl	r3, [r4, #20]
 801a59a:	60a3      	str	r3, [r4, #8]
 801a59c:	e7f4      	b.n	801a588 <__swsetup_r+0xb0>
 801a59e:	2000      	movs	r0, #0
 801a5a0:	e7f7      	b.n	801a592 <__swsetup_r+0xba>
 801a5a2:	bf00      	nop
 801a5a4:	20000074 	.word	0x20000074
 801a5a8:	08031fbc 	.word	0x08031fbc
 801a5ac:	08031fdc 	.word	0x08031fdc
 801a5b0:	08031f9c 	.word	0x08031f9c

0801a5b4 <_close_r>:
 801a5b4:	b538      	push	{r3, r4, r5, lr}
 801a5b6:	4d06      	ldr	r5, [pc, #24]	; (801a5d0 <_close_r+0x1c>)
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	4604      	mov	r4, r0
 801a5bc:	4608      	mov	r0, r1
 801a5be:	602b      	str	r3, [r5, #0]
 801a5c0:	f002 f9c0 	bl	801c944 <_close>
 801a5c4:	1c43      	adds	r3, r0, #1
 801a5c6:	d102      	bne.n	801a5ce <_close_r+0x1a>
 801a5c8:	682b      	ldr	r3, [r5, #0]
 801a5ca:	b103      	cbz	r3, 801a5ce <_close_r+0x1a>
 801a5cc:	6023      	str	r3, [r4, #0]
 801a5ce:	bd38      	pop	{r3, r4, r5, pc}
 801a5d0:	2004a2f8 	.word	0x2004a2f8

0801a5d4 <__sflush_r>:
 801a5d4:	898a      	ldrh	r2, [r1, #12]
 801a5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5da:	4605      	mov	r5, r0
 801a5dc:	0710      	lsls	r0, r2, #28
 801a5de:	460c      	mov	r4, r1
 801a5e0:	d458      	bmi.n	801a694 <__sflush_r+0xc0>
 801a5e2:	684b      	ldr	r3, [r1, #4]
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	dc05      	bgt.n	801a5f4 <__sflush_r+0x20>
 801a5e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	dc02      	bgt.n	801a5f4 <__sflush_r+0x20>
 801a5ee:	2000      	movs	r0, #0
 801a5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a5f6:	2e00      	cmp	r6, #0
 801a5f8:	d0f9      	beq.n	801a5ee <__sflush_r+0x1a>
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a600:	682f      	ldr	r7, [r5, #0]
 801a602:	602b      	str	r3, [r5, #0]
 801a604:	d032      	beq.n	801a66c <__sflush_r+0x98>
 801a606:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a608:	89a3      	ldrh	r3, [r4, #12]
 801a60a:	075a      	lsls	r2, r3, #29
 801a60c:	d505      	bpl.n	801a61a <__sflush_r+0x46>
 801a60e:	6863      	ldr	r3, [r4, #4]
 801a610:	1ac0      	subs	r0, r0, r3
 801a612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a614:	b10b      	cbz	r3, 801a61a <__sflush_r+0x46>
 801a616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a618:	1ac0      	subs	r0, r0, r3
 801a61a:	2300      	movs	r3, #0
 801a61c:	4602      	mov	r2, r0
 801a61e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a620:	6a21      	ldr	r1, [r4, #32]
 801a622:	4628      	mov	r0, r5
 801a624:	47b0      	blx	r6
 801a626:	1c43      	adds	r3, r0, #1
 801a628:	89a3      	ldrh	r3, [r4, #12]
 801a62a:	d106      	bne.n	801a63a <__sflush_r+0x66>
 801a62c:	6829      	ldr	r1, [r5, #0]
 801a62e:	291d      	cmp	r1, #29
 801a630:	d82c      	bhi.n	801a68c <__sflush_r+0xb8>
 801a632:	4a2a      	ldr	r2, [pc, #168]	; (801a6dc <__sflush_r+0x108>)
 801a634:	40ca      	lsrs	r2, r1
 801a636:	07d6      	lsls	r6, r2, #31
 801a638:	d528      	bpl.n	801a68c <__sflush_r+0xb8>
 801a63a:	2200      	movs	r2, #0
 801a63c:	6062      	str	r2, [r4, #4]
 801a63e:	04d9      	lsls	r1, r3, #19
 801a640:	6922      	ldr	r2, [r4, #16]
 801a642:	6022      	str	r2, [r4, #0]
 801a644:	d504      	bpl.n	801a650 <__sflush_r+0x7c>
 801a646:	1c42      	adds	r2, r0, #1
 801a648:	d101      	bne.n	801a64e <__sflush_r+0x7a>
 801a64a:	682b      	ldr	r3, [r5, #0]
 801a64c:	b903      	cbnz	r3, 801a650 <__sflush_r+0x7c>
 801a64e:	6560      	str	r0, [r4, #84]	; 0x54
 801a650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a652:	602f      	str	r7, [r5, #0]
 801a654:	2900      	cmp	r1, #0
 801a656:	d0ca      	beq.n	801a5ee <__sflush_r+0x1a>
 801a658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a65c:	4299      	cmp	r1, r3
 801a65e:	d002      	beq.n	801a666 <__sflush_r+0x92>
 801a660:	4628      	mov	r0, r5
 801a662:	f7ff fc73 	bl	8019f4c <_free_r>
 801a666:	2000      	movs	r0, #0
 801a668:	6360      	str	r0, [r4, #52]	; 0x34
 801a66a:	e7c1      	b.n	801a5f0 <__sflush_r+0x1c>
 801a66c:	6a21      	ldr	r1, [r4, #32]
 801a66e:	2301      	movs	r3, #1
 801a670:	4628      	mov	r0, r5
 801a672:	47b0      	blx	r6
 801a674:	1c41      	adds	r1, r0, #1
 801a676:	d1c7      	bne.n	801a608 <__sflush_r+0x34>
 801a678:	682b      	ldr	r3, [r5, #0]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d0c4      	beq.n	801a608 <__sflush_r+0x34>
 801a67e:	2b1d      	cmp	r3, #29
 801a680:	d001      	beq.n	801a686 <__sflush_r+0xb2>
 801a682:	2b16      	cmp	r3, #22
 801a684:	d101      	bne.n	801a68a <__sflush_r+0xb6>
 801a686:	602f      	str	r7, [r5, #0]
 801a688:	e7b1      	b.n	801a5ee <__sflush_r+0x1a>
 801a68a:	89a3      	ldrh	r3, [r4, #12]
 801a68c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a690:	81a3      	strh	r3, [r4, #12]
 801a692:	e7ad      	b.n	801a5f0 <__sflush_r+0x1c>
 801a694:	690f      	ldr	r7, [r1, #16]
 801a696:	2f00      	cmp	r7, #0
 801a698:	d0a9      	beq.n	801a5ee <__sflush_r+0x1a>
 801a69a:	0793      	lsls	r3, r2, #30
 801a69c:	680e      	ldr	r6, [r1, #0]
 801a69e:	bf08      	it	eq
 801a6a0:	694b      	ldreq	r3, [r1, #20]
 801a6a2:	600f      	str	r7, [r1, #0]
 801a6a4:	bf18      	it	ne
 801a6a6:	2300      	movne	r3, #0
 801a6a8:	eba6 0807 	sub.w	r8, r6, r7
 801a6ac:	608b      	str	r3, [r1, #8]
 801a6ae:	f1b8 0f00 	cmp.w	r8, #0
 801a6b2:	dd9c      	ble.n	801a5ee <__sflush_r+0x1a>
 801a6b4:	6a21      	ldr	r1, [r4, #32]
 801a6b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a6b8:	4643      	mov	r3, r8
 801a6ba:	463a      	mov	r2, r7
 801a6bc:	4628      	mov	r0, r5
 801a6be:	47b0      	blx	r6
 801a6c0:	2800      	cmp	r0, #0
 801a6c2:	dc06      	bgt.n	801a6d2 <__sflush_r+0xfe>
 801a6c4:	89a3      	ldrh	r3, [r4, #12]
 801a6c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a6ca:	81a3      	strh	r3, [r4, #12]
 801a6cc:	f04f 30ff 	mov.w	r0, #4294967295
 801a6d0:	e78e      	b.n	801a5f0 <__sflush_r+0x1c>
 801a6d2:	4407      	add	r7, r0
 801a6d4:	eba8 0800 	sub.w	r8, r8, r0
 801a6d8:	e7e9      	b.n	801a6ae <__sflush_r+0xda>
 801a6da:	bf00      	nop
 801a6dc:	20400001 	.word	0x20400001

0801a6e0 <_fflush_r>:
 801a6e0:	b538      	push	{r3, r4, r5, lr}
 801a6e2:	690b      	ldr	r3, [r1, #16]
 801a6e4:	4605      	mov	r5, r0
 801a6e6:	460c      	mov	r4, r1
 801a6e8:	b913      	cbnz	r3, 801a6f0 <_fflush_r+0x10>
 801a6ea:	2500      	movs	r5, #0
 801a6ec:	4628      	mov	r0, r5
 801a6ee:	bd38      	pop	{r3, r4, r5, pc}
 801a6f0:	b118      	cbz	r0, 801a6fa <_fflush_r+0x1a>
 801a6f2:	6983      	ldr	r3, [r0, #24]
 801a6f4:	b90b      	cbnz	r3, 801a6fa <_fflush_r+0x1a>
 801a6f6:	f7ff fb3d 	bl	8019d74 <__sinit>
 801a6fa:	4b14      	ldr	r3, [pc, #80]	; (801a74c <_fflush_r+0x6c>)
 801a6fc:	429c      	cmp	r4, r3
 801a6fe:	d11b      	bne.n	801a738 <_fflush_r+0x58>
 801a700:	686c      	ldr	r4, [r5, #4]
 801a702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d0ef      	beq.n	801a6ea <_fflush_r+0xa>
 801a70a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a70c:	07d0      	lsls	r0, r2, #31
 801a70e:	d404      	bmi.n	801a71a <_fflush_r+0x3a>
 801a710:	0599      	lsls	r1, r3, #22
 801a712:	d402      	bmi.n	801a71a <_fflush_r+0x3a>
 801a714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a716:	f7ff fbf0 	bl	8019efa <__retarget_lock_acquire_recursive>
 801a71a:	4628      	mov	r0, r5
 801a71c:	4621      	mov	r1, r4
 801a71e:	f7ff ff59 	bl	801a5d4 <__sflush_r>
 801a722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a724:	07da      	lsls	r2, r3, #31
 801a726:	4605      	mov	r5, r0
 801a728:	d4e0      	bmi.n	801a6ec <_fflush_r+0xc>
 801a72a:	89a3      	ldrh	r3, [r4, #12]
 801a72c:	059b      	lsls	r3, r3, #22
 801a72e:	d4dd      	bmi.n	801a6ec <_fflush_r+0xc>
 801a730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a732:	f7ff fbe3 	bl	8019efc <__retarget_lock_release_recursive>
 801a736:	e7d9      	b.n	801a6ec <_fflush_r+0xc>
 801a738:	4b05      	ldr	r3, [pc, #20]	; (801a750 <_fflush_r+0x70>)
 801a73a:	429c      	cmp	r4, r3
 801a73c:	d101      	bne.n	801a742 <_fflush_r+0x62>
 801a73e:	68ac      	ldr	r4, [r5, #8]
 801a740:	e7df      	b.n	801a702 <_fflush_r+0x22>
 801a742:	4b04      	ldr	r3, [pc, #16]	; (801a754 <_fflush_r+0x74>)
 801a744:	429c      	cmp	r4, r3
 801a746:	bf08      	it	eq
 801a748:	68ec      	ldreq	r4, [r5, #12]
 801a74a:	e7da      	b.n	801a702 <_fflush_r+0x22>
 801a74c:	08031fbc 	.word	0x08031fbc
 801a750:	08031fdc 	.word	0x08031fdc
 801a754:	08031f9c 	.word	0x08031f9c

0801a758 <_lseek_r>:
 801a758:	b538      	push	{r3, r4, r5, lr}
 801a75a:	4d07      	ldr	r5, [pc, #28]	; (801a778 <_lseek_r+0x20>)
 801a75c:	4604      	mov	r4, r0
 801a75e:	4608      	mov	r0, r1
 801a760:	4611      	mov	r1, r2
 801a762:	2200      	movs	r2, #0
 801a764:	602a      	str	r2, [r5, #0]
 801a766:	461a      	mov	r2, r3
 801a768:	f002 f904 	bl	801c974 <_lseek>
 801a76c:	1c43      	adds	r3, r0, #1
 801a76e:	d102      	bne.n	801a776 <_lseek_r+0x1e>
 801a770:	682b      	ldr	r3, [r5, #0]
 801a772:	b103      	cbz	r3, 801a776 <_lseek_r+0x1e>
 801a774:	6023      	str	r3, [r4, #0]
 801a776:	bd38      	pop	{r3, r4, r5, pc}
 801a778:	2004a2f8 	.word	0x2004a2f8

0801a77c <__swhatbuf_r>:
 801a77c:	b570      	push	{r4, r5, r6, lr}
 801a77e:	460e      	mov	r6, r1
 801a780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a784:	2900      	cmp	r1, #0
 801a786:	b096      	sub	sp, #88	; 0x58
 801a788:	4614      	mov	r4, r2
 801a78a:	461d      	mov	r5, r3
 801a78c:	da08      	bge.n	801a7a0 <__swhatbuf_r+0x24>
 801a78e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a792:	2200      	movs	r2, #0
 801a794:	602a      	str	r2, [r5, #0]
 801a796:	061a      	lsls	r2, r3, #24
 801a798:	d410      	bmi.n	801a7bc <__swhatbuf_r+0x40>
 801a79a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a79e:	e00e      	b.n	801a7be <__swhatbuf_r+0x42>
 801a7a0:	466a      	mov	r2, sp
 801a7a2:	f000 fd2f 	bl	801b204 <_fstat_r>
 801a7a6:	2800      	cmp	r0, #0
 801a7a8:	dbf1      	blt.n	801a78e <__swhatbuf_r+0x12>
 801a7aa:	9a01      	ldr	r2, [sp, #4]
 801a7ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a7b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a7b4:	425a      	negs	r2, r3
 801a7b6:	415a      	adcs	r2, r3
 801a7b8:	602a      	str	r2, [r5, #0]
 801a7ba:	e7ee      	b.n	801a79a <__swhatbuf_r+0x1e>
 801a7bc:	2340      	movs	r3, #64	; 0x40
 801a7be:	2000      	movs	r0, #0
 801a7c0:	6023      	str	r3, [r4, #0]
 801a7c2:	b016      	add	sp, #88	; 0x58
 801a7c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a7c8 <__smakebuf_r>:
 801a7c8:	898b      	ldrh	r3, [r1, #12]
 801a7ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a7cc:	079d      	lsls	r5, r3, #30
 801a7ce:	4606      	mov	r6, r0
 801a7d0:	460c      	mov	r4, r1
 801a7d2:	d507      	bpl.n	801a7e4 <__smakebuf_r+0x1c>
 801a7d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a7d8:	6023      	str	r3, [r4, #0]
 801a7da:	6123      	str	r3, [r4, #16]
 801a7dc:	2301      	movs	r3, #1
 801a7de:	6163      	str	r3, [r4, #20]
 801a7e0:	b002      	add	sp, #8
 801a7e2:	bd70      	pop	{r4, r5, r6, pc}
 801a7e4:	ab01      	add	r3, sp, #4
 801a7e6:	466a      	mov	r2, sp
 801a7e8:	f7ff ffc8 	bl	801a77c <__swhatbuf_r>
 801a7ec:	9900      	ldr	r1, [sp, #0]
 801a7ee:	4605      	mov	r5, r0
 801a7f0:	4630      	mov	r0, r6
 801a7f2:	f7ff fc17 	bl	801a024 <_malloc_r>
 801a7f6:	b948      	cbnz	r0, 801a80c <__smakebuf_r+0x44>
 801a7f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7fc:	059a      	lsls	r2, r3, #22
 801a7fe:	d4ef      	bmi.n	801a7e0 <__smakebuf_r+0x18>
 801a800:	f023 0303 	bic.w	r3, r3, #3
 801a804:	f043 0302 	orr.w	r3, r3, #2
 801a808:	81a3      	strh	r3, [r4, #12]
 801a80a:	e7e3      	b.n	801a7d4 <__smakebuf_r+0xc>
 801a80c:	4b0d      	ldr	r3, [pc, #52]	; (801a844 <__smakebuf_r+0x7c>)
 801a80e:	62b3      	str	r3, [r6, #40]	; 0x28
 801a810:	89a3      	ldrh	r3, [r4, #12]
 801a812:	6020      	str	r0, [r4, #0]
 801a814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a818:	81a3      	strh	r3, [r4, #12]
 801a81a:	9b00      	ldr	r3, [sp, #0]
 801a81c:	6163      	str	r3, [r4, #20]
 801a81e:	9b01      	ldr	r3, [sp, #4]
 801a820:	6120      	str	r0, [r4, #16]
 801a822:	b15b      	cbz	r3, 801a83c <__smakebuf_r+0x74>
 801a824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a828:	4630      	mov	r0, r6
 801a82a:	f000 fcfd 	bl	801b228 <_isatty_r>
 801a82e:	b128      	cbz	r0, 801a83c <__smakebuf_r+0x74>
 801a830:	89a3      	ldrh	r3, [r4, #12]
 801a832:	f023 0303 	bic.w	r3, r3, #3
 801a836:	f043 0301 	orr.w	r3, r3, #1
 801a83a:	81a3      	strh	r3, [r4, #12]
 801a83c:	89a0      	ldrh	r0, [r4, #12]
 801a83e:	4305      	orrs	r5, r0
 801a840:	81a5      	strh	r5, [r4, #12]
 801a842:	e7cd      	b.n	801a7e0 <__smakebuf_r+0x18>
 801a844:	08019d0d 	.word	0x08019d0d

0801a848 <__malloc_lock>:
 801a848:	4801      	ldr	r0, [pc, #4]	; (801a850 <__malloc_lock+0x8>)
 801a84a:	f7ff bb56 	b.w	8019efa <__retarget_lock_acquire_recursive>
 801a84e:	bf00      	nop
 801a850:	2004a2ec 	.word	0x2004a2ec

0801a854 <__malloc_unlock>:
 801a854:	4801      	ldr	r0, [pc, #4]	; (801a85c <__malloc_unlock+0x8>)
 801a856:	f7ff bb51 	b.w	8019efc <__retarget_lock_release_recursive>
 801a85a:	bf00      	nop
 801a85c:	2004a2ec 	.word	0x2004a2ec

0801a860 <_realloc_r>:
 801a860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a864:	4680      	mov	r8, r0
 801a866:	4614      	mov	r4, r2
 801a868:	460e      	mov	r6, r1
 801a86a:	b921      	cbnz	r1, 801a876 <_realloc_r+0x16>
 801a86c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a870:	4611      	mov	r1, r2
 801a872:	f7ff bbd7 	b.w	801a024 <_malloc_r>
 801a876:	b92a      	cbnz	r2, 801a884 <_realloc_r+0x24>
 801a878:	f7ff fb68 	bl	8019f4c <_free_r>
 801a87c:	4625      	mov	r5, r4
 801a87e:	4628      	mov	r0, r5
 801a880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a884:	f000 fcfa 	bl	801b27c <_malloc_usable_size_r>
 801a888:	4284      	cmp	r4, r0
 801a88a:	4607      	mov	r7, r0
 801a88c:	d802      	bhi.n	801a894 <_realloc_r+0x34>
 801a88e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a892:	d812      	bhi.n	801a8ba <_realloc_r+0x5a>
 801a894:	4621      	mov	r1, r4
 801a896:	4640      	mov	r0, r8
 801a898:	f7ff fbc4 	bl	801a024 <_malloc_r>
 801a89c:	4605      	mov	r5, r0
 801a89e:	2800      	cmp	r0, #0
 801a8a0:	d0ed      	beq.n	801a87e <_realloc_r+0x1e>
 801a8a2:	42bc      	cmp	r4, r7
 801a8a4:	4622      	mov	r2, r4
 801a8a6:	4631      	mov	r1, r6
 801a8a8:	bf28      	it	cs
 801a8aa:	463a      	movcs	r2, r7
 801a8ac:	f7ff fb38 	bl	8019f20 <memcpy>
 801a8b0:	4631      	mov	r1, r6
 801a8b2:	4640      	mov	r0, r8
 801a8b4:	f7ff fb4a 	bl	8019f4c <_free_r>
 801a8b8:	e7e1      	b.n	801a87e <_realloc_r+0x1e>
 801a8ba:	4635      	mov	r5, r6
 801a8bc:	e7df      	b.n	801a87e <_realloc_r+0x1e>

0801a8be <__ssputs_r>:
 801a8be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8c2:	688e      	ldr	r6, [r1, #8]
 801a8c4:	429e      	cmp	r6, r3
 801a8c6:	4682      	mov	sl, r0
 801a8c8:	460c      	mov	r4, r1
 801a8ca:	4690      	mov	r8, r2
 801a8cc:	461f      	mov	r7, r3
 801a8ce:	d838      	bhi.n	801a942 <__ssputs_r+0x84>
 801a8d0:	898a      	ldrh	r2, [r1, #12]
 801a8d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a8d6:	d032      	beq.n	801a93e <__ssputs_r+0x80>
 801a8d8:	6825      	ldr	r5, [r4, #0]
 801a8da:	6909      	ldr	r1, [r1, #16]
 801a8dc:	eba5 0901 	sub.w	r9, r5, r1
 801a8e0:	6965      	ldr	r5, [r4, #20]
 801a8e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a8e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a8ea:	3301      	adds	r3, #1
 801a8ec:	444b      	add	r3, r9
 801a8ee:	106d      	asrs	r5, r5, #1
 801a8f0:	429d      	cmp	r5, r3
 801a8f2:	bf38      	it	cc
 801a8f4:	461d      	movcc	r5, r3
 801a8f6:	0553      	lsls	r3, r2, #21
 801a8f8:	d531      	bpl.n	801a95e <__ssputs_r+0xa0>
 801a8fa:	4629      	mov	r1, r5
 801a8fc:	f7ff fb92 	bl	801a024 <_malloc_r>
 801a900:	4606      	mov	r6, r0
 801a902:	b950      	cbnz	r0, 801a91a <__ssputs_r+0x5c>
 801a904:	230c      	movs	r3, #12
 801a906:	f8ca 3000 	str.w	r3, [sl]
 801a90a:	89a3      	ldrh	r3, [r4, #12]
 801a90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a910:	81a3      	strh	r3, [r4, #12]
 801a912:	f04f 30ff 	mov.w	r0, #4294967295
 801a916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a91a:	6921      	ldr	r1, [r4, #16]
 801a91c:	464a      	mov	r2, r9
 801a91e:	f7ff faff 	bl	8019f20 <memcpy>
 801a922:	89a3      	ldrh	r3, [r4, #12]
 801a924:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a92c:	81a3      	strh	r3, [r4, #12]
 801a92e:	6126      	str	r6, [r4, #16]
 801a930:	6165      	str	r5, [r4, #20]
 801a932:	444e      	add	r6, r9
 801a934:	eba5 0509 	sub.w	r5, r5, r9
 801a938:	6026      	str	r6, [r4, #0]
 801a93a:	60a5      	str	r5, [r4, #8]
 801a93c:	463e      	mov	r6, r7
 801a93e:	42be      	cmp	r6, r7
 801a940:	d900      	bls.n	801a944 <__ssputs_r+0x86>
 801a942:	463e      	mov	r6, r7
 801a944:	6820      	ldr	r0, [r4, #0]
 801a946:	4632      	mov	r2, r6
 801a948:	4641      	mov	r1, r8
 801a94a:	f000 fc7d 	bl	801b248 <memmove>
 801a94e:	68a3      	ldr	r3, [r4, #8]
 801a950:	1b9b      	subs	r3, r3, r6
 801a952:	60a3      	str	r3, [r4, #8]
 801a954:	6823      	ldr	r3, [r4, #0]
 801a956:	4433      	add	r3, r6
 801a958:	6023      	str	r3, [r4, #0]
 801a95a:	2000      	movs	r0, #0
 801a95c:	e7db      	b.n	801a916 <__ssputs_r+0x58>
 801a95e:	462a      	mov	r2, r5
 801a960:	f7ff ff7e 	bl	801a860 <_realloc_r>
 801a964:	4606      	mov	r6, r0
 801a966:	2800      	cmp	r0, #0
 801a968:	d1e1      	bne.n	801a92e <__ssputs_r+0x70>
 801a96a:	6921      	ldr	r1, [r4, #16]
 801a96c:	4650      	mov	r0, sl
 801a96e:	f7ff faed 	bl	8019f4c <_free_r>
 801a972:	e7c7      	b.n	801a904 <__ssputs_r+0x46>

0801a974 <_svfiprintf_r>:
 801a974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a978:	4698      	mov	r8, r3
 801a97a:	898b      	ldrh	r3, [r1, #12]
 801a97c:	061b      	lsls	r3, r3, #24
 801a97e:	b09d      	sub	sp, #116	; 0x74
 801a980:	4607      	mov	r7, r0
 801a982:	460d      	mov	r5, r1
 801a984:	4614      	mov	r4, r2
 801a986:	d50e      	bpl.n	801a9a6 <_svfiprintf_r+0x32>
 801a988:	690b      	ldr	r3, [r1, #16]
 801a98a:	b963      	cbnz	r3, 801a9a6 <_svfiprintf_r+0x32>
 801a98c:	2140      	movs	r1, #64	; 0x40
 801a98e:	f7ff fb49 	bl	801a024 <_malloc_r>
 801a992:	6028      	str	r0, [r5, #0]
 801a994:	6128      	str	r0, [r5, #16]
 801a996:	b920      	cbnz	r0, 801a9a2 <_svfiprintf_r+0x2e>
 801a998:	230c      	movs	r3, #12
 801a99a:	603b      	str	r3, [r7, #0]
 801a99c:	f04f 30ff 	mov.w	r0, #4294967295
 801a9a0:	e0d1      	b.n	801ab46 <_svfiprintf_r+0x1d2>
 801a9a2:	2340      	movs	r3, #64	; 0x40
 801a9a4:	616b      	str	r3, [r5, #20]
 801a9a6:	2300      	movs	r3, #0
 801a9a8:	9309      	str	r3, [sp, #36]	; 0x24
 801a9aa:	2320      	movs	r3, #32
 801a9ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a9b0:	f8cd 800c 	str.w	r8, [sp, #12]
 801a9b4:	2330      	movs	r3, #48	; 0x30
 801a9b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ab60 <_svfiprintf_r+0x1ec>
 801a9ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a9be:	f04f 0901 	mov.w	r9, #1
 801a9c2:	4623      	mov	r3, r4
 801a9c4:	469a      	mov	sl, r3
 801a9c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a9ca:	b10a      	cbz	r2, 801a9d0 <_svfiprintf_r+0x5c>
 801a9cc:	2a25      	cmp	r2, #37	; 0x25
 801a9ce:	d1f9      	bne.n	801a9c4 <_svfiprintf_r+0x50>
 801a9d0:	ebba 0b04 	subs.w	fp, sl, r4
 801a9d4:	d00b      	beq.n	801a9ee <_svfiprintf_r+0x7a>
 801a9d6:	465b      	mov	r3, fp
 801a9d8:	4622      	mov	r2, r4
 801a9da:	4629      	mov	r1, r5
 801a9dc:	4638      	mov	r0, r7
 801a9de:	f7ff ff6e 	bl	801a8be <__ssputs_r>
 801a9e2:	3001      	adds	r0, #1
 801a9e4:	f000 80aa 	beq.w	801ab3c <_svfiprintf_r+0x1c8>
 801a9e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a9ea:	445a      	add	r2, fp
 801a9ec:	9209      	str	r2, [sp, #36]	; 0x24
 801a9ee:	f89a 3000 	ldrb.w	r3, [sl]
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	f000 80a2 	beq.w	801ab3c <_svfiprintf_r+0x1c8>
 801a9f8:	2300      	movs	r3, #0
 801a9fa:	f04f 32ff 	mov.w	r2, #4294967295
 801a9fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aa02:	f10a 0a01 	add.w	sl, sl, #1
 801aa06:	9304      	str	r3, [sp, #16]
 801aa08:	9307      	str	r3, [sp, #28]
 801aa0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aa0e:	931a      	str	r3, [sp, #104]	; 0x68
 801aa10:	4654      	mov	r4, sl
 801aa12:	2205      	movs	r2, #5
 801aa14:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa18:	4851      	ldr	r0, [pc, #324]	; (801ab60 <_svfiprintf_r+0x1ec>)
 801aa1a:	f7e5 fc59 	bl	80002d0 <memchr>
 801aa1e:	9a04      	ldr	r2, [sp, #16]
 801aa20:	b9d8      	cbnz	r0, 801aa5a <_svfiprintf_r+0xe6>
 801aa22:	06d0      	lsls	r0, r2, #27
 801aa24:	bf44      	itt	mi
 801aa26:	2320      	movmi	r3, #32
 801aa28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aa2c:	0711      	lsls	r1, r2, #28
 801aa2e:	bf44      	itt	mi
 801aa30:	232b      	movmi	r3, #43	; 0x2b
 801aa32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aa36:	f89a 3000 	ldrb.w	r3, [sl]
 801aa3a:	2b2a      	cmp	r3, #42	; 0x2a
 801aa3c:	d015      	beq.n	801aa6a <_svfiprintf_r+0xf6>
 801aa3e:	9a07      	ldr	r2, [sp, #28]
 801aa40:	4654      	mov	r4, sl
 801aa42:	2000      	movs	r0, #0
 801aa44:	f04f 0c0a 	mov.w	ip, #10
 801aa48:	4621      	mov	r1, r4
 801aa4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aa4e:	3b30      	subs	r3, #48	; 0x30
 801aa50:	2b09      	cmp	r3, #9
 801aa52:	d94e      	bls.n	801aaf2 <_svfiprintf_r+0x17e>
 801aa54:	b1b0      	cbz	r0, 801aa84 <_svfiprintf_r+0x110>
 801aa56:	9207      	str	r2, [sp, #28]
 801aa58:	e014      	b.n	801aa84 <_svfiprintf_r+0x110>
 801aa5a:	eba0 0308 	sub.w	r3, r0, r8
 801aa5e:	fa09 f303 	lsl.w	r3, r9, r3
 801aa62:	4313      	orrs	r3, r2
 801aa64:	9304      	str	r3, [sp, #16]
 801aa66:	46a2      	mov	sl, r4
 801aa68:	e7d2      	b.n	801aa10 <_svfiprintf_r+0x9c>
 801aa6a:	9b03      	ldr	r3, [sp, #12]
 801aa6c:	1d19      	adds	r1, r3, #4
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	9103      	str	r1, [sp, #12]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	bfbb      	ittet	lt
 801aa76:	425b      	neglt	r3, r3
 801aa78:	f042 0202 	orrlt.w	r2, r2, #2
 801aa7c:	9307      	strge	r3, [sp, #28]
 801aa7e:	9307      	strlt	r3, [sp, #28]
 801aa80:	bfb8      	it	lt
 801aa82:	9204      	strlt	r2, [sp, #16]
 801aa84:	7823      	ldrb	r3, [r4, #0]
 801aa86:	2b2e      	cmp	r3, #46	; 0x2e
 801aa88:	d10c      	bne.n	801aaa4 <_svfiprintf_r+0x130>
 801aa8a:	7863      	ldrb	r3, [r4, #1]
 801aa8c:	2b2a      	cmp	r3, #42	; 0x2a
 801aa8e:	d135      	bne.n	801aafc <_svfiprintf_r+0x188>
 801aa90:	9b03      	ldr	r3, [sp, #12]
 801aa92:	1d1a      	adds	r2, r3, #4
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	9203      	str	r2, [sp, #12]
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	bfb8      	it	lt
 801aa9c:	f04f 33ff 	movlt.w	r3, #4294967295
 801aaa0:	3402      	adds	r4, #2
 801aaa2:	9305      	str	r3, [sp, #20]
 801aaa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ab70 <_svfiprintf_r+0x1fc>
 801aaa8:	7821      	ldrb	r1, [r4, #0]
 801aaaa:	2203      	movs	r2, #3
 801aaac:	4650      	mov	r0, sl
 801aaae:	f7e5 fc0f 	bl	80002d0 <memchr>
 801aab2:	b140      	cbz	r0, 801aac6 <_svfiprintf_r+0x152>
 801aab4:	2340      	movs	r3, #64	; 0x40
 801aab6:	eba0 000a 	sub.w	r0, r0, sl
 801aaba:	fa03 f000 	lsl.w	r0, r3, r0
 801aabe:	9b04      	ldr	r3, [sp, #16]
 801aac0:	4303      	orrs	r3, r0
 801aac2:	3401      	adds	r4, #1
 801aac4:	9304      	str	r3, [sp, #16]
 801aac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aaca:	4826      	ldr	r0, [pc, #152]	; (801ab64 <_svfiprintf_r+0x1f0>)
 801aacc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aad0:	2206      	movs	r2, #6
 801aad2:	f7e5 fbfd 	bl	80002d0 <memchr>
 801aad6:	2800      	cmp	r0, #0
 801aad8:	d038      	beq.n	801ab4c <_svfiprintf_r+0x1d8>
 801aada:	4b23      	ldr	r3, [pc, #140]	; (801ab68 <_svfiprintf_r+0x1f4>)
 801aadc:	bb1b      	cbnz	r3, 801ab26 <_svfiprintf_r+0x1b2>
 801aade:	9b03      	ldr	r3, [sp, #12]
 801aae0:	3307      	adds	r3, #7
 801aae2:	f023 0307 	bic.w	r3, r3, #7
 801aae6:	3308      	adds	r3, #8
 801aae8:	9303      	str	r3, [sp, #12]
 801aaea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aaec:	4433      	add	r3, r6
 801aaee:	9309      	str	r3, [sp, #36]	; 0x24
 801aaf0:	e767      	b.n	801a9c2 <_svfiprintf_r+0x4e>
 801aaf2:	fb0c 3202 	mla	r2, ip, r2, r3
 801aaf6:	460c      	mov	r4, r1
 801aaf8:	2001      	movs	r0, #1
 801aafa:	e7a5      	b.n	801aa48 <_svfiprintf_r+0xd4>
 801aafc:	2300      	movs	r3, #0
 801aafe:	3401      	adds	r4, #1
 801ab00:	9305      	str	r3, [sp, #20]
 801ab02:	4619      	mov	r1, r3
 801ab04:	f04f 0c0a 	mov.w	ip, #10
 801ab08:	4620      	mov	r0, r4
 801ab0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ab0e:	3a30      	subs	r2, #48	; 0x30
 801ab10:	2a09      	cmp	r2, #9
 801ab12:	d903      	bls.n	801ab1c <_svfiprintf_r+0x1a8>
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d0c5      	beq.n	801aaa4 <_svfiprintf_r+0x130>
 801ab18:	9105      	str	r1, [sp, #20]
 801ab1a:	e7c3      	b.n	801aaa4 <_svfiprintf_r+0x130>
 801ab1c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ab20:	4604      	mov	r4, r0
 801ab22:	2301      	movs	r3, #1
 801ab24:	e7f0      	b.n	801ab08 <_svfiprintf_r+0x194>
 801ab26:	ab03      	add	r3, sp, #12
 801ab28:	9300      	str	r3, [sp, #0]
 801ab2a:	462a      	mov	r2, r5
 801ab2c:	4b0f      	ldr	r3, [pc, #60]	; (801ab6c <_svfiprintf_r+0x1f8>)
 801ab2e:	a904      	add	r1, sp, #16
 801ab30:	4638      	mov	r0, r7
 801ab32:	f3af 8000 	nop.w
 801ab36:	1c42      	adds	r2, r0, #1
 801ab38:	4606      	mov	r6, r0
 801ab3a:	d1d6      	bne.n	801aaea <_svfiprintf_r+0x176>
 801ab3c:	89ab      	ldrh	r3, [r5, #12]
 801ab3e:	065b      	lsls	r3, r3, #25
 801ab40:	f53f af2c 	bmi.w	801a99c <_svfiprintf_r+0x28>
 801ab44:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab46:	b01d      	add	sp, #116	; 0x74
 801ab48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab4c:	ab03      	add	r3, sp, #12
 801ab4e:	9300      	str	r3, [sp, #0]
 801ab50:	462a      	mov	r2, r5
 801ab52:	4b06      	ldr	r3, [pc, #24]	; (801ab6c <_svfiprintf_r+0x1f8>)
 801ab54:	a904      	add	r1, sp, #16
 801ab56:	4638      	mov	r0, r7
 801ab58:	f000 f9d4 	bl	801af04 <_printf_i>
 801ab5c:	e7eb      	b.n	801ab36 <_svfiprintf_r+0x1c2>
 801ab5e:	bf00      	nop
 801ab60:	08032000 	.word	0x08032000
 801ab64:	0803200a 	.word	0x0803200a
 801ab68:	00000000 	.word	0x00000000
 801ab6c:	0801a8bf 	.word	0x0801a8bf
 801ab70:	08032006 	.word	0x08032006

0801ab74 <__sfputc_r>:
 801ab74:	6893      	ldr	r3, [r2, #8]
 801ab76:	3b01      	subs	r3, #1
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	b410      	push	{r4}
 801ab7c:	6093      	str	r3, [r2, #8]
 801ab7e:	da08      	bge.n	801ab92 <__sfputc_r+0x1e>
 801ab80:	6994      	ldr	r4, [r2, #24]
 801ab82:	42a3      	cmp	r3, r4
 801ab84:	db01      	blt.n	801ab8a <__sfputc_r+0x16>
 801ab86:	290a      	cmp	r1, #10
 801ab88:	d103      	bne.n	801ab92 <__sfputc_r+0x1e>
 801ab8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab8e:	f7ff bc3f 	b.w	801a410 <__swbuf_r>
 801ab92:	6813      	ldr	r3, [r2, #0]
 801ab94:	1c58      	adds	r0, r3, #1
 801ab96:	6010      	str	r0, [r2, #0]
 801ab98:	7019      	strb	r1, [r3, #0]
 801ab9a:	4608      	mov	r0, r1
 801ab9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aba0:	4770      	bx	lr

0801aba2 <__sfputs_r>:
 801aba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aba4:	4606      	mov	r6, r0
 801aba6:	460f      	mov	r7, r1
 801aba8:	4614      	mov	r4, r2
 801abaa:	18d5      	adds	r5, r2, r3
 801abac:	42ac      	cmp	r4, r5
 801abae:	d101      	bne.n	801abb4 <__sfputs_r+0x12>
 801abb0:	2000      	movs	r0, #0
 801abb2:	e007      	b.n	801abc4 <__sfputs_r+0x22>
 801abb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801abb8:	463a      	mov	r2, r7
 801abba:	4630      	mov	r0, r6
 801abbc:	f7ff ffda 	bl	801ab74 <__sfputc_r>
 801abc0:	1c43      	adds	r3, r0, #1
 801abc2:	d1f3      	bne.n	801abac <__sfputs_r+0xa>
 801abc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801abc8 <_vfiprintf_r>:
 801abc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abcc:	460d      	mov	r5, r1
 801abce:	b09d      	sub	sp, #116	; 0x74
 801abd0:	4614      	mov	r4, r2
 801abd2:	4698      	mov	r8, r3
 801abd4:	4606      	mov	r6, r0
 801abd6:	b118      	cbz	r0, 801abe0 <_vfiprintf_r+0x18>
 801abd8:	6983      	ldr	r3, [r0, #24]
 801abda:	b90b      	cbnz	r3, 801abe0 <_vfiprintf_r+0x18>
 801abdc:	f7ff f8ca 	bl	8019d74 <__sinit>
 801abe0:	4b89      	ldr	r3, [pc, #548]	; (801ae08 <_vfiprintf_r+0x240>)
 801abe2:	429d      	cmp	r5, r3
 801abe4:	d11b      	bne.n	801ac1e <_vfiprintf_r+0x56>
 801abe6:	6875      	ldr	r5, [r6, #4]
 801abe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801abea:	07d9      	lsls	r1, r3, #31
 801abec:	d405      	bmi.n	801abfa <_vfiprintf_r+0x32>
 801abee:	89ab      	ldrh	r3, [r5, #12]
 801abf0:	059a      	lsls	r2, r3, #22
 801abf2:	d402      	bmi.n	801abfa <_vfiprintf_r+0x32>
 801abf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801abf6:	f7ff f980 	bl	8019efa <__retarget_lock_acquire_recursive>
 801abfa:	89ab      	ldrh	r3, [r5, #12]
 801abfc:	071b      	lsls	r3, r3, #28
 801abfe:	d501      	bpl.n	801ac04 <_vfiprintf_r+0x3c>
 801ac00:	692b      	ldr	r3, [r5, #16]
 801ac02:	b9eb      	cbnz	r3, 801ac40 <_vfiprintf_r+0x78>
 801ac04:	4629      	mov	r1, r5
 801ac06:	4630      	mov	r0, r6
 801ac08:	f7ff fc66 	bl	801a4d8 <__swsetup_r>
 801ac0c:	b1c0      	cbz	r0, 801ac40 <_vfiprintf_r+0x78>
 801ac0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ac10:	07dc      	lsls	r4, r3, #31
 801ac12:	d50e      	bpl.n	801ac32 <_vfiprintf_r+0x6a>
 801ac14:	f04f 30ff 	mov.w	r0, #4294967295
 801ac18:	b01d      	add	sp, #116	; 0x74
 801ac1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac1e:	4b7b      	ldr	r3, [pc, #492]	; (801ae0c <_vfiprintf_r+0x244>)
 801ac20:	429d      	cmp	r5, r3
 801ac22:	d101      	bne.n	801ac28 <_vfiprintf_r+0x60>
 801ac24:	68b5      	ldr	r5, [r6, #8]
 801ac26:	e7df      	b.n	801abe8 <_vfiprintf_r+0x20>
 801ac28:	4b79      	ldr	r3, [pc, #484]	; (801ae10 <_vfiprintf_r+0x248>)
 801ac2a:	429d      	cmp	r5, r3
 801ac2c:	bf08      	it	eq
 801ac2e:	68f5      	ldreq	r5, [r6, #12]
 801ac30:	e7da      	b.n	801abe8 <_vfiprintf_r+0x20>
 801ac32:	89ab      	ldrh	r3, [r5, #12]
 801ac34:	0598      	lsls	r0, r3, #22
 801ac36:	d4ed      	bmi.n	801ac14 <_vfiprintf_r+0x4c>
 801ac38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ac3a:	f7ff f95f 	bl	8019efc <__retarget_lock_release_recursive>
 801ac3e:	e7e9      	b.n	801ac14 <_vfiprintf_r+0x4c>
 801ac40:	2300      	movs	r3, #0
 801ac42:	9309      	str	r3, [sp, #36]	; 0x24
 801ac44:	2320      	movs	r3, #32
 801ac46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ac4a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ac4e:	2330      	movs	r3, #48	; 0x30
 801ac50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ae14 <_vfiprintf_r+0x24c>
 801ac54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ac58:	f04f 0901 	mov.w	r9, #1
 801ac5c:	4623      	mov	r3, r4
 801ac5e:	469a      	mov	sl, r3
 801ac60:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac64:	b10a      	cbz	r2, 801ac6a <_vfiprintf_r+0xa2>
 801ac66:	2a25      	cmp	r2, #37	; 0x25
 801ac68:	d1f9      	bne.n	801ac5e <_vfiprintf_r+0x96>
 801ac6a:	ebba 0b04 	subs.w	fp, sl, r4
 801ac6e:	d00b      	beq.n	801ac88 <_vfiprintf_r+0xc0>
 801ac70:	465b      	mov	r3, fp
 801ac72:	4622      	mov	r2, r4
 801ac74:	4629      	mov	r1, r5
 801ac76:	4630      	mov	r0, r6
 801ac78:	f7ff ff93 	bl	801aba2 <__sfputs_r>
 801ac7c:	3001      	adds	r0, #1
 801ac7e:	f000 80aa 	beq.w	801add6 <_vfiprintf_r+0x20e>
 801ac82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac84:	445a      	add	r2, fp
 801ac86:	9209      	str	r2, [sp, #36]	; 0x24
 801ac88:	f89a 3000 	ldrb.w	r3, [sl]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	f000 80a2 	beq.w	801add6 <_vfiprintf_r+0x20e>
 801ac92:	2300      	movs	r3, #0
 801ac94:	f04f 32ff 	mov.w	r2, #4294967295
 801ac98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac9c:	f10a 0a01 	add.w	sl, sl, #1
 801aca0:	9304      	str	r3, [sp, #16]
 801aca2:	9307      	str	r3, [sp, #28]
 801aca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aca8:	931a      	str	r3, [sp, #104]	; 0x68
 801acaa:	4654      	mov	r4, sl
 801acac:	2205      	movs	r2, #5
 801acae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acb2:	4858      	ldr	r0, [pc, #352]	; (801ae14 <_vfiprintf_r+0x24c>)
 801acb4:	f7e5 fb0c 	bl	80002d0 <memchr>
 801acb8:	9a04      	ldr	r2, [sp, #16]
 801acba:	b9d8      	cbnz	r0, 801acf4 <_vfiprintf_r+0x12c>
 801acbc:	06d1      	lsls	r1, r2, #27
 801acbe:	bf44      	itt	mi
 801acc0:	2320      	movmi	r3, #32
 801acc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801acc6:	0713      	lsls	r3, r2, #28
 801acc8:	bf44      	itt	mi
 801acca:	232b      	movmi	r3, #43	; 0x2b
 801accc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801acd0:	f89a 3000 	ldrb.w	r3, [sl]
 801acd4:	2b2a      	cmp	r3, #42	; 0x2a
 801acd6:	d015      	beq.n	801ad04 <_vfiprintf_r+0x13c>
 801acd8:	9a07      	ldr	r2, [sp, #28]
 801acda:	4654      	mov	r4, sl
 801acdc:	2000      	movs	r0, #0
 801acde:	f04f 0c0a 	mov.w	ip, #10
 801ace2:	4621      	mov	r1, r4
 801ace4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ace8:	3b30      	subs	r3, #48	; 0x30
 801acea:	2b09      	cmp	r3, #9
 801acec:	d94e      	bls.n	801ad8c <_vfiprintf_r+0x1c4>
 801acee:	b1b0      	cbz	r0, 801ad1e <_vfiprintf_r+0x156>
 801acf0:	9207      	str	r2, [sp, #28]
 801acf2:	e014      	b.n	801ad1e <_vfiprintf_r+0x156>
 801acf4:	eba0 0308 	sub.w	r3, r0, r8
 801acf8:	fa09 f303 	lsl.w	r3, r9, r3
 801acfc:	4313      	orrs	r3, r2
 801acfe:	9304      	str	r3, [sp, #16]
 801ad00:	46a2      	mov	sl, r4
 801ad02:	e7d2      	b.n	801acaa <_vfiprintf_r+0xe2>
 801ad04:	9b03      	ldr	r3, [sp, #12]
 801ad06:	1d19      	adds	r1, r3, #4
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	9103      	str	r1, [sp, #12]
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	bfbb      	ittet	lt
 801ad10:	425b      	neglt	r3, r3
 801ad12:	f042 0202 	orrlt.w	r2, r2, #2
 801ad16:	9307      	strge	r3, [sp, #28]
 801ad18:	9307      	strlt	r3, [sp, #28]
 801ad1a:	bfb8      	it	lt
 801ad1c:	9204      	strlt	r2, [sp, #16]
 801ad1e:	7823      	ldrb	r3, [r4, #0]
 801ad20:	2b2e      	cmp	r3, #46	; 0x2e
 801ad22:	d10c      	bne.n	801ad3e <_vfiprintf_r+0x176>
 801ad24:	7863      	ldrb	r3, [r4, #1]
 801ad26:	2b2a      	cmp	r3, #42	; 0x2a
 801ad28:	d135      	bne.n	801ad96 <_vfiprintf_r+0x1ce>
 801ad2a:	9b03      	ldr	r3, [sp, #12]
 801ad2c:	1d1a      	adds	r2, r3, #4
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	9203      	str	r2, [sp, #12]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	bfb8      	it	lt
 801ad36:	f04f 33ff 	movlt.w	r3, #4294967295
 801ad3a:	3402      	adds	r4, #2
 801ad3c:	9305      	str	r3, [sp, #20]
 801ad3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ae24 <_vfiprintf_r+0x25c>
 801ad42:	7821      	ldrb	r1, [r4, #0]
 801ad44:	2203      	movs	r2, #3
 801ad46:	4650      	mov	r0, sl
 801ad48:	f7e5 fac2 	bl	80002d0 <memchr>
 801ad4c:	b140      	cbz	r0, 801ad60 <_vfiprintf_r+0x198>
 801ad4e:	2340      	movs	r3, #64	; 0x40
 801ad50:	eba0 000a 	sub.w	r0, r0, sl
 801ad54:	fa03 f000 	lsl.w	r0, r3, r0
 801ad58:	9b04      	ldr	r3, [sp, #16]
 801ad5a:	4303      	orrs	r3, r0
 801ad5c:	3401      	adds	r4, #1
 801ad5e:	9304      	str	r3, [sp, #16]
 801ad60:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad64:	482c      	ldr	r0, [pc, #176]	; (801ae18 <_vfiprintf_r+0x250>)
 801ad66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ad6a:	2206      	movs	r2, #6
 801ad6c:	f7e5 fab0 	bl	80002d0 <memchr>
 801ad70:	2800      	cmp	r0, #0
 801ad72:	d03f      	beq.n	801adf4 <_vfiprintf_r+0x22c>
 801ad74:	4b29      	ldr	r3, [pc, #164]	; (801ae1c <_vfiprintf_r+0x254>)
 801ad76:	bb1b      	cbnz	r3, 801adc0 <_vfiprintf_r+0x1f8>
 801ad78:	9b03      	ldr	r3, [sp, #12]
 801ad7a:	3307      	adds	r3, #7
 801ad7c:	f023 0307 	bic.w	r3, r3, #7
 801ad80:	3308      	adds	r3, #8
 801ad82:	9303      	str	r3, [sp, #12]
 801ad84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad86:	443b      	add	r3, r7
 801ad88:	9309      	str	r3, [sp, #36]	; 0x24
 801ad8a:	e767      	b.n	801ac5c <_vfiprintf_r+0x94>
 801ad8c:	fb0c 3202 	mla	r2, ip, r2, r3
 801ad90:	460c      	mov	r4, r1
 801ad92:	2001      	movs	r0, #1
 801ad94:	e7a5      	b.n	801ace2 <_vfiprintf_r+0x11a>
 801ad96:	2300      	movs	r3, #0
 801ad98:	3401      	adds	r4, #1
 801ad9a:	9305      	str	r3, [sp, #20]
 801ad9c:	4619      	mov	r1, r3
 801ad9e:	f04f 0c0a 	mov.w	ip, #10
 801ada2:	4620      	mov	r0, r4
 801ada4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ada8:	3a30      	subs	r2, #48	; 0x30
 801adaa:	2a09      	cmp	r2, #9
 801adac:	d903      	bls.n	801adb6 <_vfiprintf_r+0x1ee>
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d0c5      	beq.n	801ad3e <_vfiprintf_r+0x176>
 801adb2:	9105      	str	r1, [sp, #20]
 801adb4:	e7c3      	b.n	801ad3e <_vfiprintf_r+0x176>
 801adb6:	fb0c 2101 	mla	r1, ip, r1, r2
 801adba:	4604      	mov	r4, r0
 801adbc:	2301      	movs	r3, #1
 801adbe:	e7f0      	b.n	801ada2 <_vfiprintf_r+0x1da>
 801adc0:	ab03      	add	r3, sp, #12
 801adc2:	9300      	str	r3, [sp, #0]
 801adc4:	462a      	mov	r2, r5
 801adc6:	4b16      	ldr	r3, [pc, #88]	; (801ae20 <_vfiprintf_r+0x258>)
 801adc8:	a904      	add	r1, sp, #16
 801adca:	4630      	mov	r0, r6
 801adcc:	f3af 8000 	nop.w
 801add0:	4607      	mov	r7, r0
 801add2:	1c78      	adds	r0, r7, #1
 801add4:	d1d6      	bne.n	801ad84 <_vfiprintf_r+0x1bc>
 801add6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801add8:	07d9      	lsls	r1, r3, #31
 801adda:	d405      	bmi.n	801ade8 <_vfiprintf_r+0x220>
 801addc:	89ab      	ldrh	r3, [r5, #12]
 801adde:	059a      	lsls	r2, r3, #22
 801ade0:	d402      	bmi.n	801ade8 <_vfiprintf_r+0x220>
 801ade2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ade4:	f7ff f88a 	bl	8019efc <__retarget_lock_release_recursive>
 801ade8:	89ab      	ldrh	r3, [r5, #12]
 801adea:	065b      	lsls	r3, r3, #25
 801adec:	f53f af12 	bmi.w	801ac14 <_vfiprintf_r+0x4c>
 801adf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801adf2:	e711      	b.n	801ac18 <_vfiprintf_r+0x50>
 801adf4:	ab03      	add	r3, sp, #12
 801adf6:	9300      	str	r3, [sp, #0]
 801adf8:	462a      	mov	r2, r5
 801adfa:	4b09      	ldr	r3, [pc, #36]	; (801ae20 <_vfiprintf_r+0x258>)
 801adfc:	a904      	add	r1, sp, #16
 801adfe:	4630      	mov	r0, r6
 801ae00:	f000 f880 	bl	801af04 <_printf_i>
 801ae04:	e7e4      	b.n	801add0 <_vfiprintf_r+0x208>
 801ae06:	bf00      	nop
 801ae08:	08031fbc 	.word	0x08031fbc
 801ae0c:	08031fdc 	.word	0x08031fdc
 801ae10:	08031f9c 	.word	0x08031f9c
 801ae14:	08032000 	.word	0x08032000
 801ae18:	0803200a 	.word	0x0803200a
 801ae1c:	00000000 	.word	0x00000000
 801ae20:	0801aba3 	.word	0x0801aba3
 801ae24:	08032006 	.word	0x08032006

0801ae28 <_printf_common>:
 801ae28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae2c:	4616      	mov	r6, r2
 801ae2e:	4699      	mov	r9, r3
 801ae30:	688a      	ldr	r2, [r1, #8]
 801ae32:	690b      	ldr	r3, [r1, #16]
 801ae34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ae38:	4293      	cmp	r3, r2
 801ae3a:	bfb8      	it	lt
 801ae3c:	4613      	movlt	r3, r2
 801ae3e:	6033      	str	r3, [r6, #0]
 801ae40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ae44:	4607      	mov	r7, r0
 801ae46:	460c      	mov	r4, r1
 801ae48:	b10a      	cbz	r2, 801ae4e <_printf_common+0x26>
 801ae4a:	3301      	adds	r3, #1
 801ae4c:	6033      	str	r3, [r6, #0]
 801ae4e:	6823      	ldr	r3, [r4, #0]
 801ae50:	0699      	lsls	r1, r3, #26
 801ae52:	bf42      	ittt	mi
 801ae54:	6833      	ldrmi	r3, [r6, #0]
 801ae56:	3302      	addmi	r3, #2
 801ae58:	6033      	strmi	r3, [r6, #0]
 801ae5a:	6825      	ldr	r5, [r4, #0]
 801ae5c:	f015 0506 	ands.w	r5, r5, #6
 801ae60:	d106      	bne.n	801ae70 <_printf_common+0x48>
 801ae62:	f104 0a19 	add.w	sl, r4, #25
 801ae66:	68e3      	ldr	r3, [r4, #12]
 801ae68:	6832      	ldr	r2, [r6, #0]
 801ae6a:	1a9b      	subs	r3, r3, r2
 801ae6c:	42ab      	cmp	r3, r5
 801ae6e:	dc26      	bgt.n	801aebe <_printf_common+0x96>
 801ae70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ae74:	1e13      	subs	r3, r2, #0
 801ae76:	6822      	ldr	r2, [r4, #0]
 801ae78:	bf18      	it	ne
 801ae7a:	2301      	movne	r3, #1
 801ae7c:	0692      	lsls	r2, r2, #26
 801ae7e:	d42b      	bmi.n	801aed8 <_printf_common+0xb0>
 801ae80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ae84:	4649      	mov	r1, r9
 801ae86:	4638      	mov	r0, r7
 801ae88:	47c0      	blx	r8
 801ae8a:	3001      	adds	r0, #1
 801ae8c:	d01e      	beq.n	801aecc <_printf_common+0xa4>
 801ae8e:	6823      	ldr	r3, [r4, #0]
 801ae90:	68e5      	ldr	r5, [r4, #12]
 801ae92:	6832      	ldr	r2, [r6, #0]
 801ae94:	f003 0306 	and.w	r3, r3, #6
 801ae98:	2b04      	cmp	r3, #4
 801ae9a:	bf08      	it	eq
 801ae9c:	1aad      	subeq	r5, r5, r2
 801ae9e:	68a3      	ldr	r3, [r4, #8]
 801aea0:	6922      	ldr	r2, [r4, #16]
 801aea2:	bf0c      	ite	eq
 801aea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aea8:	2500      	movne	r5, #0
 801aeaa:	4293      	cmp	r3, r2
 801aeac:	bfc4      	itt	gt
 801aeae:	1a9b      	subgt	r3, r3, r2
 801aeb0:	18ed      	addgt	r5, r5, r3
 801aeb2:	2600      	movs	r6, #0
 801aeb4:	341a      	adds	r4, #26
 801aeb6:	42b5      	cmp	r5, r6
 801aeb8:	d11a      	bne.n	801aef0 <_printf_common+0xc8>
 801aeba:	2000      	movs	r0, #0
 801aebc:	e008      	b.n	801aed0 <_printf_common+0xa8>
 801aebe:	2301      	movs	r3, #1
 801aec0:	4652      	mov	r2, sl
 801aec2:	4649      	mov	r1, r9
 801aec4:	4638      	mov	r0, r7
 801aec6:	47c0      	blx	r8
 801aec8:	3001      	adds	r0, #1
 801aeca:	d103      	bne.n	801aed4 <_printf_common+0xac>
 801aecc:	f04f 30ff 	mov.w	r0, #4294967295
 801aed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aed4:	3501      	adds	r5, #1
 801aed6:	e7c6      	b.n	801ae66 <_printf_common+0x3e>
 801aed8:	18e1      	adds	r1, r4, r3
 801aeda:	1c5a      	adds	r2, r3, #1
 801aedc:	2030      	movs	r0, #48	; 0x30
 801aede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aee2:	4422      	add	r2, r4
 801aee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aeec:	3302      	adds	r3, #2
 801aeee:	e7c7      	b.n	801ae80 <_printf_common+0x58>
 801aef0:	2301      	movs	r3, #1
 801aef2:	4622      	mov	r2, r4
 801aef4:	4649      	mov	r1, r9
 801aef6:	4638      	mov	r0, r7
 801aef8:	47c0      	blx	r8
 801aefa:	3001      	adds	r0, #1
 801aefc:	d0e6      	beq.n	801aecc <_printf_common+0xa4>
 801aefe:	3601      	adds	r6, #1
 801af00:	e7d9      	b.n	801aeb6 <_printf_common+0x8e>
	...

0801af04 <_printf_i>:
 801af04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801af08:	7e0f      	ldrb	r7, [r1, #24]
 801af0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801af0c:	2f78      	cmp	r7, #120	; 0x78
 801af0e:	4691      	mov	r9, r2
 801af10:	4680      	mov	r8, r0
 801af12:	460c      	mov	r4, r1
 801af14:	469a      	mov	sl, r3
 801af16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801af1a:	d807      	bhi.n	801af2c <_printf_i+0x28>
 801af1c:	2f62      	cmp	r7, #98	; 0x62
 801af1e:	d80a      	bhi.n	801af36 <_printf_i+0x32>
 801af20:	2f00      	cmp	r7, #0
 801af22:	f000 80d8 	beq.w	801b0d6 <_printf_i+0x1d2>
 801af26:	2f58      	cmp	r7, #88	; 0x58
 801af28:	f000 80a3 	beq.w	801b072 <_printf_i+0x16e>
 801af2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801af34:	e03a      	b.n	801afac <_printf_i+0xa8>
 801af36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801af3a:	2b15      	cmp	r3, #21
 801af3c:	d8f6      	bhi.n	801af2c <_printf_i+0x28>
 801af3e:	a101      	add	r1, pc, #4	; (adr r1, 801af44 <_printf_i+0x40>)
 801af40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801af44:	0801af9d 	.word	0x0801af9d
 801af48:	0801afb1 	.word	0x0801afb1
 801af4c:	0801af2d 	.word	0x0801af2d
 801af50:	0801af2d 	.word	0x0801af2d
 801af54:	0801af2d 	.word	0x0801af2d
 801af58:	0801af2d 	.word	0x0801af2d
 801af5c:	0801afb1 	.word	0x0801afb1
 801af60:	0801af2d 	.word	0x0801af2d
 801af64:	0801af2d 	.word	0x0801af2d
 801af68:	0801af2d 	.word	0x0801af2d
 801af6c:	0801af2d 	.word	0x0801af2d
 801af70:	0801b0bd 	.word	0x0801b0bd
 801af74:	0801afe1 	.word	0x0801afe1
 801af78:	0801b09f 	.word	0x0801b09f
 801af7c:	0801af2d 	.word	0x0801af2d
 801af80:	0801af2d 	.word	0x0801af2d
 801af84:	0801b0df 	.word	0x0801b0df
 801af88:	0801af2d 	.word	0x0801af2d
 801af8c:	0801afe1 	.word	0x0801afe1
 801af90:	0801af2d 	.word	0x0801af2d
 801af94:	0801af2d 	.word	0x0801af2d
 801af98:	0801b0a7 	.word	0x0801b0a7
 801af9c:	682b      	ldr	r3, [r5, #0]
 801af9e:	1d1a      	adds	r2, r3, #4
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	602a      	str	r2, [r5, #0]
 801afa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801afa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801afac:	2301      	movs	r3, #1
 801afae:	e0a3      	b.n	801b0f8 <_printf_i+0x1f4>
 801afb0:	6820      	ldr	r0, [r4, #0]
 801afb2:	6829      	ldr	r1, [r5, #0]
 801afb4:	0606      	lsls	r6, r0, #24
 801afb6:	f101 0304 	add.w	r3, r1, #4
 801afba:	d50a      	bpl.n	801afd2 <_printf_i+0xce>
 801afbc:	680e      	ldr	r6, [r1, #0]
 801afbe:	602b      	str	r3, [r5, #0]
 801afc0:	2e00      	cmp	r6, #0
 801afc2:	da03      	bge.n	801afcc <_printf_i+0xc8>
 801afc4:	232d      	movs	r3, #45	; 0x2d
 801afc6:	4276      	negs	r6, r6
 801afc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801afcc:	485e      	ldr	r0, [pc, #376]	; (801b148 <_printf_i+0x244>)
 801afce:	230a      	movs	r3, #10
 801afd0:	e019      	b.n	801b006 <_printf_i+0x102>
 801afd2:	680e      	ldr	r6, [r1, #0]
 801afd4:	602b      	str	r3, [r5, #0]
 801afd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801afda:	bf18      	it	ne
 801afdc:	b236      	sxthne	r6, r6
 801afde:	e7ef      	b.n	801afc0 <_printf_i+0xbc>
 801afe0:	682b      	ldr	r3, [r5, #0]
 801afe2:	6820      	ldr	r0, [r4, #0]
 801afe4:	1d19      	adds	r1, r3, #4
 801afe6:	6029      	str	r1, [r5, #0]
 801afe8:	0601      	lsls	r1, r0, #24
 801afea:	d501      	bpl.n	801aff0 <_printf_i+0xec>
 801afec:	681e      	ldr	r6, [r3, #0]
 801afee:	e002      	b.n	801aff6 <_printf_i+0xf2>
 801aff0:	0646      	lsls	r6, r0, #25
 801aff2:	d5fb      	bpl.n	801afec <_printf_i+0xe8>
 801aff4:	881e      	ldrh	r6, [r3, #0]
 801aff6:	4854      	ldr	r0, [pc, #336]	; (801b148 <_printf_i+0x244>)
 801aff8:	2f6f      	cmp	r7, #111	; 0x6f
 801affa:	bf0c      	ite	eq
 801affc:	2308      	moveq	r3, #8
 801affe:	230a      	movne	r3, #10
 801b000:	2100      	movs	r1, #0
 801b002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b006:	6865      	ldr	r5, [r4, #4]
 801b008:	60a5      	str	r5, [r4, #8]
 801b00a:	2d00      	cmp	r5, #0
 801b00c:	bfa2      	ittt	ge
 801b00e:	6821      	ldrge	r1, [r4, #0]
 801b010:	f021 0104 	bicge.w	r1, r1, #4
 801b014:	6021      	strge	r1, [r4, #0]
 801b016:	b90e      	cbnz	r6, 801b01c <_printf_i+0x118>
 801b018:	2d00      	cmp	r5, #0
 801b01a:	d04d      	beq.n	801b0b8 <_printf_i+0x1b4>
 801b01c:	4615      	mov	r5, r2
 801b01e:	fbb6 f1f3 	udiv	r1, r6, r3
 801b022:	fb03 6711 	mls	r7, r3, r1, r6
 801b026:	5dc7      	ldrb	r7, [r0, r7]
 801b028:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b02c:	4637      	mov	r7, r6
 801b02e:	42bb      	cmp	r3, r7
 801b030:	460e      	mov	r6, r1
 801b032:	d9f4      	bls.n	801b01e <_printf_i+0x11a>
 801b034:	2b08      	cmp	r3, #8
 801b036:	d10b      	bne.n	801b050 <_printf_i+0x14c>
 801b038:	6823      	ldr	r3, [r4, #0]
 801b03a:	07de      	lsls	r6, r3, #31
 801b03c:	d508      	bpl.n	801b050 <_printf_i+0x14c>
 801b03e:	6923      	ldr	r3, [r4, #16]
 801b040:	6861      	ldr	r1, [r4, #4]
 801b042:	4299      	cmp	r1, r3
 801b044:	bfde      	ittt	le
 801b046:	2330      	movle	r3, #48	; 0x30
 801b048:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b04c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b050:	1b52      	subs	r2, r2, r5
 801b052:	6122      	str	r2, [r4, #16]
 801b054:	f8cd a000 	str.w	sl, [sp]
 801b058:	464b      	mov	r3, r9
 801b05a:	aa03      	add	r2, sp, #12
 801b05c:	4621      	mov	r1, r4
 801b05e:	4640      	mov	r0, r8
 801b060:	f7ff fee2 	bl	801ae28 <_printf_common>
 801b064:	3001      	adds	r0, #1
 801b066:	d14c      	bne.n	801b102 <_printf_i+0x1fe>
 801b068:	f04f 30ff 	mov.w	r0, #4294967295
 801b06c:	b004      	add	sp, #16
 801b06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b072:	4835      	ldr	r0, [pc, #212]	; (801b148 <_printf_i+0x244>)
 801b074:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b078:	6829      	ldr	r1, [r5, #0]
 801b07a:	6823      	ldr	r3, [r4, #0]
 801b07c:	f851 6b04 	ldr.w	r6, [r1], #4
 801b080:	6029      	str	r1, [r5, #0]
 801b082:	061d      	lsls	r5, r3, #24
 801b084:	d514      	bpl.n	801b0b0 <_printf_i+0x1ac>
 801b086:	07df      	lsls	r7, r3, #31
 801b088:	bf44      	itt	mi
 801b08a:	f043 0320 	orrmi.w	r3, r3, #32
 801b08e:	6023      	strmi	r3, [r4, #0]
 801b090:	b91e      	cbnz	r6, 801b09a <_printf_i+0x196>
 801b092:	6823      	ldr	r3, [r4, #0]
 801b094:	f023 0320 	bic.w	r3, r3, #32
 801b098:	6023      	str	r3, [r4, #0]
 801b09a:	2310      	movs	r3, #16
 801b09c:	e7b0      	b.n	801b000 <_printf_i+0xfc>
 801b09e:	6823      	ldr	r3, [r4, #0]
 801b0a0:	f043 0320 	orr.w	r3, r3, #32
 801b0a4:	6023      	str	r3, [r4, #0]
 801b0a6:	2378      	movs	r3, #120	; 0x78
 801b0a8:	4828      	ldr	r0, [pc, #160]	; (801b14c <_printf_i+0x248>)
 801b0aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b0ae:	e7e3      	b.n	801b078 <_printf_i+0x174>
 801b0b0:	0659      	lsls	r1, r3, #25
 801b0b2:	bf48      	it	mi
 801b0b4:	b2b6      	uxthmi	r6, r6
 801b0b6:	e7e6      	b.n	801b086 <_printf_i+0x182>
 801b0b8:	4615      	mov	r5, r2
 801b0ba:	e7bb      	b.n	801b034 <_printf_i+0x130>
 801b0bc:	682b      	ldr	r3, [r5, #0]
 801b0be:	6826      	ldr	r6, [r4, #0]
 801b0c0:	6961      	ldr	r1, [r4, #20]
 801b0c2:	1d18      	adds	r0, r3, #4
 801b0c4:	6028      	str	r0, [r5, #0]
 801b0c6:	0635      	lsls	r5, r6, #24
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	d501      	bpl.n	801b0d0 <_printf_i+0x1cc>
 801b0cc:	6019      	str	r1, [r3, #0]
 801b0ce:	e002      	b.n	801b0d6 <_printf_i+0x1d2>
 801b0d0:	0670      	lsls	r0, r6, #25
 801b0d2:	d5fb      	bpl.n	801b0cc <_printf_i+0x1c8>
 801b0d4:	8019      	strh	r1, [r3, #0]
 801b0d6:	2300      	movs	r3, #0
 801b0d8:	6123      	str	r3, [r4, #16]
 801b0da:	4615      	mov	r5, r2
 801b0dc:	e7ba      	b.n	801b054 <_printf_i+0x150>
 801b0de:	682b      	ldr	r3, [r5, #0]
 801b0e0:	1d1a      	adds	r2, r3, #4
 801b0e2:	602a      	str	r2, [r5, #0]
 801b0e4:	681d      	ldr	r5, [r3, #0]
 801b0e6:	6862      	ldr	r2, [r4, #4]
 801b0e8:	2100      	movs	r1, #0
 801b0ea:	4628      	mov	r0, r5
 801b0ec:	f7e5 f8f0 	bl	80002d0 <memchr>
 801b0f0:	b108      	cbz	r0, 801b0f6 <_printf_i+0x1f2>
 801b0f2:	1b40      	subs	r0, r0, r5
 801b0f4:	6060      	str	r0, [r4, #4]
 801b0f6:	6863      	ldr	r3, [r4, #4]
 801b0f8:	6123      	str	r3, [r4, #16]
 801b0fa:	2300      	movs	r3, #0
 801b0fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b100:	e7a8      	b.n	801b054 <_printf_i+0x150>
 801b102:	6923      	ldr	r3, [r4, #16]
 801b104:	462a      	mov	r2, r5
 801b106:	4649      	mov	r1, r9
 801b108:	4640      	mov	r0, r8
 801b10a:	47d0      	blx	sl
 801b10c:	3001      	adds	r0, #1
 801b10e:	d0ab      	beq.n	801b068 <_printf_i+0x164>
 801b110:	6823      	ldr	r3, [r4, #0]
 801b112:	079b      	lsls	r3, r3, #30
 801b114:	d413      	bmi.n	801b13e <_printf_i+0x23a>
 801b116:	68e0      	ldr	r0, [r4, #12]
 801b118:	9b03      	ldr	r3, [sp, #12]
 801b11a:	4298      	cmp	r0, r3
 801b11c:	bfb8      	it	lt
 801b11e:	4618      	movlt	r0, r3
 801b120:	e7a4      	b.n	801b06c <_printf_i+0x168>
 801b122:	2301      	movs	r3, #1
 801b124:	4632      	mov	r2, r6
 801b126:	4649      	mov	r1, r9
 801b128:	4640      	mov	r0, r8
 801b12a:	47d0      	blx	sl
 801b12c:	3001      	adds	r0, #1
 801b12e:	d09b      	beq.n	801b068 <_printf_i+0x164>
 801b130:	3501      	adds	r5, #1
 801b132:	68e3      	ldr	r3, [r4, #12]
 801b134:	9903      	ldr	r1, [sp, #12]
 801b136:	1a5b      	subs	r3, r3, r1
 801b138:	42ab      	cmp	r3, r5
 801b13a:	dcf2      	bgt.n	801b122 <_printf_i+0x21e>
 801b13c:	e7eb      	b.n	801b116 <_printf_i+0x212>
 801b13e:	2500      	movs	r5, #0
 801b140:	f104 0619 	add.w	r6, r4, #25
 801b144:	e7f5      	b.n	801b132 <_printf_i+0x22e>
 801b146:	bf00      	nop
 801b148:	08032011 	.word	0x08032011
 801b14c:	08032022 	.word	0x08032022

0801b150 <_putc_r>:
 801b150:	b570      	push	{r4, r5, r6, lr}
 801b152:	460d      	mov	r5, r1
 801b154:	4614      	mov	r4, r2
 801b156:	4606      	mov	r6, r0
 801b158:	b118      	cbz	r0, 801b162 <_putc_r+0x12>
 801b15a:	6983      	ldr	r3, [r0, #24]
 801b15c:	b90b      	cbnz	r3, 801b162 <_putc_r+0x12>
 801b15e:	f7fe fe09 	bl	8019d74 <__sinit>
 801b162:	4b1c      	ldr	r3, [pc, #112]	; (801b1d4 <_putc_r+0x84>)
 801b164:	429c      	cmp	r4, r3
 801b166:	d124      	bne.n	801b1b2 <_putc_r+0x62>
 801b168:	6874      	ldr	r4, [r6, #4]
 801b16a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b16c:	07d8      	lsls	r0, r3, #31
 801b16e:	d405      	bmi.n	801b17c <_putc_r+0x2c>
 801b170:	89a3      	ldrh	r3, [r4, #12]
 801b172:	0599      	lsls	r1, r3, #22
 801b174:	d402      	bmi.n	801b17c <_putc_r+0x2c>
 801b176:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b178:	f7fe febf 	bl	8019efa <__retarget_lock_acquire_recursive>
 801b17c:	68a3      	ldr	r3, [r4, #8]
 801b17e:	3b01      	subs	r3, #1
 801b180:	2b00      	cmp	r3, #0
 801b182:	60a3      	str	r3, [r4, #8]
 801b184:	da05      	bge.n	801b192 <_putc_r+0x42>
 801b186:	69a2      	ldr	r2, [r4, #24]
 801b188:	4293      	cmp	r3, r2
 801b18a:	db1c      	blt.n	801b1c6 <_putc_r+0x76>
 801b18c:	b2eb      	uxtb	r3, r5
 801b18e:	2b0a      	cmp	r3, #10
 801b190:	d019      	beq.n	801b1c6 <_putc_r+0x76>
 801b192:	6823      	ldr	r3, [r4, #0]
 801b194:	1c5a      	adds	r2, r3, #1
 801b196:	6022      	str	r2, [r4, #0]
 801b198:	701d      	strb	r5, [r3, #0]
 801b19a:	b2ed      	uxtb	r5, r5
 801b19c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b19e:	07da      	lsls	r2, r3, #31
 801b1a0:	d405      	bmi.n	801b1ae <_putc_r+0x5e>
 801b1a2:	89a3      	ldrh	r3, [r4, #12]
 801b1a4:	059b      	lsls	r3, r3, #22
 801b1a6:	d402      	bmi.n	801b1ae <_putc_r+0x5e>
 801b1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1aa:	f7fe fea7 	bl	8019efc <__retarget_lock_release_recursive>
 801b1ae:	4628      	mov	r0, r5
 801b1b0:	bd70      	pop	{r4, r5, r6, pc}
 801b1b2:	4b09      	ldr	r3, [pc, #36]	; (801b1d8 <_putc_r+0x88>)
 801b1b4:	429c      	cmp	r4, r3
 801b1b6:	d101      	bne.n	801b1bc <_putc_r+0x6c>
 801b1b8:	68b4      	ldr	r4, [r6, #8]
 801b1ba:	e7d6      	b.n	801b16a <_putc_r+0x1a>
 801b1bc:	4b07      	ldr	r3, [pc, #28]	; (801b1dc <_putc_r+0x8c>)
 801b1be:	429c      	cmp	r4, r3
 801b1c0:	bf08      	it	eq
 801b1c2:	68f4      	ldreq	r4, [r6, #12]
 801b1c4:	e7d1      	b.n	801b16a <_putc_r+0x1a>
 801b1c6:	4629      	mov	r1, r5
 801b1c8:	4622      	mov	r2, r4
 801b1ca:	4630      	mov	r0, r6
 801b1cc:	f7ff f920 	bl	801a410 <__swbuf_r>
 801b1d0:	4605      	mov	r5, r0
 801b1d2:	e7e3      	b.n	801b19c <_putc_r+0x4c>
 801b1d4:	08031fbc 	.word	0x08031fbc
 801b1d8:	08031fdc 	.word	0x08031fdc
 801b1dc:	08031f9c 	.word	0x08031f9c

0801b1e0 <_read_r>:
 801b1e0:	b538      	push	{r3, r4, r5, lr}
 801b1e2:	4d07      	ldr	r5, [pc, #28]	; (801b200 <_read_r+0x20>)
 801b1e4:	4604      	mov	r4, r0
 801b1e6:	4608      	mov	r0, r1
 801b1e8:	4611      	mov	r1, r2
 801b1ea:	2200      	movs	r2, #0
 801b1ec:	602a      	str	r2, [r5, #0]
 801b1ee:	461a      	mov	r2, r3
 801b1f0:	f001 fbc8 	bl	801c984 <_read>
 801b1f4:	1c43      	adds	r3, r0, #1
 801b1f6:	d102      	bne.n	801b1fe <_read_r+0x1e>
 801b1f8:	682b      	ldr	r3, [r5, #0]
 801b1fa:	b103      	cbz	r3, 801b1fe <_read_r+0x1e>
 801b1fc:	6023      	str	r3, [r4, #0]
 801b1fe:	bd38      	pop	{r3, r4, r5, pc}
 801b200:	2004a2f8 	.word	0x2004a2f8

0801b204 <_fstat_r>:
 801b204:	b538      	push	{r3, r4, r5, lr}
 801b206:	4d07      	ldr	r5, [pc, #28]	; (801b224 <_fstat_r+0x20>)
 801b208:	2300      	movs	r3, #0
 801b20a:	4604      	mov	r4, r0
 801b20c:	4608      	mov	r0, r1
 801b20e:	4611      	mov	r1, r2
 801b210:	602b      	str	r3, [r5, #0]
 801b212:	f001 fb9f 	bl	801c954 <_fstat>
 801b216:	1c43      	adds	r3, r0, #1
 801b218:	d102      	bne.n	801b220 <_fstat_r+0x1c>
 801b21a:	682b      	ldr	r3, [r5, #0]
 801b21c:	b103      	cbz	r3, 801b220 <_fstat_r+0x1c>
 801b21e:	6023      	str	r3, [r4, #0]
 801b220:	bd38      	pop	{r3, r4, r5, pc}
 801b222:	bf00      	nop
 801b224:	2004a2f8 	.word	0x2004a2f8

0801b228 <_isatty_r>:
 801b228:	b538      	push	{r3, r4, r5, lr}
 801b22a:	4d06      	ldr	r5, [pc, #24]	; (801b244 <_isatty_r+0x1c>)
 801b22c:	2300      	movs	r3, #0
 801b22e:	4604      	mov	r4, r0
 801b230:	4608      	mov	r0, r1
 801b232:	602b      	str	r3, [r5, #0]
 801b234:	f001 fb96 	bl	801c964 <_isatty>
 801b238:	1c43      	adds	r3, r0, #1
 801b23a:	d102      	bne.n	801b242 <_isatty_r+0x1a>
 801b23c:	682b      	ldr	r3, [r5, #0]
 801b23e:	b103      	cbz	r3, 801b242 <_isatty_r+0x1a>
 801b240:	6023      	str	r3, [r4, #0]
 801b242:	bd38      	pop	{r3, r4, r5, pc}
 801b244:	2004a2f8 	.word	0x2004a2f8

0801b248 <memmove>:
 801b248:	4288      	cmp	r0, r1
 801b24a:	b510      	push	{r4, lr}
 801b24c:	eb01 0402 	add.w	r4, r1, r2
 801b250:	d902      	bls.n	801b258 <memmove+0x10>
 801b252:	4284      	cmp	r4, r0
 801b254:	4623      	mov	r3, r4
 801b256:	d807      	bhi.n	801b268 <memmove+0x20>
 801b258:	1e43      	subs	r3, r0, #1
 801b25a:	42a1      	cmp	r1, r4
 801b25c:	d008      	beq.n	801b270 <memmove+0x28>
 801b25e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b262:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b266:	e7f8      	b.n	801b25a <memmove+0x12>
 801b268:	4402      	add	r2, r0
 801b26a:	4601      	mov	r1, r0
 801b26c:	428a      	cmp	r2, r1
 801b26e:	d100      	bne.n	801b272 <memmove+0x2a>
 801b270:	bd10      	pop	{r4, pc}
 801b272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b27a:	e7f7      	b.n	801b26c <memmove+0x24>

0801b27c <_malloc_usable_size_r>:
 801b27c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b280:	1f18      	subs	r0, r3, #4
 801b282:	2b00      	cmp	r3, #0
 801b284:	bfbc      	itt	lt
 801b286:	580b      	ldrlt	r3, [r1, r0]
 801b288:	18c0      	addlt	r0, r0, r3
 801b28a:	4770      	bx	lr
 801b28c:	0000      	movs	r0, r0
	...

0801b290 <tan>:
 801b290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b292:	ec53 2b10 	vmov	r2, r3, d0
 801b296:	4816      	ldr	r0, [pc, #88]	; (801b2f0 <tan+0x60>)
 801b298:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b29c:	4281      	cmp	r1, r0
 801b29e:	dc07      	bgt.n	801b2b0 <tan+0x20>
 801b2a0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 801b2e8 <tan+0x58>
 801b2a4:	2001      	movs	r0, #1
 801b2a6:	b005      	add	sp, #20
 801b2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b2ac:	f000 be6c 	b.w	801bf88 <__kernel_tan>
 801b2b0:	4810      	ldr	r0, [pc, #64]	; (801b2f4 <tan+0x64>)
 801b2b2:	4281      	cmp	r1, r0
 801b2b4:	dd09      	ble.n	801b2ca <tan+0x3a>
 801b2b6:	ee10 0a10 	vmov	r0, s0
 801b2ba:	4619      	mov	r1, r3
 801b2bc:	f7e5 f85c 	bl	8000378 <__aeabi_dsub>
 801b2c0:	ec41 0b10 	vmov	d0, r0, r1
 801b2c4:	b005      	add	sp, #20
 801b2c6:	f85d fb04 	ldr.w	pc, [sp], #4
 801b2ca:	4668      	mov	r0, sp
 801b2cc:	f000 f8fc 	bl	801b4c8 <__ieee754_rem_pio2>
 801b2d0:	0040      	lsls	r0, r0, #1
 801b2d2:	f000 0002 	and.w	r0, r0, #2
 801b2d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b2da:	ed9d 0b00 	vldr	d0, [sp]
 801b2de:	f1c0 0001 	rsb	r0, r0, #1
 801b2e2:	f000 fe51 	bl	801bf88 <__kernel_tan>
 801b2e6:	e7ed      	b.n	801b2c4 <tan+0x34>
	...
 801b2f0:	3fe921fb 	.word	0x3fe921fb
 801b2f4:	7fefffff 	.word	0x7fefffff

0801b2f8 <log10>:
 801b2f8:	b538      	push	{r3, r4, r5, lr}
 801b2fa:	ed2d 8b02 	vpush	{d8}
 801b2fe:	ec55 4b10 	vmov	r4, r5, d0
 801b302:	f000 f855 	bl	801b3b0 <__ieee754_log10>
 801b306:	4622      	mov	r2, r4
 801b308:	462b      	mov	r3, r5
 801b30a:	4620      	mov	r0, r4
 801b30c:	4629      	mov	r1, r5
 801b30e:	eeb0 8a40 	vmov.f32	s16, s0
 801b312:	eef0 8a60 	vmov.f32	s17, s1
 801b316:	f7e5 fc81 	bl	8000c1c <__aeabi_dcmpun>
 801b31a:	b998      	cbnz	r0, 801b344 <log10+0x4c>
 801b31c:	2200      	movs	r2, #0
 801b31e:	2300      	movs	r3, #0
 801b320:	4620      	mov	r0, r4
 801b322:	4629      	mov	r1, r5
 801b324:	f7e5 fc5c 	bl	8000be0 <__aeabi_dcmple>
 801b328:	b160      	cbz	r0, 801b344 <log10+0x4c>
 801b32a:	2200      	movs	r2, #0
 801b32c:	2300      	movs	r3, #0
 801b32e:	4620      	mov	r0, r4
 801b330:	4629      	mov	r1, r5
 801b332:	f7e5 fc41 	bl	8000bb8 <__aeabi_dcmpeq>
 801b336:	b160      	cbz	r0, 801b352 <log10+0x5a>
 801b338:	f7fe fcbe 	bl	8019cb8 <__errno>
 801b33c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 801b368 <log10+0x70>
 801b340:	2322      	movs	r3, #34	; 0x22
 801b342:	6003      	str	r3, [r0, #0]
 801b344:	eeb0 0a48 	vmov.f32	s0, s16
 801b348:	eef0 0a68 	vmov.f32	s1, s17
 801b34c:	ecbd 8b02 	vpop	{d8}
 801b350:	bd38      	pop	{r3, r4, r5, pc}
 801b352:	f7fe fcb1 	bl	8019cb8 <__errno>
 801b356:	ecbd 8b02 	vpop	{d8}
 801b35a:	2321      	movs	r3, #33	; 0x21
 801b35c:	6003      	str	r3, [r0, #0]
 801b35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b362:	4803      	ldr	r0, [pc, #12]	; (801b370 <log10+0x78>)
 801b364:	f001 b8a4 	b.w	801c4b0 <nan>
 801b368:	00000000 	.word	0x00000000
 801b36c:	fff00000 	.word	0xfff00000
 801b370:	08032005 	.word	0x08032005

0801b374 <sqrtf>:
 801b374:	b508      	push	{r3, lr}
 801b376:	ed2d 8b02 	vpush	{d8}
 801b37a:	eeb0 8a40 	vmov.f32	s16, s0
 801b37e:	f000 faaf 	bl	801b8e0 <__ieee754_sqrtf>
 801b382:	eeb4 8a48 	vcmp.f32	s16, s16
 801b386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b38a:	d60c      	bvs.n	801b3a6 <sqrtf+0x32>
 801b38c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801b3ac <sqrtf+0x38>
 801b390:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801b394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b398:	d505      	bpl.n	801b3a6 <sqrtf+0x32>
 801b39a:	f7fe fc8d 	bl	8019cb8 <__errno>
 801b39e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801b3a2:	2321      	movs	r3, #33	; 0x21
 801b3a4:	6003      	str	r3, [r0, #0]
 801b3a6:	ecbd 8b02 	vpop	{d8}
 801b3aa:	bd08      	pop	{r3, pc}
 801b3ac:	00000000 	.word	0x00000000

0801b3b0 <__ieee754_log10>:
 801b3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b3b4:	ec55 4b10 	vmov	r4, r5, d0
 801b3b8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801b3bc:	462b      	mov	r3, r5
 801b3be:	da2f      	bge.n	801b420 <__ieee754_log10+0x70>
 801b3c0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801b3c4:	4322      	orrs	r2, r4
 801b3c6:	d109      	bne.n	801b3dc <__ieee754_log10+0x2c>
 801b3c8:	493b      	ldr	r1, [pc, #236]	; (801b4b8 <__ieee754_log10+0x108>)
 801b3ca:	2200      	movs	r2, #0
 801b3cc:	2300      	movs	r3, #0
 801b3ce:	2000      	movs	r0, #0
 801b3d0:	f7e5 fab4 	bl	800093c <__aeabi_ddiv>
 801b3d4:	ec41 0b10 	vmov	d0, r0, r1
 801b3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b3dc:	2d00      	cmp	r5, #0
 801b3de:	da09      	bge.n	801b3f4 <__ieee754_log10+0x44>
 801b3e0:	ee10 2a10 	vmov	r2, s0
 801b3e4:	ee10 0a10 	vmov	r0, s0
 801b3e8:	4629      	mov	r1, r5
 801b3ea:	f7e4 ffc5 	bl	8000378 <__aeabi_dsub>
 801b3ee:	2200      	movs	r2, #0
 801b3f0:	2300      	movs	r3, #0
 801b3f2:	e7ed      	b.n	801b3d0 <__ieee754_log10+0x20>
 801b3f4:	4b31      	ldr	r3, [pc, #196]	; (801b4bc <__ieee754_log10+0x10c>)
 801b3f6:	2200      	movs	r2, #0
 801b3f8:	4629      	mov	r1, r5
 801b3fa:	ee10 0a10 	vmov	r0, s0
 801b3fe:	f7e5 f973 	bl	80006e8 <__aeabi_dmul>
 801b402:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801b406:	4604      	mov	r4, r0
 801b408:	460d      	mov	r5, r1
 801b40a:	460b      	mov	r3, r1
 801b40c:	492c      	ldr	r1, [pc, #176]	; (801b4c0 <__ieee754_log10+0x110>)
 801b40e:	428b      	cmp	r3, r1
 801b410:	dd08      	ble.n	801b424 <__ieee754_log10+0x74>
 801b412:	4622      	mov	r2, r4
 801b414:	462b      	mov	r3, r5
 801b416:	4620      	mov	r0, r4
 801b418:	4629      	mov	r1, r5
 801b41a:	f7e4 ffaf 	bl	800037c <__adddf3>
 801b41e:	e7d9      	b.n	801b3d4 <__ieee754_log10+0x24>
 801b420:	2200      	movs	r2, #0
 801b422:	e7f3      	b.n	801b40c <__ieee754_log10+0x5c>
 801b424:	1518      	asrs	r0, r3, #20
 801b426:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801b42a:	4410      	add	r0, r2
 801b42c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 801b430:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801b434:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801b438:	f7e5 f8ec 	bl	8000614 <__aeabi_i2d>
 801b43c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801b440:	3303      	adds	r3, #3
 801b442:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801b446:	ec45 4b10 	vmov	d0, r4, r5
 801b44a:	4606      	mov	r6, r0
 801b44c:	460f      	mov	r7, r1
 801b44e:	f001 f8bf 	bl	801c5d0 <__ieee754_log>
 801b452:	a313      	add	r3, pc, #76	; (adr r3, 801b4a0 <__ieee754_log10+0xf0>)
 801b454:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b458:	4630      	mov	r0, r6
 801b45a:	4639      	mov	r1, r7
 801b45c:	ec59 8b10 	vmov	r8, r9, d0
 801b460:	f7e5 f942 	bl	80006e8 <__aeabi_dmul>
 801b464:	a310      	add	r3, pc, #64	; (adr r3, 801b4a8 <__ieee754_log10+0xf8>)
 801b466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b46a:	4604      	mov	r4, r0
 801b46c:	460d      	mov	r5, r1
 801b46e:	4640      	mov	r0, r8
 801b470:	4649      	mov	r1, r9
 801b472:	f7e5 f939 	bl	80006e8 <__aeabi_dmul>
 801b476:	4602      	mov	r2, r0
 801b478:	460b      	mov	r3, r1
 801b47a:	4620      	mov	r0, r4
 801b47c:	4629      	mov	r1, r5
 801b47e:	f7e4 ff7d 	bl	800037c <__adddf3>
 801b482:	a30b      	add	r3, pc, #44	; (adr r3, 801b4b0 <__ieee754_log10+0x100>)
 801b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b488:	4604      	mov	r4, r0
 801b48a:	460d      	mov	r5, r1
 801b48c:	4630      	mov	r0, r6
 801b48e:	4639      	mov	r1, r7
 801b490:	f7e5 f92a 	bl	80006e8 <__aeabi_dmul>
 801b494:	4602      	mov	r2, r0
 801b496:	460b      	mov	r3, r1
 801b498:	4620      	mov	r0, r4
 801b49a:	4629      	mov	r1, r5
 801b49c:	e7bd      	b.n	801b41a <__ieee754_log10+0x6a>
 801b49e:	bf00      	nop
 801b4a0:	11f12b36 	.word	0x11f12b36
 801b4a4:	3d59fef3 	.word	0x3d59fef3
 801b4a8:	1526e50e 	.word	0x1526e50e
 801b4ac:	3fdbcb7b 	.word	0x3fdbcb7b
 801b4b0:	509f6000 	.word	0x509f6000
 801b4b4:	3fd34413 	.word	0x3fd34413
 801b4b8:	c3500000 	.word	0xc3500000
 801b4bc:	43500000 	.word	0x43500000
 801b4c0:	7fefffff 	.word	0x7fefffff
 801b4c4:	00000000 	.word	0x00000000

0801b4c8 <__ieee754_rem_pio2>:
 801b4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4cc:	ed2d 8b02 	vpush	{d8}
 801b4d0:	ec55 4b10 	vmov	r4, r5, d0
 801b4d4:	4bca      	ldr	r3, [pc, #808]	; (801b800 <__ieee754_rem_pio2+0x338>)
 801b4d6:	b08b      	sub	sp, #44	; 0x2c
 801b4d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801b4dc:	4598      	cmp	r8, r3
 801b4de:	4682      	mov	sl, r0
 801b4e0:	9502      	str	r5, [sp, #8]
 801b4e2:	dc08      	bgt.n	801b4f6 <__ieee754_rem_pio2+0x2e>
 801b4e4:	2200      	movs	r2, #0
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	ed80 0b00 	vstr	d0, [r0]
 801b4ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b4f0:	f04f 0b00 	mov.w	fp, #0
 801b4f4:	e028      	b.n	801b548 <__ieee754_rem_pio2+0x80>
 801b4f6:	4bc3      	ldr	r3, [pc, #780]	; (801b804 <__ieee754_rem_pio2+0x33c>)
 801b4f8:	4598      	cmp	r8, r3
 801b4fa:	dc78      	bgt.n	801b5ee <__ieee754_rem_pio2+0x126>
 801b4fc:	9b02      	ldr	r3, [sp, #8]
 801b4fe:	4ec2      	ldr	r6, [pc, #776]	; (801b808 <__ieee754_rem_pio2+0x340>)
 801b500:	2b00      	cmp	r3, #0
 801b502:	ee10 0a10 	vmov	r0, s0
 801b506:	a3b0      	add	r3, pc, #704	; (adr r3, 801b7c8 <__ieee754_rem_pio2+0x300>)
 801b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b50c:	4629      	mov	r1, r5
 801b50e:	dd39      	ble.n	801b584 <__ieee754_rem_pio2+0xbc>
 801b510:	f7e4 ff32 	bl	8000378 <__aeabi_dsub>
 801b514:	45b0      	cmp	r8, r6
 801b516:	4604      	mov	r4, r0
 801b518:	460d      	mov	r5, r1
 801b51a:	d01b      	beq.n	801b554 <__ieee754_rem_pio2+0x8c>
 801b51c:	a3ac      	add	r3, pc, #688	; (adr r3, 801b7d0 <__ieee754_rem_pio2+0x308>)
 801b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b522:	f7e4 ff29 	bl	8000378 <__aeabi_dsub>
 801b526:	4602      	mov	r2, r0
 801b528:	460b      	mov	r3, r1
 801b52a:	e9ca 2300 	strd	r2, r3, [sl]
 801b52e:	4620      	mov	r0, r4
 801b530:	4629      	mov	r1, r5
 801b532:	f7e4 ff21 	bl	8000378 <__aeabi_dsub>
 801b536:	a3a6      	add	r3, pc, #664	; (adr r3, 801b7d0 <__ieee754_rem_pio2+0x308>)
 801b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b53c:	f7e4 ff1c 	bl	8000378 <__aeabi_dsub>
 801b540:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b544:	f04f 0b01 	mov.w	fp, #1
 801b548:	4658      	mov	r0, fp
 801b54a:	b00b      	add	sp, #44	; 0x2c
 801b54c:	ecbd 8b02 	vpop	{d8}
 801b550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b554:	a3a0      	add	r3, pc, #640	; (adr r3, 801b7d8 <__ieee754_rem_pio2+0x310>)
 801b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b55a:	f7e4 ff0d 	bl	8000378 <__aeabi_dsub>
 801b55e:	a3a0      	add	r3, pc, #640	; (adr r3, 801b7e0 <__ieee754_rem_pio2+0x318>)
 801b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b564:	4604      	mov	r4, r0
 801b566:	460d      	mov	r5, r1
 801b568:	f7e4 ff06 	bl	8000378 <__aeabi_dsub>
 801b56c:	4602      	mov	r2, r0
 801b56e:	460b      	mov	r3, r1
 801b570:	e9ca 2300 	strd	r2, r3, [sl]
 801b574:	4620      	mov	r0, r4
 801b576:	4629      	mov	r1, r5
 801b578:	f7e4 fefe 	bl	8000378 <__aeabi_dsub>
 801b57c:	a398      	add	r3, pc, #608	; (adr r3, 801b7e0 <__ieee754_rem_pio2+0x318>)
 801b57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b582:	e7db      	b.n	801b53c <__ieee754_rem_pio2+0x74>
 801b584:	f7e4 fefa 	bl	800037c <__adddf3>
 801b588:	45b0      	cmp	r8, r6
 801b58a:	4604      	mov	r4, r0
 801b58c:	460d      	mov	r5, r1
 801b58e:	d016      	beq.n	801b5be <__ieee754_rem_pio2+0xf6>
 801b590:	a38f      	add	r3, pc, #572	; (adr r3, 801b7d0 <__ieee754_rem_pio2+0x308>)
 801b592:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b596:	f7e4 fef1 	bl	800037c <__adddf3>
 801b59a:	4602      	mov	r2, r0
 801b59c:	460b      	mov	r3, r1
 801b59e:	e9ca 2300 	strd	r2, r3, [sl]
 801b5a2:	4620      	mov	r0, r4
 801b5a4:	4629      	mov	r1, r5
 801b5a6:	f7e4 fee7 	bl	8000378 <__aeabi_dsub>
 801b5aa:	a389      	add	r3, pc, #548	; (adr r3, 801b7d0 <__ieee754_rem_pio2+0x308>)
 801b5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5b0:	f7e4 fee4 	bl	800037c <__adddf3>
 801b5b4:	f04f 3bff 	mov.w	fp, #4294967295
 801b5b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b5bc:	e7c4      	b.n	801b548 <__ieee754_rem_pio2+0x80>
 801b5be:	a386      	add	r3, pc, #536	; (adr r3, 801b7d8 <__ieee754_rem_pio2+0x310>)
 801b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5c4:	f7e4 feda 	bl	800037c <__adddf3>
 801b5c8:	a385      	add	r3, pc, #532	; (adr r3, 801b7e0 <__ieee754_rem_pio2+0x318>)
 801b5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ce:	4604      	mov	r4, r0
 801b5d0:	460d      	mov	r5, r1
 801b5d2:	f7e4 fed3 	bl	800037c <__adddf3>
 801b5d6:	4602      	mov	r2, r0
 801b5d8:	460b      	mov	r3, r1
 801b5da:	e9ca 2300 	strd	r2, r3, [sl]
 801b5de:	4620      	mov	r0, r4
 801b5e0:	4629      	mov	r1, r5
 801b5e2:	f7e4 fec9 	bl	8000378 <__aeabi_dsub>
 801b5e6:	a37e      	add	r3, pc, #504	; (adr r3, 801b7e0 <__ieee754_rem_pio2+0x318>)
 801b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ec:	e7e0      	b.n	801b5b0 <__ieee754_rem_pio2+0xe8>
 801b5ee:	4b87      	ldr	r3, [pc, #540]	; (801b80c <__ieee754_rem_pio2+0x344>)
 801b5f0:	4598      	cmp	r8, r3
 801b5f2:	f300 80d9 	bgt.w	801b7a8 <__ieee754_rem_pio2+0x2e0>
 801b5f6:	f000 fed1 	bl	801c39c <fabs>
 801b5fa:	ec55 4b10 	vmov	r4, r5, d0
 801b5fe:	ee10 0a10 	vmov	r0, s0
 801b602:	a379      	add	r3, pc, #484	; (adr r3, 801b7e8 <__ieee754_rem_pio2+0x320>)
 801b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b608:	4629      	mov	r1, r5
 801b60a:	f7e5 f86d 	bl	80006e8 <__aeabi_dmul>
 801b60e:	4b80      	ldr	r3, [pc, #512]	; (801b810 <__ieee754_rem_pio2+0x348>)
 801b610:	2200      	movs	r2, #0
 801b612:	f7e4 feb3 	bl	800037c <__adddf3>
 801b616:	f7e5 fb17 	bl	8000c48 <__aeabi_d2iz>
 801b61a:	4683      	mov	fp, r0
 801b61c:	f7e4 fffa 	bl	8000614 <__aeabi_i2d>
 801b620:	4602      	mov	r2, r0
 801b622:	460b      	mov	r3, r1
 801b624:	ec43 2b18 	vmov	d8, r2, r3
 801b628:	a367      	add	r3, pc, #412	; (adr r3, 801b7c8 <__ieee754_rem_pio2+0x300>)
 801b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b62e:	f7e5 f85b 	bl	80006e8 <__aeabi_dmul>
 801b632:	4602      	mov	r2, r0
 801b634:	460b      	mov	r3, r1
 801b636:	4620      	mov	r0, r4
 801b638:	4629      	mov	r1, r5
 801b63a:	f7e4 fe9d 	bl	8000378 <__aeabi_dsub>
 801b63e:	a364      	add	r3, pc, #400	; (adr r3, 801b7d0 <__ieee754_rem_pio2+0x308>)
 801b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b644:	4606      	mov	r6, r0
 801b646:	460f      	mov	r7, r1
 801b648:	ec51 0b18 	vmov	r0, r1, d8
 801b64c:	f7e5 f84c 	bl	80006e8 <__aeabi_dmul>
 801b650:	f1bb 0f1f 	cmp.w	fp, #31
 801b654:	4604      	mov	r4, r0
 801b656:	460d      	mov	r5, r1
 801b658:	dc0d      	bgt.n	801b676 <__ieee754_rem_pio2+0x1ae>
 801b65a:	4b6e      	ldr	r3, [pc, #440]	; (801b814 <__ieee754_rem_pio2+0x34c>)
 801b65c:	f10b 32ff 	add.w	r2, fp, #4294967295
 801b660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b664:	4543      	cmp	r3, r8
 801b666:	d006      	beq.n	801b676 <__ieee754_rem_pio2+0x1ae>
 801b668:	4622      	mov	r2, r4
 801b66a:	462b      	mov	r3, r5
 801b66c:	4630      	mov	r0, r6
 801b66e:	4639      	mov	r1, r7
 801b670:	f7e4 fe82 	bl	8000378 <__aeabi_dsub>
 801b674:	e00f      	b.n	801b696 <__ieee754_rem_pio2+0x1ce>
 801b676:	462b      	mov	r3, r5
 801b678:	4622      	mov	r2, r4
 801b67a:	4630      	mov	r0, r6
 801b67c:	4639      	mov	r1, r7
 801b67e:	f7e4 fe7b 	bl	8000378 <__aeabi_dsub>
 801b682:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b686:	9303      	str	r3, [sp, #12]
 801b688:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b68c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801b690:	f1b8 0f10 	cmp.w	r8, #16
 801b694:	dc02      	bgt.n	801b69c <__ieee754_rem_pio2+0x1d4>
 801b696:	e9ca 0100 	strd	r0, r1, [sl]
 801b69a:	e039      	b.n	801b710 <__ieee754_rem_pio2+0x248>
 801b69c:	a34e      	add	r3, pc, #312	; (adr r3, 801b7d8 <__ieee754_rem_pio2+0x310>)
 801b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6a2:	ec51 0b18 	vmov	r0, r1, d8
 801b6a6:	f7e5 f81f 	bl	80006e8 <__aeabi_dmul>
 801b6aa:	4604      	mov	r4, r0
 801b6ac:	460d      	mov	r5, r1
 801b6ae:	4602      	mov	r2, r0
 801b6b0:	460b      	mov	r3, r1
 801b6b2:	4630      	mov	r0, r6
 801b6b4:	4639      	mov	r1, r7
 801b6b6:	f7e4 fe5f 	bl	8000378 <__aeabi_dsub>
 801b6ba:	4602      	mov	r2, r0
 801b6bc:	460b      	mov	r3, r1
 801b6be:	4680      	mov	r8, r0
 801b6c0:	4689      	mov	r9, r1
 801b6c2:	4630      	mov	r0, r6
 801b6c4:	4639      	mov	r1, r7
 801b6c6:	f7e4 fe57 	bl	8000378 <__aeabi_dsub>
 801b6ca:	4622      	mov	r2, r4
 801b6cc:	462b      	mov	r3, r5
 801b6ce:	f7e4 fe53 	bl	8000378 <__aeabi_dsub>
 801b6d2:	a343      	add	r3, pc, #268	; (adr r3, 801b7e0 <__ieee754_rem_pio2+0x318>)
 801b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6d8:	4604      	mov	r4, r0
 801b6da:	460d      	mov	r5, r1
 801b6dc:	ec51 0b18 	vmov	r0, r1, d8
 801b6e0:	f7e5 f802 	bl	80006e8 <__aeabi_dmul>
 801b6e4:	4622      	mov	r2, r4
 801b6e6:	462b      	mov	r3, r5
 801b6e8:	f7e4 fe46 	bl	8000378 <__aeabi_dsub>
 801b6ec:	4602      	mov	r2, r0
 801b6ee:	460b      	mov	r3, r1
 801b6f0:	4604      	mov	r4, r0
 801b6f2:	460d      	mov	r5, r1
 801b6f4:	4640      	mov	r0, r8
 801b6f6:	4649      	mov	r1, r9
 801b6f8:	f7e4 fe3e 	bl	8000378 <__aeabi_dsub>
 801b6fc:	9a03      	ldr	r2, [sp, #12]
 801b6fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801b702:	1ad3      	subs	r3, r2, r3
 801b704:	2b31      	cmp	r3, #49	; 0x31
 801b706:	dc24      	bgt.n	801b752 <__ieee754_rem_pio2+0x28a>
 801b708:	e9ca 0100 	strd	r0, r1, [sl]
 801b70c:	4646      	mov	r6, r8
 801b70e:	464f      	mov	r7, r9
 801b710:	e9da 8900 	ldrd	r8, r9, [sl]
 801b714:	4630      	mov	r0, r6
 801b716:	4642      	mov	r2, r8
 801b718:	464b      	mov	r3, r9
 801b71a:	4639      	mov	r1, r7
 801b71c:	f7e4 fe2c 	bl	8000378 <__aeabi_dsub>
 801b720:	462b      	mov	r3, r5
 801b722:	4622      	mov	r2, r4
 801b724:	f7e4 fe28 	bl	8000378 <__aeabi_dsub>
 801b728:	9b02      	ldr	r3, [sp, #8]
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b730:	f6bf af0a 	bge.w	801b548 <__ieee754_rem_pio2+0x80>
 801b734:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b738:	f8ca 3004 	str.w	r3, [sl, #4]
 801b73c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b740:	f8ca 8000 	str.w	r8, [sl]
 801b744:	f8ca 0008 	str.w	r0, [sl, #8]
 801b748:	f8ca 300c 	str.w	r3, [sl, #12]
 801b74c:	f1cb 0b00 	rsb	fp, fp, #0
 801b750:	e6fa      	b.n	801b548 <__ieee754_rem_pio2+0x80>
 801b752:	a327      	add	r3, pc, #156	; (adr r3, 801b7f0 <__ieee754_rem_pio2+0x328>)
 801b754:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b758:	ec51 0b18 	vmov	r0, r1, d8
 801b75c:	f7e4 ffc4 	bl	80006e8 <__aeabi_dmul>
 801b760:	4604      	mov	r4, r0
 801b762:	460d      	mov	r5, r1
 801b764:	4602      	mov	r2, r0
 801b766:	460b      	mov	r3, r1
 801b768:	4640      	mov	r0, r8
 801b76a:	4649      	mov	r1, r9
 801b76c:	f7e4 fe04 	bl	8000378 <__aeabi_dsub>
 801b770:	4602      	mov	r2, r0
 801b772:	460b      	mov	r3, r1
 801b774:	4606      	mov	r6, r0
 801b776:	460f      	mov	r7, r1
 801b778:	4640      	mov	r0, r8
 801b77a:	4649      	mov	r1, r9
 801b77c:	f7e4 fdfc 	bl	8000378 <__aeabi_dsub>
 801b780:	4622      	mov	r2, r4
 801b782:	462b      	mov	r3, r5
 801b784:	f7e4 fdf8 	bl	8000378 <__aeabi_dsub>
 801b788:	a31b      	add	r3, pc, #108	; (adr r3, 801b7f8 <__ieee754_rem_pio2+0x330>)
 801b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b78e:	4604      	mov	r4, r0
 801b790:	460d      	mov	r5, r1
 801b792:	ec51 0b18 	vmov	r0, r1, d8
 801b796:	f7e4 ffa7 	bl	80006e8 <__aeabi_dmul>
 801b79a:	4622      	mov	r2, r4
 801b79c:	462b      	mov	r3, r5
 801b79e:	f7e4 fdeb 	bl	8000378 <__aeabi_dsub>
 801b7a2:	4604      	mov	r4, r0
 801b7a4:	460d      	mov	r5, r1
 801b7a6:	e75f      	b.n	801b668 <__ieee754_rem_pio2+0x1a0>
 801b7a8:	4b1b      	ldr	r3, [pc, #108]	; (801b818 <__ieee754_rem_pio2+0x350>)
 801b7aa:	4598      	cmp	r8, r3
 801b7ac:	dd36      	ble.n	801b81c <__ieee754_rem_pio2+0x354>
 801b7ae:	ee10 2a10 	vmov	r2, s0
 801b7b2:	462b      	mov	r3, r5
 801b7b4:	4620      	mov	r0, r4
 801b7b6:	4629      	mov	r1, r5
 801b7b8:	f7e4 fdde 	bl	8000378 <__aeabi_dsub>
 801b7bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801b7c0:	e9ca 0100 	strd	r0, r1, [sl]
 801b7c4:	e694      	b.n	801b4f0 <__ieee754_rem_pio2+0x28>
 801b7c6:	bf00      	nop
 801b7c8:	54400000 	.word	0x54400000
 801b7cc:	3ff921fb 	.word	0x3ff921fb
 801b7d0:	1a626331 	.word	0x1a626331
 801b7d4:	3dd0b461 	.word	0x3dd0b461
 801b7d8:	1a600000 	.word	0x1a600000
 801b7dc:	3dd0b461 	.word	0x3dd0b461
 801b7e0:	2e037073 	.word	0x2e037073
 801b7e4:	3ba3198a 	.word	0x3ba3198a
 801b7e8:	6dc9c883 	.word	0x6dc9c883
 801b7ec:	3fe45f30 	.word	0x3fe45f30
 801b7f0:	2e000000 	.word	0x2e000000
 801b7f4:	3ba3198a 	.word	0x3ba3198a
 801b7f8:	252049c1 	.word	0x252049c1
 801b7fc:	397b839a 	.word	0x397b839a
 801b800:	3fe921fb 	.word	0x3fe921fb
 801b804:	4002d97b 	.word	0x4002d97b
 801b808:	3ff921fb 	.word	0x3ff921fb
 801b80c:	413921fb 	.word	0x413921fb
 801b810:	3fe00000 	.word	0x3fe00000
 801b814:	08032034 	.word	0x08032034
 801b818:	7fefffff 	.word	0x7fefffff
 801b81c:	ea4f 5428 	mov.w	r4, r8, asr #20
 801b820:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801b824:	ee10 0a10 	vmov	r0, s0
 801b828:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801b82c:	ee10 6a10 	vmov	r6, s0
 801b830:	460f      	mov	r7, r1
 801b832:	f7e5 fa09 	bl	8000c48 <__aeabi_d2iz>
 801b836:	f7e4 feed 	bl	8000614 <__aeabi_i2d>
 801b83a:	4602      	mov	r2, r0
 801b83c:	460b      	mov	r3, r1
 801b83e:	4630      	mov	r0, r6
 801b840:	4639      	mov	r1, r7
 801b842:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b846:	f7e4 fd97 	bl	8000378 <__aeabi_dsub>
 801b84a:	4b23      	ldr	r3, [pc, #140]	; (801b8d8 <__ieee754_rem_pio2+0x410>)
 801b84c:	2200      	movs	r2, #0
 801b84e:	f7e4 ff4b 	bl	80006e8 <__aeabi_dmul>
 801b852:	460f      	mov	r7, r1
 801b854:	4606      	mov	r6, r0
 801b856:	f7e5 f9f7 	bl	8000c48 <__aeabi_d2iz>
 801b85a:	f7e4 fedb 	bl	8000614 <__aeabi_i2d>
 801b85e:	4602      	mov	r2, r0
 801b860:	460b      	mov	r3, r1
 801b862:	4630      	mov	r0, r6
 801b864:	4639      	mov	r1, r7
 801b866:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b86a:	f7e4 fd85 	bl	8000378 <__aeabi_dsub>
 801b86e:	4b1a      	ldr	r3, [pc, #104]	; (801b8d8 <__ieee754_rem_pio2+0x410>)
 801b870:	2200      	movs	r2, #0
 801b872:	f7e4 ff39 	bl	80006e8 <__aeabi_dmul>
 801b876:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b87a:	ad04      	add	r5, sp, #16
 801b87c:	f04f 0803 	mov.w	r8, #3
 801b880:	46a9      	mov	r9, r5
 801b882:	2600      	movs	r6, #0
 801b884:	2700      	movs	r7, #0
 801b886:	4632      	mov	r2, r6
 801b888:	463b      	mov	r3, r7
 801b88a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801b88e:	46c3      	mov	fp, r8
 801b890:	3d08      	subs	r5, #8
 801b892:	f108 38ff 	add.w	r8, r8, #4294967295
 801b896:	f7e5 f98f 	bl	8000bb8 <__aeabi_dcmpeq>
 801b89a:	2800      	cmp	r0, #0
 801b89c:	d1f3      	bne.n	801b886 <__ieee754_rem_pio2+0x3be>
 801b89e:	4b0f      	ldr	r3, [pc, #60]	; (801b8dc <__ieee754_rem_pio2+0x414>)
 801b8a0:	9301      	str	r3, [sp, #4]
 801b8a2:	2302      	movs	r3, #2
 801b8a4:	9300      	str	r3, [sp, #0]
 801b8a6:	4622      	mov	r2, r4
 801b8a8:	465b      	mov	r3, fp
 801b8aa:	4651      	mov	r1, sl
 801b8ac:	4648      	mov	r0, r9
 801b8ae:	f000 f81b 	bl	801b8e8 <__kernel_rem_pio2>
 801b8b2:	9b02      	ldr	r3, [sp, #8]
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	4683      	mov	fp, r0
 801b8b8:	f6bf ae46 	bge.w	801b548 <__ieee754_rem_pio2+0x80>
 801b8bc:	e9da 2100 	ldrd	r2, r1, [sl]
 801b8c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b8c4:	e9ca 2300 	strd	r2, r3, [sl]
 801b8c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801b8cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b8d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801b8d4:	e73a      	b.n	801b74c <__ieee754_rem_pio2+0x284>
 801b8d6:	bf00      	nop
 801b8d8:	41700000 	.word	0x41700000
 801b8dc:	080320b4 	.word	0x080320b4

0801b8e0 <__ieee754_sqrtf>:
 801b8e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801b8e4:	4770      	bx	lr
	...

0801b8e8 <__kernel_rem_pio2>:
 801b8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8ec:	ed2d 8b02 	vpush	{d8}
 801b8f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801b8f4:	f112 0f14 	cmn.w	r2, #20
 801b8f8:	9308      	str	r3, [sp, #32]
 801b8fa:	9101      	str	r1, [sp, #4]
 801b8fc:	4bc4      	ldr	r3, [pc, #784]	; (801bc10 <__kernel_rem_pio2+0x328>)
 801b8fe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801b900:	900b      	str	r0, [sp, #44]	; 0x2c
 801b902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b906:	9302      	str	r3, [sp, #8]
 801b908:	9b08      	ldr	r3, [sp, #32]
 801b90a:	f103 33ff 	add.w	r3, r3, #4294967295
 801b90e:	bfa8      	it	ge
 801b910:	1ed4      	subge	r4, r2, #3
 801b912:	9306      	str	r3, [sp, #24]
 801b914:	bfb2      	itee	lt
 801b916:	2400      	movlt	r4, #0
 801b918:	2318      	movge	r3, #24
 801b91a:	fb94 f4f3 	sdivge	r4, r4, r3
 801b91e:	f06f 0317 	mvn.w	r3, #23
 801b922:	fb04 3303 	mla	r3, r4, r3, r3
 801b926:	eb03 0a02 	add.w	sl, r3, r2
 801b92a:	9b02      	ldr	r3, [sp, #8]
 801b92c:	9a06      	ldr	r2, [sp, #24]
 801b92e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 801bc00 <__kernel_rem_pio2+0x318>
 801b932:	eb03 0802 	add.w	r8, r3, r2
 801b936:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801b938:	1aa7      	subs	r7, r4, r2
 801b93a:	ae22      	add	r6, sp, #136	; 0x88
 801b93c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801b940:	2500      	movs	r5, #0
 801b942:	4545      	cmp	r5, r8
 801b944:	dd13      	ble.n	801b96e <__kernel_rem_pio2+0x86>
 801b946:	9b08      	ldr	r3, [sp, #32]
 801b948:	ed9f 8bad 	vldr	d8, [pc, #692]	; 801bc00 <__kernel_rem_pio2+0x318>
 801b94c:	aa22      	add	r2, sp, #136	; 0x88
 801b94e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801b952:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801b956:	f04f 0800 	mov.w	r8, #0
 801b95a:	9b02      	ldr	r3, [sp, #8]
 801b95c:	4598      	cmp	r8, r3
 801b95e:	dc2f      	bgt.n	801b9c0 <__kernel_rem_pio2+0xd8>
 801b960:	ed8d 8b04 	vstr	d8, [sp, #16]
 801b964:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801b968:	462f      	mov	r7, r5
 801b96a:	2600      	movs	r6, #0
 801b96c:	e01b      	b.n	801b9a6 <__kernel_rem_pio2+0xbe>
 801b96e:	42ef      	cmn	r7, r5
 801b970:	d407      	bmi.n	801b982 <__kernel_rem_pio2+0x9a>
 801b972:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801b976:	f7e4 fe4d 	bl	8000614 <__aeabi_i2d>
 801b97a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b97e:	3501      	adds	r5, #1
 801b980:	e7df      	b.n	801b942 <__kernel_rem_pio2+0x5a>
 801b982:	ec51 0b18 	vmov	r0, r1, d8
 801b986:	e7f8      	b.n	801b97a <__kernel_rem_pio2+0x92>
 801b988:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b98c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b990:	f7e4 feaa 	bl	80006e8 <__aeabi_dmul>
 801b994:	4602      	mov	r2, r0
 801b996:	460b      	mov	r3, r1
 801b998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b99c:	f7e4 fcee 	bl	800037c <__adddf3>
 801b9a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b9a4:	3601      	adds	r6, #1
 801b9a6:	9b06      	ldr	r3, [sp, #24]
 801b9a8:	429e      	cmp	r6, r3
 801b9aa:	f1a7 0708 	sub.w	r7, r7, #8
 801b9ae:	ddeb      	ble.n	801b988 <__kernel_rem_pio2+0xa0>
 801b9b0:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b9b4:	f108 0801 	add.w	r8, r8, #1
 801b9b8:	ecab 7b02 	vstmia	fp!, {d7}
 801b9bc:	3508      	adds	r5, #8
 801b9be:	e7cc      	b.n	801b95a <__kernel_rem_pio2+0x72>
 801b9c0:	9b02      	ldr	r3, [sp, #8]
 801b9c2:	aa0e      	add	r2, sp, #56	; 0x38
 801b9c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b9c8:	930d      	str	r3, [sp, #52]	; 0x34
 801b9ca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801b9cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801b9d0:	9c02      	ldr	r4, [sp, #8]
 801b9d2:	930c      	str	r3, [sp, #48]	; 0x30
 801b9d4:	00e3      	lsls	r3, r4, #3
 801b9d6:	930a      	str	r3, [sp, #40]	; 0x28
 801b9d8:	ab9a      	add	r3, sp, #616	; 0x268
 801b9da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b9de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801b9e2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801b9e6:	ab72      	add	r3, sp, #456	; 0x1c8
 801b9e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801b9ec:	46c3      	mov	fp, r8
 801b9ee:	46a1      	mov	r9, r4
 801b9f0:	f1b9 0f00 	cmp.w	r9, #0
 801b9f4:	f1a5 0508 	sub.w	r5, r5, #8
 801b9f8:	dc77      	bgt.n	801baea <__kernel_rem_pio2+0x202>
 801b9fa:	ec47 6b10 	vmov	d0, r6, r7
 801b9fe:	4650      	mov	r0, sl
 801ba00:	f000 fd5e 	bl	801c4c0 <scalbn>
 801ba04:	ec57 6b10 	vmov	r6, r7, d0
 801ba08:	2200      	movs	r2, #0
 801ba0a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801ba0e:	ee10 0a10 	vmov	r0, s0
 801ba12:	4639      	mov	r1, r7
 801ba14:	f7e4 fe68 	bl	80006e8 <__aeabi_dmul>
 801ba18:	ec41 0b10 	vmov	d0, r0, r1
 801ba1c:	f000 fcc8 	bl	801c3b0 <floor>
 801ba20:	4b7c      	ldr	r3, [pc, #496]	; (801bc14 <__kernel_rem_pio2+0x32c>)
 801ba22:	ec51 0b10 	vmov	r0, r1, d0
 801ba26:	2200      	movs	r2, #0
 801ba28:	f7e4 fe5e 	bl	80006e8 <__aeabi_dmul>
 801ba2c:	4602      	mov	r2, r0
 801ba2e:	460b      	mov	r3, r1
 801ba30:	4630      	mov	r0, r6
 801ba32:	4639      	mov	r1, r7
 801ba34:	f7e4 fca0 	bl	8000378 <__aeabi_dsub>
 801ba38:	460f      	mov	r7, r1
 801ba3a:	4606      	mov	r6, r0
 801ba3c:	f7e5 f904 	bl	8000c48 <__aeabi_d2iz>
 801ba40:	9004      	str	r0, [sp, #16]
 801ba42:	f7e4 fde7 	bl	8000614 <__aeabi_i2d>
 801ba46:	4602      	mov	r2, r0
 801ba48:	460b      	mov	r3, r1
 801ba4a:	4630      	mov	r0, r6
 801ba4c:	4639      	mov	r1, r7
 801ba4e:	f7e4 fc93 	bl	8000378 <__aeabi_dsub>
 801ba52:	f1ba 0f00 	cmp.w	sl, #0
 801ba56:	4606      	mov	r6, r0
 801ba58:	460f      	mov	r7, r1
 801ba5a:	dd6d      	ble.n	801bb38 <__kernel_rem_pio2+0x250>
 801ba5c:	1e62      	subs	r2, r4, #1
 801ba5e:	ab0e      	add	r3, sp, #56	; 0x38
 801ba60:	9d04      	ldr	r5, [sp, #16]
 801ba62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ba66:	f1ca 0118 	rsb	r1, sl, #24
 801ba6a:	fa40 f301 	asr.w	r3, r0, r1
 801ba6e:	441d      	add	r5, r3
 801ba70:	408b      	lsls	r3, r1
 801ba72:	1ac0      	subs	r0, r0, r3
 801ba74:	ab0e      	add	r3, sp, #56	; 0x38
 801ba76:	9504      	str	r5, [sp, #16]
 801ba78:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801ba7c:	f1ca 0317 	rsb	r3, sl, #23
 801ba80:	fa40 fb03 	asr.w	fp, r0, r3
 801ba84:	f1bb 0f00 	cmp.w	fp, #0
 801ba88:	dd65      	ble.n	801bb56 <__kernel_rem_pio2+0x26e>
 801ba8a:	9b04      	ldr	r3, [sp, #16]
 801ba8c:	2200      	movs	r2, #0
 801ba8e:	3301      	adds	r3, #1
 801ba90:	9304      	str	r3, [sp, #16]
 801ba92:	4615      	mov	r5, r2
 801ba94:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801ba98:	4294      	cmp	r4, r2
 801ba9a:	f300 809c 	bgt.w	801bbd6 <__kernel_rem_pio2+0x2ee>
 801ba9e:	f1ba 0f00 	cmp.w	sl, #0
 801baa2:	dd07      	ble.n	801bab4 <__kernel_rem_pio2+0x1cc>
 801baa4:	f1ba 0f01 	cmp.w	sl, #1
 801baa8:	f000 80c0 	beq.w	801bc2c <__kernel_rem_pio2+0x344>
 801baac:	f1ba 0f02 	cmp.w	sl, #2
 801bab0:	f000 80c6 	beq.w	801bc40 <__kernel_rem_pio2+0x358>
 801bab4:	f1bb 0f02 	cmp.w	fp, #2
 801bab8:	d14d      	bne.n	801bb56 <__kernel_rem_pio2+0x26e>
 801baba:	4632      	mov	r2, r6
 801babc:	463b      	mov	r3, r7
 801babe:	4956      	ldr	r1, [pc, #344]	; (801bc18 <__kernel_rem_pio2+0x330>)
 801bac0:	2000      	movs	r0, #0
 801bac2:	f7e4 fc59 	bl	8000378 <__aeabi_dsub>
 801bac6:	4606      	mov	r6, r0
 801bac8:	460f      	mov	r7, r1
 801baca:	2d00      	cmp	r5, #0
 801bacc:	d043      	beq.n	801bb56 <__kernel_rem_pio2+0x26e>
 801bace:	4650      	mov	r0, sl
 801bad0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801bc08 <__kernel_rem_pio2+0x320>
 801bad4:	f000 fcf4 	bl	801c4c0 <scalbn>
 801bad8:	4630      	mov	r0, r6
 801bada:	4639      	mov	r1, r7
 801badc:	ec53 2b10 	vmov	r2, r3, d0
 801bae0:	f7e4 fc4a 	bl	8000378 <__aeabi_dsub>
 801bae4:	4606      	mov	r6, r0
 801bae6:	460f      	mov	r7, r1
 801bae8:	e035      	b.n	801bb56 <__kernel_rem_pio2+0x26e>
 801baea:	4b4c      	ldr	r3, [pc, #304]	; (801bc1c <__kernel_rem_pio2+0x334>)
 801baec:	2200      	movs	r2, #0
 801baee:	4630      	mov	r0, r6
 801baf0:	4639      	mov	r1, r7
 801baf2:	f7e4 fdf9 	bl	80006e8 <__aeabi_dmul>
 801baf6:	f7e5 f8a7 	bl	8000c48 <__aeabi_d2iz>
 801bafa:	f7e4 fd8b 	bl	8000614 <__aeabi_i2d>
 801bafe:	4602      	mov	r2, r0
 801bb00:	460b      	mov	r3, r1
 801bb02:	ec43 2b18 	vmov	d8, r2, r3
 801bb06:	4b46      	ldr	r3, [pc, #280]	; (801bc20 <__kernel_rem_pio2+0x338>)
 801bb08:	2200      	movs	r2, #0
 801bb0a:	f7e4 fded 	bl	80006e8 <__aeabi_dmul>
 801bb0e:	4602      	mov	r2, r0
 801bb10:	460b      	mov	r3, r1
 801bb12:	4630      	mov	r0, r6
 801bb14:	4639      	mov	r1, r7
 801bb16:	f7e4 fc2f 	bl	8000378 <__aeabi_dsub>
 801bb1a:	f7e5 f895 	bl	8000c48 <__aeabi_d2iz>
 801bb1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bb22:	f84b 0b04 	str.w	r0, [fp], #4
 801bb26:	ec51 0b18 	vmov	r0, r1, d8
 801bb2a:	f7e4 fc27 	bl	800037c <__adddf3>
 801bb2e:	f109 39ff 	add.w	r9, r9, #4294967295
 801bb32:	4606      	mov	r6, r0
 801bb34:	460f      	mov	r7, r1
 801bb36:	e75b      	b.n	801b9f0 <__kernel_rem_pio2+0x108>
 801bb38:	d106      	bne.n	801bb48 <__kernel_rem_pio2+0x260>
 801bb3a:	1e63      	subs	r3, r4, #1
 801bb3c:	aa0e      	add	r2, sp, #56	; 0x38
 801bb3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bb42:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801bb46:	e79d      	b.n	801ba84 <__kernel_rem_pio2+0x19c>
 801bb48:	4b36      	ldr	r3, [pc, #216]	; (801bc24 <__kernel_rem_pio2+0x33c>)
 801bb4a:	2200      	movs	r2, #0
 801bb4c:	f7e5 f852 	bl	8000bf4 <__aeabi_dcmpge>
 801bb50:	2800      	cmp	r0, #0
 801bb52:	d13d      	bne.n	801bbd0 <__kernel_rem_pio2+0x2e8>
 801bb54:	4683      	mov	fp, r0
 801bb56:	2200      	movs	r2, #0
 801bb58:	2300      	movs	r3, #0
 801bb5a:	4630      	mov	r0, r6
 801bb5c:	4639      	mov	r1, r7
 801bb5e:	f7e5 f82b 	bl	8000bb8 <__aeabi_dcmpeq>
 801bb62:	2800      	cmp	r0, #0
 801bb64:	f000 80c0 	beq.w	801bce8 <__kernel_rem_pio2+0x400>
 801bb68:	1e65      	subs	r5, r4, #1
 801bb6a:	462b      	mov	r3, r5
 801bb6c:	2200      	movs	r2, #0
 801bb6e:	9902      	ldr	r1, [sp, #8]
 801bb70:	428b      	cmp	r3, r1
 801bb72:	da6c      	bge.n	801bc4e <__kernel_rem_pio2+0x366>
 801bb74:	2a00      	cmp	r2, #0
 801bb76:	f000 8089 	beq.w	801bc8c <__kernel_rem_pio2+0x3a4>
 801bb7a:	ab0e      	add	r3, sp, #56	; 0x38
 801bb7c:	f1aa 0a18 	sub.w	sl, sl, #24
 801bb80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	f000 80ad 	beq.w	801bce4 <__kernel_rem_pio2+0x3fc>
 801bb8a:	4650      	mov	r0, sl
 801bb8c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801bc08 <__kernel_rem_pio2+0x320>
 801bb90:	f000 fc96 	bl	801c4c0 <scalbn>
 801bb94:	ab9a      	add	r3, sp, #616	; 0x268
 801bb96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801bb9a:	ec57 6b10 	vmov	r6, r7, d0
 801bb9e:	00ec      	lsls	r4, r5, #3
 801bba0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801bba4:	46aa      	mov	sl, r5
 801bba6:	f1ba 0f00 	cmp.w	sl, #0
 801bbaa:	f280 80d6 	bge.w	801bd5a <__kernel_rem_pio2+0x472>
 801bbae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 801bc00 <__kernel_rem_pio2+0x318>
 801bbb2:	462e      	mov	r6, r5
 801bbb4:	2e00      	cmp	r6, #0
 801bbb6:	f2c0 8104 	blt.w	801bdc2 <__kernel_rem_pio2+0x4da>
 801bbba:	ab72      	add	r3, sp, #456	; 0x1c8
 801bbbc:	ed8d 8b06 	vstr	d8, [sp, #24]
 801bbc0:	f8df a064 	ldr.w	sl, [pc, #100]	; 801bc28 <__kernel_rem_pio2+0x340>
 801bbc4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801bbc8:	f04f 0800 	mov.w	r8, #0
 801bbcc:	1baf      	subs	r7, r5, r6
 801bbce:	e0ea      	b.n	801bda6 <__kernel_rem_pio2+0x4be>
 801bbd0:	f04f 0b02 	mov.w	fp, #2
 801bbd4:	e759      	b.n	801ba8a <__kernel_rem_pio2+0x1a2>
 801bbd6:	f8d8 3000 	ldr.w	r3, [r8]
 801bbda:	b955      	cbnz	r5, 801bbf2 <__kernel_rem_pio2+0x30a>
 801bbdc:	b123      	cbz	r3, 801bbe8 <__kernel_rem_pio2+0x300>
 801bbde:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801bbe2:	f8c8 3000 	str.w	r3, [r8]
 801bbe6:	2301      	movs	r3, #1
 801bbe8:	3201      	adds	r2, #1
 801bbea:	f108 0804 	add.w	r8, r8, #4
 801bbee:	461d      	mov	r5, r3
 801bbf0:	e752      	b.n	801ba98 <__kernel_rem_pio2+0x1b0>
 801bbf2:	1acb      	subs	r3, r1, r3
 801bbf4:	f8c8 3000 	str.w	r3, [r8]
 801bbf8:	462b      	mov	r3, r5
 801bbfa:	e7f5      	b.n	801bbe8 <__kernel_rem_pio2+0x300>
 801bbfc:	f3af 8000 	nop.w
	...
 801bc0c:	3ff00000 	.word	0x3ff00000
 801bc10:	08032200 	.word	0x08032200
 801bc14:	40200000 	.word	0x40200000
 801bc18:	3ff00000 	.word	0x3ff00000
 801bc1c:	3e700000 	.word	0x3e700000
 801bc20:	41700000 	.word	0x41700000
 801bc24:	3fe00000 	.word	0x3fe00000
 801bc28:	080321c0 	.word	0x080321c0
 801bc2c:	1e62      	subs	r2, r4, #1
 801bc2e:	ab0e      	add	r3, sp, #56	; 0x38
 801bc30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc34:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801bc38:	a90e      	add	r1, sp, #56	; 0x38
 801bc3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801bc3e:	e739      	b.n	801bab4 <__kernel_rem_pio2+0x1cc>
 801bc40:	1e62      	subs	r2, r4, #1
 801bc42:	ab0e      	add	r3, sp, #56	; 0x38
 801bc44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801bc4c:	e7f4      	b.n	801bc38 <__kernel_rem_pio2+0x350>
 801bc4e:	a90e      	add	r1, sp, #56	; 0x38
 801bc50:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801bc54:	3b01      	subs	r3, #1
 801bc56:	430a      	orrs	r2, r1
 801bc58:	e789      	b.n	801bb6e <__kernel_rem_pio2+0x286>
 801bc5a:	3301      	adds	r3, #1
 801bc5c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801bc60:	2900      	cmp	r1, #0
 801bc62:	d0fa      	beq.n	801bc5a <__kernel_rem_pio2+0x372>
 801bc64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bc66:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801bc6a:	446a      	add	r2, sp
 801bc6c:	3a98      	subs	r2, #152	; 0x98
 801bc6e:	920a      	str	r2, [sp, #40]	; 0x28
 801bc70:	9a08      	ldr	r2, [sp, #32]
 801bc72:	18e3      	adds	r3, r4, r3
 801bc74:	18a5      	adds	r5, r4, r2
 801bc76:	aa22      	add	r2, sp, #136	; 0x88
 801bc78:	f104 0801 	add.w	r8, r4, #1
 801bc7c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801bc80:	9304      	str	r3, [sp, #16]
 801bc82:	9b04      	ldr	r3, [sp, #16]
 801bc84:	4543      	cmp	r3, r8
 801bc86:	da04      	bge.n	801bc92 <__kernel_rem_pio2+0x3aa>
 801bc88:	461c      	mov	r4, r3
 801bc8a:	e6a3      	b.n	801b9d4 <__kernel_rem_pio2+0xec>
 801bc8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bc8e:	2301      	movs	r3, #1
 801bc90:	e7e4      	b.n	801bc5c <__kernel_rem_pio2+0x374>
 801bc92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc94:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801bc98:	f7e4 fcbc 	bl	8000614 <__aeabi_i2d>
 801bc9c:	e8e5 0102 	strd	r0, r1, [r5], #8
 801bca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bca2:	46ab      	mov	fp, r5
 801bca4:	461c      	mov	r4, r3
 801bca6:	f04f 0900 	mov.w	r9, #0
 801bcaa:	2600      	movs	r6, #0
 801bcac:	2700      	movs	r7, #0
 801bcae:	9b06      	ldr	r3, [sp, #24]
 801bcb0:	4599      	cmp	r9, r3
 801bcb2:	dd06      	ble.n	801bcc2 <__kernel_rem_pio2+0x3da>
 801bcb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcb6:	e8e3 6702 	strd	r6, r7, [r3], #8
 801bcba:	f108 0801 	add.w	r8, r8, #1
 801bcbe:	930a      	str	r3, [sp, #40]	; 0x28
 801bcc0:	e7df      	b.n	801bc82 <__kernel_rem_pio2+0x39a>
 801bcc2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801bcc6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801bcca:	f7e4 fd0d 	bl	80006e8 <__aeabi_dmul>
 801bcce:	4602      	mov	r2, r0
 801bcd0:	460b      	mov	r3, r1
 801bcd2:	4630      	mov	r0, r6
 801bcd4:	4639      	mov	r1, r7
 801bcd6:	f7e4 fb51 	bl	800037c <__adddf3>
 801bcda:	f109 0901 	add.w	r9, r9, #1
 801bcde:	4606      	mov	r6, r0
 801bce0:	460f      	mov	r7, r1
 801bce2:	e7e4      	b.n	801bcae <__kernel_rem_pio2+0x3c6>
 801bce4:	3d01      	subs	r5, #1
 801bce6:	e748      	b.n	801bb7a <__kernel_rem_pio2+0x292>
 801bce8:	ec47 6b10 	vmov	d0, r6, r7
 801bcec:	f1ca 0000 	rsb	r0, sl, #0
 801bcf0:	f000 fbe6 	bl	801c4c0 <scalbn>
 801bcf4:	ec57 6b10 	vmov	r6, r7, d0
 801bcf8:	4ba0      	ldr	r3, [pc, #640]	; (801bf7c <__kernel_rem_pio2+0x694>)
 801bcfa:	ee10 0a10 	vmov	r0, s0
 801bcfe:	2200      	movs	r2, #0
 801bd00:	4639      	mov	r1, r7
 801bd02:	f7e4 ff77 	bl	8000bf4 <__aeabi_dcmpge>
 801bd06:	b1f8      	cbz	r0, 801bd48 <__kernel_rem_pio2+0x460>
 801bd08:	4b9d      	ldr	r3, [pc, #628]	; (801bf80 <__kernel_rem_pio2+0x698>)
 801bd0a:	2200      	movs	r2, #0
 801bd0c:	4630      	mov	r0, r6
 801bd0e:	4639      	mov	r1, r7
 801bd10:	f7e4 fcea 	bl	80006e8 <__aeabi_dmul>
 801bd14:	f7e4 ff98 	bl	8000c48 <__aeabi_d2iz>
 801bd18:	4680      	mov	r8, r0
 801bd1a:	f7e4 fc7b 	bl	8000614 <__aeabi_i2d>
 801bd1e:	4b97      	ldr	r3, [pc, #604]	; (801bf7c <__kernel_rem_pio2+0x694>)
 801bd20:	2200      	movs	r2, #0
 801bd22:	f7e4 fce1 	bl	80006e8 <__aeabi_dmul>
 801bd26:	460b      	mov	r3, r1
 801bd28:	4602      	mov	r2, r0
 801bd2a:	4639      	mov	r1, r7
 801bd2c:	4630      	mov	r0, r6
 801bd2e:	f7e4 fb23 	bl	8000378 <__aeabi_dsub>
 801bd32:	f7e4 ff89 	bl	8000c48 <__aeabi_d2iz>
 801bd36:	1c65      	adds	r5, r4, #1
 801bd38:	ab0e      	add	r3, sp, #56	; 0x38
 801bd3a:	f10a 0a18 	add.w	sl, sl, #24
 801bd3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801bd42:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801bd46:	e720      	b.n	801bb8a <__kernel_rem_pio2+0x2a2>
 801bd48:	4630      	mov	r0, r6
 801bd4a:	4639      	mov	r1, r7
 801bd4c:	f7e4 ff7c 	bl	8000c48 <__aeabi_d2iz>
 801bd50:	ab0e      	add	r3, sp, #56	; 0x38
 801bd52:	4625      	mov	r5, r4
 801bd54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801bd58:	e717      	b.n	801bb8a <__kernel_rem_pio2+0x2a2>
 801bd5a:	ab0e      	add	r3, sp, #56	; 0x38
 801bd5c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801bd60:	f7e4 fc58 	bl	8000614 <__aeabi_i2d>
 801bd64:	4632      	mov	r2, r6
 801bd66:	463b      	mov	r3, r7
 801bd68:	f7e4 fcbe 	bl	80006e8 <__aeabi_dmul>
 801bd6c:	4b84      	ldr	r3, [pc, #528]	; (801bf80 <__kernel_rem_pio2+0x698>)
 801bd6e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801bd72:	2200      	movs	r2, #0
 801bd74:	4630      	mov	r0, r6
 801bd76:	4639      	mov	r1, r7
 801bd78:	f7e4 fcb6 	bl	80006e8 <__aeabi_dmul>
 801bd7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bd80:	4606      	mov	r6, r0
 801bd82:	460f      	mov	r7, r1
 801bd84:	e70f      	b.n	801bba6 <__kernel_rem_pio2+0x2be>
 801bd86:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801bd8a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801bd8e:	f7e4 fcab 	bl	80006e8 <__aeabi_dmul>
 801bd92:	4602      	mov	r2, r0
 801bd94:	460b      	mov	r3, r1
 801bd96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bd9a:	f7e4 faef 	bl	800037c <__adddf3>
 801bd9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bda2:	f108 0801 	add.w	r8, r8, #1
 801bda6:	9b02      	ldr	r3, [sp, #8]
 801bda8:	4598      	cmp	r8, r3
 801bdaa:	dc01      	bgt.n	801bdb0 <__kernel_rem_pio2+0x4c8>
 801bdac:	45b8      	cmp	r8, r7
 801bdae:	ddea      	ble.n	801bd86 <__kernel_rem_pio2+0x49e>
 801bdb0:	ed9d 7b06 	vldr	d7, [sp, #24]
 801bdb4:	ab4a      	add	r3, sp, #296	; 0x128
 801bdb6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801bdba:	ed87 7b00 	vstr	d7, [r7]
 801bdbe:	3e01      	subs	r6, #1
 801bdc0:	e6f8      	b.n	801bbb4 <__kernel_rem_pio2+0x2cc>
 801bdc2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801bdc4:	2b02      	cmp	r3, #2
 801bdc6:	dc0b      	bgt.n	801bde0 <__kernel_rem_pio2+0x4f8>
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	dc35      	bgt.n	801be38 <__kernel_rem_pio2+0x550>
 801bdcc:	d059      	beq.n	801be82 <__kernel_rem_pio2+0x59a>
 801bdce:	9b04      	ldr	r3, [sp, #16]
 801bdd0:	f003 0007 	and.w	r0, r3, #7
 801bdd4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801bdd8:	ecbd 8b02 	vpop	{d8}
 801bddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bde0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801bde2:	2b03      	cmp	r3, #3
 801bde4:	d1f3      	bne.n	801bdce <__kernel_rem_pio2+0x4e6>
 801bde6:	ab4a      	add	r3, sp, #296	; 0x128
 801bde8:	4423      	add	r3, r4
 801bdea:	9306      	str	r3, [sp, #24]
 801bdec:	461c      	mov	r4, r3
 801bdee:	469a      	mov	sl, r3
 801bdf0:	9502      	str	r5, [sp, #8]
 801bdf2:	9b02      	ldr	r3, [sp, #8]
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	f1aa 0a08 	sub.w	sl, sl, #8
 801bdfa:	dc6b      	bgt.n	801bed4 <__kernel_rem_pio2+0x5ec>
 801bdfc:	46aa      	mov	sl, r5
 801bdfe:	f1ba 0f01 	cmp.w	sl, #1
 801be02:	f1a4 0408 	sub.w	r4, r4, #8
 801be06:	f300 8085 	bgt.w	801bf14 <__kernel_rem_pio2+0x62c>
 801be0a:	9c06      	ldr	r4, [sp, #24]
 801be0c:	2000      	movs	r0, #0
 801be0e:	3408      	adds	r4, #8
 801be10:	2100      	movs	r1, #0
 801be12:	2d01      	cmp	r5, #1
 801be14:	f300 809d 	bgt.w	801bf52 <__kernel_rem_pio2+0x66a>
 801be18:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801be1c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801be20:	f1bb 0f00 	cmp.w	fp, #0
 801be24:	f040 809b 	bne.w	801bf5e <__kernel_rem_pio2+0x676>
 801be28:	9b01      	ldr	r3, [sp, #4]
 801be2a:	e9c3 5600 	strd	r5, r6, [r3]
 801be2e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801be32:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801be36:	e7ca      	b.n	801bdce <__kernel_rem_pio2+0x4e6>
 801be38:	3408      	adds	r4, #8
 801be3a:	ab4a      	add	r3, sp, #296	; 0x128
 801be3c:	441c      	add	r4, r3
 801be3e:	462e      	mov	r6, r5
 801be40:	2000      	movs	r0, #0
 801be42:	2100      	movs	r1, #0
 801be44:	2e00      	cmp	r6, #0
 801be46:	da36      	bge.n	801beb6 <__kernel_rem_pio2+0x5ce>
 801be48:	f1bb 0f00 	cmp.w	fp, #0
 801be4c:	d039      	beq.n	801bec2 <__kernel_rem_pio2+0x5da>
 801be4e:	4602      	mov	r2, r0
 801be50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801be54:	9c01      	ldr	r4, [sp, #4]
 801be56:	e9c4 2300 	strd	r2, r3, [r4]
 801be5a:	4602      	mov	r2, r0
 801be5c:	460b      	mov	r3, r1
 801be5e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801be62:	f7e4 fa89 	bl	8000378 <__aeabi_dsub>
 801be66:	ae4c      	add	r6, sp, #304	; 0x130
 801be68:	2401      	movs	r4, #1
 801be6a:	42a5      	cmp	r5, r4
 801be6c:	da2c      	bge.n	801bec8 <__kernel_rem_pio2+0x5e0>
 801be6e:	f1bb 0f00 	cmp.w	fp, #0
 801be72:	d002      	beq.n	801be7a <__kernel_rem_pio2+0x592>
 801be74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801be78:	4619      	mov	r1, r3
 801be7a:	9b01      	ldr	r3, [sp, #4]
 801be7c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801be80:	e7a5      	b.n	801bdce <__kernel_rem_pio2+0x4e6>
 801be82:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801be86:	eb0d 0403 	add.w	r4, sp, r3
 801be8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801be8e:	2000      	movs	r0, #0
 801be90:	2100      	movs	r1, #0
 801be92:	2d00      	cmp	r5, #0
 801be94:	da09      	bge.n	801beaa <__kernel_rem_pio2+0x5c2>
 801be96:	f1bb 0f00 	cmp.w	fp, #0
 801be9a:	d002      	beq.n	801bea2 <__kernel_rem_pio2+0x5ba>
 801be9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bea0:	4619      	mov	r1, r3
 801bea2:	9b01      	ldr	r3, [sp, #4]
 801bea4:	e9c3 0100 	strd	r0, r1, [r3]
 801bea8:	e791      	b.n	801bdce <__kernel_rem_pio2+0x4e6>
 801beaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801beae:	f7e4 fa65 	bl	800037c <__adddf3>
 801beb2:	3d01      	subs	r5, #1
 801beb4:	e7ed      	b.n	801be92 <__kernel_rem_pio2+0x5aa>
 801beb6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801beba:	f7e4 fa5f 	bl	800037c <__adddf3>
 801bebe:	3e01      	subs	r6, #1
 801bec0:	e7c0      	b.n	801be44 <__kernel_rem_pio2+0x55c>
 801bec2:	4602      	mov	r2, r0
 801bec4:	460b      	mov	r3, r1
 801bec6:	e7c5      	b.n	801be54 <__kernel_rem_pio2+0x56c>
 801bec8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801becc:	f7e4 fa56 	bl	800037c <__adddf3>
 801bed0:	3401      	adds	r4, #1
 801bed2:	e7ca      	b.n	801be6a <__kernel_rem_pio2+0x582>
 801bed4:	e9da 8900 	ldrd	r8, r9, [sl]
 801bed8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801bedc:	9b02      	ldr	r3, [sp, #8]
 801bede:	3b01      	subs	r3, #1
 801bee0:	9302      	str	r3, [sp, #8]
 801bee2:	4632      	mov	r2, r6
 801bee4:	463b      	mov	r3, r7
 801bee6:	4640      	mov	r0, r8
 801bee8:	4649      	mov	r1, r9
 801beea:	f7e4 fa47 	bl	800037c <__adddf3>
 801beee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801bef2:	4602      	mov	r2, r0
 801bef4:	460b      	mov	r3, r1
 801bef6:	4640      	mov	r0, r8
 801bef8:	4649      	mov	r1, r9
 801befa:	f7e4 fa3d 	bl	8000378 <__aeabi_dsub>
 801befe:	4632      	mov	r2, r6
 801bf00:	463b      	mov	r3, r7
 801bf02:	f7e4 fa3b 	bl	800037c <__adddf3>
 801bf06:	ed9d 7b08 	vldr	d7, [sp, #32]
 801bf0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801bf0e:	ed8a 7b00 	vstr	d7, [sl]
 801bf12:	e76e      	b.n	801bdf2 <__kernel_rem_pio2+0x50a>
 801bf14:	e9d4 8900 	ldrd	r8, r9, [r4]
 801bf18:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801bf1c:	4640      	mov	r0, r8
 801bf1e:	4632      	mov	r2, r6
 801bf20:	463b      	mov	r3, r7
 801bf22:	4649      	mov	r1, r9
 801bf24:	f7e4 fa2a 	bl	800037c <__adddf3>
 801bf28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf2c:	4602      	mov	r2, r0
 801bf2e:	460b      	mov	r3, r1
 801bf30:	4640      	mov	r0, r8
 801bf32:	4649      	mov	r1, r9
 801bf34:	f7e4 fa20 	bl	8000378 <__aeabi_dsub>
 801bf38:	4632      	mov	r2, r6
 801bf3a:	463b      	mov	r3, r7
 801bf3c:	f7e4 fa1e 	bl	800037c <__adddf3>
 801bf40:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bf44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801bf48:	ed84 7b00 	vstr	d7, [r4]
 801bf4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bf50:	e755      	b.n	801bdfe <__kernel_rem_pio2+0x516>
 801bf52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801bf56:	f7e4 fa11 	bl	800037c <__adddf3>
 801bf5a:	3d01      	subs	r5, #1
 801bf5c:	e759      	b.n	801be12 <__kernel_rem_pio2+0x52a>
 801bf5e:	9b01      	ldr	r3, [sp, #4]
 801bf60:	9a01      	ldr	r2, [sp, #4]
 801bf62:	601d      	str	r5, [r3, #0]
 801bf64:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801bf68:	605c      	str	r4, [r3, #4]
 801bf6a:	609f      	str	r7, [r3, #8]
 801bf6c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801bf70:	60d3      	str	r3, [r2, #12]
 801bf72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bf76:	6110      	str	r0, [r2, #16]
 801bf78:	6153      	str	r3, [r2, #20]
 801bf7a:	e728      	b.n	801bdce <__kernel_rem_pio2+0x4e6>
 801bf7c:	41700000 	.word	0x41700000
 801bf80:	3e700000 	.word	0x3e700000
 801bf84:	00000000 	.word	0x00000000

0801bf88 <__kernel_tan>:
 801bf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf8c:	ed2d 8b06 	vpush	{d8-d10}
 801bf90:	ec5b ab10 	vmov	sl, fp, d0
 801bf94:	4be0      	ldr	r3, [pc, #896]	; (801c318 <__kernel_tan+0x390>)
 801bf96:	b083      	sub	sp, #12
 801bf98:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801bf9c:	429f      	cmp	r7, r3
 801bf9e:	ec59 8b11 	vmov	r8, r9, d1
 801bfa2:	4606      	mov	r6, r0
 801bfa4:	f8cd b000 	str.w	fp, [sp]
 801bfa8:	dc61      	bgt.n	801c06e <__kernel_tan+0xe6>
 801bfaa:	ee10 0a10 	vmov	r0, s0
 801bfae:	4659      	mov	r1, fp
 801bfb0:	f7e4 fe4a 	bl	8000c48 <__aeabi_d2iz>
 801bfb4:	4605      	mov	r5, r0
 801bfb6:	2800      	cmp	r0, #0
 801bfb8:	f040 8083 	bne.w	801c0c2 <__kernel_tan+0x13a>
 801bfbc:	1c73      	adds	r3, r6, #1
 801bfbe:	4652      	mov	r2, sl
 801bfc0:	4313      	orrs	r3, r2
 801bfc2:	433b      	orrs	r3, r7
 801bfc4:	d112      	bne.n	801bfec <__kernel_tan+0x64>
 801bfc6:	ec4b ab10 	vmov	d0, sl, fp
 801bfca:	f000 f9e7 	bl	801c39c <fabs>
 801bfce:	49d3      	ldr	r1, [pc, #844]	; (801c31c <__kernel_tan+0x394>)
 801bfd0:	ec53 2b10 	vmov	r2, r3, d0
 801bfd4:	2000      	movs	r0, #0
 801bfd6:	f7e4 fcb1 	bl	800093c <__aeabi_ddiv>
 801bfda:	4682      	mov	sl, r0
 801bfdc:	468b      	mov	fp, r1
 801bfde:	ec4b ab10 	vmov	d0, sl, fp
 801bfe2:	b003      	add	sp, #12
 801bfe4:	ecbd 8b06 	vpop	{d8-d10}
 801bfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfec:	2e01      	cmp	r6, #1
 801bfee:	d0f6      	beq.n	801bfde <__kernel_tan+0x56>
 801bff0:	4642      	mov	r2, r8
 801bff2:	464b      	mov	r3, r9
 801bff4:	4650      	mov	r0, sl
 801bff6:	4659      	mov	r1, fp
 801bff8:	f7e4 f9c0 	bl	800037c <__adddf3>
 801bffc:	4602      	mov	r2, r0
 801bffe:	460b      	mov	r3, r1
 801c000:	460f      	mov	r7, r1
 801c002:	2000      	movs	r0, #0
 801c004:	49c6      	ldr	r1, [pc, #792]	; (801c320 <__kernel_tan+0x398>)
 801c006:	f7e4 fc99 	bl	800093c <__aeabi_ddiv>
 801c00a:	e9cd 0100 	strd	r0, r1, [sp]
 801c00e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c012:	462e      	mov	r6, r5
 801c014:	4652      	mov	r2, sl
 801c016:	462c      	mov	r4, r5
 801c018:	4630      	mov	r0, r6
 801c01a:	461d      	mov	r5, r3
 801c01c:	4639      	mov	r1, r7
 801c01e:	465b      	mov	r3, fp
 801c020:	f7e4 f9aa 	bl	8000378 <__aeabi_dsub>
 801c024:	4602      	mov	r2, r0
 801c026:	460b      	mov	r3, r1
 801c028:	4640      	mov	r0, r8
 801c02a:	4649      	mov	r1, r9
 801c02c:	f7e4 f9a4 	bl	8000378 <__aeabi_dsub>
 801c030:	4632      	mov	r2, r6
 801c032:	462b      	mov	r3, r5
 801c034:	f7e4 fb58 	bl	80006e8 <__aeabi_dmul>
 801c038:	4632      	mov	r2, r6
 801c03a:	4680      	mov	r8, r0
 801c03c:	4689      	mov	r9, r1
 801c03e:	462b      	mov	r3, r5
 801c040:	4630      	mov	r0, r6
 801c042:	4639      	mov	r1, r7
 801c044:	f7e4 fb50 	bl	80006e8 <__aeabi_dmul>
 801c048:	4bb4      	ldr	r3, [pc, #720]	; (801c31c <__kernel_tan+0x394>)
 801c04a:	2200      	movs	r2, #0
 801c04c:	f7e4 f996 	bl	800037c <__adddf3>
 801c050:	4602      	mov	r2, r0
 801c052:	460b      	mov	r3, r1
 801c054:	4640      	mov	r0, r8
 801c056:	4649      	mov	r1, r9
 801c058:	f7e4 f990 	bl	800037c <__adddf3>
 801c05c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c060:	f7e4 fb42 	bl	80006e8 <__aeabi_dmul>
 801c064:	4622      	mov	r2, r4
 801c066:	462b      	mov	r3, r5
 801c068:	f7e4 f988 	bl	800037c <__adddf3>
 801c06c:	e7b5      	b.n	801bfda <__kernel_tan+0x52>
 801c06e:	4bad      	ldr	r3, [pc, #692]	; (801c324 <__kernel_tan+0x39c>)
 801c070:	429f      	cmp	r7, r3
 801c072:	dd26      	ble.n	801c0c2 <__kernel_tan+0x13a>
 801c074:	9b00      	ldr	r3, [sp, #0]
 801c076:	2b00      	cmp	r3, #0
 801c078:	da09      	bge.n	801c08e <__kernel_tan+0x106>
 801c07a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c07e:	469b      	mov	fp, r3
 801c080:	ee10 aa10 	vmov	sl, s0
 801c084:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801c088:	ee11 8a10 	vmov	r8, s2
 801c08c:	4699      	mov	r9, r3
 801c08e:	4652      	mov	r2, sl
 801c090:	465b      	mov	r3, fp
 801c092:	a183      	add	r1, pc, #524	; (adr r1, 801c2a0 <__kernel_tan+0x318>)
 801c094:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c098:	f7e4 f96e 	bl	8000378 <__aeabi_dsub>
 801c09c:	4642      	mov	r2, r8
 801c09e:	464b      	mov	r3, r9
 801c0a0:	4604      	mov	r4, r0
 801c0a2:	460d      	mov	r5, r1
 801c0a4:	a180      	add	r1, pc, #512	; (adr r1, 801c2a8 <__kernel_tan+0x320>)
 801c0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c0aa:	f7e4 f965 	bl	8000378 <__aeabi_dsub>
 801c0ae:	4622      	mov	r2, r4
 801c0b0:	462b      	mov	r3, r5
 801c0b2:	f7e4 f963 	bl	800037c <__adddf3>
 801c0b6:	f04f 0800 	mov.w	r8, #0
 801c0ba:	4682      	mov	sl, r0
 801c0bc:	468b      	mov	fp, r1
 801c0be:	f04f 0900 	mov.w	r9, #0
 801c0c2:	4652      	mov	r2, sl
 801c0c4:	465b      	mov	r3, fp
 801c0c6:	4650      	mov	r0, sl
 801c0c8:	4659      	mov	r1, fp
 801c0ca:	f7e4 fb0d 	bl	80006e8 <__aeabi_dmul>
 801c0ce:	4602      	mov	r2, r0
 801c0d0:	460b      	mov	r3, r1
 801c0d2:	ec43 2b18 	vmov	d8, r2, r3
 801c0d6:	f7e4 fb07 	bl	80006e8 <__aeabi_dmul>
 801c0da:	ec53 2b18 	vmov	r2, r3, d8
 801c0de:	4604      	mov	r4, r0
 801c0e0:	460d      	mov	r5, r1
 801c0e2:	4650      	mov	r0, sl
 801c0e4:	4659      	mov	r1, fp
 801c0e6:	f7e4 faff 	bl	80006e8 <__aeabi_dmul>
 801c0ea:	a371      	add	r3, pc, #452	; (adr r3, 801c2b0 <__kernel_tan+0x328>)
 801c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0f0:	ec41 0b19 	vmov	d9, r0, r1
 801c0f4:	4620      	mov	r0, r4
 801c0f6:	4629      	mov	r1, r5
 801c0f8:	f7e4 faf6 	bl	80006e8 <__aeabi_dmul>
 801c0fc:	a36e      	add	r3, pc, #440	; (adr r3, 801c2b8 <__kernel_tan+0x330>)
 801c0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c102:	f7e4 f93b 	bl	800037c <__adddf3>
 801c106:	4622      	mov	r2, r4
 801c108:	462b      	mov	r3, r5
 801c10a:	f7e4 faed 	bl	80006e8 <__aeabi_dmul>
 801c10e:	a36c      	add	r3, pc, #432	; (adr r3, 801c2c0 <__kernel_tan+0x338>)
 801c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c114:	f7e4 f932 	bl	800037c <__adddf3>
 801c118:	4622      	mov	r2, r4
 801c11a:	462b      	mov	r3, r5
 801c11c:	f7e4 fae4 	bl	80006e8 <__aeabi_dmul>
 801c120:	a369      	add	r3, pc, #420	; (adr r3, 801c2c8 <__kernel_tan+0x340>)
 801c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c126:	f7e4 f929 	bl	800037c <__adddf3>
 801c12a:	4622      	mov	r2, r4
 801c12c:	462b      	mov	r3, r5
 801c12e:	f7e4 fadb 	bl	80006e8 <__aeabi_dmul>
 801c132:	a367      	add	r3, pc, #412	; (adr r3, 801c2d0 <__kernel_tan+0x348>)
 801c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c138:	f7e4 f920 	bl	800037c <__adddf3>
 801c13c:	4622      	mov	r2, r4
 801c13e:	462b      	mov	r3, r5
 801c140:	f7e4 fad2 	bl	80006e8 <__aeabi_dmul>
 801c144:	a364      	add	r3, pc, #400	; (adr r3, 801c2d8 <__kernel_tan+0x350>)
 801c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c14a:	f7e4 f917 	bl	800037c <__adddf3>
 801c14e:	ec53 2b18 	vmov	r2, r3, d8
 801c152:	f7e4 fac9 	bl	80006e8 <__aeabi_dmul>
 801c156:	a362      	add	r3, pc, #392	; (adr r3, 801c2e0 <__kernel_tan+0x358>)
 801c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c15c:	ec41 0b1a 	vmov	d10, r0, r1
 801c160:	4620      	mov	r0, r4
 801c162:	4629      	mov	r1, r5
 801c164:	f7e4 fac0 	bl	80006e8 <__aeabi_dmul>
 801c168:	a35f      	add	r3, pc, #380	; (adr r3, 801c2e8 <__kernel_tan+0x360>)
 801c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c16e:	f7e4 f905 	bl	800037c <__adddf3>
 801c172:	4622      	mov	r2, r4
 801c174:	462b      	mov	r3, r5
 801c176:	f7e4 fab7 	bl	80006e8 <__aeabi_dmul>
 801c17a:	a35d      	add	r3, pc, #372	; (adr r3, 801c2f0 <__kernel_tan+0x368>)
 801c17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c180:	f7e4 f8fc 	bl	800037c <__adddf3>
 801c184:	4622      	mov	r2, r4
 801c186:	462b      	mov	r3, r5
 801c188:	f7e4 faae 	bl	80006e8 <__aeabi_dmul>
 801c18c:	a35a      	add	r3, pc, #360	; (adr r3, 801c2f8 <__kernel_tan+0x370>)
 801c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c192:	f7e4 f8f3 	bl	800037c <__adddf3>
 801c196:	4622      	mov	r2, r4
 801c198:	462b      	mov	r3, r5
 801c19a:	f7e4 faa5 	bl	80006e8 <__aeabi_dmul>
 801c19e:	a358      	add	r3, pc, #352	; (adr r3, 801c300 <__kernel_tan+0x378>)
 801c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1a4:	f7e4 f8ea 	bl	800037c <__adddf3>
 801c1a8:	4622      	mov	r2, r4
 801c1aa:	462b      	mov	r3, r5
 801c1ac:	f7e4 fa9c 	bl	80006e8 <__aeabi_dmul>
 801c1b0:	a355      	add	r3, pc, #340	; (adr r3, 801c308 <__kernel_tan+0x380>)
 801c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1b6:	f7e4 f8e1 	bl	800037c <__adddf3>
 801c1ba:	4602      	mov	r2, r0
 801c1bc:	460b      	mov	r3, r1
 801c1be:	ec51 0b1a 	vmov	r0, r1, d10
 801c1c2:	f7e4 f8db 	bl	800037c <__adddf3>
 801c1c6:	ec53 2b19 	vmov	r2, r3, d9
 801c1ca:	f7e4 fa8d 	bl	80006e8 <__aeabi_dmul>
 801c1ce:	4642      	mov	r2, r8
 801c1d0:	464b      	mov	r3, r9
 801c1d2:	f7e4 f8d3 	bl	800037c <__adddf3>
 801c1d6:	ec53 2b18 	vmov	r2, r3, d8
 801c1da:	f7e4 fa85 	bl	80006e8 <__aeabi_dmul>
 801c1de:	4642      	mov	r2, r8
 801c1e0:	464b      	mov	r3, r9
 801c1e2:	f7e4 f8cb 	bl	800037c <__adddf3>
 801c1e6:	a34a      	add	r3, pc, #296	; (adr r3, 801c310 <__kernel_tan+0x388>)
 801c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1ec:	4604      	mov	r4, r0
 801c1ee:	460d      	mov	r5, r1
 801c1f0:	ec51 0b19 	vmov	r0, r1, d9
 801c1f4:	f7e4 fa78 	bl	80006e8 <__aeabi_dmul>
 801c1f8:	4622      	mov	r2, r4
 801c1fa:	462b      	mov	r3, r5
 801c1fc:	f7e4 f8be 	bl	800037c <__adddf3>
 801c200:	460b      	mov	r3, r1
 801c202:	ec41 0b18 	vmov	d8, r0, r1
 801c206:	4602      	mov	r2, r0
 801c208:	4659      	mov	r1, fp
 801c20a:	4650      	mov	r0, sl
 801c20c:	f7e4 f8b6 	bl	800037c <__adddf3>
 801c210:	4b44      	ldr	r3, [pc, #272]	; (801c324 <__kernel_tan+0x39c>)
 801c212:	429f      	cmp	r7, r3
 801c214:	4604      	mov	r4, r0
 801c216:	460d      	mov	r5, r1
 801c218:	f340 8086 	ble.w	801c328 <__kernel_tan+0x3a0>
 801c21c:	4630      	mov	r0, r6
 801c21e:	f7e4 f9f9 	bl	8000614 <__aeabi_i2d>
 801c222:	4622      	mov	r2, r4
 801c224:	4680      	mov	r8, r0
 801c226:	4689      	mov	r9, r1
 801c228:	462b      	mov	r3, r5
 801c22a:	4620      	mov	r0, r4
 801c22c:	4629      	mov	r1, r5
 801c22e:	f7e4 fa5b 	bl	80006e8 <__aeabi_dmul>
 801c232:	4642      	mov	r2, r8
 801c234:	4606      	mov	r6, r0
 801c236:	460f      	mov	r7, r1
 801c238:	464b      	mov	r3, r9
 801c23a:	4620      	mov	r0, r4
 801c23c:	4629      	mov	r1, r5
 801c23e:	f7e4 f89d 	bl	800037c <__adddf3>
 801c242:	4602      	mov	r2, r0
 801c244:	460b      	mov	r3, r1
 801c246:	4630      	mov	r0, r6
 801c248:	4639      	mov	r1, r7
 801c24a:	f7e4 fb77 	bl	800093c <__aeabi_ddiv>
 801c24e:	ec53 2b18 	vmov	r2, r3, d8
 801c252:	f7e4 f891 	bl	8000378 <__aeabi_dsub>
 801c256:	4602      	mov	r2, r0
 801c258:	460b      	mov	r3, r1
 801c25a:	4650      	mov	r0, sl
 801c25c:	4659      	mov	r1, fp
 801c25e:	f7e4 f88b 	bl	8000378 <__aeabi_dsub>
 801c262:	4602      	mov	r2, r0
 801c264:	460b      	mov	r3, r1
 801c266:	f7e4 f889 	bl	800037c <__adddf3>
 801c26a:	4602      	mov	r2, r0
 801c26c:	460b      	mov	r3, r1
 801c26e:	4640      	mov	r0, r8
 801c270:	4649      	mov	r1, r9
 801c272:	f7e4 f881 	bl	8000378 <__aeabi_dsub>
 801c276:	9b00      	ldr	r3, [sp, #0]
 801c278:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801c27c:	f00a 0a02 	and.w	sl, sl, #2
 801c280:	4604      	mov	r4, r0
 801c282:	f1ca 0001 	rsb	r0, sl, #1
 801c286:	460d      	mov	r5, r1
 801c288:	f7e4 f9c4 	bl	8000614 <__aeabi_i2d>
 801c28c:	4602      	mov	r2, r0
 801c28e:	460b      	mov	r3, r1
 801c290:	4620      	mov	r0, r4
 801c292:	4629      	mov	r1, r5
 801c294:	f7e4 fa28 	bl	80006e8 <__aeabi_dmul>
 801c298:	e69f      	b.n	801bfda <__kernel_tan+0x52>
 801c29a:	bf00      	nop
 801c29c:	f3af 8000 	nop.w
 801c2a0:	54442d18 	.word	0x54442d18
 801c2a4:	3fe921fb 	.word	0x3fe921fb
 801c2a8:	33145c07 	.word	0x33145c07
 801c2ac:	3c81a626 	.word	0x3c81a626
 801c2b0:	74bf7ad4 	.word	0x74bf7ad4
 801c2b4:	3efb2a70 	.word	0x3efb2a70
 801c2b8:	32f0a7e9 	.word	0x32f0a7e9
 801c2bc:	3f12b80f 	.word	0x3f12b80f
 801c2c0:	1a8d1068 	.word	0x1a8d1068
 801c2c4:	3f3026f7 	.word	0x3f3026f7
 801c2c8:	fee08315 	.word	0xfee08315
 801c2cc:	3f57dbc8 	.word	0x3f57dbc8
 801c2d0:	e96e8493 	.word	0xe96e8493
 801c2d4:	3f8226e3 	.word	0x3f8226e3
 801c2d8:	1bb341fe 	.word	0x1bb341fe
 801c2dc:	3faba1ba 	.word	0x3faba1ba
 801c2e0:	db605373 	.word	0xdb605373
 801c2e4:	bef375cb 	.word	0xbef375cb
 801c2e8:	a03792a6 	.word	0xa03792a6
 801c2ec:	3f147e88 	.word	0x3f147e88
 801c2f0:	f2f26501 	.word	0xf2f26501
 801c2f4:	3f4344d8 	.word	0x3f4344d8
 801c2f8:	c9560328 	.word	0xc9560328
 801c2fc:	3f6d6d22 	.word	0x3f6d6d22
 801c300:	8406d637 	.word	0x8406d637
 801c304:	3f9664f4 	.word	0x3f9664f4
 801c308:	1110fe7a 	.word	0x1110fe7a
 801c30c:	3fc11111 	.word	0x3fc11111
 801c310:	55555563 	.word	0x55555563
 801c314:	3fd55555 	.word	0x3fd55555
 801c318:	3e2fffff 	.word	0x3e2fffff
 801c31c:	3ff00000 	.word	0x3ff00000
 801c320:	bff00000 	.word	0xbff00000
 801c324:	3fe59427 	.word	0x3fe59427
 801c328:	2e01      	cmp	r6, #1
 801c32a:	d02f      	beq.n	801c38c <__kernel_tan+0x404>
 801c32c:	460f      	mov	r7, r1
 801c32e:	4602      	mov	r2, r0
 801c330:	460b      	mov	r3, r1
 801c332:	4689      	mov	r9, r1
 801c334:	2000      	movs	r0, #0
 801c336:	4917      	ldr	r1, [pc, #92]	; (801c394 <__kernel_tan+0x40c>)
 801c338:	f7e4 fb00 	bl	800093c <__aeabi_ddiv>
 801c33c:	2600      	movs	r6, #0
 801c33e:	e9cd 0100 	strd	r0, r1, [sp]
 801c342:	4652      	mov	r2, sl
 801c344:	465b      	mov	r3, fp
 801c346:	4630      	mov	r0, r6
 801c348:	4639      	mov	r1, r7
 801c34a:	f7e4 f815 	bl	8000378 <__aeabi_dsub>
 801c34e:	e9dd 4500 	ldrd	r4, r5, [sp]
 801c352:	4602      	mov	r2, r0
 801c354:	460b      	mov	r3, r1
 801c356:	ec51 0b18 	vmov	r0, r1, d8
 801c35a:	f7e4 f80d 	bl	8000378 <__aeabi_dsub>
 801c35e:	4632      	mov	r2, r6
 801c360:	462b      	mov	r3, r5
 801c362:	f7e4 f9c1 	bl	80006e8 <__aeabi_dmul>
 801c366:	46b0      	mov	r8, r6
 801c368:	460f      	mov	r7, r1
 801c36a:	4642      	mov	r2, r8
 801c36c:	462b      	mov	r3, r5
 801c36e:	4634      	mov	r4, r6
 801c370:	4649      	mov	r1, r9
 801c372:	4606      	mov	r6, r0
 801c374:	4640      	mov	r0, r8
 801c376:	f7e4 f9b7 	bl	80006e8 <__aeabi_dmul>
 801c37a:	4b07      	ldr	r3, [pc, #28]	; (801c398 <__kernel_tan+0x410>)
 801c37c:	2200      	movs	r2, #0
 801c37e:	f7e3 fffd 	bl	800037c <__adddf3>
 801c382:	4602      	mov	r2, r0
 801c384:	460b      	mov	r3, r1
 801c386:	4630      	mov	r0, r6
 801c388:	4639      	mov	r1, r7
 801c38a:	e665      	b.n	801c058 <__kernel_tan+0xd0>
 801c38c:	4682      	mov	sl, r0
 801c38e:	468b      	mov	fp, r1
 801c390:	e625      	b.n	801bfde <__kernel_tan+0x56>
 801c392:	bf00      	nop
 801c394:	bff00000 	.word	0xbff00000
 801c398:	3ff00000 	.word	0x3ff00000

0801c39c <fabs>:
 801c39c:	ec51 0b10 	vmov	r0, r1, d0
 801c3a0:	ee10 2a10 	vmov	r2, s0
 801c3a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c3a8:	ec43 2b10 	vmov	d0, r2, r3
 801c3ac:	4770      	bx	lr
	...

0801c3b0 <floor>:
 801c3b0:	ec51 0b10 	vmov	r0, r1, d0
 801c3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c3bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801c3c0:	2e13      	cmp	r6, #19
 801c3c2:	ee10 5a10 	vmov	r5, s0
 801c3c6:	ee10 8a10 	vmov	r8, s0
 801c3ca:	460c      	mov	r4, r1
 801c3cc:	dc32      	bgt.n	801c434 <floor+0x84>
 801c3ce:	2e00      	cmp	r6, #0
 801c3d0:	da14      	bge.n	801c3fc <floor+0x4c>
 801c3d2:	a333      	add	r3, pc, #204	; (adr r3, 801c4a0 <floor+0xf0>)
 801c3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3d8:	f7e3 ffd0 	bl	800037c <__adddf3>
 801c3dc:	2200      	movs	r2, #0
 801c3de:	2300      	movs	r3, #0
 801c3e0:	f7e4 fc12 	bl	8000c08 <__aeabi_dcmpgt>
 801c3e4:	b138      	cbz	r0, 801c3f6 <floor+0x46>
 801c3e6:	2c00      	cmp	r4, #0
 801c3e8:	da57      	bge.n	801c49a <floor+0xea>
 801c3ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c3ee:	431d      	orrs	r5, r3
 801c3f0:	d001      	beq.n	801c3f6 <floor+0x46>
 801c3f2:	4c2d      	ldr	r4, [pc, #180]	; (801c4a8 <floor+0xf8>)
 801c3f4:	2500      	movs	r5, #0
 801c3f6:	4621      	mov	r1, r4
 801c3f8:	4628      	mov	r0, r5
 801c3fa:	e025      	b.n	801c448 <floor+0x98>
 801c3fc:	4f2b      	ldr	r7, [pc, #172]	; (801c4ac <floor+0xfc>)
 801c3fe:	4137      	asrs	r7, r6
 801c400:	ea01 0307 	and.w	r3, r1, r7
 801c404:	4303      	orrs	r3, r0
 801c406:	d01f      	beq.n	801c448 <floor+0x98>
 801c408:	a325      	add	r3, pc, #148	; (adr r3, 801c4a0 <floor+0xf0>)
 801c40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c40e:	f7e3 ffb5 	bl	800037c <__adddf3>
 801c412:	2200      	movs	r2, #0
 801c414:	2300      	movs	r3, #0
 801c416:	f7e4 fbf7 	bl	8000c08 <__aeabi_dcmpgt>
 801c41a:	2800      	cmp	r0, #0
 801c41c:	d0eb      	beq.n	801c3f6 <floor+0x46>
 801c41e:	2c00      	cmp	r4, #0
 801c420:	bfbe      	ittt	lt
 801c422:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c426:	fa43 f606 	asrlt.w	r6, r3, r6
 801c42a:	19a4      	addlt	r4, r4, r6
 801c42c:	ea24 0407 	bic.w	r4, r4, r7
 801c430:	2500      	movs	r5, #0
 801c432:	e7e0      	b.n	801c3f6 <floor+0x46>
 801c434:	2e33      	cmp	r6, #51	; 0x33
 801c436:	dd0b      	ble.n	801c450 <floor+0xa0>
 801c438:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c43c:	d104      	bne.n	801c448 <floor+0x98>
 801c43e:	ee10 2a10 	vmov	r2, s0
 801c442:	460b      	mov	r3, r1
 801c444:	f7e3 ff9a 	bl	800037c <__adddf3>
 801c448:	ec41 0b10 	vmov	d0, r0, r1
 801c44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c450:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801c454:	f04f 33ff 	mov.w	r3, #4294967295
 801c458:	fa23 f707 	lsr.w	r7, r3, r7
 801c45c:	4207      	tst	r7, r0
 801c45e:	d0f3      	beq.n	801c448 <floor+0x98>
 801c460:	a30f      	add	r3, pc, #60	; (adr r3, 801c4a0 <floor+0xf0>)
 801c462:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c466:	f7e3 ff89 	bl	800037c <__adddf3>
 801c46a:	2200      	movs	r2, #0
 801c46c:	2300      	movs	r3, #0
 801c46e:	f7e4 fbcb 	bl	8000c08 <__aeabi_dcmpgt>
 801c472:	2800      	cmp	r0, #0
 801c474:	d0bf      	beq.n	801c3f6 <floor+0x46>
 801c476:	2c00      	cmp	r4, #0
 801c478:	da02      	bge.n	801c480 <floor+0xd0>
 801c47a:	2e14      	cmp	r6, #20
 801c47c:	d103      	bne.n	801c486 <floor+0xd6>
 801c47e:	3401      	adds	r4, #1
 801c480:	ea25 0507 	bic.w	r5, r5, r7
 801c484:	e7b7      	b.n	801c3f6 <floor+0x46>
 801c486:	2301      	movs	r3, #1
 801c488:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801c48c:	fa03 f606 	lsl.w	r6, r3, r6
 801c490:	4435      	add	r5, r6
 801c492:	4545      	cmp	r5, r8
 801c494:	bf38      	it	cc
 801c496:	18e4      	addcc	r4, r4, r3
 801c498:	e7f2      	b.n	801c480 <floor+0xd0>
 801c49a:	2500      	movs	r5, #0
 801c49c:	462c      	mov	r4, r5
 801c49e:	e7aa      	b.n	801c3f6 <floor+0x46>
 801c4a0:	8800759c 	.word	0x8800759c
 801c4a4:	7e37e43c 	.word	0x7e37e43c
 801c4a8:	bff00000 	.word	0xbff00000
 801c4ac:	000fffff 	.word	0x000fffff

0801c4b0 <nan>:
 801c4b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c4b8 <nan+0x8>
 801c4b4:	4770      	bx	lr
 801c4b6:	bf00      	nop
 801c4b8:	00000000 	.word	0x00000000
 801c4bc:	7ff80000 	.word	0x7ff80000

0801c4c0 <scalbn>:
 801c4c0:	b570      	push	{r4, r5, r6, lr}
 801c4c2:	ec55 4b10 	vmov	r4, r5, d0
 801c4c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c4ca:	4606      	mov	r6, r0
 801c4cc:	462b      	mov	r3, r5
 801c4ce:	b99a      	cbnz	r2, 801c4f8 <scalbn+0x38>
 801c4d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c4d4:	4323      	orrs	r3, r4
 801c4d6:	d036      	beq.n	801c546 <scalbn+0x86>
 801c4d8:	4b39      	ldr	r3, [pc, #228]	; (801c5c0 <scalbn+0x100>)
 801c4da:	4629      	mov	r1, r5
 801c4dc:	ee10 0a10 	vmov	r0, s0
 801c4e0:	2200      	movs	r2, #0
 801c4e2:	f7e4 f901 	bl	80006e8 <__aeabi_dmul>
 801c4e6:	4b37      	ldr	r3, [pc, #220]	; (801c5c4 <scalbn+0x104>)
 801c4e8:	429e      	cmp	r6, r3
 801c4ea:	4604      	mov	r4, r0
 801c4ec:	460d      	mov	r5, r1
 801c4ee:	da10      	bge.n	801c512 <scalbn+0x52>
 801c4f0:	a32b      	add	r3, pc, #172	; (adr r3, 801c5a0 <scalbn+0xe0>)
 801c4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4f6:	e03a      	b.n	801c56e <scalbn+0xae>
 801c4f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c4fc:	428a      	cmp	r2, r1
 801c4fe:	d10c      	bne.n	801c51a <scalbn+0x5a>
 801c500:	ee10 2a10 	vmov	r2, s0
 801c504:	4620      	mov	r0, r4
 801c506:	4629      	mov	r1, r5
 801c508:	f7e3 ff38 	bl	800037c <__adddf3>
 801c50c:	4604      	mov	r4, r0
 801c50e:	460d      	mov	r5, r1
 801c510:	e019      	b.n	801c546 <scalbn+0x86>
 801c512:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c516:	460b      	mov	r3, r1
 801c518:	3a36      	subs	r2, #54	; 0x36
 801c51a:	4432      	add	r2, r6
 801c51c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c520:	428a      	cmp	r2, r1
 801c522:	dd08      	ble.n	801c536 <scalbn+0x76>
 801c524:	2d00      	cmp	r5, #0
 801c526:	a120      	add	r1, pc, #128	; (adr r1, 801c5a8 <scalbn+0xe8>)
 801c528:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c52c:	da1c      	bge.n	801c568 <scalbn+0xa8>
 801c52e:	a120      	add	r1, pc, #128	; (adr r1, 801c5b0 <scalbn+0xf0>)
 801c530:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c534:	e018      	b.n	801c568 <scalbn+0xa8>
 801c536:	2a00      	cmp	r2, #0
 801c538:	dd08      	ble.n	801c54c <scalbn+0x8c>
 801c53a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c53e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c542:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c546:	ec45 4b10 	vmov	d0, r4, r5
 801c54a:	bd70      	pop	{r4, r5, r6, pc}
 801c54c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c550:	da19      	bge.n	801c586 <scalbn+0xc6>
 801c552:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c556:	429e      	cmp	r6, r3
 801c558:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801c55c:	dd0a      	ble.n	801c574 <scalbn+0xb4>
 801c55e:	a112      	add	r1, pc, #72	; (adr r1, 801c5a8 <scalbn+0xe8>)
 801c560:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c564:	2b00      	cmp	r3, #0
 801c566:	d1e2      	bne.n	801c52e <scalbn+0x6e>
 801c568:	a30f      	add	r3, pc, #60	; (adr r3, 801c5a8 <scalbn+0xe8>)
 801c56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c56e:	f7e4 f8bb 	bl	80006e8 <__aeabi_dmul>
 801c572:	e7cb      	b.n	801c50c <scalbn+0x4c>
 801c574:	a10a      	add	r1, pc, #40	; (adr r1, 801c5a0 <scalbn+0xe0>)
 801c576:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d0b8      	beq.n	801c4f0 <scalbn+0x30>
 801c57e:	a10e      	add	r1, pc, #56	; (adr r1, 801c5b8 <scalbn+0xf8>)
 801c580:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c584:	e7b4      	b.n	801c4f0 <scalbn+0x30>
 801c586:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c58a:	3236      	adds	r2, #54	; 0x36
 801c58c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c590:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801c594:	4620      	mov	r0, r4
 801c596:	4b0c      	ldr	r3, [pc, #48]	; (801c5c8 <scalbn+0x108>)
 801c598:	2200      	movs	r2, #0
 801c59a:	e7e8      	b.n	801c56e <scalbn+0xae>
 801c59c:	f3af 8000 	nop.w
 801c5a0:	c2f8f359 	.word	0xc2f8f359
 801c5a4:	01a56e1f 	.word	0x01a56e1f
 801c5a8:	8800759c 	.word	0x8800759c
 801c5ac:	7e37e43c 	.word	0x7e37e43c
 801c5b0:	8800759c 	.word	0x8800759c
 801c5b4:	fe37e43c 	.word	0xfe37e43c
 801c5b8:	c2f8f359 	.word	0xc2f8f359
 801c5bc:	81a56e1f 	.word	0x81a56e1f
 801c5c0:	43500000 	.word	0x43500000
 801c5c4:	ffff3cb0 	.word	0xffff3cb0
 801c5c8:	3c900000 	.word	0x3c900000
 801c5cc:	00000000 	.word	0x00000000

0801c5d0 <__ieee754_log>:
 801c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5d4:	ec51 0b10 	vmov	r0, r1, d0
 801c5d8:	ed2d 8b04 	vpush	{d8-d9}
 801c5dc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801c5e0:	b083      	sub	sp, #12
 801c5e2:	460d      	mov	r5, r1
 801c5e4:	da29      	bge.n	801c63a <__ieee754_log+0x6a>
 801c5e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c5ea:	4303      	orrs	r3, r0
 801c5ec:	ee10 2a10 	vmov	r2, s0
 801c5f0:	d10c      	bne.n	801c60c <__ieee754_log+0x3c>
 801c5f2:	49cf      	ldr	r1, [pc, #828]	; (801c930 <__ieee754_log+0x360>)
 801c5f4:	2200      	movs	r2, #0
 801c5f6:	2300      	movs	r3, #0
 801c5f8:	2000      	movs	r0, #0
 801c5fa:	f7e4 f99f 	bl	800093c <__aeabi_ddiv>
 801c5fe:	ec41 0b10 	vmov	d0, r0, r1
 801c602:	b003      	add	sp, #12
 801c604:	ecbd 8b04 	vpop	{d8-d9}
 801c608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c60c:	2900      	cmp	r1, #0
 801c60e:	da05      	bge.n	801c61c <__ieee754_log+0x4c>
 801c610:	460b      	mov	r3, r1
 801c612:	f7e3 feb1 	bl	8000378 <__aeabi_dsub>
 801c616:	2200      	movs	r2, #0
 801c618:	2300      	movs	r3, #0
 801c61a:	e7ee      	b.n	801c5fa <__ieee754_log+0x2a>
 801c61c:	4bc5      	ldr	r3, [pc, #788]	; (801c934 <__ieee754_log+0x364>)
 801c61e:	2200      	movs	r2, #0
 801c620:	f7e4 f862 	bl	80006e8 <__aeabi_dmul>
 801c624:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801c628:	460d      	mov	r5, r1
 801c62a:	4ac3      	ldr	r2, [pc, #780]	; (801c938 <__ieee754_log+0x368>)
 801c62c:	4295      	cmp	r5, r2
 801c62e:	dd06      	ble.n	801c63e <__ieee754_log+0x6e>
 801c630:	4602      	mov	r2, r0
 801c632:	460b      	mov	r3, r1
 801c634:	f7e3 fea2 	bl	800037c <__adddf3>
 801c638:	e7e1      	b.n	801c5fe <__ieee754_log+0x2e>
 801c63a:	2300      	movs	r3, #0
 801c63c:	e7f5      	b.n	801c62a <__ieee754_log+0x5a>
 801c63e:	152c      	asrs	r4, r5, #20
 801c640:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801c644:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801c648:	441c      	add	r4, r3
 801c64a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801c64e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801c652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c656:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801c65a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801c65e:	ea42 0105 	orr.w	r1, r2, r5
 801c662:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801c666:	2200      	movs	r2, #0
 801c668:	4bb4      	ldr	r3, [pc, #720]	; (801c93c <__ieee754_log+0x36c>)
 801c66a:	f7e3 fe85 	bl	8000378 <__aeabi_dsub>
 801c66e:	1cab      	adds	r3, r5, #2
 801c670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c674:	2b02      	cmp	r3, #2
 801c676:	4682      	mov	sl, r0
 801c678:	468b      	mov	fp, r1
 801c67a:	f04f 0200 	mov.w	r2, #0
 801c67e:	dc53      	bgt.n	801c728 <__ieee754_log+0x158>
 801c680:	2300      	movs	r3, #0
 801c682:	f7e4 fa99 	bl	8000bb8 <__aeabi_dcmpeq>
 801c686:	b1d0      	cbz	r0, 801c6be <__ieee754_log+0xee>
 801c688:	2c00      	cmp	r4, #0
 801c68a:	f000 8122 	beq.w	801c8d2 <__ieee754_log+0x302>
 801c68e:	4620      	mov	r0, r4
 801c690:	f7e3 ffc0 	bl	8000614 <__aeabi_i2d>
 801c694:	a390      	add	r3, pc, #576	; (adr r3, 801c8d8 <__ieee754_log+0x308>)
 801c696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c69a:	4606      	mov	r6, r0
 801c69c:	460f      	mov	r7, r1
 801c69e:	f7e4 f823 	bl	80006e8 <__aeabi_dmul>
 801c6a2:	a38f      	add	r3, pc, #572	; (adr r3, 801c8e0 <__ieee754_log+0x310>)
 801c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6a8:	4604      	mov	r4, r0
 801c6aa:	460d      	mov	r5, r1
 801c6ac:	4630      	mov	r0, r6
 801c6ae:	4639      	mov	r1, r7
 801c6b0:	f7e4 f81a 	bl	80006e8 <__aeabi_dmul>
 801c6b4:	4602      	mov	r2, r0
 801c6b6:	460b      	mov	r3, r1
 801c6b8:	4620      	mov	r0, r4
 801c6ba:	4629      	mov	r1, r5
 801c6bc:	e7ba      	b.n	801c634 <__ieee754_log+0x64>
 801c6be:	a38a      	add	r3, pc, #552	; (adr r3, 801c8e8 <__ieee754_log+0x318>)
 801c6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6c4:	4650      	mov	r0, sl
 801c6c6:	4659      	mov	r1, fp
 801c6c8:	f7e4 f80e 	bl	80006e8 <__aeabi_dmul>
 801c6cc:	4602      	mov	r2, r0
 801c6ce:	460b      	mov	r3, r1
 801c6d0:	2000      	movs	r0, #0
 801c6d2:	499b      	ldr	r1, [pc, #620]	; (801c940 <__ieee754_log+0x370>)
 801c6d4:	f7e3 fe50 	bl	8000378 <__aeabi_dsub>
 801c6d8:	4652      	mov	r2, sl
 801c6da:	4606      	mov	r6, r0
 801c6dc:	460f      	mov	r7, r1
 801c6de:	465b      	mov	r3, fp
 801c6e0:	4650      	mov	r0, sl
 801c6e2:	4659      	mov	r1, fp
 801c6e4:	f7e4 f800 	bl	80006e8 <__aeabi_dmul>
 801c6e8:	4602      	mov	r2, r0
 801c6ea:	460b      	mov	r3, r1
 801c6ec:	4630      	mov	r0, r6
 801c6ee:	4639      	mov	r1, r7
 801c6f0:	f7e3 fffa 	bl	80006e8 <__aeabi_dmul>
 801c6f4:	4606      	mov	r6, r0
 801c6f6:	460f      	mov	r7, r1
 801c6f8:	b914      	cbnz	r4, 801c700 <__ieee754_log+0x130>
 801c6fa:	4632      	mov	r2, r6
 801c6fc:	463b      	mov	r3, r7
 801c6fe:	e0a2      	b.n	801c846 <__ieee754_log+0x276>
 801c700:	4620      	mov	r0, r4
 801c702:	f7e3 ff87 	bl	8000614 <__aeabi_i2d>
 801c706:	a374      	add	r3, pc, #464	; (adr r3, 801c8d8 <__ieee754_log+0x308>)
 801c708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c70c:	4680      	mov	r8, r0
 801c70e:	4689      	mov	r9, r1
 801c710:	f7e3 ffea 	bl	80006e8 <__aeabi_dmul>
 801c714:	a372      	add	r3, pc, #456	; (adr r3, 801c8e0 <__ieee754_log+0x310>)
 801c716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c71a:	4604      	mov	r4, r0
 801c71c:	460d      	mov	r5, r1
 801c71e:	4640      	mov	r0, r8
 801c720:	4649      	mov	r1, r9
 801c722:	f7e3 ffe1 	bl	80006e8 <__aeabi_dmul>
 801c726:	e0a7      	b.n	801c878 <__ieee754_log+0x2a8>
 801c728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c72c:	f7e3 fe26 	bl	800037c <__adddf3>
 801c730:	4602      	mov	r2, r0
 801c732:	460b      	mov	r3, r1
 801c734:	4650      	mov	r0, sl
 801c736:	4659      	mov	r1, fp
 801c738:	f7e4 f900 	bl	800093c <__aeabi_ddiv>
 801c73c:	ec41 0b18 	vmov	d8, r0, r1
 801c740:	4620      	mov	r0, r4
 801c742:	f7e3 ff67 	bl	8000614 <__aeabi_i2d>
 801c746:	ec53 2b18 	vmov	r2, r3, d8
 801c74a:	ec41 0b19 	vmov	d9, r0, r1
 801c74e:	ec51 0b18 	vmov	r0, r1, d8
 801c752:	f7e3 ffc9 	bl	80006e8 <__aeabi_dmul>
 801c756:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801c75a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801c75e:	9301      	str	r3, [sp, #4]
 801c760:	4602      	mov	r2, r0
 801c762:	460b      	mov	r3, r1
 801c764:	4680      	mov	r8, r0
 801c766:	4689      	mov	r9, r1
 801c768:	f7e3 ffbe 	bl	80006e8 <__aeabi_dmul>
 801c76c:	a360      	add	r3, pc, #384	; (adr r3, 801c8f0 <__ieee754_log+0x320>)
 801c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c772:	4606      	mov	r6, r0
 801c774:	460f      	mov	r7, r1
 801c776:	f7e3 ffb7 	bl	80006e8 <__aeabi_dmul>
 801c77a:	a35f      	add	r3, pc, #380	; (adr r3, 801c8f8 <__ieee754_log+0x328>)
 801c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c780:	f7e3 fdfc 	bl	800037c <__adddf3>
 801c784:	4632      	mov	r2, r6
 801c786:	463b      	mov	r3, r7
 801c788:	f7e3 ffae 	bl	80006e8 <__aeabi_dmul>
 801c78c:	a35c      	add	r3, pc, #368	; (adr r3, 801c900 <__ieee754_log+0x330>)
 801c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c792:	f7e3 fdf3 	bl	800037c <__adddf3>
 801c796:	4632      	mov	r2, r6
 801c798:	463b      	mov	r3, r7
 801c79a:	f7e3 ffa5 	bl	80006e8 <__aeabi_dmul>
 801c79e:	a35a      	add	r3, pc, #360	; (adr r3, 801c908 <__ieee754_log+0x338>)
 801c7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7a4:	f7e3 fdea 	bl	800037c <__adddf3>
 801c7a8:	4642      	mov	r2, r8
 801c7aa:	464b      	mov	r3, r9
 801c7ac:	f7e3 ff9c 	bl	80006e8 <__aeabi_dmul>
 801c7b0:	a357      	add	r3, pc, #348	; (adr r3, 801c910 <__ieee754_log+0x340>)
 801c7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7b6:	4680      	mov	r8, r0
 801c7b8:	4689      	mov	r9, r1
 801c7ba:	4630      	mov	r0, r6
 801c7bc:	4639      	mov	r1, r7
 801c7be:	f7e3 ff93 	bl	80006e8 <__aeabi_dmul>
 801c7c2:	a355      	add	r3, pc, #340	; (adr r3, 801c918 <__ieee754_log+0x348>)
 801c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7c8:	f7e3 fdd8 	bl	800037c <__adddf3>
 801c7cc:	4632      	mov	r2, r6
 801c7ce:	463b      	mov	r3, r7
 801c7d0:	f7e3 ff8a 	bl	80006e8 <__aeabi_dmul>
 801c7d4:	a352      	add	r3, pc, #328	; (adr r3, 801c920 <__ieee754_log+0x350>)
 801c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7da:	f7e3 fdcf 	bl	800037c <__adddf3>
 801c7de:	4632      	mov	r2, r6
 801c7e0:	463b      	mov	r3, r7
 801c7e2:	f7e3 ff81 	bl	80006e8 <__aeabi_dmul>
 801c7e6:	460b      	mov	r3, r1
 801c7e8:	4602      	mov	r2, r0
 801c7ea:	4649      	mov	r1, r9
 801c7ec:	4640      	mov	r0, r8
 801c7ee:	f7e3 fdc5 	bl	800037c <__adddf3>
 801c7f2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801c7f6:	9b01      	ldr	r3, [sp, #4]
 801c7f8:	3551      	adds	r5, #81	; 0x51
 801c7fa:	431d      	orrs	r5, r3
 801c7fc:	2d00      	cmp	r5, #0
 801c7fe:	4680      	mov	r8, r0
 801c800:	4689      	mov	r9, r1
 801c802:	dd48      	ble.n	801c896 <__ieee754_log+0x2c6>
 801c804:	4b4e      	ldr	r3, [pc, #312]	; (801c940 <__ieee754_log+0x370>)
 801c806:	2200      	movs	r2, #0
 801c808:	4650      	mov	r0, sl
 801c80a:	4659      	mov	r1, fp
 801c80c:	f7e3 ff6c 	bl	80006e8 <__aeabi_dmul>
 801c810:	4652      	mov	r2, sl
 801c812:	465b      	mov	r3, fp
 801c814:	f7e3 ff68 	bl	80006e8 <__aeabi_dmul>
 801c818:	4602      	mov	r2, r0
 801c81a:	460b      	mov	r3, r1
 801c81c:	4606      	mov	r6, r0
 801c81e:	460f      	mov	r7, r1
 801c820:	4640      	mov	r0, r8
 801c822:	4649      	mov	r1, r9
 801c824:	f7e3 fdaa 	bl	800037c <__adddf3>
 801c828:	ec53 2b18 	vmov	r2, r3, d8
 801c82c:	f7e3 ff5c 	bl	80006e8 <__aeabi_dmul>
 801c830:	4680      	mov	r8, r0
 801c832:	4689      	mov	r9, r1
 801c834:	b964      	cbnz	r4, 801c850 <__ieee754_log+0x280>
 801c836:	4602      	mov	r2, r0
 801c838:	460b      	mov	r3, r1
 801c83a:	4630      	mov	r0, r6
 801c83c:	4639      	mov	r1, r7
 801c83e:	f7e3 fd9b 	bl	8000378 <__aeabi_dsub>
 801c842:	4602      	mov	r2, r0
 801c844:	460b      	mov	r3, r1
 801c846:	4650      	mov	r0, sl
 801c848:	4659      	mov	r1, fp
 801c84a:	f7e3 fd95 	bl	8000378 <__aeabi_dsub>
 801c84e:	e6d6      	b.n	801c5fe <__ieee754_log+0x2e>
 801c850:	a321      	add	r3, pc, #132	; (adr r3, 801c8d8 <__ieee754_log+0x308>)
 801c852:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c856:	ec51 0b19 	vmov	r0, r1, d9
 801c85a:	f7e3 ff45 	bl	80006e8 <__aeabi_dmul>
 801c85e:	a320      	add	r3, pc, #128	; (adr r3, 801c8e0 <__ieee754_log+0x310>)
 801c860:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c864:	4604      	mov	r4, r0
 801c866:	460d      	mov	r5, r1
 801c868:	ec51 0b19 	vmov	r0, r1, d9
 801c86c:	f7e3 ff3c 	bl	80006e8 <__aeabi_dmul>
 801c870:	4642      	mov	r2, r8
 801c872:	464b      	mov	r3, r9
 801c874:	f7e3 fd82 	bl	800037c <__adddf3>
 801c878:	4602      	mov	r2, r0
 801c87a:	460b      	mov	r3, r1
 801c87c:	4630      	mov	r0, r6
 801c87e:	4639      	mov	r1, r7
 801c880:	f7e3 fd7a 	bl	8000378 <__aeabi_dsub>
 801c884:	4652      	mov	r2, sl
 801c886:	465b      	mov	r3, fp
 801c888:	f7e3 fd76 	bl	8000378 <__aeabi_dsub>
 801c88c:	4602      	mov	r2, r0
 801c88e:	460b      	mov	r3, r1
 801c890:	4620      	mov	r0, r4
 801c892:	4629      	mov	r1, r5
 801c894:	e7d9      	b.n	801c84a <__ieee754_log+0x27a>
 801c896:	4602      	mov	r2, r0
 801c898:	460b      	mov	r3, r1
 801c89a:	4650      	mov	r0, sl
 801c89c:	4659      	mov	r1, fp
 801c89e:	f7e3 fd6b 	bl	8000378 <__aeabi_dsub>
 801c8a2:	ec53 2b18 	vmov	r2, r3, d8
 801c8a6:	f7e3 ff1f 	bl	80006e8 <__aeabi_dmul>
 801c8aa:	4606      	mov	r6, r0
 801c8ac:	460f      	mov	r7, r1
 801c8ae:	2c00      	cmp	r4, #0
 801c8b0:	f43f af23 	beq.w	801c6fa <__ieee754_log+0x12a>
 801c8b4:	a308      	add	r3, pc, #32	; (adr r3, 801c8d8 <__ieee754_log+0x308>)
 801c8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8ba:	ec51 0b19 	vmov	r0, r1, d9
 801c8be:	f7e3 ff13 	bl	80006e8 <__aeabi_dmul>
 801c8c2:	a307      	add	r3, pc, #28	; (adr r3, 801c8e0 <__ieee754_log+0x310>)
 801c8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8c8:	4604      	mov	r4, r0
 801c8ca:	460d      	mov	r5, r1
 801c8cc:	ec51 0b19 	vmov	r0, r1, d9
 801c8d0:	e727      	b.n	801c722 <__ieee754_log+0x152>
 801c8d2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801c928 <__ieee754_log+0x358>
 801c8d6:	e694      	b.n	801c602 <__ieee754_log+0x32>
 801c8d8:	fee00000 	.word	0xfee00000
 801c8dc:	3fe62e42 	.word	0x3fe62e42
 801c8e0:	35793c76 	.word	0x35793c76
 801c8e4:	3dea39ef 	.word	0x3dea39ef
 801c8e8:	55555555 	.word	0x55555555
 801c8ec:	3fd55555 	.word	0x3fd55555
 801c8f0:	df3e5244 	.word	0xdf3e5244
 801c8f4:	3fc2f112 	.word	0x3fc2f112
 801c8f8:	96cb03de 	.word	0x96cb03de
 801c8fc:	3fc74664 	.word	0x3fc74664
 801c900:	94229359 	.word	0x94229359
 801c904:	3fd24924 	.word	0x3fd24924
 801c908:	55555593 	.word	0x55555593
 801c90c:	3fe55555 	.word	0x3fe55555
 801c910:	d078c69f 	.word	0xd078c69f
 801c914:	3fc39a09 	.word	0x3fc39a09
 801c918:	1d8e78af 	.word	0x1d8e78af
 801c91c:	3fcc71c5 	.word	0x3fcc71c5
 801c920:	9997fa04 	.word	0x9997fa04
 801c924:	3fd99999 	.word	0x3fd99999
	...
 801c930:	c3500000 	.word	0xc3500000
 801c934:	43500000 	.word	0x43500000
 801c938:	7fefffff 	.word	0x7fefffff
 801c93c:	3ff00000 	.word	0x3ff00000
 801c940:	3fe00000 	.word	0x3fe00000

0801c944 <_close>:
 801c944:	4b02      	ldr	r3, [pc, #8]	; (801c950 <_close+0xc>)
 801c946:	2258      	movs	r2, #88	; 0x58
 801c948:	601a      	str	r2, [r3, #0]
 801c94a:	f04f 30ff 	mov.w	r0, #4294967295
 801c94e:	4770      	bx	lr
 801c950:	2004a2f8 	.word	0x2004a2f8

0801c954 <_fstat>:
 801c954:	4b02      	ldr	r3, [pc, #8]	; (801c960 <_fstat+0xc>)
 801c956:	2258      	movs	r2, #88	; 0x58
 801c958:	601a      	str	r2, [r3, #0]
 801c95a:	f04f 30ff 	mov.w	r0, #4294967295
 801c95e:	4770      	bx	lr
 801c960:	2004a2f8 	.word	0x2004a2f8

0801c964 <_isatty>:
 801c964:	4b02      	ldr	r3, [pc, #8]	; (801c970 <_isatty+0xc>)
 801c966:	2258      	movs	r2, #88	; 0x58
 801c968:	601a      	str	r2, [r3, #0]
 801c96a:	2000      	movs	r0, #0
 801c96c:	4770      	bx	lr
 801c96e:	bf00      	nop
 801c970:	2004a2f8 	.word	0x2004a2f8

0801c974 <_lseek>:
 801c974:	4b02      	ldr	r3, [pc, #8]	; (801c980 <_lseek+0xc>)
 801c976:	2258      	movs	r2, #88	; 0x58
 801c978:	601a      	str	r2, [r3, #0]
 801c97a:	f04f 30ff 	mov.w	r0, #4294967295
 801c97e:	4770      	bx	lr
 801c980:	2004a2f8 	.word	0x2004a2f8

0801c984 <_read>:
 801c984:	4b02      	ldr	r3, [pc, #8]	; (801c990 <_read+0xc>)
 801c986:	2258      	movs	r2, #88	; 0x58
 801c988:	601a      	str	r2, [r3, #0]
 801c98a:	f04f 30ff 	mov.w	r0, #4294967295
 801c98e:	4770      	bx	lr
 801c990:	2004a2f8 	.word	0x2004a2f8

0801c994 <_write>:
 801c994:	4b02      	ldr	r3, [pc, #8]	; (801c9a0 <_write+0xc>)
 801c996:	2258      	movs	r2, #88	; 0x58
 801c998:	601a      	str	r2, [r3, #0]
 801c99a:	f04f 30ff 	mov.w	r0, #4294967295
 801c99e:	4770      	bx	lr
 801c9a0:	2004a2f8 	.word	0x2004a2f8

0801c9a4 <_init>:
 801c9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9a6:	bf00      	nop
 801c9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c9aa:	bc08      	pop	{r3}
 801c9ac:	469e      	mov	lr, r3
 801c9ae:	4770      	bx	lr

0801c9b0 <_fini>:
 801c9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9b2:	bf00      	nop
 801c9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c9b6:	bc08      	pop	{r3}
 801c9b8:	469e      	mov	lr, r3
 801c9ba:	4770      	bx	lr
