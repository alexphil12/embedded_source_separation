
Project_modeleTest_sur_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005c00c  08011ac0  08011ac0  00021ac0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806dacc  0806dacc  00080c34  2**0
                  CONTENTS
  4 .ARM          00000008  0806dacc  0806dacc  0007dacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806dad4  0806dad4  00080c34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806dad4  0806dad4  0007dad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806dad8  0806dad8  0007dad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000af4  20000000  0806dadc  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000af4  0806e5d0  00080af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000b94  0806e670  00080b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000093e4  20000c34  0806e710  00080c34  2**2
                  ALLOC
 12 ._user_heap_stack 00002800  2000a018  0806e710  0008a018  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00080c34  2**0
                  CONTENTS, READONLY
 14 .debug_info   00052eb0  00000000  00000000  00080c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a409  00000000  00000000  000d3b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002aa0  00000000  00000000  000ddf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004468  00000000  00000000  000e09c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037d77  00000000  00000000  000e4e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00052088  00000000  00000000  0011cb9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00134518  00000000  00000000  0016ec27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002a313f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000961c  00000000  00000000  002a3190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0002d6bc  00000000  00000000  002ac7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .stab         000000cc  00000000  00000000  002d9e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .stabstr      000001b9  00000000  00000000  002d9f34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000c34 	.word	0x20000c34
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011aa4 	.word	0x08011aa4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000c38 	.word	0x20000c38
 800020c:	08011aa4 	.word	0x08011aa4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000eec:	4770      	bx	lr

08000eee <vApplicationStackOverflowHook>:
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000eee:	4770      	bx	lr

08000ef0 <vApplicationMallocFailedHook>:
 8000ef0:	4770      	bx	lr
	...

08000ef4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <vApplicationGetIdleTaskMemory+0x10>)
 8000ef6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <vApplicationGetIdleTaskMemory+0x14>)
 8000efa:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000e50 	.word	0x20000e50
 8000f08:	20000c50 	.word	0x20000c50

08000f0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f0c:	b508      	push	{r3, lr}
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000f0e:	f009 fccb 	bl	800a8a8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f008 f92a 	bl	800916c <osDelay>
  for(;;)
 8000f18:	e7fb      	b.n	8000f12 <StartDefaultTask+0x6>
	...

08000f1c <SystemClock_Config>:
{
 8000f1c:	b510      	push	{r4, lr}
 8000f1e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f20:	2230      	movs	r2, #48	; 0x30
 8000f22:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f24:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	a808      	add	r0, sp, #32
 8000f28:	f00d fea0 	bl	800ec6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	2214      	movs	r2, #20
 8000f2e:	2100      	movs	r1, #0
 8000f30:	a803      	add	r0, sp, #12
 8000f32:	f00d fe9b 	bl	800ec6c <memset>
  HAL_PWR_EnableBkUpAccess();
 8000f36:	f003 f99d 	bl	8004274 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <SystemClock_Config+0xa8>)
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f48:	641a      	str	r2, [r3, #64]	; 0x40
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <SystemClock_Config+0xac>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000f5c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f6c:	2309      	movs	r3, #9
 8000f6e:	e9cd 3208 	strd	r3, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f72:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f74:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f76:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f7a:	2219      	movs	r2, #25
 8000f7c:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000f80:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f84:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f88:	f003 fa30 	bl	80043ec <HAL_RCC_OscConfig>
 8000f8c:	b108      	cbz	r0, 8000f92 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <SystemClock_Config+0x74>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f92:	f003 f977 	bl	8004284 <HAL_PWREx_EnableOverDrive>
 8000f96:	b108      	cbz	r0, 8000f9c <SystemClock_Config+0x80>
 8000f98:	b672      	cpsid	i
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f9e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fa4:	2107      	movs	r1, #7
 8000fa6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa8:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fb4:	f003 fc06 	bl	80047c4 <HAL_RCC_ClockConfig>
 8000fb8:	b108      	cbz	r0, 8000fbe <SystemClock_Config+0xa2>
 8000fba:	b672      	cpsid	i
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <SystemClock_Config+0xa0>
}
 8000fbe:	b014      	add	sp, #80	; 0x50
 8000fc0:	bd10      	pop	{r4, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40007000 	.word	0x40007000

08000fcc <PeriphCommonClock_Config>:
{
 8000fcc:	b500      	push	{lr}
 8000fce:	b0a3      	sub	sp, #140	; 0x8c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	a802      	add	r0, sp, #8
 8000fd6:	f00d fe49 	bl	800ec6c <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_SDMMC1
 8000fda:	f44f 0330 	mov.w	r3, #11534336	; 0xb00000
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000fde:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000fe0:	f04f 0e01 	mov.w	lr, #1
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_SDMMC1
 8000fe4:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000fe6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fea:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	e9cd 3007 	strd	r3, r0, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000ff2:	2303      	movs	r3, #3
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff4:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000ff6:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffc:	e9cd e30b 	strd	lr, r3, [sp, #44]	; 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001000:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001004:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001006:	f003 fcbb 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 800100a:	b108      	cbz	r0, 8001010 <PeriphCommonClock_Config+0x44>
 800100c:	b672      	cpsid	i
  while (1)
 800100e:	e7fe      	b.n	800100e <PeriphCommonClock_Config+0x42>
}
 8001010:	b023      	add	sp, #140	; 0x8c
 8001012:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001018 <main>:
{
 8001018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800101c:	f5ad 3dca 	sub.w	sp, sp, #103424	; 0x19400
	    	ai_handle my_model = AI_HANDLE_NULL;
 8001020:	2300      	movs	r3, #0
{
 8001022:	b0c5      	sub	sp, #276	; 0x114
	    	ai_handle my_model = AI_HANDLE_NULL;
 8001024:	9302      	str	r3, [sp, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001026:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800102a:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800102e:	4ace      	ldr	r2, [pc, #824]	; (8001368 <main+0x350>)
 8001030:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001034:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001038:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800103c:	6951      	ldr	r1, [r2, #20]
 800103e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001042:	6151      	str	r1, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001044:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001048:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800104c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001050:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001054:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001058:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800105c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001060:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001064:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001066:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800106a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800106c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001070:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001072:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001076:	d2f9      	bcs.n	800106c <main+0x54>
    } while(sets-- != 0U);
 8001078:	3b20      	subs	r3, #32
 800107a:	f113 0f20 	cmn.w	r3, #32
 800107e:	d1f2      	bne.n	8001066 <main+0x4e>
 8001080:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001084:	6953      	ldr	r3, [r2, #20]
 8001086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108a:	6153      	str	r3, [r2, #20]
 800108c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001090:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001094:	f001 fd32 	bl	8002afc <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2400      	movs	r4, #0
  SystemClock_Config();
 800109a:	f7ff ff3f 	bl	8000f1c <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2502      	movs	r5, #2
  PeriphCommonClock_Config();
 80010a0:	f7ff ff94 	bl	8000fcc <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	2100      	movs	r1, #0
 80010a6:	2214      	movs	r2, #20
 80010a8:	f50d 60a2 	add.w	r0, sp, #1296	; 0x510
 80010ac:	f00d fdde 	bl	800ec6c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b0:	4bae      	ldr	r3, [pc, #696]	; (800136c <main+0x354>)
 80010b2:	a903      	add	r1, sp, #12
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010b4:	48ae      	ldr	r0, [pc, #696]	; (8001370 <main+0x358>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010b8:	f04f 0a0e 	mov.w	sl, #14
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80010bc:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010c0:	f04f 0b0a 	mov.w	fp, #10
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c4:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2703      	movs	r7, #3
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010ca:	f04f 090d 	mov.w	r9, #13
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d0:	631a      	str	r2, [r3, #48]	; 0x30
 80010d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010d4:	f002 0210 	and.w	r2, r2, #16
 80010d8:	600a      	str	r2, [r1, #0]
 80010da:	680a      	ldr	r2, [r1, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010dc:	a904      	add	r1, sp, #16
 80010de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010e4:	631a      	str	r2, [r3, #48]	; 0x30
 80010e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80010ec:	600a      	str	r2, [r1, #0]
 80010ee:	680a      	ldr	r2, [r1, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	a905      	add	r1, sp, #20
 80010f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f4:	f042 0202 	orr.w	r2, r2, #2
 80010f8:	631a      	str	r2, [r3, #48]	; 0x30
 80010fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010fc:	f002 0202 	and.w	r2, r2, #2
 8001100:	600a      	str	r2, [r1, #0]
 8001102:	680a      	ldr	r2, [r1, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001104:	a906      	add	r1, sp, #24
 8001106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001108:	f042 0208 	orr.w	r2, r2, #8
 800110c:	631a      	str	r2, [r3, #48]	; 0x30
 800110e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001110:	f002 0208 	and.w	r2, r2, #8
 8001114:	600a      	str	r2, [r1, #0]
 8001116:	680a      	ldr	r2, [r1, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001118:	a907      	add	r1, sp, #28
 800111a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800111c:	f042 0204 	orr.w	r2, r2, #4
 8001120:	631a      	str	r2, [r3, #48]	; 0x30
 8001122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001124:	f002 0204 	and.w	r2, r2, #4
 8001128:	600a      	str	r2, [r1, #0]
 800112a:	680a      	ldr	r2, [r1, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	a908      	add	r1, sp, #32
 800112e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001130:	f042 0201 	orr.w	r2, r2, #1
 8001134:	631a      	str	r2, [r3, #48]	; 0x30
 8001136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001138:	f002 0201 	and.w	r2, r2, #1
 800113c:	600a      	str	r2, [r1, #0]
 800113e:	680a      	ldr	r2, [r1, #0]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001140:	a909      	add	r1, sp, #36	; 0x24
 8001142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
 800114a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800114c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001150:	600a      	str	r2, [r1, #0]
 8001152:	680a      	ldr	r2, [r1, #0]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001154:	a90a      	add	r1, sp, #40	; 0x28
 8001156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800115c:	631a      	str	r2, [r3, #48]	; 0x30
 800115e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001160:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001164:	600a      	str	r2, [r1, #0]
 8001166:	680a      	ldr	r2, [r1, #0]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001168:	a90b      	add	r1, sp, #44	; 0x2c
 800116a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800116c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001170:	631a      	str	r2, [r3, #48]	; 0x30
 8001172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001174:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001178:	600a      	str	r2, [r1, #0]
 800117a:	680a      	ldr	r2, [r1, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800117c:	a90c      	add	r1, sp, #48	; 0x30
 800117e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001180:	f042 0220 	orr.w	r2, r2, #32
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
 8001186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001188:	f002 0220 	and.w	r2, r2, #32
 800118c:	600a      	str	r2, [r1, #0]
 800118e:	680a      	ldr	r2, [r1, #0]
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001190:	2120      	movs	r1, #32
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001194:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
 800119a:	aa0d      	add	r2, sp, #52	; 0x34
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	6813      	ldr	r3, [r2, #0]
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f002 fad0 	bl	800374c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	210c      	movs	r1, #12
 80011b0:	4870      	ldr	r0, [pc, #448]	; (8001374 <main+0x35c>)
 80011b2:	f002 facb 	bl	800374c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	2108      	movs	r1, #8
 80011ba:	486f      	ldr	r0, [pc, #444]	; (8001378 <main+0x360>)
 80011bc:	f002 fac6 	bl	800374c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c6:	486b      	ldr	r0, [pc, #428]	; (8001374 <main+0x35c>)
 80011c8:	f002 fac0 	bl	800374c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d2:	486a      	ldr	r0, [pc, #424]	; (800137c <main+0x364>)
 80011d4:	f002 faba 	bl	800374c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	21c8      	movs	r1, #200	; 0xc8
 80011dc:	4868      	ldr	r0, [pc, #416]	; (8001380 <main+0x368>)
 80011de:	f002 fab5 	bl	800374c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 80011e6:	4867      	ldr	r0, [pc, #412]	; (8001384 <main+0x36c>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011e8:	f8cd a520 	str.w	sl, [sp, #1312]	; 0x520
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80011ec:	f8cd 8510 	str.w	r8, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f002 f9bc 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001200:	2208      	movs	r2, #8
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001202:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001206:	485f      	ldr	r0, [pc, #380]	; (8001384 <main+0x36c>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001208:	f8cd 2510 	str.w	r2, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	f8cd 4514 	str.w	r4, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001214:	f002 f9b0 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001218:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001220:	4859      	ldr	r0, [pc, #356]	; (8001388 <main+0x370>)
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001222:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001226:	f8cd b520 	str.w	fp, [sp, #1312]	; 0x520
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	f8cd 751c 	str.w	r7, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f002 f99f 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800123a:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123c:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001240:	4850      	ldr	r0, [pc, #320]	; (8001384 <main+0x36c>)
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001242:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001246:	f8cd 9520 	str.w	r9, [sp, #1312]	; 0x520
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001256:	f002 f98f 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800125a:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800125e:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001262:	484a      	ldr	r0, [pc, #296]	; (800138c <main+0x374>)
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001264:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001268:	f8cd a520 	str.w	sl, [sp, #1312]	; 0x520
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001278:	f002 f97e 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001280:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001284:	4841      	ldr	r0, [pc, #260]	; (800138c <main+0x374>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001286:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128a:	f8cd 4514 	str.w	r4, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001292:	f002 f971 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001296:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001298:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 800129c:	4834      	ldr	r0, [pc, #208]	; (8001370 <main+0x358>)
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800129e:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012a2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012aa:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f002 f963 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80012b2:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012b4:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 80012b8:	482f      	ldr	r0, [pc, #188]	; (8001378 <main+0x360>)
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80012ba:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012be:	f8cd a520 	str.w	sl, [sp, #1312]	; 0x520
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012ce:	f002 f953 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 80012da:	4829      	ldr	r0, [pc, #164]	; (8001380 <main+0x368>)
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80012dc:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012e0:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012e6:	f8cd 3520 	str.w	r3, [sp, #1312]	; 0x520
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f002 f941 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012f6:	2320      	movs	r3, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 80012fc:	481c      	ldr	r0, [pc, #112]	; (8001370 <main+0x358>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012fe:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	f8cd 6514 	str.w	r6, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800130e:	f002 f933 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001312:	2208      	movs	r2, #8
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001314:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001318:	4815      	ldr	r0, [pc, #84]	; (8001370 <main+0x358>)
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800131a:	f8cd 2510 	str.w	r2, [sp, #1296]	; 0x510
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800131e:	f8cd 9520 	str.w	r9, [sp, #1312]	; 0x520
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800132e:	f002 f923 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001332:	f241 030c 	movw	r3, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001336:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 800133a:	480e      	ldr	r0, [pc, #56]	; (8001374 <main+0x35c>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800133c:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	f8cd 6514 	str.w	r6, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800134c:	f002 f914 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001354:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <main+0x378>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800135a:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	f8cd 4514 	str.w	r4, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
 8001366:	e015      	b.n	8001394 <main+0x37c>
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	40023800 	.word	0x40023800
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40022000 	.word	0x40022000
 8001378:	40022800 	.word	0x40022800
 800137c:	40021c00 	.word	0x40021c00
 8001380:	40021800 	.word	0x40021800
 8001384:	40021000 	.word	0x40021000
 8001388:	40020400 	.word	0x40020400
 800138c:	40022400 	.word	0x40022400
 8001390:	40020800 	.word	0x40020800
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001394:	f002 f8f0 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001398:	f44f 4146 	mov.w	r1, #50688	; 0xc600
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800139c:	48ce      	ldr	r0, [pc, #824]	; (80016d8 <main+0x6c0>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800139e:	f8cd a520 	str.w	sl, [sp, #1312]	; 0x520
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80013a2:	f04f 0a04 	mov.w	sl, #4
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80013a6:	f8cd 1510 	str.w	r1, [sp, #1296]	; 0x510
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013aa:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013ba:	f002 f8dd 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80013be:	2208      	movs	r2, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 80013c4:	48c5      	ldr	r0, [pc, #788]	; (80016dc <main+0x6c4>)
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80013c6:	f8cd 2510 	str.w	r2, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	f8cd 6514 	str.w	r6, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f002 f8cf 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80013da:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80013de:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 80013e2:	48bf      	ldr	r0, [pc, #764]	; (80016e0 <main+0x6c8>)
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80013e4:	f8cd 2510 	str.w	r2, [sp, #1296]	; 0x510
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013e8:	f8cd 9520 	str.w	r9, [sp, #1312]	; 0x520
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f002 f8be 	bl	8003578 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001400:	48b8      	ldr	r0, [pc, #736]	; (80016e4 <main+0x6cc>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001402:	f8cd 8510 	str.w	r8, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	f8cd 4514 	str.w	r4, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800140e:	f002 f8b3 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001412:	f248 0204 	movw	r2, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001416:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 800141a:	48b3      	ldr	r0, [pc, #716]	; (80016e8 <main+0x6d0>)
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800141c:	f8cd 2510 	str.w	r2, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001420:	f8cd 4514 	str.w	r4, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001428:	f002 f8a6 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800142c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001430:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001434:	48ac      	ldr	r0, [pc, #688]	; (80016e8 <main+0x6d0>)
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001436:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	f8cd 6514 	str.w	r6, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001446:	f002 f897 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800144a:	f44f 42bc 	mov.w	r2, #24064	; 0x5e00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144e:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001452:	48a5      	ldr	r0, [pc, #660]	; (80016e8 <main+0x6d0>)
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001454:	f8cd 2510 	str.w	r2, [sp, #1296]	; 0x510
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001458:	f8cd 9520 	str.w	r9, [sp, #1312]	; 0x520
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001468:	f002 f886 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800146c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001470:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001474:	4898      	ldr	r0, [pc, #608]	; (80016d8 <main+0x6c0>)
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001476:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800147a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001482:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001486:	f002 f877 	bl	8003578 <HAL_GPIO_Init>
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800148a:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 800148e:	4896      	ldr	r0, [pc, #600]	; (80016e8 <main+0x6d0>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001490:	f8cd b520 	str.w	fp, [sp, #1312]	; 0x520
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001494:	f8cd 8510 	str.w	r8, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	f8cd 751c 	str.w	r7, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f002 f868 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80014a8:	23c8      	movs	r3, #200	; 0xc8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014aa:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 80014ae:	488c      	ldr	r0, [pc, #560]	; (80016e0 <main+0x6c8>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80014b0:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	f8cd 6514 	str.w	r6, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c0:	f002 f85a 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80014c4:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c6:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 80014ca:	4888      	ldr	r0, [pc, #544]	; (80016ec <main+0x6d4>)
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80014cc:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014d0:	f8cd b520 	str.w	fp, [sp, #1312]	; 0x520
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	f8cd 751c 	str.w	r7, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e0:	f002 f84a 	bl	8003578 <HAL_GPIO_Init>
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 80014e8:	487d      	ldr	r0, [pc, #500]	; (80016e0 <main+0x6c8>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80014ea:	f8cd a510 	str.w	sl, [sp, #1296]	; 0x510
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ee:	f8cd 4514 	str.w	r4, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f002 f83f 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80014fa:	2350      	movs	r3, #80	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001500:	487b      	ldr	r0, [pc, #492]	; (80016f0 <main+0x6d8>)
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001502:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001506:	f8cd 9520 	str.w	r9, [sp, #1312]	; 0x520
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	f8cd 451c 	str.w	r4, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f002 f82f 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800151a:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001520:	4873      	ldr	r0, [pc, #460]	; (80016f0 <main+0x6d8>)
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001522:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001526:	f8cd b520 	str.w	fp, [sp, #1312]	; 0x520
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	f8cd 5514 	str.w	r5, [sp, #1300]	; 0x514
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	f8cd 751c 	str.w	r7, [sp, #1308]	; 0x51c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f002 f81f 	bl	8003578 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 800153a:	4642      	mov	r2, r8
 800153c:	4621      	mov	r1, r4
 800153e:	f50d 60a2 	add.w	r0, sp, #1296	; 0x510
  hadc3.Instance = ADC3;
 8001542:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8001730 <main+0x718>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001546:	f00d fb91 	bl	800ec6c <memset>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800154a:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8001734 <main+0x71c>
 800154e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001552:	4648      	mov	r0, r9
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001554:	f8c9 4008 	str.w	r4, [r9, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001558:	f8c9 4010 	str.w	r4, [r9, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800155c:	f8c9 4018 	str.w	r4, [r9, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001560:	f889 4020 	strb.w	r4, [r9, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001564:	f8c9 402c 	str.w	r4, [r9, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001568:	f8c9 400c 	str.w	r4, [r9, #12]
  hadc3.Init.NbrOfConversion = 1;
 800156c:	f8c9 601c 	str.w	r6, [r9, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001570:	f889 4030 	strb.w	r4, [r9, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001574:	f8c9 6014 	str.w	r6, [r9, #20]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001578:	e9c9 b300 	strd	fp, r3, [r9]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157c:	4b5d      	ldr	r3, [pc, #372]	; (80016f4 <main+0x6dc>)
 800157e:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001582:	f001 faf1 	bl	8002b68 <HAL_ADC_Init>
 8001586:	b108      	cbz	r0, 800158c <main+0x574>
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
  while (1)
 800158a:	e7fe      	b.n	800158a <main+0x572>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800158c:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001590:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001594:	4648      	mov	r0, r9
  sConfig.Channel = ADC_CHANNEL_4;
 8001596:	f8cd a510 	str.w	sl, [sp, #1296]	; 0x510
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800159a:	f8cd 6514 	str.w	r6, [sp, #1300]	; 0x514
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800159e:	f001 fb89 	bl	8002cb4 <HAL_ADC_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b108      	cbz	r0, 80015aa <main+0x592>
 80015a6:	b672      	cpsid	i
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <main+0x590>
  hcrc.Instance = CRC;
 80015aa:	4853      	ldr	r0, [pc, #332]	; (80016f8 <main+0x6e0>)
 80015ac:	4a53      	ldr	r2, [pc, #332]	; (80016fc <main+0x6e4>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80015ae:	8083      	strh	r3, [r0, #4]
  hcrc.Instance = CRC;
 80015b0:	6002      	str	r2, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80015b2:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80015b4:	e9c0 3305 	strd	r3, r3, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015b8:	f001 fc7c 	bl	8002eb4 <HAL_CRC_Init>
 80015bc:	b108      	cbz	r0, 80015c2 <main+0x5aa>
 80015be:	b672      	cpsid	i
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <main+0x5a8>
  hdma2d.Instance = DMA2D;
 80015c2:	4c4f      	ldr	r4, [pc, #316]	; (8001700 <main+0x6e8>)
 80015c4:	4b4f      	ldr	r3, [pc, #316]	; (8001704 <main+0x6ec>)
  hdma2d.Init.OutputOffset = 0;
 80015c6:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hdma2d.Init.Mode = DMA2D_M2M;
 80015ca:	e9c4 3000 	strd	r3, r0, [r4]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80015ce:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80015d2:	e9c4 000c 	strd	r0, r0, [r4, #48]	; 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80015d6:	4620      	mov	r0, r4
 80015d8:	f001 fd09 	bl	8002fee <HAL_DMA2D_Init>
 80015dc:	b108      	cbz	r0, 80015e2 <main+0x5ca>
 80015de:	b672      	cpsid	i
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <main+0x5c8>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80015e2:	4631      	mov	r1, r6
 80015e4:	4620      	mov	r0, r4
 80015e6:	f001 fdbb 	bl	8003160 <HAL_DMA2D_ConfigLayer>
 80015ea:	4602      	mov	r2, r0
 80015ec:	b108      	cbz	r0, 80015f2 <main+0x5da>
 80015ee:	b672      	cpsid	i
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <main+0x5d8>
  heth.Instance = ETH;
 80015f2:	4845      	ldr	r0, [pc, #276]	; (8001708 <main+0x6f0>)
  MACAddr[1] = 0x80;
 80015f4:	2180      	movs	r1, #128	; 0x80
  heth.Instance = ETH;
 80015f6:	4b45      	ldr	r3, [pc, #276]	; (800170c <main+0x6f4>)
 80015f8:	6003      	str	r3, [r0, #0]
  MACAddr[0] = 0x00;
 80015fa:	4b45      	ldr	r3, [pc, #276]	; (8001710 <main+0x6f8>)
  MACAddr[1] = 0x80;
 80015fc:	7059      	strb	r1, [r3, #1]
  MACAddr[2] = 0xE1;
 80015fe:	21e1      	movs	r1, #225	; 0xe1
  MACAddr[0] = 0x00;
 8001600:	701a      	strb	r2, [r3, #0]
  MACAddr[2] = 0xE1;
 8001602:	7099      	strb	r1, [r3, #2]
  MACAddr[3] = 0x00;
 8001604:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001606:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001608:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800160a:	6043      	str	r3, [r0, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800160c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001610:	6083      	str	r3, [r0, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001612:	4b40      	ldr	r3, [pc, #256]	; (8001714 <main+0x6fc>)
 8001614:	60c3      	str	r3, [r0, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001616:	4b40      	ldr	r3, [pc, #256]	; (8001718 <main+0x700>)
 8001618:	6103      	str	r3, [r0, #16]
  heth.Init.RxBuffLen = 1524;
 800161a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800161e:	6143      	str	r3, [r0, #20]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001620:	f001 fec0 	bl	80033a4 <HAL_ETH_Init>
 8001624:	4604      	mov	r4, r0
 8001626:	b108      	cbz	r0, 800162c <main+0x614>
 8001628:	b672      	cpsid	i
  while (1)
 800162a:	e7fe      	b.n	800162a <main+0x612>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800162c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8001738 <main+0x720>
 8001630:	4601      	mov	r1, r0
 8001632:	2234      	movs	r2, #52	; 0x34
 8001634:	f109 0004 	add.w	r0, r9, #4
 8001638:	f00d fb18 	bl	800ec6c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800163c:	2321      	movs	r3, #33	; 0x21
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800163e:	4837      	ldr	r0, [pc, #220]	; (800171c <main+0x704>)
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001640:	f04f 0e40 	mov.w	lr, #64	; 0x40
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001644:	f8c9 3000 	str.w	r3, [r9]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001648:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800164c:	f8c0 8010 	str.w	r8, [r0, #16]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001650:	f44f 6800 	mov.w	r8, #2048	; 0x800
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001654:	f8c9 3014 	str.w	r3, [r9, #20]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001658:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800165c:	4b30      	ldr	r3, [pc, #192]	; (8001720 <main+0x708>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800165e:	61c4      	str	r4, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001660:	6284      	str	r4, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8001662:	f8cd 5510 	str.w	r5, [sp, #1296]	; 0x510
  SdramTiming.SelfRefreshTime = 4;
 8001666:	f8cd a518 	str.w	sl, [sp, #1304]	; 0x518
  SdramTiming.WriteRecoveryTime = 3;
 800166a:	f8cd 7520 	str.w	r7, [sp, #1312]	; 0x520
  SdramTiming.RPDelay = 2;
 800166e:	f8cd 5524 	str.w	r5, [sp, #1316]	; 0x524
  SdramTiming.RCDDelay = 2;
 8001672:	f8cd 5528 	str.w	r5, [sp, #1320]	; 0x528
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001676:	e9c0 3400 	strd	r3, r4, [r0]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800167a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800167e:	e9c0 e305 	strd	lr, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001686:	e9c0 8308 	strd	r8, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800168a:	2307      	movs	r3, #7
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800168c:	e9c0 4a02 	strd	r4, sl, [r0, #8]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001690:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
  SdramTiming.RowCycleDelay = 7;
 8001694:	f8cd 351c 	str.w	r3, [sp, #1308]	; 0x51c
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001698:	f004 fbdc 	bl	8005e54 <HAL_SDRAM_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	b108      	cbz	r0, 80016a4 <main+0x68c>
 80016a0:	b672      	cpsid	i
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <main+0x68a>
  hi2c1.Instance = I2C1;
 80016a4:	481f      	ldr	r0, [pc, #124]	; (8001724 <main+0x70c>)
  hi2c1.Init.Timing = 0x20404768;
 80016a6:	4a20      	ldr	r2, [pc, #128]	; (8001728 <main+0x710>)
 80016a8:	4d20      	ldr	r5, [pc, #128]	; (800172c <main+0x714>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016aa:	6203      	str	r3, [r0, #32]
  hi2c1.Init.Timing = 0x20404768;
 80016ac:	e9c0 2500 	strd	r2, r5, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b0:	e9c0 3602 	strd	r3, r6, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80016b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016bc:	f002 fd3e 	bl	800413c <HAL_I2C_Init>
 80016c0:	b108      	cbz	r0, 80016c6 <main+0x6ae>
 80016c2:	b672      	cpsid	i
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <main+0x6ac>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4816      	ldr	r0, [pc, #88]	; (8001724 <main+0x70c>)
 80016ca:	f002 fd88 	bl	80041de <HAL_I2CEx_ConfigAnalogFilter>
 80016ce:	4601      	mov	r1, r0
 80016d0:	b3a0      	cbz	r0, 800173c <main+0x724>
 80016d2:	b672      	cpsid	i
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <main+0x6bc>
 80016d6:	bf00      	nop
 80016d8:	40022000 	.word	0x40022000
 80016dc:	40022800 	.word	0x40022800
 80016e0:	40021800 	.word	0x40021800
 80016e4:	40020c00 	.word	0x40020c00
 80016e8:	40021c00 	.word	0x40021c00
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	0f000001 	.word	0x0f000001
 80016f8:	20000f3c 	.word	0x20000f3c
 80016fc:	40023000 	.word	0x40023000
 8001700:	20000f60 	.word	0x20000f60
 8001704:	4002b000 	.word	0x4002b000
 8001708:	20000fa0 	.word	0x20000fa0
 800170c:	40028000 	.word	0x40028000
 8001710:	20000ea8 	.word	0x20000ea8
 8001714:	20000b94 	.word	0x20000b94
 8001718:	20000af4 	.word	0x20000af4
 800171c:	200012f0 	.word	0x200012f0
 8001720:	a0000140 	.word	0xa0000140
 8001724:	20001050 	.word	0x20001050
 8001728:	40005400 	.word	0x40005400
 800172c:	20404768 	.word	0x20404768
 8001730:	20000ef4 	.word	0x20000ef4
 8001734:	40012200 	.word	0x40012200
 8001738:	20000eb0 	.word	0x20000eb0
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800173c:	48b1      	ldr	r0, [pc, #708]	; (8001a04 <main+0x9ec>)
 800173e:	f002 fd74 	bl	800422a <HAL_I2CEx_ConfigDigitalFilter>
 8001742:	b108      	cbz	r0, 8001748 <main+0x730>
 8001744:	b672      	cpsid	i
  while (1)
 8001746:	e7fe      	b.n	8001746 <main+0x72e>
  hi2c3.Instance = I2C3;
 8001748:	4caf      	ldr	r4, [pc, #700]	; (8001a08 <main+0x9f0>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800174a:	2601      	movs	r6, #1
  hi2c3.Instance = I2C3;
 800174c:	4baf      	ldr	r3, [pc, #700]	; (8001a0c <main+0x9f4>)
  hi2c3.Init.OwnAddress1 = 0;
 800174e:	60a0      	str	r0, [r4, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001750:	e9c4 6003 	strd	r6, r0, [r4, #12]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001754:	e9c4 0005 	strd	r0, r0, [r4, #20]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001758:	e9c4 0007 	strd	r0, r0, [r4, #28]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800175c:	4620      	mov	r0, r4
  hi2c3.Init.Timing = 0x20404768;
 800175e:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001762:	f002 fceb 	bl	800413c <HAL_I2C_Init>
 8001766:	4601      	mov	r1, r0
 8001768:	b108      	cbz	r0, 800176e <main+0x756>
 800176a:	b672      	cpsid	i
  while (1)
 800176c:	e7fe      	b.n	800176c <main+0x754>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800176e:	4620      	mov	r0, r4
 8001770:	f002 fd35 	bl	80041de <HAL_I2CEx_ConfigAnalogFilter>
 8001774:	4601      	mov	r1, r0
 8001776:	b108      	cbz	r0, 800177c <main+0x764>
 8001778:	b672      	cpsid	i
  while (1)
 800177a:	e7fe      	b.n	800177a <main+0x762>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800177c:	4620      	mov	r0, r4
 800177e:	f002 fd54 	bl	800422a <HAL_I2CEx_ConfigDigitalFilter>
 8001782:	4603      	mov	r3, r0
 8001784:	b108      	cbz	r0, 800178a <main+0x772>
 8001786:	b672      	cpsid	i
  while (1)
 8001788:	e7fe      	b.n	8001788 <main+0x770>
  hqspi.Instance = QUADSPI;
 800178a:	48a1      	ldr	r0, [pc, #644]	; (8001a10 <main+0x9f8>)
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800178c:	2404      	movs	r4, #4
  hqspi.Instance = QUADSPI;
 800178e:	4aa1      	ldr	r2, [pc, #644]	; (8001a14 <main+0x9fc>)
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001790:	2518      	movs	r5, #24
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001792:	6203      	str	r3, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 8001794:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001798:	2210      	movs	r2, #16
 800179a:	e9c0 4202 	strd	r4, r2, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800179e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80017a2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80017a6:	e9c0 5204 	strd	r5, r2, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017aa:	f002 fdcb 	bl	8004344 <HAL_QSPI_Init>
 80017ae:	4605      	mov	r5, r0
 80017b0:	b108      	cbz	r0, 80017b6 <main+0x79e>
 80017b2:	b672      	cpsid	i
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <main+0x79c>
  RTC_TimeTypeDef sTime = {0};
 80017b6:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
 80017ba:	4601      	mov	r1, r0
 80017bc:	2214      	movs	r2, #20
  RTC_DateTypeDef sDate = {0};
 80017be:	af28      	add	r7, sp, #160	; 0xa0
  RTC_TimeTypeDef sTime = {0};
 80017c0:	4640      	mov	r0, r8
  hrtc.Instance = RTC;
 80017c2:	4c95      	ldr	r4, [pc, #596]	; (8001a18 <main+0xa00>)
  RTC_TimeTypeDef sTime = {0};
 80017c4:	f00d fa52 	bl	800ec6c <memset>
  RTC_DateTypeDef sDate = {0};
 80017c8:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
  RTC_AlarmTypeDef sAlarm = {0};
 80017cc:	2228      	movs	r2, #40	; 0x28
 80017ce:	4629      	mov	r1, r5
 80017d0:	4618      	mov	r0, r3
  RTC_DateTypeDef sDate = {0};
 80017d2:	603d      	str	r5, [r7, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80017d4:	f00d fa4a 	bl	800ec6c <memset>
  hrtc.Instance = RTC;
 80017d8:	4b90      	ldr	r3, [pc, #576]	; (8001a1c <main+0xa04>)
  hrtc.Init.SynchPrediv = 255;
 80017da:	207f      	movs	r0, #127	; 0x7f
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017dc:	61a5      	str	r5, [r4, #24]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017de:	e9c4 3500 	strd	r3, r5, [r4]
  hrtc.Init.SynchPrediv = 255;
 80017e2:	23ff      	movs	r3, #255	; 0xff
 80017e4:	e9c4 0302 	strd	r0, r3, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017e8:	4620      	mov	r0, r4
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017ea:	e9c4 5504 	strd	r5, r5, [r4, #16]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017ee:	f003 fc00 	bl	8004ff2 <HAL_RTC_Init>
 80017f2:	b108      	cbz	r0, 80017f8 <main+0x7e0>
 80017f4:	b672      	cpsid	i
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <main+0x7de>
  sTime.Hours = 0x0;
 80017f8:	f8a8 0000 	strh.w	r0, [r8]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80017fc:	4632      	mov	r2, r6
  sTime.Seconds = 0x0;
 80017fe:	f888 0002 	strb.w	r0, [r8, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001802:	a936      	add	r1, sp, #216	; 0xd8
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001804:	e9c8 0003 	strd	r0, r0, [r8, #12]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001808:	4620      	mov	r0, r4
 800180a:	f003 fc45 	bl	8005098 <HAL_RTC_SetTime>
 800180e:	b108      	cbz	r0, 8001814 <main+0x7fc>
 8001810:	b672      	cpsid	i
  while (1)
 8001812:	e7fe      	b.n	8001812 <main+0x7fa>
  sDate.Year = 0x0;
 8001814:	70f8      	strb	r0, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001816:	4632      	mov	r2, r6
 8001818:	a928      	add	r1, sp, #160	; 0xa0
 800181a:	4620      	mov	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800181c:	703e      	strb	r6, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800181e:	707e      	strb	r6, [r7, #1]
  sDate.Date = 0x1;
 8001820:	70be      	strb	r6, [r7, #2]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001822:	f003 fc94 	bl	800514e <HAL_RTC_SetDate>
 8001826:	b108      	cbz	r0, 800182c <main+0x814>
 8001828:	b672      	cpsid	i
  while (1)
 800182a:	e7fe      	b.n	800182a <main+0x812>
  sAlarm.Alarm = RTC_ALARM_A;
 800182c:	f44f 7380 	mov.w	r3, #256	; 0x100
  sAlarm.AlarmTime.Hours = 0x0;
 8001830:	f8ad 0510 	strh.w	r0, [sp, #1296]	; 0x510
  sAlarm.AlarmTime.Seconds = 0x0;
 8001834:	f88d 0512 	strb.w	r0, [sp, #1298]	; 0x512
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001838:	4632      	mov	r2, r6
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800183a:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800183e:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001842:	f8cd 051c 	str.w	r0, [sp, #1308]	; 0x51c
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001846:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800184a:	f8cd 0524 	str.w	r0, [sp, #1316]	; 0x524
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800184e:	f8cd 0528 	str.w	r0, [sp, #1320]	; 0x528
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001852:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001856:	4620      	mov	r0, r4
  sAlarm.AlarmDateWeekDay = 0x1;
 8001858:	f88d 6530 	strb.w	r6, [sp, #1328]	; 0x530
  sAlarm.Alarm = RTC_ALARM_A;
 800185c:	f8cd 3534 	str.w	r3, [sp, #1332]	; 0x534
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001860:	f003 fcc2 	bl	80051e8 <HAL_RTC_SetAlarm>
 8001864:	b108      	cbz	r0, 800186a <main+0x852>
 8001866:	b672      	cpsid	i
  while (1)
 8001868:	e7fe      	b.n	8001868 <main+0x850>
  sAlarm.Alarm = RTC_ALARM_B;
 800186a:	f44f 7400 	mov.w	r4, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800186e:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001872:	2201      	movs	r2, #1
 8001874:	4868      	ldr	r0, [pc, #416]	; (8001a18 <main+0xa00>)
  sAlarm.Alarm = RTC_ALARM_B;
 8001876:	f8cd 4534 	str.w	r4, [sp, #1332]	; 0x534
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800187a:	f003 fcb5 	bl	80051e8 <HAL_RTC_SetAlarm>
 800187e:	4601      	mov	r1, r0
 8001880:	b108      	cbz	r0, 8001886 <main+0x86e>
 8001882:	b672      	cpsid	i
  while (1)
 8001884:	e7fe      	b.n	8001884 <main+0x86c>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001886:	2202      	movs	r2, #2
 8001888:	4863      	ldr	r0, [pc, #396]	; (8001a18 <main+0xa00>)
 800188a:	f003 fd54 	bl	8005336 <HAL_RTCEx_SetTimeStamp>
 800188e:	4603      	mov	r3, r0
 8001890:	b108      	cbz	r0, 8001896 <main+0x87e>
 8001892:	b672      	cpsid	i
  while (1)
 8001894:	e7fe      	b.n	8001894 <main+0x87c>
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001896:	4862      	ldr	r0, [pc, #392]	; (8001a20 <main+0xa08>)
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001898:	2601      	movs	r6, #1
  hsai_BlockA2.Instance = SAI2_Block_A;
 800189a:	4a62      	ldr	r2, [pc, #392]	; (8001a24 <main+0xa0c>)
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800189c:	2740      	movs	r7, #64	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800189e:	2508      	movs	r5, #8
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80018a0:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA2.Instance = SAI2_Block_A;
 80018a2:	6002      	str	r2, [r0, #0]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80018a4:	4a60      	ldr	r2, [pc, #384]	; (8001a28 <main+0xa10>)
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80018a6:	6043      	str	r3, [r0, #4]
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80018a8:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80018aa:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018ac:	6183      	str	r3, [r0, #24]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018ae:	60c3      	str	r3, [r0, #12]
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018b0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80018b2:	6603      	str	r3, [r0, #96]	; 0x60
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80018b4:	61c2      	str	r2, [r0, #28]
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80018b6:	e9c0 730d 	strd	r7, r3, [r0, #52]	; 0x34
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80018ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018be:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018c2:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80018c6:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80018ca:	e9c0 3616 	strd	r3, r6, [r0, #88]	; 0x58
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80018ce:	e9c0 5610 	strd	r5, r6, [r0, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80018d2:	f003 fd7d 	bl	80053d0 <HAL_SAI_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b108      	cbz	r0, 80018de <main+0x8c6>
 80018da:	b672      	cpsid	i
  while (1)
 80018dc:	e7fe      	b.n	80018dc <main+0x8c4>
  hsai_BlockB2.Instance = SAI2_Block_B;
 80018de:	4853      	ldr	r0, [pc, #332]	; (8001a2c <main+0xa14>)
 80018e0:	4a53      	ldr	r2, [pc, #332]	; (8001a30 <main+0xa18>)
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80018e2:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockB2.Instance = SAI2_Block_B;
 80018e4:	6002      	str	r2, [r0, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80018e6:	2203      	movs	r2, #3
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80018e8:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80018ea:	6042      	str	r2, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80018ec:	6086      	str	r6, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80018ee:	6103      	str	r3, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018f0:	6183      	str	r3, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018f2:	60c3      	str	r3, [r0, #12]
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018f4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80018f6:	6603      	str	r3, [r0, #96]	; 0x60
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80018f8:	e9c0 730d 	strd	r7, r3, [r0, #52]	; 0x34
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80018fc:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001900:	e9c0 5610 	strd	r5, r6, [r0, #64]	; 0x40
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001904:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001908:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800190c:	e9c0 3616 	strd	r3, r6, [r0, #88]	; 0x58
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001910:	f003 fd5e 	bl	80053d0 <HAL_SAI_Init>
 8001914:	b108      	cbz	r0, 800191a <main+0x902>
 8001916:	b672      	cpsid	i
  while (1)
 8001918:	e7fe      	b.n	8001918 <main+0x900>
  hsd1.Instance = SDMMC1;
 800191a:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <main+0xa1c>)
 800191c:	4a46      	ldr	r2, [pc, #280]	; (8001a38 <main+0xa20>)
  hsd1.Init.ClockDiv = 0;
 800191e:	6198      	str	r0, [r3, #24]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001920:	e9c3 2000 	strd	r2, r0, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001924:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001928:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800192c:	e9c3 2004 	strd	r2, r0, [r3, #16]
  hspdif.Instance = SPDIFRX;
 8001930:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <main+0xa24>)
 8001932:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001936:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800193a:	e9c3 2000 	strd	r2, r0, [r3]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800193e:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001942:	e9c3 0006 	strd	r0, r0, [r3, #24]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001946:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800194a:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800194c:	4618      	mov	r0, r3
 800194e:	f004 faa1 	bl	8005e94 <HAL_SPDIFRX_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	b108      	cbz	r0, 800195a <main+0x942>
 8001956:	b672      	cpsid	i
  while (1)
 8001958:	e7fe      	b.n	8001958 <main+0x940>
  hspi2.Instance = SPI2;
 800195a:	4839      	ldr	r0, [pc, #228]	; (8001a40 <main+0xa28>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800195c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001960:	4938      	ldr	r1, [pc, #224]	; (8001a44 <main+0xa2c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001962:	6083      	str	r3, [r0, #8]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001964:	6345      	str	r5, [r0, #52]	; 0x34
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001966:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800196a:	f44f 7240 	mov.w	r2, #768	; 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800196e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.CRCPolynomial = 7;
 8001972:	2207      	movs	r2, #7
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001974:	e9c0 3405 	strd	r3, r4, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001978:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800197c:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001980:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001984:	f004 fabd 	bl	8005f02 <HAL_SPI_Init>
 8001988:	4604      	mov	r4, r0
 800198a:	b108      	cbz	r0, 8001990 <main+0x978>
 800198c:	b672      	cpsid	i
  while (1)
 800198e:	e7fe      	b.n	800198e <main+0x976>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001990:	af28      	add	r7, sp, #160	; 0xa0
 8001992:	4601      	mov	r1, r0
 8001994:	2210      	movs	r2, #16
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001996:	ae1b      	add	r6, sp, #108	; 0x6c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001998:	4638      	mov	r0, r7
  htim1.Instance = TIM1;
 800199a:	4d2b      	ldr	r5, [pc, #172]	; (8001a48 <main+0xa30>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199c:	f00d f966 	bl	800ec6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a0:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a4:	221c      	movs	r2, #28
 80019a6:	4621      	mov	r1, r4
 80019a8:	f5a3 6087 	sub.w	r0, r3, #1080	; 0x438
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	60b4      	str	r4, [r6, #8]
 80019ae:	e9c6 4400 	strd	r4, r4, [r6]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b2:	f00d f95b 	bl	800ec6c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019b6:	222c      	movs	r2, #44	; 0x2c
 80019b8:	4621      	mov	r1, r4
 80019ba:	f50d 60a2 	add.w	r0, sp, #1296	; 0x510
 80019be:	f00d f955 	bl	800ec6c <memset>
  htim1.Instance = TIM1;
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <main+0xa34>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019c4:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c6:	60ac      	str	r4, [r5, #8]
  htim1.Init.Prescaler = 0;
 80019c8:	e9c5 3400 	strd	r3, r4, [r5]
  htim1.Init.Period = 65535;
 80019cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d0:	e9c5 4405 	strd	r4, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d4:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019d8:	f004 fd3e 	bl	8006458 <HAL_TIM_Base_Init>
 80019dc:	b108      	cbz	r0, 80019e2 <main+0x9ca>
 80019de:	b672      	cpsid	i
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <main+0x9c8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019e6:	a928      	add	r1, sp, #160	; 0xa0
 80019e8:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ea:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019ec:	f004 fe58 	bl	80066a0 <HAL_TIM_ConfigClockSource>
 80019f0:	b108      	cbz	r0, 80019f6 <main+0x9de>
 80019f2:	b672      	cpsid	i
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <main+0x9dc>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019f6:	4628      	mov	r0, r5
 80019f8:	f004 fd5e 	bl	80064b8 <HAL_TIM_PWM_Init>
 80019fc:	b340      	cbz	r0, 8001a50 <main+0xa38>
 80019fe:	b672      	cpsid	i
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <main+0x9e8>
 8001a02:	bf00      	nop
 8001a04:	20001050 	.word	0x20001050
 8001a08:	200010a4 	.word	0x200010a4
 8001a0c:	40005c00 	.word	0x40005c00
 8001a10:	200010f8 	.word	0x200010f8
 8001a14:	a0001000 	.word	0xa0001000
 8001a18:	20001144 	.word	0x20001144
 8001a1c:	40002800 	.word	0x40002800
 8001a20:	20001164 	.word	0x20001164
 8001a24:	40015c04 	.word	0x40015c04
 8001a28:	0002ee00 	.word	0x0002ee00
 8001a2c:	200011e8 	.word	0x200011e8
 8001a30:	40015c24 	.word	0x40015c24
 8001a34:	2000126c 	.word	0x2000126c
 8001a38:	40012c00 	.word	0x40012c00
 8001a3c:	20001324 	.word	0x20001324
 8001a40:	20001370 	.word	0x20001370
 8001a44:	40003800 	.word	0x40003800
 8001a48:	200013d4 	.word	0x200013d4
 8001a4c:	40010000 	.word	0x40010000
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a50:	ab1b      	add	r3, sp, #108	; 0x6c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a52:	60b0      	str	r0, [r6, #8]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a54:	e9c6 0000 	strd	r0, r0, [r6]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	f004 febb 	bl	80067d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	b108      	cbz	r0, 8001a68 <main+0xa50>
 8001a64:	b672      	cpsid	i
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <main+0xa4e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a68:	ae36      	add	r6, sp, #216	; 0xd8
  sConfigOC.Pulse = 0;
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f04f 0860 	mov.w	r8, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a70:	48a7      	ldr	r0, [pc, #668]	; (8001d10 <main+0xcf8>)
 8001a72:	4631      	mov	r1, r6
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a74:	61b2      	str	r2, [r6, #24]
  sConfigOC.Pulse = 0;
 8001a76:	e9c6 8200 	strd	r8, r2, [r6]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a7a:	e9c6 2202 	strd	r2, r2, [r6, #8]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a7e:	e9c6 2204 	strd	r2, r2, [r6, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a82:	f004 fd81 	bl	8006588 <HAL_TIM_PWM_ConfigChannel>
 8001a86:	b108      	cbz	r0, 8001a8c <main+0xa74>
 8001a88:	b672      	cpsid	i
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <main+0xa72>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a90:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a94:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a98:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a9c:	f8cd 3524 	str.w	r3, [sp, #1316]	; 0x524
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001aa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aa4:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aa8:	f8cd 051c 	str.w	r0, [sp, #1308]	; 0x51c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aac:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ab0:	f8cd 0528 	str.w	r0, [sp, #1320]	; 0x528
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ab4:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ab8:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001abc:	f8cd 0538 	str.w	r0, [sp, #1336]	; 0x538
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ac0:	4893      	ldr	r0, [pc, #588]	; (8001d10 <main+0xcf8>)
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ac2:	f8cd 3530 	str.w	r3, [sp, #1328]	; 0x530
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ac6:	f004 fed1 	bl	800686c <HAL_TIMEx_ConfigBreakDeadTime>
 8001aca:	4604      	mov	r4, r0
 8001acc:	b108      	cbz	r0, 8001ad2 <main+0xaba>
 8001ace:	b672      	cpsid	i
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <main+0xab8>
  HAL_TIM_MspPostInit(&htim1);
 8001ad2:	488f      	ldr	r0, [pc, #572]	; (8001d10 <main+0xcf8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	af28      	add	r7, sp, #160	; 0xa0
  HAL_TIM_MspPostInit(&htim1);
 8001ad6:	f000 fd8d 	bl	80025f4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	2210      	movs	r2, #16
 8001adc:	4621      	mov	r1, r4
 8001ade:	4630      	mov	r0, r6
 8001ae0:	f00d f8c4 	bl	800ec6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae8:	221c      	movs	r2, #28
 8001aea:	4621      	mov	r1, r4
 8001aec:	4618      	mov	r0, r3
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aee:	60bc      	str	r4, [r7, #8]
  htim2.Instance = TIM2;
 8001af0:	4d88      	ldr	r5, [pc, #544]	; (8001d14 <main+0xcfc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af2:	e9c7 4400 	strd	r4, r4, [r7]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af6:	f00d f8b9 	bl	800ec6c <memset>
  htim2.Instance = TIM2;
 8001afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001afe:	4628      	mov	r0, r5
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	61ac      	str	r4, [r5, #24]
  htim2.Init.Prescaler = 0;
 8001b04:	e9c5 3400 	strd	r3, r4, [r5]
  htim2.Init.Period = 4294967295;
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b10:	f004 fca2 	bl	8006458 <HAL_TIM_Base_Init>
 8001b14:	b108      	cbz	r0, 8001b1a <main+0xb02>
 8001b16:	b672      	cpsid	i
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <main+0xb00>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1a:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b1e:	a936      	add	r1, sp, #216	; 0xd8
 8001b20:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b22:	f8c6 9000 	str.w	r9, [r6]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b26:	f004 fdbb 	bl	80066a0 <HAL_TIM_ConfigClockSource>
 8001b2a:	b108      	cbz	r0, 8001b30 <main+0xb18>
 8001b2c:	b672      	cpsid	i
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <main+0xb16>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b30:	4628      	mov	r0, r5
 8001b32:	f004 fcc1 	bl	80064b8 <HAL_TIM_PWM_Init>
 8001b36:	b108      	cbz	r0, 8001b3c <main+0xb24>
 8001b38:	b672      	cpsid	i
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <main+0xb22>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3c:	6038      	str	r0, [r7, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3e:	a928      	add	r1, sp, #160	; 0xa0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b40:	60b8      	str	r0, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b42:	4628      	mov	r0, r5
 8001b44:	f004 fe48 	bl	80067d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	b108      	cbz	r0, 8001b50 <main+0xb38>
 8001b4c:	b672      	cpsid	i
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <main+0xb36>
  sConfigOC.Pulse = 0;
 8001b50:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b54:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b58:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5c:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b60:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b62:	f8cd 8510 	str.w	r8, [sp, #1296]	; 0x510
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b66:	f004 fd0f 	bl	8006588 <HAL_TIM_PWM_ConfigChannel>
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	b108      	cbz	r0, 8001b72 <main+0xb5a>
 8001b6e:	b672      	cpsid	i
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <main+0xb58>
  HAL_TIM_MspPostInit(&htim2);
 8001b72:	4628      	mov	r0, r5
  htim3.Instance = TIM3;
 8001b74:	4d68      	ldr	r5, [pc, #416]	; (8001d18 <main+0xd00>)
  HAL_TIM_MspPostInit(&htim2);
 8001b76:	f000 fd3d 	bl	80025f4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	2210      	movs	r2, #16
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	4630      	mov	r0, r6
 8001b80:	f00d f874 	bl	800ec6c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b84:	221c      	movs	r2, #28
 8001b86:	4621      	mov	r1, r4
 8001b88:	f50d 60a2 	add.w	r0, sp, #1296	; 0x510
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	60bc      	str	r4, [r7, #8]
 8001b8e:	e9c7 4400 	strd	r4, r4, [r7]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b92:	f00d f86b 	bl	800ec6c <memset>
  htim3.Instance = TIM3;
 8001b96:	4b61      	ldr	r3, [pc, #388]	; (8001d1c <main+0xd04>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b98:	4628      	mov	r0, r5
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9a:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9c:	61ac      	str	r4, [r5, #24]
  htim3.Init.Prescaler = 0;
 8001b9e:	e9c5 3400 	strd	r3, r4, [r5]
  htim3.Init.Period = 65535;
 8001ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001baa:	f004 fc55 	bl	8006458 <HAL_TIM_Base_Init>
 8001bae:	b108      	cbz	r0, 8001bb4 <main+0xb9c>
 8001bb0:	b672      	cpsid	i
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <main+0xb9a>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bb4:	a936      	add	r1, sp, #216	; 0xd8
 8001bb6:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb8:	f8c6 9000 	str.w	r9, [r6]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bbc:	f004 fd70 	bl	80066a0 <HAL_TIM_ConfigClockSource>
 8001bc0:	b108      	cbz	r0, 8001bc6 <main+0xbae>
 8001bc2:	b672      	cpsid	i
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <main+0xbac>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bc6:	4628      	mov	r0, r5
 8001bc8:	f004 fc76 	bl	80064b8 <HAL_TIM_PWM_Init>
 8001bcc:	b108      	cbz	r0, 8001bd2 <main+0xbba>
 8001bce:	b672      	cpsid	i
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <main+0xbb8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd2:	af28      	add	r7, sp, #160	; 0xa0
 8001bd4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bd6:	4850      	ldr	r0, [pc, #320]	; (8001d18 <main+0xd00>)
 8001bd8:	4639      	mov	r1, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bde:	f004 fdfb 	bl	80067d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001be2:	4602      	mov	r2, r0
 8001be4:	b108      	cbz	r0, 8001bea <main+0xbd2>
 8001be6:	b672      	cpsid	i
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <main+0xbd0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bea:	f04f 0960 	mov.w	r9, #96	; 0x60
  sConfigOC.Pulse = 0;
 8001bee:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bf2:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf6:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bfa:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bfe:	4846      	ldr	r0, [pc, #280]	; (8001d18 <main+0xd00>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c00:	f8cd 9510 	str.w	r9, [sp, #1296]	; 0x510
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c04:	f004 fcc0 	bl	8006588 <HAL_TIM_PWM_ConfigChannel>
 8001c08:	4604      	mov	r4, r0
 8001c0a:	b108      	cbz	r0, 8001c10 <main+0xbf8>
 8001c0c:	b672      	cpsid	i
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <main+0xbf6>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c10:	ae36      	add	r6, sp, #216	; 0xd8
  HAL_TIM_MspPostInit(&htim3);
 8001c12:	4841      	ldr	r0, [pc, #260]	; (8001d18 <main+0xd00>)
 8001c14:	f000 fcee 	bl	80025f4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c18:	2210      	movs	r2, #16
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	4630      	mov	r0, r6
 8001c1e:	f00d f825 	bl	800ec6c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c22:	221c      	movs	r2, #28
 8001c24:	4621      	mov	r1, r4
 8001c26:	f50d 60a2 	add.w	r0, sp, #1296	; 0x510
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2a:	60bc      	str	r4, [r7, #8]
  htim5.Instance = TIM5;
 8001c2c:	4d3c      	ldr	r5, [pc, #240]	; (8001d20 <main+0xd08>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2e:	e9c7 4400 	strd	r4, r4, [r7]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c32:	f00d f81b 	bl	800ec6c <memset>
  htim5.Instance = TIM5;
 8001c36:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <main+0xd0c>)
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c38:	4628      	mov	r0, r5
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3a:	60ac      	str	r4, [r5, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3c:	61ac      	str	r4, [r5, #24]
  htim5.Init.Prescaler = 0;
 8001c3e:	e9c5 3400 	strd	r3, r4, [r5]
  htim5.Init.Period = 4294967295;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c46:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c4a:	f004 fc05 	bl	8006458 <HAL_TIM_Base_Init>
 8001c4e:	b108      	cbz	r0, 8001c54 <main+0xc3c>
 8001c50:	b672      	cpsid	i
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <main+0xc3a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c54:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c58:	a936      	add	r1, sp, #216	; 0xd8
 8001c5a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c5c:	f8c6 8000 	str.w	r8, [r6]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c60:	f004 fd1e 	bl	80066a0 <HAL_TIM_ConfigClockSource>
 8001c64:	b108      	cbz	r0, 8001c6a <main+0xc52>
 8001c66:	b672      	cpsid	i
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <main+0xc50>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c6a:	4628      	mov	r0, r5
 8001c6c:	f004 fc24 	bl	80064b8 <HAL_TIM_PWM_Init>
 8001c70:	b108      	cbz	r0, 8001c76 <main+0xc5e>
 8001c72:	b672      	cpsid	i
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <main+0xc5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c76:	6038      	str	r0, [r7, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c78:	a928      	add	r1, sp, #160	; 0xa0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7a:	60b8      	str	r0, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	f004 fdab 	bl	80067d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c82:	b108      	cbz	r0, 8001c88 <main+0xc70>
 8001c84:	b672      	cpsid	i
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <main+0xc6e>
  sConfigOC.Pulse = 0;
 8001c88:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c8c:	220c      	movs	r2, #12
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8e:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c92:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c96:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c9a:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c9c:	f8cd 9510 	str.w	r9, [sp, #1296]	; 0x510
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ca0:	f004 fc72 	bl	8006588 <HAL_TIM_PWM_ConfigChannel>
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	b108      	cbz	r0, 8001cac <main+0xc94>
 8001ca8:	b672      	cpsid	i
  while (1)
 8001caa:	e7fe      	b.n	8001caa <main+0xc92>
  HAL_TIM_MspPostInit(&htim5);
 8001cac:	4628      	mov	r0, r5
  htim8.Instance = TIM8;
 8001cae:	4d1e      	ldr	r5, [pc, #120]	; (8001d28 <main+0xd10>)
  HAL_TIM_MspPostInit(&htim5);
 8001cb0:	f000 fca0 	bl	80025f4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	f50d 60a2 	add.w	r0, sp, #1296	; 0x510
 8001cbc:	f00c ffd6 	bl	800ec6c <memset>
  htim8.Instance = TIM8;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <main+0xd14>)
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001cc2:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc4:	60b4      	str	r4, [r6, #8]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc6:	60ac      	str	r4, [r5, #8]
  htim8.Init.Prescaler = 0;
 8001cc8:	e9c5 3400 	strd	r3, r4, [r5]
  htim8.Init.Period = 65535;
 8001ccc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd0:	e9c6 4400 	strd	r4, r4, [r6]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd4:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd8:	e9c5 4405 	strd	r4, r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001cdc:	f004 fbbc 	bl	8006458 <HAL_TIM_Base_Init>
 8001ce0:	b108      	cbz	r0, 8001ce6 <main+0xcce>
 8001ce2:	b672      	cpsid	i
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <main+0xccc>
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ce6:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001cea:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cec:	f8cd 8510 	str.w	r8, [sp, #1296]	; 0x510
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001cf0:	f004 fcd6 	bl	80066a0 <HAL_TIM_ConfigClockSource>
 8001cf4:	b108      	cbz	r0, 8001cfa <main+0xce2>
 8001cf6:	b672      	cpsid	i
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <main+0xce0>
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cfa:	e9c6 0000 	strd	r0, r0, [r6]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfe:	60b0      	str	r0, [r6, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d00:	a936      	add	r1, sp, #216	; 0xd8
 8001d02:	4628      	mov	r0, r5
 8001d04:	f004 fd68 	bl	80067d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d08:	b190      	cbz	r0, 8001d30 <main+0xd18>
 8001d0a:	b672      	cpsid	i
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <main+0xcf4>
 8001d0e:	bf00      	nop
 8001d10:	200013d4 	.word	0x200013d4
 8001d14:	2000146c 	.word	0x2000146c
 8001d18:	200014b8 	.word	0x200014b8
 8001d1c:	40000400 	.word	0x40000400
 8001d20:	20001504 	.word	0x20001504
 8001d24:	40000c00 	.word	0x40000c00
 8001d28:	20001550 	.word	0x20001550
 8001d2c:	40010400 	.word	0x40010400
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d30:	221c      	movs	r2, #28
 8001d32:	2100      	movs	r1, #0
 8001d34:	f50d 60a2 	add.w	r0, sp, #1296	; 0x510
  htim12.Instance = TIM12;
 8001d38:	4c6f      	ldr	r4, [pc, #444]	; (8001ef8 <main+0xee0>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d3a:	f00c ff97 	bl	800ec6c <memset>
  htim12.Init.Prescaler = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	4a6e      	ldr	r2, [pc, #440]	; (8001efc <main+0xee4>)
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001d42:	4620      	mov	r0, r4
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d44:	60a3      	str	r3, [r4, #8]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d46:	61a3      	str	r3, [r4, #24]
  htim12.Init.Prescaler = 0;
 8001d48:	e9c4 2300 	strd	r2, r3, [r4]
  htim12.Init.Period = 65535;
 8001d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d50:	e9c4 2303 	strd	r2, r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001d54:	f004 fbb0 	bl	80064b8 <HAL_TIM_PWM_Init>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	b108      	cbz	r0, 8001d60 <main+0xd48>
 8001d5c:	b672      	cpsid	i
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <main+0xd46>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d60:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8001d62:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d66:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d6a:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d6e:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d72:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d74:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d78:	f004 fc06 	bl	8006588 <HAL_TIM_PWM_ConfigChannel>
 8001d7c:	4605      	mov	r5, r0
 8001d7e:	b108      	cbz	r0, 8001d84 <main+0xd6c>
 8001d80:	b672      	cpsid	i
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <main+0xd6a>
  HAL_TIM_MspPostInit(&htim12);
 8001d84:	4620      	mov	r0, r4
  huart1.Instance = USART1;
 8001d86:	4c5e      	ldr	r4, [pc, #376]	; (8001f00 <main+0xee8>)
  HAL_TIM_MspPostInit(&htim12);
 8001d88:	f000 fc34 	bl	80025f4 <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 115200;
 8001d8c:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
 8001d90:	4b5c      	ldr	r3, [pc, #368]	; (8001f04 <main+0xeec>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d92:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d94:	4620      	mov	r0, r4
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d96:	6125      	str	r5, [r4, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d98:	6265      	str	r5, [r4, #36]	; 0x24
  huart1.Init.BaudRate = 115200;
 8001d9a:	e9c4 3700 	strd	r3, r7, [r4]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d9e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	e9c4 6505 	strd	r6, r5, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da6:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001daa:	f005 f810 	bl	8006dce <HAL_UART_Init>
 8001dae:	b108      	cbz	r0, 8001db4 <main+0xd9c>
 8001db0:	b672      	cpsid	i
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <main+0xd9a>
  huart6.Instance = USART6;
 8001db4:	4d54      	ldr	r5, [pc, #336]	; (8001f08 <main+0xef0>)
 8001db6:	4b55      	ldr	r3, [pc, #340]	; (8001f0c <main+0xef4>)
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001db8:	e9c5 0604 	strd	r0, r6, [r5, #16]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001dbc:	e9c5 0002 	strd	r0, r0, [r5, #8]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	e9c5 0006 	strd	r0, r0, [r5, #24]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc4:	e9c5 0008 	strd	r0, r0, [r5, #32]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001dc8:	4628      	mov	r0, r5
  huart6.Init.BaudRate = 115200;
 8001dca:	e9c5 3700 	strd	r3, r7, [r5]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001dce:	f004 fffe 	bl	8006dce <HAL_UART_Init>
 8001dd2:	4606      	mov	r6, r0
 8001dd4:	b108      	cbz	r0, 8001dda <main+0xdc2>
 8001dd6:	b672      	cpsid	i
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <main+0xdc0>
  MX_FATFS_Init();
 8001dda:	f005 ffb1 	bl	8007d40 <MX_FATFS_Init>
				AI_NETWORK_1_DATA_WEIGHTS(ai_network_1_data_weights_get()),
 8001dde:	f008 ffb1 	bl	800ad44 <ai_network_1_data_weights_get>
 8001de2:	4601      	mov	r1, r0
 8001de4:	a828      	add	r0, sp, #160	; 0xa0
 8001de6:	f008 ff99 	bl	800ad1c <ai_network_1_data_weights_buffer_get>
				AI_NETWORK_1_DATA_ACTIVATIONS(activations)
 8001dea:	f50d 61a2 	add.w	r1, sp, #1296	; 0x510
 8001dee:	f2a1 4054 	subw	r0, r1, #1108	; 0x454
 8001df2:	f008 ff7f 	bl	800acf4 <ai_network_1_data_activations_buffer_get>
      ai_err = ai_network_1_create(&my_model, AI_NETWORK_1_DATA_CONFIG);
 8001df6:	4631      	mov	r1, r6
 8001df8:	a802      	add	r0, sp, #8
 8001dfa:	f008 fe85 	bl	800ab08 <ai_network_1_create>
      if (ai_err.type != AI_ERROR_NONE)
 8001dfe:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
 8001e02:	d00a      	beq.n	8001e1a <main+0xe02>
      buf_len = sprintf(buf, "Error: Could not create NN instance\r\n");
 8001e04:	4942      	ldr	r1, [pc, #264]	; (8001f10 <main+0xef8>)
 8001e06:	9801      	ldr	r0, [sp, #4]
 8001e08:	f00d fcb2 	bl	800f770 <strcpy>
	  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001e0c:	2364      	movs	r3, #100	; 0x64
 8001e0e:	2225      	movs	r2, #37	; 0x25
 8001e10:	9901      	ldr	r1, [sp, #4]
 8001e12:	4628      	mov	r0, r5
 8001e14:	f004 ff67 	bl	8006ce6 <HAL_UART_Transmit>
	  while(1);
 8001e18:	e7fe      	b.n	8001e18 <main+0xe00>
       if (!ai_network_1_init(my_model, &ai_params))
 8001e1a:	a928      	add	r1, sp, #160	; 0xa0
 8001e1c:	9802      	ldr	r0, [sp, #8]
 8001e1e:	ae02      	add	r6, sp, #8
 8001e20:	f008 fe94 	bl	800ab4c <ai_network_1_init>
 8001e24:	b950      	cbnz	r0, 8001e3c <main+0xe24>
	  buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001e26:	493b      	ldr	r1, [pc, #236]	; (8001f14 <main+0xefc>)
 8001e28:	9801      	ldr	r0, [sp, #4]
 8001e2a:	f00d fca1 	bl	800f770 <strcpy>
	  HAL_UART_Transmit(&huart6, (uint8_t *)buf, buf_len, 100);
 8001e2e:	2364      	movs	r3, #100	; 0x64
 8001e30:	2220      	movs	r2, #32
 8001e32:	9901      	ldr	r1, [sp, #4]
 8001e34:	4628      	mov	r0, r5
 8001e36:	f004 ff56 	bl	8006ce6 <HAL_UART_Transmit>
	  while(1);
 8001e3a:	e7fe      	b.n	8001e3a <main+0xe22>
  	ai_input = ai_network_1_inputs_get(my_model, NULL);
 8001e3c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8001f2c <main+0xf14>
 8001e40:	4639      	mov	r1, r7
 8001e42:	6830      	ldr	r0, [r6, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001e44:	ad14      	add	r5, sp, #80	; 0x50
  	ai_input = ai_network_1_inputs_get(my_model, NULL);
 8001e46:	f008 fe6d 	bl	800ab24 <ai_network_1_inputs_get>
  	ai_output = ai_network_1_outputs_get(my_model, NULL);
 8001e4a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8001f30 <main+0xf18>
  	ai_input = ai_network_1_inputs_get(my_model, NULL);
 8001e4e:	f8c8 0000 	str.w	r0, [r8]
  	ai_output = ai_network_1_outputs_get(my_model, NULL);
 8001e52:	4639      	mov	r1, r7
 8001e54:	6830      	ldr	r0, [r6, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001e56:	4e30      	ldr	r6, [pc, #192]	; (8001f18 <main+0xf00>)
  	ai_output = ai_network_1_outputs_get(my_model, NULL);
 8001e58:	f008 fe6e 	bl	800ab38 <ai_network_1_outputs_get>
 8001e5c:	f8c9 0000 	str.w	r0, [r9]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001e60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e64:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8001e68:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e6c:	4639      	mov	r1, r7
 8001e6e:	a814      	add	r0, sp, #80	; 0x50
 8001e70:	f007 f954 	bl	800911c <osThreadCreate>
	  buf_len = sprintf(buf,"ok\r\n");
 8001e74:	4d29      	ldr	r5, [pc, #164]	; (8001f1c <main+0xf04>)
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <main+0xf08>)
 8001e78:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001e7a:	f007 f93c 	bl	80090f6 <osKernelStart>
	  buf_len = sprintf(buf,"ok\r\n");
 8001e7e:	4629      	mov	r1, r5
 8001e80:	9801      	ldr	r0, [sp, #4]
 8001e82:	f00d fc75 	bl	800f770 <strcpy>
	  HAL_UART_Transmit(&huart1,(uint8_t *)buf, buf_len,100);
 8001e86:	2364      	movs	r3, #100	; 0x64
 8001e88:	2204      	movs	r2, #4
 8001e8a:	9901      	ldr	r1, [sp, #4]
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f004 ff2a 	bl	8006ce6 <HAL_UART_Transmit>
	  for (uint32_t i=0; i < AI_NETWORK_1_IN_1_SIZE;i++){
 8001e92:	aa36      	add	r2, sp, #216	; 0xd8
	  HAL_UART_Transmit(&huart1,(uint8_t *)buf, buf_len,100);
 8001e94:	f44f 7387 	mov.w	r3, #270	; 0x10e
	  				((ai_float *)in_data)[i]= (ai_float)2.0f;
 8001e98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	  for (uint32_t i=0; i < AI_NETWORK_1_IN_1_SIZE;i++){
 8001e9c:	3b01      	subs	r3, #1
	  				((ai_float *)in_data)[i]= (ai_float)2.0f;
 8001e9e:	f842 1b04 	str.w	r1, [r2], #4
	  for (uint32_t i=0; i < AI_NETWORK_1_IN_1_SIZE;i++){
 8001ea2:	d1fb      	bne.n	8001e9c <main+0xe84>
	  			nbatch = ai_network_1_run(my_model,&ai_input[0],&ai_output[0]);
 8001ea4:	f8d9 2000 	ldr.w	r2, [r9]
 8001ea8:	ab02      	add	r3, sp, #8
 8001eaa:	f8d8 1000 	ldr.w	r1, [r8]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f008 ff1e 	bl	800acf0 <ai_network_1_run>
	  			if(nbatch !=1){
 8001eb4:	2801      	cmp	r0, #1
 8001eb6:	d009      	beq.n	8001ecc <main+0xeb4>
	  				buf_len = sprintf(buf,"peut pas run inference\r\n");
 8001eb8:	491a      	ldr	r1, [pc, #104]	; (8001f24 <main+0xf0c>)
 8001eba:	a81b      	add	r0, sp, #108	; 0x6c
 8001ebc:	f00d fc58 	bl	800f770 <strcpy>
	  				HAL_UART_Transmit(&huart1,(uint8_t *)buf, buf_len,100);
 8001ec0:	2364      	movs	r3, #100	; 0x64
 8001ec2:	2218      	movs	r2, #24
 8001ec4:	a91b      	add	r1, sp, #108	; 0x6c
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f004 ff0d 	bl	8006ce6 <HAL_UART_Transmit>
	  			buf_len = sprintf(buf,"output: %f",y_val);
 8001ecc:	980e      	ldr	r0, [sp, #56]	; 0x38
	  			y_val =((float*)out_data)[0];
 8001ece:	ab0e      	add	r3, sp, #56	; 0x38
	  			buf_len = sprintf(buf,"output: %f",y_val);
 8001ed0:	f7fe fb5a 	bl	8000588 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	a81b      	add	r0, sp, #108	; 0x6c
 8001eda:	4913      	ldr	r1, [pc, #76]	; (8001f28 <main+0xf10>)
 8001edc:	f00d fc28 	bl	800f730 <siprintf>
	  			HAL_UART_Transmit(&huart1,(uint8_t *)buf, buf_len,100);
 8001ee0:	2364      	movs	r3, #100	; 0x64
 8001ee2:	b282      	uxth	r2, r0
 8001ee4:	a91b      	add	r1, sp, #108	; 0x6c
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f004 fefd 	bl	8006ce6 <HAL_UART_Transmit>
	  			HAL_Delay(1000);
 8001eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef0:	f000 fe28 	bl	8002b44 <HAL_Delay>
	  buf_len = sprintf(buf,"ok\r\n");
 8001ef4:	e7c3      	b.n	8001e7e <main+0xe66>
 8001ef6:	bf00      	nop
 8001ef8:	20001420 	.word	0x20001420
 8001efc:	40001800 	.word	0x40001800
 8001f00:	2000159c 	.word	0x2000159c
 8001f04:	40011000 	.word	0x40011000
 8001f08:	20001624 	.word	0x20001624
 8001f0c:	40011400 	.word	0x40011400
 8001f10:	08011b24 	.word	0x08011b24
 8001f14:	08011b4a 	.word	0x08011b4a
 8001f18:	08011ac0 	.word	0x08011ac0
 8001f1c:	08011b6b 	.word	0x08011b6b
 8001f20:	20000ef0 	.word	0x20000ef0
 8001f24:	08011b70 	.word	0x08011b70
 8001f28:	08011b89 	.word	0x08011b89
 8001f2c:	20000ee8 	.word	0x20000ee8
 8001f30:	20000eec 	.word	0x20000eec

08001f34 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8001f34:	6802      	ldr	r2, [r0, #0]
 8001f36:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d101      	bne.n	8001f40 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001f3c:	f000 bdf0 	b.w	8002b20 <HAL_IncTick>
}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40001000 	.word	0x40001000

08001f48 <Error_Handler>:
 8001f48:	b672      	cpsid	i
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <Error_Handler+0x2>

08001f4c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_MspInit+0x38>)
{
 8001f4e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f50:	210f      	movs	r1, #15
 8001f52:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f60:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001f64:	9200      	str	r2, [sp, #0]
 8001f66:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f6e:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f70:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f7e:	f000 bf59 	b.w	8002e34 <HAL_NVIC_SetPriority>
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800

08001f88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8e:	2214      	movs	r2, #20
 8001f90:	2100      	movs	r1, #0
 8001f92:	a803      	add	r0, sp, #12
 8001f94:	f00c fe6a 	bl	800ec6c <memset>
  if(hadc->Instance==ADC3)
 8001f98:	6822      	ldr	r2, [r4, #0]
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_ADC_MspInit+0x7c>)
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d12e      	bne.n	8001ffe <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001fa0:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fa4:	2403      	movs	r4, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fa6:	a903      	add	r1, sp, #12
 8001fa8:	4817      	ldr	r0, [pc, #92]	; (8002008 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fb0:	645a      	str	r2, [r3, #68]	; 0x44
 8001fb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fb4:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001fb8:	9200      	str	r2, [sp, #0]
 8001fba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fbe:	f042 0220 	orr.w	r2, r2, #32
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc6:	f002 0220 	and.w	r2, r2, #32
 8001fca:	9201      	str	r2, [sp, #4]
 8001fcc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	9302      	str	r3, [sp, #8]
 8001fde:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe0:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001fe4:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fe8:	f001 fac6 	bl	8003578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001fec:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001fee:	a903      	add	r1, sp, #12
 8001ff0:	4806      	ldr	r0, [pc, #24]	; (800200c <HAL_ADC_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff2:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f001 fabd 	bl	8003578 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ffe:	b008      	add	sp, #32
 8002000:	bd10      	pop	{r4, pc}
 8002002:	bf00      	nop
 8002004:	40012200 	.word	0x40012200
 8002008:	40021400 	.word	0x40021400
 800200c:	40020000 	.word	0x40020000

08002010 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8002010:	6802      	ldr	r2, [r0, #0]
{
 8002012:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_CRC_MspInit+0x28>)
 8002016:	429a      	cmp	r2, r3
 8002018:	d10b      	bne.n	8002032 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800201a:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800201e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002022:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002032:	b002      	add	sp, #8
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40023000 	.word	0x40023000

0800203c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <HAL_DMA2D_MspInit+0x3c>)
{
 800203e:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8002040:	6802      	ldr	r2, [r0, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d115      	bne.n	8002072 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002046:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800204a:	2105      	movs	r1, #5
 800204c:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800204e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002050:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002056:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002062:	f000 fee7 	bl	8002e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002066:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002068:	b003      	add	sp, #12
 800206a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800206e:	f000 bf13 	b.w	8002e98 <HAL_NVIC_EnableIRQ>
}
 8002072:	b003      	add	sp, #12
 8002074:	f85d fb04 	ldr.w	pc, [sp], #4
 8002078:	4002b000 	.word	0x4002b000

0800207c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207e:	b08d      	sub	sp, #52	; 0x34
 8002080:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002082:	2214      	movs	r2, #20
 8002084:	2100      	movs	r1, #0
 8002086:	a807      	add	r0, sp, #28
 8002088:	f00c fdf0 	bl	800ec6c <memset>
  if(heth->Instance==ETH)
 800208c:	6822      	ldr	r2, [r4, #0]
 800208e:	4b2f      	ldr	r3, [pc, #188]	; (800214c <HAL_ETH_MspInit+0xd0>)
 8002090:	429a      	cmp	r2, r3
 8002092:	d159      	bne.n	8002148 <HAL_ETH_MspInit+0xcc>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002094:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800209a:	2503      	movs	r5, #3
 800209c:	240b      	movs	r4, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 800209e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020a0:	a907      	add	r1, sp, #28
 80020a2:	482b      	ldr	r0, [pc, #172]	; (8002150 <HAL_ETH_MspInit+0xd4>)

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2700      	movs	r7, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 80020a6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
 80020ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ae:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80020b2:	9201      	str	r2, [sp, #4]
 80020b4:	9a01      	ldr	r2, [sp, #4]
 80020b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
 80020be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c0:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80020c4:	9202      	str	r2, [sp, #8]
 80020c6:	9a02      	ldr	r2, [sp, #8]
 80020c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ca:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80020ce:	631a      	str	r2, [r3, #48]	; 0x30
 80020d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80020d6:	9203      	str	r2, [sp, #12]
 80020d8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
 80020e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80020e8:	9204      	str	r2, [sp, #16]
 80020ea:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ee:	f042 0204 	orr.w	r2, r2, #4
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
 80020f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f6:	f002 0204 	and.w	r2, r2, #4
 80020fa:	9205      	str	r2, [sp, #20]
 80020fc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002100:	f042 0201 	orr.w	r2, r2, #1
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	9306      	str	r3, [sp, #24]
 800210e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002114:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002118:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800211c:	f001 fa2c 	bl	8003578 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002120:	2332      	movs	r3, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002122:	a907      	add	r1, sp, #28
 8002124:	480b      	ldr	r0, [pc, #44]	; (8002154 <HAL_ETH_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002126:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212c:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002130:	f001 fa22 	bl	8003578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002134:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	a907      	add	r1, sp, #28
 8002138:	4807      	ldr	r0, [pc, #28]	; (8002158 <HAL_ETH_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800213a:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	f001 fa18 	bl	8003578 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002148:	b00d      	add	sp, #52	; 0x34
 800214a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800214c:	40028000 	.word	0x40028000
 8002150:	40021800 	.word	0x40021800
 8002154:	40020800 	.word	0x40020800
 8002158:	40020000 	.word	0x40020000

0800215c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800215c:	b510      	push	{r4, lr}
 800215e:	b0aa      	sub	sp, #168	; 0xa8
 8002160:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002162:	2214      	movs	r2, #20
 8002164:	2100      	movs	r1, #0
 8002166:	a804      	add	r0, sp, #16
 8002168:	f00c fd80 	bl	800ec6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800216c:	2284      	movs	r2, #132	; 0x84
 800216e:	2100      	movs	r1, #0
 8002170:	a809      	add	r0, sp, #36	; 0x24
 8002172:	f00c fd7b 	bl	800ec6c <memset>
  if(hi2c->Instance==I2C1)
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	4a2f      	ldr	r2, [pc, #188]	; (8002238 <HAL_I2C_MspInit+0xdc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d12d      	bne.n	80021da <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800217e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002182:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002184:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002186:	f002 fbfb 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 800218a:	b108      	cbz	r0, 8002190 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 800218c:	f7ff fedc 	bl	8001f48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002190:	4c2a      	ldr	r4, [pc, #168]	; (800223c <HAL_I2C_MspInit+0xe0>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002192:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	f04f 0c01 	mov.w	ip, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219a:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800219e:	f043 0302 	orr.w	r3, r3, #2
 80021a2:	6323      	str	r3, [r4, #48]	; 0x30
 80021a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ae:	2312      	movs	r3, #18
 80021b0:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	4822      	ldr	r0, [pc, #136]	; (8002240 <HAL_I2C_MspInit+0xe4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	e9cd c306 	strd	ip, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021bc:	2304      	movs	r3, #4
 80021be:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c0:	f001 f9da 	bl	8003578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ca:	6423      	str	r3, [r4, #64]	; 0x40
 80021cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80021d6:	b02a      	add	sp, #168	; 0xa8
 80021d8:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C3)
 80021da:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <HAL_I2C_MspInit+0xe8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d1fa      	bne.n	80021d6 <HAL_I2C_MspInit+0x7a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80021e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e4:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80021e6:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e8:	f002 fbca 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 80021ec:	b108      	cbz	r0, 80021f2 <HAL_I2C_MspInit+0x96>
      Error_Handler();
 80021ee:	f7ff feab 	bl	8001f48 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80021f2:	4c12      	ldr	r4, [pc, #72]	; (800223c <HAL_I2C_MspInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f4:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2101      	movs	r1, #1
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021fa:	4813      	ldr	r0, [pc, #76]	; (8002248 <HAL_I2C_MspInit+0xec>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80021fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002202:	6323      	str	r3, [r4, #48]	; 0x30
 8002204:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220a:	9302      	str	r3, [sp, #8]
 800220c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800220e:	2312      	movs	r3, #18
 8002210:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	e9cd 1306 	strd	r1, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800221a:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800221c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800221e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002220:	f001 f9aa 	bl	8003578 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002224:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002226:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800222a:	6423      	str	r3, [r4, #64]	; 0x40
 800222c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800222e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002232:	9303      	str	r3, [sp, #12]
 8002234:	9b03      	ldr	r3, [sp, #12]
}
 8002236:	e7ce      	b.n	80021d6 <HAL_I2C_MspInit+0x7a>
 8002238:	40005400 	.word	0x40005400
 800223c:	40023800 	.word	0x40023800
 8002240:	40020400 	.word	0x40020400
 8002244:	40005c00 	.word	0x40005c00
 8002248:	40021c00 	.word	0x40021c00

0800224c <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	2214      	movs	r2, #20
 800224e:	2100      	movs	r1, #0
{
 8002250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002254:	b08a      	sub	sp, #40	; 0x28
 8002256:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	eb0d 0002 	add.w	r0, sp, r2
 800225c:	f00c fd06 	bl	800ec6c <memset>
  if(hqspi->Instance==QUADSPI)
 8002260:	6822      	ldr	r2, [r4, #0]
 8002262:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <HAL_QSPI_MspInit+0xc8>)
 8002264:	429a      	cmp	r2, r3
 8002266:	d151      	bne.n	800230c <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800226c:	2403      	movs	r4, #3
 800226e:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002276:	a905      	add	r1, sp, #20
 8002278:	4828      	ldr	r0, [pc, #160]	; (800231c <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800227a:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002280:	639a      	str	r2, [r3, #56]	; 0x38
 8002282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002284:	f002 0202 	and.w	r2, r2, #2
 8002288:	9201      	str	r2, [sp, #4]
 800228a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800228c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228e:	f042 0210 	orr.w	r2, r2, #16
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
 8002294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002296:	f002 0210 	and.w	r2, r2, #16
 800229a:	9202      	str	r2, [sp, #8]
 800229c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a0:	f042 0202 	orr.w	r2, r2, #2
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
 80022a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a8:	f002 0202 	and.w	r2, r2, #2
 80022ac:	9203      	str	r2, [sp, #12]
 80022ae:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b2:	f042 0208 	orr.w	r2, r2, #8
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	9304      	str	r3, [sp, #16]
 80022c0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022c6:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80022ca:	f001 f955 	bl	8003578 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80022ce:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80022d0:	a905      	add	r1, sp, #20
 80022d2:	4813      	ldr	r0, [pc, #76]	; (8002320 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80022d8:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80022de:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80022e0:	f001 f94a 	bl	8003578 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	a905      	add	r1, sp, #20
 80022e6:	480e      	ldr	r0, [pc, #56]	; (8002320 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022e8:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ee:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f2:	f001 f941 	bl	8003578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80022f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022fa:	a905      	add	r1, sp, #20
 80022fc:	4809      	ldr	r0, [pc, #36]	; (8002324 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022fe:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002308:	f001 f936 	bl	8003578 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800230c:	b00a      	add	sp, #40	; 0x28
 800230e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002312:	bf00      	nop
 8002314:	a0001000 	.word	0xa0001000
 8002318:	40023800 	.word	0x40023800
 800231c:	40021000 	.word	0x40021000
 8002320:	40020400 	.word	0x40020400
 8002324:	40020c00 	.word	0x40020c00

08002328 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002328:	b510      	push	{r4, lr}
 800232a:	b0a2      	sub	sp, #136	; 0x88
 800232c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800232e:	2284      	movs	r2, #132	; 0x84
 8002330:	2100      	movs	r1, #0
 8002332:	a801      	add	r0, sp, #4
 8002334:	f00c fc9a 	bl	800ec6c <memset>
  if(hrtc->Instance==RTC)
 8002338:	6822      	ldr	r2, [r4, #0]
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_RTC_MspInit+0x3c>)
 800233c:	429a      	cmp	r2, r3
 800233e:	d10f      	bne.n	8002360 <HAL_RTC_MspInit+0x38>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002340:	2320      	movs	r3, #32
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002342:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002344:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800234a:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800234c:	f002 fb18 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 8002350:	b108      	cbz	r0, 8002356 <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 8002352:	f7ff fdf9 	bl	8001f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002356:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_RTC_MspInit+0x40>)
 8002358:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800235a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235e:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002360:	b022      	add	sp, #136	; 0x88
 8002362:	bd10      	pop	{r4, pc}
 8002364:	40002800 	.word	0x40002800
 8002368:	40023800 	.word	0x40023800

0800236c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002372:	2214      	movs	r2, #20
 8002374:	2100      	movs	r1, #0
 8002376:	a803      	add	r0, sp, #12
 8002378:	f00c fc78 	bl	800ec6c <memset>
  if(hsd->Instance==SDMMC1)
 800237c:	6822      	ldr	r2, [r4, #0]
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <HAL_SD_MspInit+0x8c>)
 8002380:	429a      	cmp	r2, r3
 8002382:	d136      	bne.n	80023f2 <HAL_SD_MspInit+0x86>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002384:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002388:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800238c:	2503      	movs	r5, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800238e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002390:	eb0d 0104 	add.w	r1, sp, r4
 8002394:	4819      	ldr	r0, [pc, #100]	; (80023fc <HAL_SD_MspInit+0x90>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800239a:	645a      	str	r2, [r3, #68]	; 0x44
 800239c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800239e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023a2:	9200      	str	r2, [sp, #0]
 80023a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a8:	f042 0204 	orr.w	r2, r2, #4
 80023ac:	631a      	str	r2, [r3, #48]	; 0x30
 80023ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b0:	f002 0204 	and.w	r2, r2, #4
 80023b4:	9201      	str	r2, [sp, #4]
 80023b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ba:	f042 0208 	orr.w	r2, r2, #8
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	9302      	str	r3, [sp, #8]
 80023c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023ce:	e9cd 5406 	strd	r5, r4, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d6:	f001 f8cf 	bl	8003578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80023da:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80023dc:	eb0d 0104 	add.w	r1, sp, r4
 80023e0:	4807      	ldr	r0, [pc, #28]	; (8002400 <HAL_SD_MspInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023e2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ea:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80023ee:	f001 f8c3 	bl	8003578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80023f2:	b008      	add	sp, #32
 80023f4:	bd70      	pop	{r4, r5, r6, pc}
 80023f6:	bf00      	nop
 80023f8:	40012c00 	.word	0x40012c00
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020c00 	.word	0x40020c00

08002404 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002404:	b510      	push	{r4, lr}
 8002406:	b0a8      	sub	sp, #160	; 0xa0
 8002408:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240a:	2214      	movs	r2, #20
 800240c:	2100      	movs	r1, #0
 800240e:	a802      	add	r0, sp, #8
 8002410:	f00c fc2c 	bl	800ec6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002414:	2284      	movs	r2, #132	; 0x84
 8002416:	2100      	movs	r1, #0
 8002418:	a807      	add	r0, sp, #28
 800241a:	f00c fc27 	bl	800ec6c <memset>
  if(hspdifrx->Instance==SPDIFRX)
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002424:	d131      	bne.n	800248a <HAL_SPDIFRX_MspInit+0x86>
  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8002426:	2364      	movs	r3, #100	; 0x64
 8002428:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
    PeriphClkInitStruct.PLLI2SDivQ = 1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242c:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800242e:	e9cd 1307 	strd	r1, r3, [sp, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8002432:	2302      	movs	r3, #2
 8002434:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002436:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800243a:	2301      	movs	r3, #1
 800243c:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243e:	f002 fa9f 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 8002442:	b108      	cbz	r0, 8002448 <HAL_SPDIFRX_MspInit+0x44>
    {
      Error_Handler();
 8002444:	f7ff fd80 	bl	8001f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_SPDIFRX_MspInit+0x8c>)
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800244a:	4812      	ldr	r0, [pc, #72]	; (8002494 <HAL_SPDIFRX_MspInit+0x90>)
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800244c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800244e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
 8002454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002456:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800245a:	9200      	str	r2, [sp, #0]
 800245c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800245e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002460:	f042 0208 	orr.w	r2, r2, #8
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	e9cd 3304 	strd	r3, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800247e:	2308      	movs	r3, #8
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002480:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002484:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002486:	f001 f877 	bl	8003578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800248a:	b028      	add	sp, #160	; 0xa0
 800248c:	bd10      	pop	{r4, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	40020c00 	.word	0x40020c00

08002498 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002498:	b530      	push	{r4, r5, lr}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249e:	2214      	movs	r2, #20
 80024a0:	2100      	movs	r1, #0
 80024a2:	a803      	add	r0, sp, #12
 80024a4:	f00c fbe2 	bl	800ec6c <memset>
  if(hspi->Instance==SPI2)
 80024a8:	6822      	ldr	r2, [r4, #0]
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_SPI_MspInit+0x80>)
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d131      	bne.n	8002514 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024b0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80024b4:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024b6:	2505      	movs	r5, #5
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80024b8:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80024bc:	4817      	ldr	r0, [pc, #92]	; (800251c <HAL_SPI_MspInit+0x84>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40
 80024c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80024ca:	9200      	str	r2, [sp, #0]
 80024cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80024ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
 80024d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80024dc:	9201      	str	r2, [sp, #4]
 80024de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e2:	f042 0202 	orr.w	r2, r2, #2
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024ea:	9507      	str	r5, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	9302      	str	r3, [sp, #8]
 80024f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80024f8:	f001 f83e 	bl	8003578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80024fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	a903      	add	r1, sp, #12
 8002502:	4807      	ldr	r0, [pc, #28]	; (8002520 <HAL_SPI_MspInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002504:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	e9cd 3305 	strd	r3, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002510:	f001 f832 	bl	8003578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002514:	b009      	add	sp, #36	; 0x24
 8002516:	bd30      	pop	{r4, r5, pc}
 8002518:	40003800 	.word	0x40003800
 800251c:	40022000 	.word	0x40022000
 8002520:	40020400 	.word	0x40020400

08002524 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8002524:	6803      	ldr	r3, [r0, #0]
{
 8002526:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 8002528:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <HAL_TIM_Base_MspInit+0x94>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d10b      	bne.n	8002546 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800252e:	4b23      	ldr	r3, [pc, #140]	; (80025bc <HAL_TIM_Base_MspInit+0x98>)
 8002530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	645a      	str	r2, [r3, #68]	; 0x44
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002542:	b006      	add	sp, #24
 8002544:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 8002546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254a:	d10b      	bne.n	8002564 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800254c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	641a      	str	r2, [r3, #64]	; 0x40
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	9302      	str	r3, [sp, #8]
 8002560:	9b02      	ldr	r3, [sp, #8]
 8002562:	e7ee      	b.n	8002542 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 8002564:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <HAL_TIM_Base_MspInit+0x9c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10a      	bne.n	8002580 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800256a:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_TIM_Base_MspInit+0x98>)
 800256c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800256e:	f042 0202 	orr.w	r2, r2, #2
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	9303      	str	r3, [sp, #12]
 800257c:	9b03      	ldr	r3, [sp, #12]
 800257e:	e7e0      	b.n	8002542 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM5)
 8002580:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <HAL_TIM_Base_MspInit+0xa0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d10a      	bne.n	800259c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_TIM_Base_MspInit+0x98>)
 8002588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800258a:	f042 0208 	orr.w	r2, r2, #8
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	9304      	str	r3, [sp, #16]
 8002598:	9b04      	ldr	r3, [sp, #16]
 800259a:	e7d2      	b.n	8002542 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM8)
 800259c:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <HAL_TIM_Base_MspInit+0xa4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d1cf      	bne.n	8002542 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_TIM_Base_MspInit+0x98>)
 80025a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025a6:	f042 0202 	orr.w	r2, r2, #2
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	9305      	str	r3, [sp, #20]
 80025b4:	9b05      	ldr	r3, [sp, #20]
}
 80025b6:	e7c4      	b.n	8002542 <HAL_TIM_Base_MspInit+0x1e>
 80025b8:	40010000 	.word	0x40010000
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40000c00 	.word	0x40000c00
 80025c8:	40010400 	.word	0x40010400

080025cc <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM12)
 80025cc:	6802      	ldr	r2, [r0, #0]
{
 80025ce:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM12)
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <HAL_TIM_PWM_MspInit+0x24>)
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d10a      	bne.n	80025ec <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80025d6:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 80025da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80025ec:	b002      	add	sp, #8
 80025ee:	4770      	bx	lr
 80025f0:	40001800 	.word	0x40001800

080025f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	2214      	movs	r2, #20
 80025f6:	2100      	movs	r1, #0
{
 80025f8:	b510      	push	{r4, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fe:	eb0d 0002 	add.w	r0, sp, r2
 8002602:	f00c fb33 	bl	800ec6c <memset>
  if(htim->Instance==TIM1)
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	4a35      	ldr	r2, [pc, #212]	; (80026e0 <HAL_TIM_MspPostInit+0xec>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d116      	bne.n	800263c <HAL_TIM_MspPostInit+0x48>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <HAL_TIM_MspPostInit+0xf0>)
 8002610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002622:	f44f 7380 	mov.w	r3, #256	; 0x100

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002626:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800262a:	a905      	add	r1, sp, #20
 800262c:	482e      	ldr	r0, [pc, #184]	; (80026e8 <HAL_TIM_MspPostInit+0xf4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002630:	2301      	movs	r3, #1
 8002632:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002634:	f000 ffa0 	bl	8003578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002638:	b00a      	add	sp, #40	; 0x28
 800263a:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 800263c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002640:	d10d      	bne.n	800265e <HAL_TIM_MspPostInit+0x6a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800265c:	e7e3      	b.n	8002626 <HAL_TIM_MspPostInit+0x32>
  else if(htim->Instance==TIM3)
 800265e:	4a23      	ldr	r2, [pc, #140]	; (80026ec <HAL_TIM_MspPostInit+0xf8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d111      	bne.n	8002688 <HAL_TIM_MspPostInit+0x94>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002664:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <HAL_TIM_MspPostInit+0xf0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2010      	movs	r0, #16
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002668:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266c:	f042 0202 	orr.w	r2, r2, #2
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	9302      	str	r3, [sp, #8]
 800267a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002682:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002684:	481a      	ldr	r0, [pc, #104]	; (80026f0 <HAL_TIM_MspPostInit+0xfc>)
 8002686:	e7d5      	b.n	8002634 <HAL_TIM_MspPostInit+0x40>
  else if(htim->Instance==TIM5)
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <HAL_TIM_MspPostInit+0x100>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d111      	bne.n	80026b2 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <HAL_TIM_MspPostInit+0xf0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2101      	movs	r1, #1
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002692:	4819      	ldr	r0, [pc, #100]	; (80026f8 <HAL_TIM_MspPostInit+0x104>)
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	9303      	str	r3, [sp, #12]
 80026a4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80026ac:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80026ae:	a905      	add	r1, sp, #20
 80026b0:	e7c0      	b.n	8002634 <HAL_TIM_MspPostInit+0x40>
  else if(htim->Instance==TIM12)
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <HAL_TIM_MspPostInit+0x108>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d1bf      	bne.n	8002638 <HAL_TIM_MspPostInit+0x44>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_TIM_MspPostInit+0xf0>)
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80026ba:	a905      	add	r1, sp, #20
 80026bc:	4810      	ldr	r0, [pc, #64]	; (8002700 <HAL_TIM_MspPostInit+0x10c>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80026be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ce:	9304      	str	r3, [sp, #16]
 80026d0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80026d8:	2309      	movs	r3, #9
 80026da:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80026dc:	e7aa      	b.n	8002634 <HAL_TIM_MspPostInit+0x40>
 80026de:	bf00      	nop
 80026e0:	40010000 	.word	0x40010000
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40000400 	.word	0x40000400
 80026f0:	40020400 	.word	0x40020400
 80026f4:	40000c00 	.word	0x40000c00
 80026f8:	40022000 	.word	0x40022000
 80026fc:	40001800 	.word	0x40001800
 8002700:	40021c00 	.word	0x40021c00

08002704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002704:	b570      	push	{r4, r5, r6, lr}
 8002706:	b0ac      	sub	sp, #176	; 0xb0
 8002708:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270a:	2214      	movs	r2, #20
 800270c:	2100      	movs	r1, #0
 800270e:	a806      	add	r0, sp, #24
 8002710:	f00c faac 	bl	800ec6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002714:	2284      	movs	r2, #132	; 0x84
 8002716:	2100      	movs	r1, #0
 8002718:	a80b      	add	r0, sp, #44	; 0x2c
 800271a:	f00c faa7 	bl	800ec6c <memset>
  if(huart->Instance==USART1)
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	4a36      	ldr	r2, [pc, #216]	; (80027fc <HAL_UART_MspInit+0xf8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d13d      	bne.n	80027a2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002726:	2340      	movs	r3, #64	; 0x40
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002728:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800272a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800272c:	f002 f928 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 8002730:	b108      	cbz	r0, 8002736 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8002732:	f7ff fc09 	bl	8001f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002736:	4b32      	ldr	r3, [pc, #200]	; (8002800 <HAL_UART_MspInit+0xfc>)
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800273c:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 800273e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002740:	a906      	add	r1, sp, #24
 8002742:	4830      	ldr	r0, [pc, #192]	; (8002804 <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002744:	f042 0210 	orr.w	r2, r2, #16
 8002748:	645a      	str	r2, [r3, #68]	; 0x44
 800274a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800274c:	f002 0210 	and.w	r2, r2, #16
 8002750:	9201      	str	r2, [sp, #4]
 8002752:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002756:	f042 0202 	orr.w	r2, r2, #2
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
 800275c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275e:	f002 0202 	and.w	r2, r2, #2
 8002762:	9202      	str	r2, [sp, #8]
 8002764:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002770:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	9303      	str	r3, [sp, #12]
 8002778:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	e9cd 3606 	strd	r3, r6, [sp, #24]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002784:	f000 fef8 	bl	8003578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002788:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800278c:	a906      	add	r1, sp, #24
 800278e:	481e      	ldr	r0, [pc, #120]	; (8002808 <HAL_UART_MspInit+0x104>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002790:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002792:	e9cd 3606 	strd	r3, r6, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800279a:	f000 feed 	bl	8003578 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800279e:	b02c      	add	sp, #176	; 0xb0
 80027a0:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART6)
 80027a2:	4a1a      	ldr	r2, [pc, #104]	; (800280c <HAL_UART_MspInit+0x108>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d1fa      	bne.n	800279e <HAL_UART_MspInit+0x9a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80027a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ac:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80027ae:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b0:	f002 f8e6 	bl	8004980 <HAL_RCCEx_PeriphCLKConfig>
 80027b4:	b108      	cbz	r0, 80027ba <HAL_UART_MspInit+0xb6>
      Error_Handler();
 80027b6:	f7ff fbc7 	bl	8001f48 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027bc:	2100      	movs	r1, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027be:	4814      	ldr	r0, [pc, #80]	; (8002810 <HAL_UART_MspInit+0x10c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80027c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027c2:	f042 0220 	orr.w	r2, r2, #32
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
 80027c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ca:	f002 0220 	and.w	r2, r2, #32
 80027ce:	9204      	str	r2, [sp, #16]
 80027d0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d4:	f042 0204 	orr.w	r2, r2, #4
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	9305      	str	r3, [sp, #20]
 80027e4:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e9cd 1308 	strd	r1, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027f2:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027f6:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f8:	e7cf      	b.n	800279a <HAL_UART_MspInit+0x96>
 80027fa:	bf00      	nop
 80027fc:	40011000 	.word	0x40011000
 8002800:	40023800 	.word	0x40023800
 8002804:	40020400 	.word	0x40020400
 8002808:	40020000 	.word	0x40020000
 800280c:	40011400 	.word	0x40011400
 8002810:	40020800 	.word	0x40020800

08002814 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002814:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002816:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002818:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800281a:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 800281c:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_SDRAM_MspInit+0xb0>)
 800281e:	681e      	ldr	r6, [r3, #0]
 8002820:	2e00      	cmp	r6, #0
 8002822:	d14d      	bne.n	80028c0 <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 8002824:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002828:	2503      	movs	r5, #3
 800282a:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 800282c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800282e:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002832:	4826      	ldr	r0, [pc, #152]	; (80028cc <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800284a:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002852:	f000 fe91 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002856:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800285a:	a901      	add	r1, sp, #4
 800285c:	481c      	ldr	r0, [pc, #112]	; (80028d0 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800285e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002864:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002868:	f000 fe86 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800286c:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002870:	a901      	add	r1, sp, #4
 8002872:	4818      	ldr	r0, [pc, #96]	; (80028d4 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002874:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800287e:	f000 fe7b 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002882:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002886:	a901      	add	r1, sp, #4
 8002888:	4813      	ldr	r0, [pc, #76]	; (80028d8 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800288a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002890:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002894:	f000 fe70 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002898:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800289a:	a901      	add	r1, sp, #4
 800289c:	480f      	ldr	r0, [pc, #60]	; (80028dc <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800289e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028a8:	f000 fe66 	bl	8003578 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80028ac:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80028ae:	a901      	add	r1, sp, #4
 80028b0:	480b      	ldr	r0, [pc, #44]	; (80028e0 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028b2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80028bc:	f000 fe5c 	bl	8003578 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80028c0:	b007      	add	sp, #28
 80028c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028c4:	200016ac 	.word	0x200016ac
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40021800 	.word	0x40021800
 80028d4:	40020c00 	.word	0x40020c00
 80028d8:	40021400 	.word	0x40021400
 80028dc:	40021c00 	.word	0x40021c00
 80028e0:	40020800 	.word	0x40020800

080028e4 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80028e4:	6802      	ldr	r2, [r0, #0]
 80028e6:	4b22      	ldr	r3, [pc, #136]	; (8002970 <HAL_SAI_MspInit+0x8c>)
 80028e8:	429a      	cmp	r2, r3
{
 80028ea:	b510      	push	{r4, lr}
 80028ec:	4604      	mov	r4, r0
 80028ee:	b088      	sub	sp, #32
    if(hsai->Instance==SAI2_Block_A)
 80028f0:	d11b      	bne.n	800292a <HAL_SAI_MspInit+0x46>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80028f2:	4820      	ldr	r0, [pc, #128]	; (8002974 <HAL_SAI_MspInit+0x90>)
 80028f4:	6803      	ldr	r3, [r0, #0]
 80028f6:	b94b      	cbnz	r3, 800290c <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80028f8:	4a1f      	ldr	r2, [pc, #124]	; (8002978 <HAL_SAI_MspInit+0x94>)
 80028fa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80028fc:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002900:	6451      	str	r1, [r2, #68]	; 0x44
 8002902:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002904:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8002908:	9201      	str	r2, [sp, #4]
 800290a:	9a01      	ldr	r2, [sp, #4]
    }
    SAI2_client ++;
 800290c:	3301      	adds	r3, #1
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	21f0      	movs	r1, #240	; 0xf0
    SAI2_client ++;
 8002910:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002914:	4819      	ldr	r0, [pc, #100]	; (800297c <HAL_SAI_MspInit+0x98>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800291c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291e:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002922:	230a      	movs	r3, #10
 8002924:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002926:	f000 fe27 	bl	8003578 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800292a:	6822      	ldr	r2, [r4, #0]
 800292c:	4b14      	ldr	r3, [pc, #80]	; (8002980 <HAL_SAI_MspInit+0x9c>)
 800292e:	429a      	cmp	r2, r3
 8002930:	d11c      	bne.n	800296c <HAL_SAI_MspInit+0x88>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002932:	4810      	ldr	r0, [pc, #64]	; (8002974 <HAL_SAI_MspInit+0x90>)
 8002934:	6803      	ldr	r3, [r0, #0]
 8002936:	b94b      	cbnz	r3, 800294c <HAL_SAI_MspInit+0x68>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002938:	4a0f      	ldr	r2, [pc, #60]	; (8002978 <HAL_SAI_MspInit+0x94>)
 800293a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800293c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002940:	6451      	str	r1, [r2, #68]	; 0x44
 8002942:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002944:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8002948:	9202      	str	r2, [sp, #8]
 800294a:	9a02      	ldr	r2, [sp, #8]
      }
    SAI2_client ++;
 800294c:	3301      	adds	r3, #1

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002952:	a903      	add	r1, sp, #12
    SAI2_client ++;
 8002954:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002958:	480a      	ldr	r0, [pc, #40]	; (8002984 <HAL_SAI_MspInit+0xa0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002964:	230a      	movs	r3, #10
 8002966:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002968:	f000 fe06 	bl	8003578 <HAL_GPIO_Init>

    }
}
 800296c:	b008      	add	sp, #32
 800296e:	bd10      	pop	{r4, pc}
 8002970:	40015c04 	.word	0x40015c04
 8002974:	200016b0 	.word	0x200016b0
 8002978:	40023800 	.word	0x40023800
 800297c:	40022000 	.word	0x40022000
 8002980:	40015c24 	.word	0x40015c24
 8002984:	40021800 	.word	0x40021800

08002988 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_InitTick+0x88>)
 800298a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800298c:	f042 0210 	orr.w	r2, r2, #16
{
 8002990:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002992:	641a      	str	r2, [r3, #64]	; 0x40
{
 8002994:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8002998:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800299a:	a901      	add	r1, sp, #4
 800299c:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	9302      	str	r3, [sp, #8]
 80029a4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029a6:	f001 ffcd 	bl	8004944 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029aa:	9b06      	ldr	r3, [sp, #24]
 80029ac:	bb4b      	cbnz	r3, 8002a02 <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029ae:	f001 ffa9 	bl	8004904 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029b2:	4e18      	ldr	r6, [pc, #96]	; (8002a14 <HAL_InitTick+0x8c>)
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <HAL_InitTick+0x90>)
 80029b6:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029b8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80029bc:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029be:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <HAL_InitTick+0x94>)
 80029c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c4:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim6);
 80029c6:	4630      	mov	r0, r6
  htim6.Init.Prescaler = uwPrescalerValue;
 80029c8:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ce:	60b3      	str	r3, [r6, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d0:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim6);
 80029d2:	f003 fd41 	bl	8006458 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80029d6:	4604      	mov	r4, r0
 80029d8:	b980      	cbnz	r0, 80029fc <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80029da:	4630      	mov	r0, r6
 80029dc:	f003 fbe4 	bl	80061a8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80029e0:	4604      	mov	r4, r0
 80029e2:	b958      	cbnz	r0, 80029fc <HAL_InitTick+0x74>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029e4:	2036      	movs	r0, #54	; 0x36
 80029e6:	f000 fa57 	bl	8002e98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ea:	2d0f      	cmp	r5, #15
 80029ec:	d80d      	bhi.n	8002a0a <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80029ee:	4622      	mov	r2, r4
 80029f0:	4629      	mov	r1, r5
 80029f2:	2036      	movs	r0, #54	; 0x36
 80029f4:	f000 fa1e 	bl	8002e34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_InitTick+0x98>)
 80029fa:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80029fc:	4620      	mov	r0, r4
 80029fe:	b008      	add	sp, #32
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a02:	f001 ff7f 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8002a06:	0040      	lsls	r0, r0, #1
 8002a08:	e7d3      	b.n	80029b2 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8002a0a:	2401      	movs	r4, #1
 8002a0c:	e7f6      	b.n	80029fc <HAL_InitTick+0x74>
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800
 8002a14:	200016b4 	.word	0x200016b4
 8002a18:	40001000 	.word	0x40001000
 8002a1c:	000f4240 	.word	0x000f4240
 8002a20:	20000008 	.word	0x20000008

08002a24 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a24:	e7fe      	b.n	8002a24 <NMI_Handler>

08002a26 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a26:	e7fe      	b.n	8002a26 <HardFault_Handler>

08002a28 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <MemManage_Handler>

08002a2a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a2a:	e7fe      	b.n	8002a2a <BusFault_Handler>

08002a2c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <UsageFault_Handler>

08002a2e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a2e:	4770      	bx	lr

08002a30 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a30:	4801      	ldr	r0, [pc, #4]	; (8002a38 <TIM6_DAC_IRQHandler+0x8>)
 8002a32:	f003 bbfb 	b.w	800622c <HAL_TIM_IRQHandler>
 8002a36:	bf00      	nop
 8002a38:	200016b4 	.word	0x200016b4

08002a3c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002a3c:	4801      	ldr	r0, [pc, #4]	; (8002a44 <OTG_FS_IRQHandler+0x8>)
 8002a3e:	f000 bf83 	b.w	8003948 <HAL_HCD_IRQHandler>
 8002a42:	bf00      	nop
 8002a44:	20009c50 	.word	0x20009c50

08002a48 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002a48:	4801      	ldr	r0, [pc, #4]	; (8002a50 <DMA2D_IRQHandler+0x8>)
 8002a4a:	f000 bafe 	b.w	800304a <HAL_DMA2D_IRQHandler>
 8002a4e:	bf00      	nop
 8002a50:	20000f60 	.word	0x20000f60

08002a54 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a54:	4a0b      	ldr	r2, [pc, #44]	; (8002a84 <_sbrk+0x30>)
{
 8002a56:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002a58:	6811      	ldr	r1, [r2, #0]
{
 8002a5a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002a5c:	b909      	cbnz	r1, 8002a62 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002a5e:	490a      	ldr	r1, [pc, #40]	; (8002a88 <_sbrk+0x34>)
 8002a60:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a62:	6810      	ldr	r0, [r2, #0]
 8002a64:	4909      	ldr	r1, [pc, #36]	; (8002a8c <_sbrk+0x38>)
 8002a66:	4c0a      	ldr	r4, [pc, #40]	; (8002a90 <_sbrk+0x3c>)
 8002a68:	4403      	add	r3, r0
 8002a6a:	1b09      	subs	r1, r1, r4
 8002a6c:	428b      	cmp	r3, r1
 8002a6e:	d906      	bls.n	8002a7e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002a70:	f00c f8b4 	bl	800ebdc <__errno>
 8002a74:	230c      	movs	r3, #12
 8002a76:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002a78:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002a7c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002a7e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002a80:	e7fc      	b.n	8002a7c <_sbrk+0x28>
 8002a82:	bf00      	nop
 8002a84:	20001700 	.word	0x20001700
 8002a88:	2000a018 	.word	0x2000a018
 8002a8c:	20050000 	.word	0x20050000
 8002a90:	00000800 	.word	0x00000800

08002a94 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a94:	4a03      	ldr	r2, [pc, #12]	; (8002aa4 <SystemInit+0x10>)
 8002a96:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a9a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aac:	480d      	ldr	r0, [pc, #52]	; (8002ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aae:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ab0:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab4:	e002      	b.n	8002abc <LoopCopyDataInit>

08002ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aba:	3304      	adds	r3, #4

08002abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac0:	d3f9      	bcc.n	8002ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ac2:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ac4:	4c0b      	ldr	r4, [pc, #44]	; (8002af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac8:	e001      	b.n	8002ace <LoopFillZerobss>

08002aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002acc:	3204      	adds	r2, #4

08002ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad0:	d3fb      	bcc.n	8002aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ad2:	f7ff ffdf 	bl	8002a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ad6:	f00c f887 	bl	800ebe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ada:	f7fe fa9d 	bl	8001018 <main>
  bx  lr    
 8002ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ae0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae8:	20000af4 	.word	0x20000af4
  ldr r2, =_sidata
 8002aec:	0806dadc 	.word	0x0806dadc
  ldr r2, =_sbss
 8002af0:	20000c34 	.word	0x20000c34
  ldr r4, =_ebss
 8002af4:	2000a018 	.word	0x2000a018

08002af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002af8:	e7fe      	b.n	8002af8 <ADC_IRQHandler>
	...

08002afc <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002afc:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <HAL_Init+0x20>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002afe:	2003      	movs	r0, #3
{
 8002b00:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8002b02:	6813      	ldr	r3, [r2, #0]
 8002b04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b08:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0a:	f000 f981 	bl	8002e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7ff ff3a 	bl	8002988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b14:	f7ff fa1a 	bl	8001f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002b18:	2000      	movs	r0, #0
 8002b1a:	bd08      	pop	{r3, pc}
 8002b1c:	40023c00 	.word	0x40023c00

08002b20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002b20:	4a03      	ldr	r2, [pc, #12]	; (8002b30 <HAL_IncTick+0x10>)
 8002b22:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <HAL_IncTick+0x14>)
 8002b24:	6811      	ldr	r1, [r2, #0]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	440b      	add	r3, r1
 8002b2a:	6013      	str	r3, [r2, #0]
}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20001704 	.word	0x20001704
 8002b34:	20000004 	.word	0x20000004

08002b38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b38:	4b01      	ldr	r3, [pc, #4]	; (8002b40 <HAL_GetTick+0x8>)
 8002b3a:	6818      	ldr	r0, [r3, #0]
}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20001704 	.word	0x20001704

08002b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b44:	b538      	push	{r3, r4, r5, lr}
 8002b46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b48:	f7ff fff6 	bl	8002b38 <HAL_GetTick>
 8002b4c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002b50:	bf1e      	ittt	ne
 8002b52:	4b04      	ldrne	r3, [pc, #16]	; (8002b64 <HAL_Delay+0x20>)
 8002b54:	781b      	ldrbne	r3, [r3, #0]
 8002b56:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b58:	f7ff ffee 	bl	8002b38 <HAL_GetTick>
 8002b5c:	1b43      	subs	r3, r0, r5
 8002b5e:	42a3      	cmp	r3, r4
 8002b60:	d3fa      	bcc.n	8002b58 <HAL_Delay+0x14>
  {
  }
}
 8002b62:	bd38      	pop	{r3, r4, r5, pc}
 8002b64:	20000004 	.word	0x20000004

08002b68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b68:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	f000 809b 	beq.w	8002ca8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b72:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002b74:	b925      	cbnz	r5, 8002b80 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b76:	f7ff fa07 	bl	8001f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b7a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b7c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b82:	06db      	lsls	r3, r3, #27
 8002b84:	f100 808e 	bmi.w	8002ca4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b8e:	f023 0302 	bic.w	r3, r3, #2
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b98:	4b44      	ldr	r3, [pc, #272]	; (8002cac <HAL_ADC_Init+0x144>)
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002ba0:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	6861      	ldr	r1, [r4, #4]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002baa:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bac:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bbc:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bbe:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bc6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bcc:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bce:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bdc:	4934      	ldr	r1, [pc, #208]	; (8002cb0 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bde:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002be0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002be2:	428a      	cmp	r2, r1
 8002be4:	d052      	beq.n	8002c8c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002be6:	6899      	ldr	r1, [r3, #8]
 8002be8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8002bec:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bee:	6899      	ldr	r1, [r3, #8]
 8002bf0:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bf2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c02:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c04:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c06:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c08:	f022 0202 	bic.w	r2, r2, #2
 8002c0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002c14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c16:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002c1a:	2a00      	cmp	r2, #0
 8002c1c:	d03e      	beq.n	8002c9c <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c1e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c20:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c26:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c28:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c30:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c38:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8002c3a:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c3e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c44:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002c5e:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c62:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002c74:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002c76:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002c78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002c84:	2300      	movs	r3, #0
 8002c86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002c8a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c9a:	e7b2      	b.n	8002c02 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca2:	e7c9      	b.n	8002c38 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	e7ed      	b.n	8002c84 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8002ca8:	2001      	movs	r0, #1
 8002caa:	e7ee      	b.n	8002c8a <HAL_ADC_Init+0x122>
 8002cac:	40012300 	.word	0x40012300
 8002cb0:	0f000001 	.word	0x0f000001

08002cb4 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8002cb4:	2300      	movs	r3, #0
{
 8002cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8002cb8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002cba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d079      	beq.n	8002db6 <HAL_ADC_ConfigChannel+0x102>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002cc8:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cca:	6803      	ldr	r3, [r0, #0]
 8002ccc:	b2ae      	uxth	r6, r5
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002cce:	2d09      	cmp	r5, #9
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002cd0:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cd2:	eb06 0446 	add.w	r4, r6, r6, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002cd6:	d93a      	bls.n	8002d4e <HAL_ADC_ConfigChannel+0x9a>
 8002cd8:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8002cdc:	d037      	beq.n	8002d4e <HAL_ADC_ConfigChannel+0x9a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cde:	3c1e      	subs	r4, #30
 8002ce0:	f04f 0c07 	mov.w	ip, #7
 8002ce4:	68df      	ldr	r7, [r3, #12]
 8002ce6:	fa0c fc04 	lsl.w	ip, ip, r4
 8002cea:	ea27 070c 	bic.w	r7, r7, ip
 8002cee:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cf0:	4f42      	ldr	r7, [pc, #264]	; (8002dfc <HAL_ADC_ConfigChannel+0x148>)
 8002cf2:	42bd      	cmp	r5, r7
 8002cf4:	d126      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002cf6:	68dc      	ldr	r4, [r3, #12]
 8002cf8:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cfc:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 8002cfe:	6849      	ldr	r1, [r1, #4]
 8002d00:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d02:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7)
 8002d06:	d830      	bhi.n	8002d6a <HAL_ADC_ConfigChannel+0xb6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d08:	3a05      	subs	r2, #5
 8002d0a:	241f      	movs	r4, #31
 8002d0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d0e:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d10:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d14:	ea21 0104 	bic.w	r1, r1, r4
 8002d18:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d20:	4a37      	ldr	r2, [pc, #220]	; (8002e00 <HAL_ADC_ConfigChannel+0x14c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d108      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x84>
 8002d26:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8002d2a:	d146      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x106>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d2c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8002d30:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d34:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002d3e:	4618      	mov	r0, r3
}
 8002d40:	b003      	add	sp, #12
 8002d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d44:	68df      	ldr	r7, [r3, #12]
 8002d46:	fa02 f404 	lsl.w	r4, r2, r4
 8002d4a:	433c      	orrs	r4, r7
 8002d4c:	e7d6      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x48>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d4e:	f04f 0c07 	mov.w	ip, #7
 8002d52:	691f      	ldr	r7, [r3, #16]
 8002d54:	fa0c fc04 	lsl.w	ip, ip, r4
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d58:	fa02 f404 	lsl.w	r4, r2, r4
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d5c:	ea27 070c 	bic.w	r7, r7, ip
 8002d60:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d62:	691f      	ldr	r7, [r3, #16]
 8002d64:	433c      	orrs	r4, r7
 8002d66:	611c      	str	r4, [r3, #16]
 8002d68:	e7c9      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Rank < 13)
 8002d6a:	290c      	cmp	r1, #12
 8002d6c:	f04f 011f 	mov.w	r1, #31
 8002d70:	d80b      	bhi.n	8002d8a <HAL_ADC_ConfigChannel+0xd6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d72:	3a23      	subs	r2, #35	; 0x23
 8002d74:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002d76:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d78:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d7c:	ea24 0101 	bic.w	r1, r4, r1
 8002d80:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d84:	430a      	orrs	r2, r1
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
 8002d88:	e7ca      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d8a:	3a41      	subs	r2, #65	; 0x41
 8002d8c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002d8e:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d90:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d94:	ea24 0101 	bic.w	r1, r4, r1
 8002d98:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002da0:	e7be      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x6c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <HAL_ADC_ConfigChannel+0x150>)
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002daa:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002db2:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002db4:	e7c0      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8002db6:	2002      	movs	r0, #2
 8002db8:	e7c2      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x8c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dba:	2d12      	cmp	r5, #18
 8002dbc:	d0f1      	beq.n	8002da2 <HAL_ADC_ConfigChannel+0xee>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <HAL_ADC_ConfigChannel+0x148>)
 8002dc0:	429d      	cmp	r5, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_ADC_ConfigChannel+0x114>
 8002dc4:	2d11      	cmp	r5, #17
 8002dc6:	d1b7      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x84>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <HAL_ADC_ConfigChannel+0x150>)
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002dd0:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002dd8:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_ADC_ConfigChannel+0x148>)
 8002ddc:	429d      	cmp	r5, r3
 8002dde:	d1ab      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x84>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_ADC_ConfigChannel+0x154>)
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <HAL_ADC_ConfigChannel+0x158>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dea:	220a      	movs	r2, #10
 8002dec:	4353      	muls	r3, r2
        counter--;
 8002dee:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8002df0:	9b01      	ldr	r3, [sp, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0a0      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0x84>
        counter--;
 8002df6:	9b01      	ldr	r3, [sp, #4]
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	e7f8      	b.n	8002dee <HAL_ADC_ConfigChannel+0x13a>
 8002dfc:	10000012 	.word	0x10000012
 8002e00:	40012000 	.word	0x40012000
 8002e04:	40012300 	.word	0x40012300
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	000f4240 	.word	0x000f4240

08002e10 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e10:	4907      	ldr	r1, [pc, #28]	; (8002e30 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e12:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e14:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e1e:	0412      	lsls	r2, r2, #16
 8002e20:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002e2c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002e2e:	4770      	bx	lr
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e34:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e36:	b530      	push	{r4, r5, lr}
 8002e38:	68dc      	ldr	r4, [r3, #12]
 8002e3a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e3e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e42:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e44:	2d04      	cmp	r5, #4
 8002e46:	bf28      	it	cs
 8002e48:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e50:	bf8c      	ite	hi
 8002e52:	3c03      	subhi	r4, #3
 8002e54:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e56:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8002e5a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e5c:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e64:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	fa01 f104 	lsl.w	r1, r1, r4
 8002e6c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e70:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002e74:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002e76:	db06      	blt.n	8002e86 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e78:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002e7c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002e80:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002e84:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e86:	f000 000f 	and.w	r0, r0, #15
 8002e8a:	4a02      	ldr	r2, [pc, #8]	; (8002e94 <HAL_NVIC_SetPriority+0x60>)
 8002e8c:	5413      	strb	r3, [r2, r0]
 8002e8e:	e7f9      	b.n	8002e84 <HAL_NVIC_SetPriority+0x50>
 8002e90:	e000ed00 	.word	0xe000ed00
 8002e94:	e000ed14 	.word	0xe000ed14

08002e98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	db08      	blt.n	8002eae <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9c:	0942      	lsrs	r2, r0, #5
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f000 001f 	and.w	r0, r0, #31
 8002ea4:	fa03 f000 	lsl.w	r0, r3, r0
 8002ea8:	4b01      	ldr	r3, [pc, #4]	; (8002eb0 <HAL_NVIC_EnableIRQ+0x18>)
 8002eaa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002eae:	4770      	bx	lr
 8002eb0:	e000e100 	.word	0xe000e100

08002eb4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002eb4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	b908      	cbnz	r0, 8002ebe <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8002eba:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8002ebc:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ebe:	7f43      	ldrb	r3, [r0, #29]
 8002ec0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ec4:	b913      	cbnz	r3, 8002ecc <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8002ec6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8002ec8:	f7ff f8a2 	bl	8002010 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002ed0:	7923      	ldrb	r3, [r4, #4]
 8002ed2:	b9e3      	cbnz	r3, 8002f0e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <HAL_CRC_Init+0x70>)
 8002ed8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	f022 0218 	bic.w	r2, r2, #24
 8002ee0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002ee2:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002ee4:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002ee6:	b9d2      	cbnz	r2, 8002f1e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002eec:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8002eee:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	6961      	ldr	r1, [r4, #20]
 8002ef4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ef8:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002efa:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002efc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f04:	430a      	orrs	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8002f0c:	e7d6      	b.n	8002ebc <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f0e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8002f12:	4620      	mov	r0, r4
 8002f14:	f000 f808 	bl	8002f28 <HAL_CRCEx_Polynomial_Set>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d0e2      	beq.n	8002ee2 <HAL_CRC_Init+0x2e>
 8002f1c:	e7cd      	b.n	8002eba <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f1e:	6922      	ldr	r2, [r4, #16]
 8002f20:	e7e4      	b.n	8002eec <HAL_CRC_Init+0x38>
 8002f22:	bf00      	nop
 8002f24:	04c11db7 	.word	0x04c11db7

08002f28 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002f28:	231f      	movs	r3, #31
{
 8002f2a:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	d31c      	bcc.n	8002f6a <HAL_CRCEx_Polynomial_Set+0x42>
 8002f30:	fa21 f403 	lsr.w	r4, r1, r3
 8002f34:	07e4      	lsls	r4, r4, #31
 8002f36:	d5f9      	bpl.n	8002f2c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8002f38:	2a10      	cmp	r2, #16
 8002f3a:	d012      	beq.n	8002f62 <HAL_CRCEx_Polynomial_Set+0x3a>
 8002f3c:	d804      	bhi.n	8002f48 <HAL_CRCEx_Polynomial_Set+0x20>
 8002f3e:	b13a      	cbz	r2, 8002f50 <HAL_CRCEx_Polynomial_Set+0x28>
 8002f40:	2a08      	cmp	r2, #8
 8002f42:	d010      	beq.n	8002f66 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8002f44:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8002f46:	e00b      	b.n	8002f60 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8002f48:	2a18      	cmp	r2, #24
 8002f4a:	d1fb      	bne.n	8002f44 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8002f4c:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8002f4e:	d8f9      	bhi.n	8002f44 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002f50:	6800      	ldr	r0, [r0, #0]
 8002f52:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002f54:	6883      	ldr	r3, [r0, #8]
 8002f56:	f023 0318 	bic.w	r3, r3, #24
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	6082      	str	r2, [r0, #8]
 8002f5e:	2000      	movs	r0, #0
}
 8002f60:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8002f62:	2b07      	cmp	r3, #7
 8002f64:	e7f3      	b.n	8002f4e <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	e7f1      	b.n	8002f4e <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8002f6a:	2a00      	cmp	r2, #0
 8002f6c:	d1ea      	bne.n	8002f44 <HAL_CRCEx_Polynomial_Set+0x1c>
 8002f6e:	e7ef      	b.n	8002f50 <HAL_CRCEx_Polynomial_Set+0x28>

08002f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f70:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f72:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f76:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002f78:	2c01      	cmp	r4, #1
 8002f7a:	d034      	beq.n	8002fe6 <HAL_DMA_Start_IT+0x76>
 8002f7c:	2401      	movs	r4, #1
 8002f7e:	2500      	movs	r5, #0
 8002f80:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f84:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002f88:	2c01      	cmp	r4, #1
 8002f8a:	f04f 0402 	mov.w	r4, #2
 8002f8e:	d128      	bne.n	8002fe2 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f90:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f94:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f96:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f98:	6825      	ldr	r5, [r4, #0]
 8002f9a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002f9e:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fa0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fa2:	6883      	ldr	r3, [r0, #8]
 8002fa4:	2b40      	cmp	r3, #64	; 0x40
 8002fa6:	d119      	bne.n	8002fdc <HAL_DMA_Start_IT+0x6c>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fa8:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002faa:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fac:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002fae:	233f      	movs	r3, #63	; 0x3f
 8002fb0:	4093      	lsls	r3, r2
 8002fb2:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	f043 0316 	orr.w	r3, r3, #22
 8002fba:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002fbc:	6963      	ldr	r3, [r4, #20]
 8002fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc2:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002fc4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002fc6:	b11b      	cbz	r3, 8002fd0 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	f043 0308 	orr.w	r3, r3, #8
 8002fce:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002fd0:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6023      	str	r3, [r4, #0]
}
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002fdc:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8002fde:	60e2      	str	r2, [r4, #12]
 8002fe0:	e7e4      	b.n	8002fac <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8002fe2:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8002fe6:	2002      	movs	r0, #2
 8002fe8:	e7f7      	b.n	8002fda <HAL_DMA_Start_IT+0x6a>

08002fea <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002fea:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8002fec:	4770      	bx	lr

08002fee <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002fee:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	b330      	cbz	r0, 8003042 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002ff4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ff8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ffc:	b91b      	cbnz	r3, 8003006 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002ffe:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003002:	f7ff f81b 	bl	800203c <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003006:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003008:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800300a:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800300c:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800300e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003018:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800301a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800301c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800301e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003020:	f023 0307 	bic.w	r3, r3, #7
 8003024:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003026:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003028:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800302a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800302c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003030:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003034:	430b      	orrs	r3, r1
 8003036:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003038:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800303a:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800303c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8003040:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003042:	2001      	movs	r0, #1
 8003044:	e7fc      	b.n	8003040 <HAL_DMA2D_Init+0x52>

08003046 <HAL_DMA2D_LineEventCallback>:
 8003046:	4770      	bx	lr

08003048 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8003048:	4770      	bx	lr

0800304a <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800304a:	6803      	ldr	r3, [r0, #0]
{
 800304c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800304e:	685e      	ldr	r6, [r3, #4]
{
 8003050:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003052:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003054:	07f2      	lsls	r2, r6, #31
 8003056:	d514      	bpl.n	8003082 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003058:	05e9      	lsls	r1, r5, #23
 800305a:	d512      	bpl.n	8003082 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003062:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003064:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800306c:	2201      	movs	r2, #1
 800306e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003070:	2304      	movs	r3, #4
 8003072:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003076:	2300      	movs	r3, #0
 8003078:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800307c:	6943      	ldr	r3, [r0, #20]
 800307e:	b103      	cbz	r3, 8003082 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003080:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003082:	06b2      	lsls	r2, r6, #26
 8003084:	d516      	bpl.n	80030b4 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003086:	04ab      	lsls	r3, r5, #18
 8003088:	d514      	bpl.n	80030b4 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003092:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003094:	2220      	movs	r2, #32
 8003096:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003098:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800309a:	f043 0302 	orr.w	r3, r3, #2
 800309e:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030a0:	2304      	movs	r3, #4
 80030a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030a6:	2300      	movs	r3, #0
 80030a8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80030ac:	6963      	ldr	r3, [r4, #20]
 80030ae:	b10b      	cbz	r3, 80030b4 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80030b0:	4620      	mov	r0, r4
 80030b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80030b4:	0730      	lsls	r0, r6, #28
 80030b6:	d516      	bpl.n	80030e6 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80030b8:	0529      	lsls	r1, r5, #20
 80030ba:	d514      	bpl.n	80030e6 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80030c6:	2208      	movs	r2, #8
 80030c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80030ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030d2:	2304      	movs	r3, #4
 80030d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030d8:	2300      	movs	r3, #0
 80030da:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80030de:	6963      	ldr	r3, [r4, #20]
 80030e0:	b10b      	cbz	r3, 80030e6 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80030e2:	4620      	mov	r0, r4
 80030e4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80030e6:	0772      	lsls	r2, r6, #29
 80030e8:	d50b      	bpl.n	8003102 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80030ea:	056b      	lsls	r3, r5, #21
 80030ec:	d509      	bpl.n	8003102 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80030ee:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80030f0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80030fa:	2204      	movs	r2, #4
 80030fc:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80030fe:	f7ff ffa2 	bl	8003046 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003102:	07b0      	lsls	r0, r6, #30
 8003104:	d514      	bpl.n	8003130 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003106:	05a9      	lsls	r1, r5, #22
 8003108:	d512      	bpl.n	8003130 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003112:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003114:	2202      	movs	r2, #2
 8003116:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003118:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800311a:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800311c:	2301      	movs	r3, #1
 800311e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003122:	2300      	movs	r3, #0
 8003124:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003128:	6923      	ldr	r3, [r4, #16]
 800312a:	b10b      	cbz	r3, 8003130 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800312c:	4620      	mov	r0, r4
 800312e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003130:	06f2      	lsls	r2, r6, #27
 8003132:	d513      	bpl.n	800315c <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003134:	04eb      	lsls	r3, r5, #19
 8003136:	d511      	bpl.n	800315c <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003138:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800313a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003142:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003144:	2210      	movs	r2, #16
 8003146:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003148:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800314a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800314c:	2301      	movs	r3, #1
 800314e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8003152:	2300      	movs	r3, #0
 8003154:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003158:	f7ff ff76 	bl	8003048 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800315c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003160 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003160:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003162:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003166:	2b01      	cmp	r3, #1
 8003168:	f04f 0302 	mov.w	r3, #2
 800316c:	d02b      	beq.n	80031c6 <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800316e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8003172:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003174:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8003178:	4f1c      	ldr	r7, [pc, #112]	; (80031ec <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 800317a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800317e:	010e      	lsls	r6, r1, #4
 8003180:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8003182:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8003186:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800318a:	3c09      	subs	r4, #9
 800318c:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800318e:	bf96      	itet	ls
 8003190:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003194:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003198:	431a      	orrls	r2, r3

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800319a:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800319c:	b9a9      	cbnz	r1, 80031ca <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800319e:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031a0:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80031a2:	ea01 0107 	and.w	r1, r1, r7
 80031a6:	ea42 0201 	orr.w	r2, r2, r1
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80031ac:	6982      	ldr	r2, [r0, #24]
 80031ae:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031b0:	d803      	bhi.n	80031ba <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80031b2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80031b4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80031c0:	2300      	movs	r3, #0
 80031c2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 80031c6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80031c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80031ca:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031cc:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80031ce:	ea01 0107 	and.w	r1, r1, r7
 80031d2:	ea42 0201 	orr.w	r2, r2, r1
 80031d6:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80031d8:	eb00 0206 	add.w	r2, r0, r6
 80031dc:	6992      	ldr	r2, [r2, #24]
 80031de:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031e0:	d8eb      	bhi.n	80031ba <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80031e2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80031e6:	621d      	str	r5, [r3, #32]
 80031e8:	e7e7      	b.n	80031ba <HAL_DMA2D_ConfigLayer+0x5a>
 80031ea:	bf00      	nop
 80031ec:	00fcfff0 	.word	0x00fcfff0

080031f0 <ETH_SetMACConfig>:
{
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80031f0:	6802      	ldr	r2, [r0, #0]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80031f2:	f8df c100 	ldr.w	ip, [pc, #256]	; 80032f4 <ETH_SetMACConfig+0x104>
  tmpreg1 = (heth->Instance)->MACCR;
 80031f6:	6813      	ldr	r3, [r2, #0]
{
 80031f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80031fc:	ea03 0c0c 	and.w	ip, r3, ip

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003200:	7c0b      	ldrb	r3, [r1, #16]
{
 8003202:	460d      	mov	r5, r1
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
                        (uint32_t)macconf->InterPacketGapVal |
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003204:	f891 801f 	ldrb.w	r8, [r1, #31]
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003208:	2b00      	cmp	r3, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800320a:	7c4b      	ldrb	r3, [r1, #17]
{
 800320c:	4604      	mov	r4, r0
                        macconf->Speed |
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800320e:	f895 901c 	ldrb.w	r9, [r5, #28]
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003212:	bf0c      	ite	eq
 8003214:	f44f 0700 	moveq.w	r7, #8388608	; 0x800000
 8003218:	2700      	movne	r7, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800321a:	2b00      	cmp	r3, #0
 800321c:	688b      	ldr	r3, [r1, #8]
 800321e:	6949      	ldr	r1, [r1, #20]
 8003220:	bf0c      	ite	eq
 8003222:	f44f 0680 	moveq.w	r6, #4194304	; 0x400000
 8003226:	2600      	movne	r6, #0
 8003228:	430b      	orrs	r3, r1
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800322a:	7fa9      	ldrb	r1, [r5, #30]
                        macconf->DuplexMode |
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800322c:	f895 e004 	ldrb.w	lr, [r5, #4]
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003230:	2900      	cmp	r1, #0
 8003232:	69a9      	ldr	r1, [r5, #24]
 8003234:	ea43 0301 	orr.w	r3, r3, r1
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003238:	f895 1020 	ldrb.w	r1, [r5, #32]
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800323c:	bf0c      	ite	eq
 800323e:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
 8003242:	2000      	movne	r0, #0
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003244:	2900      	cmp	r1, #0
 8003246:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003248:	ea43 0301 	orr.w	r3, r3, r1
 800324c:	bf0c      	ite	eq
 800324e:	f44f 7a00 	moveq.w	sl, #512	; 0x200
 8003252:	f04f 0a00 	movne.w	sl, #0
 8003256:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800325a:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 800325e:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003262:	f895 e00f 	ldrb.w	lr, [r5, #15]
 8003266:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
                        macconf->BackOffLimit |
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800326a:	f895 e028 	ldrb.w	lr, [r5, #40]	; 0x28
 800326e:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
 8003272:	ea43 030c 	orr.w	r3, r3, ip
 8003276:	433b      	orrs	r3, r7
 8003278:	4333      	orrs	r3, r6
 800327a:	4303      	orrs	r3, r0
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800327c:	2001      	movs	r0, #1
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800327e:	ea43 030a 	orr.w	r3, r3, sl
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003282:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8003284:	6816      	ldr	r6, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003286:	f7ff fc5d 	bl	8002b44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800328a:	6821      	ldr	r1, [r4, #0]
 800328c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800328e:	600e      	str	r6, [r1, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003290:	6988      	ldr	r0, [r1, #24]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003292:	6cae      	ldr	r6, [r5, #72]	; 0x48
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003294:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003298:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 800329c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80032a0:	0400      	lsls	r0, r0, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80032a2:	2b00      	cmp	r3, #0
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80032a4:	ea4f 4010 	mov.w	r0, r0, lsr #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80032a8:	bf0c      	ite	eq
 80032aa:	2380      	moveq	r3, #128	; 0x80
 80032ac:	2300      	movne	r3, #0
 80032ae:	4302      	orrs	r2, r0
                        macconf->PauseLowThreshold |
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80032b0:	f895 0055 	ldrb.w	r0, [r5, #85]	; 0x55
 80032b4:	2801      	cmp	r0, #1
 80032b6:	ea42 0203 	orr.w	r2, r2, r3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80032ba:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80032be:	bf0c      	ite	eq
 80032c0:	2008      	moveq	r0, #8
 80032c2:	2000      	movne	r0, #0
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	ea42 0200 	orr.w	r2, r2, r0
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80032ca:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80032ce:	bf0c      	ite	eq
 80032d0:	2304      	moveq	r3, #4
 80032d2:	2300      	movne	r3, #0
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80032d4:	2801      	cmp	r0, #1
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032d6:	ea43 0302 	orr.w	r3, r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80032da:	bf0c      	ite	eq
 80032dc:	2002      	moveq	r0, #2
 80032de:	2000      	movne	r0, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032e0:	4303      	orrs	r3, r0
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032e2:	2001      	movs	r0, #1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80032e4:	618b      	str	r3, [r1, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 80032e6:	698d      	ldr	r5, [r1, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032e8:	f7ff fc2c 	bl	8002b44 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	619d      	str	r5, [r3, #24]
}
 80032f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f4:	ff20810f 	.word	0xff20810f

080032f8 <ETH_SetDMAConfig>:
{
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80032f8:	6802      	ldr	r2, [r0, #0]
 80032fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
{
 80032fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003300:	6993      	ldr	r3, [r2, #24]
{
 8003302:	4605      	mov	r5, r0
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003304:	4826      	ldr	r0, [pc, #152]	; (80033a0 <ETH_SetDMAConfig+0xa8>)
{
 8003306:	460c      	mov	r4, r1

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003308:	f891 c00d 	ldrb.w	ip, [r1, #13]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800330c:	4018      	ands	r0, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800330e:	7b0b      	ldrb	r3, [r1, #12]
 8003310:	6a27      	ldr	r7, [r4, #32]
 8003312:	2b00      	cmp	r3, #0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003314:	7f4b      	ldrb	r3, [r1, #29]
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003316:	bf0c      	ite	eq
 8003318:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
 800331c:	2600      	movne	r6, #0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800331e:	2b00      	cmp	r3, #0
 8003320:	6963      	ldr	r3, [r4, #20]
 8003322:	ea43 0307 	orr.w	r3, r3, r7
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003326:	7ba7      	ldrb	r7, [r4, #14]
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003328:	bf0c      	ite	eq
 800332a:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 800332e:	2100      	movne	r1, #0
 8003330:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
 8003334:	ea43 5347 	orr.w	r3, r3, r7, lsl #21
                        dmaconf->TransmitThresholdControl |
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003338:	7f27      	ldrb	r7, [r4, #28]
 800333a:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800333e:	7fa7      	ldrb	r7, [r4, #30]
 8003340:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
                        dmaconf->ReceiveThresholdControl |
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003344:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
 8003348:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
 800334c:	4303      	orrs	r3, r0
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800334e:	2001      	movs	r0, #1
 8003350:	4333      	orrs	r3, r6
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003352:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003354:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003356:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003358:	f7ff fbf4 	bl	8002b44 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800335c:	682a      	ldr	r2, [r5, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800335e:	2001      	movs	r0, #1
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003360:	69a1      	ldr	r1, [r4, #24]
  (heth->Instance)->DMAOMR = tmpreg1;
 8003362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003366:	68a3      	ldr	r3, [r4, #8]
  (heth->Instance)->DMAOMR = tmpreg1;
 8003368:	6196      	str	r6, [r2, #24]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800336a:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800336c:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003370:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8003374:	6921      	ldr	r1, [r4, #16]
 8003376:	430b      	orrs	r3, r1
 8003378:	6821      	ldr	r1, [r4, #0]
 800337a:	430b      	orrs	r3, r1
 800337c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800337e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003382:	7921      	ldrb	r1, [r4, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003384:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003388:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800338c:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 800338e:	6814      	ldr	r4, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003390:	f7ff fbd8 	bl	8002b44 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800339a:	601c      	str	r4, [r3, #0]
}
 800339c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800339e:	bf00      	nop
 80033a0:	f8de3f23 	.word	0xf8de3f23

080033a4 <HAL_ETH_Init>:
{
 80033a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 80033a6:	4604      	mov	r4, r0
{
 80033a8:	b0a7      	sub	sp, #156	; 0x9c
  if (heth == NULL)
 80033aa:	2800      	cmp	r0, #0
 80033ac:	f000 80d7 	beq.w	800355e <HAL_ETH_Init+0x1ba>
  if (heth->gState == HAL_ETH_STATE_RESET)
 80033b0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80033b4:	b923      	cbnz	r3, 80033c0 <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 80033b6:	2323      	movs	r3, #35	; 0x23
 80033b8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 80033bc:	f7fe fe5e 	bl	800207c <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c0:	4b6a      	ldr	r3, [pc, #424]	; (800356c <HAL_ETH_Init+0x1c8>)
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80033c2:	68a1      	ldr	r1, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80033d6:	4b66      	ldr	r3, [pc, #408]	; (8003570 <HAL_ETH_Init+0x1cc>)
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80033de:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 80033e6:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80033f6:	f7ff fb9f 	bl	8002b38 <HAL_GetTick>
 80033fa:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003402:	681d      	ldr	r5, [r3, #0]
 8003404:	f015 0501 	ands.w	r5, r5, #1
 8003408:	f040 809c 	bne.w	8003544 <HAL_ETH_Init+0x1a0>
  macDefaultConf.Jabber = ENABLE;
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
  macDefaultConf.ReceiveOwn = ENABLE;
  macDefaultConf.LoopbackMode = DISABLE;
  macDefaultConf.ChecksumOffload = ENABLE;
 800340c:	2601      	movs	r6, #1
  macDefaultConf.ZeroQuantaPause = DISABLE;
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
  macDefaultConf.ReceiveFlowControl = DISABLE;
  macDefaultConf.TransmitFlowControl = DISABLE;
  macDefaultConf.Speed = ETH_SPEED_100M;
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800340e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  macDefaultConf.Watchdog = ENABLE;
 8003412:	f240 1701 	movw	r7, #257	; 0x101
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003416:	f44f 6300 	mov.w	r3, #2048	; 0x800
  macDefaultConf.UnicastPausePacketDetect = DISABLE;

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800341a:	a90d      	add	r1, sp, #52	; 0x34
 800341c:	4620      	mov	r0, r4
  macDefaultConf.ChecksumOffload = ENABLE;
 800341e:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
  macDefaultConf.ReceiveOwn = ENABLE;
 8003422:	f8ad 6052 	strh.w	r6, [sp, #82]	; 0x52
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003426:	950f      	str	r5, [sp, #60]	; 0x3c
  macDefaultConf.LoopbackMode = DISABLE;
 8003428:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
  macDefaultConf.RetryTransmission = DISABLE;
 800342c:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003430:	f88d 5043 	strb.w	r5, [sp, #67]	; 0x43
  macDefaultConf.Watchdog = ENABLE;
 8003434:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003438:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800343a:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800343e:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003440:	f88d 5080 	strb.w	r5, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003444:	9521      	str	r5, [sp, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003446:	f8ad 5088 	strh.w	r5, [sp, #136]	; 0x88
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800344a:	f88d 508a 	strb.w	r5, [sp, #138]	; 0x8a
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800344e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003452:	f7ff fecd 	bl	80031f0 <ETH_SetMACConfig>
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
  dmaDefaultConf.SecondFrameOperate = ENABLE;
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800345a:	4620      	mov	r0, r4
 800345c:	a902      	add	r1, sp, #8
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800345e:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003464:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003468:	f88d 6016 	strb.w	r6, [sp, #22]
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800346c:	f8ad 7014 	strh.w	r7, [sp, #20]
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003470:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003474:	950a      	str	r5, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003476:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800347a:	950c      	str	r5, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800347c:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800347e:	e9cd 3506 	strd	r3, r5, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003482:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003486:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800348c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003490:	f7ff ff32 	bl	80032f8 <ETH_SetDMAConfig>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003494:	68e6      	ldr	r6, [r4, #12]
 8003496:	f104 0c18 	add.w	ip, r4, #24
 800349a:	462a      	mov	r2, r5
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800349c:	4628      	mov	r0, r5
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800349e:	4633      	mov	r3, r6
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80034a0:	6018      	str	r0, [r3, #0]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80034a2:	4619      	mov	r1, r3
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80034a4:	6058      	str	r0, [r3, #4]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80034a6:	2a03      	cmp	r2, #3
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80034a8:	6098      	str	r0, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80034aa:	60d8      	str	r0, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80034ac:	f84c 3b04 	str.w	r3, [ip], #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80034b0:	681f      	ldr	r7, [r3, #0]
 80034b2:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
 80034b6:	f841 7b28 	str.w	r7, [r1], #40
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80034ba:	d052      	beq.n	8003562 <HAL_ETH_Init+0x1be>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80034bc:	60d9      	str	r1, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80034be:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034c0:	3201      	adds	r2, #1
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80034c2:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034c6:	2a04      	cmp	r2, #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80034c8:	601f      	str	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034ca:	460b      	mov	r3, r1
 80034cc:	d1e8      	bne.n	80034a0 <HAL_ETH_Init+0xfc>
  }

  heth->TxDescList.CurTxDesc = 0;

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80034ce:	6821      	ldr	r1, [r4, #0]
  heth->TxDescList.CurTxDesc = 0;
 80034d0:	2200      	movs	r2, #0
 80034d2:	f104 0748 	add.w	r7, r4, #72	; 0x48
    WRITE_REG(dmarxdesc->DESC3, 0x0);
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80034d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80034da:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
  heth->TxDescList.CurTxDesc = 0;
 80034de:	62a2      	str	r2, [r4, #40]	; 0x28

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80034e0:	f244 5ef4 	movw	lr, #17908	; 0x45f4
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80034e4:	610e      	str	r6, [r1, #16]
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80034e6:	6926      	ldr	r6, [r4, #16]
 80034e8:	4633      	mov	r3, r6
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80034ea:	601a      	str	r2, [r3, #0]
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80034ec:	2d03      	cmp	r5, #3
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80034ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80034f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80034f2:	60da      	str	r2, [r3, #12]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80034f4:	f8c3 c000 	str.w	ip, [r3]
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80034f8:	f8c3 e004 	str.w	lr, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80034fc:	6858      	ldr	r0, [r3, #4]
 80034fe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003502:	e9c3 2208 	strd	r2, r2, [r3, #32]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003506:	6058      	str	r0, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003508:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800350c:	f847 3b04 	str.w	r3, [r7], #4
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003510:	d029      	beq.n	8003566 <HAL_ETH_Init+0x1c2>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003512:	60d8      	str	r0, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003514:	3501      	adds	r5, #1
 8003516:	4603      	mov	r3, r0
 8003518:	2d04      	cmp	r5, #4
 800351a:	d1e6      	bne.n	80034ea <HAL_ETH_Init+0x146>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800351c:	2000      	movs	r0, #0
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800351e:	6862      	ldr	r2, [r4, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003520:	4b14      	ldr	r3, [pc, #80]	; (8003574 <HAL_ETH_Init+0x1d0>)
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003522:	65a0      	str	r0, [r4, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003524:	e9c4 0017 	strd	r0, r0, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003528:	e9c4 001a 	strd	r0, r0, [r4, #104]	; 0x68

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800352c:	60ce      	str	r6, [r1, #12]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800352e:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003530:	6419      	str	r1, [r3, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003532:	6812      	ldr	r2, [r2, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
  heth->gState = HAL_ETH_STATE_READY;
 8003536:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003538:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800353c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8003540:	b027      	add	sp, #156	; 0x9c
 8003542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003544:	f7ff faf8 	bl	8002b38 <HAL_GetTick>
 8003548:	1b80      	subs	r0, r0, r6
 800354a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800354e:	f67f af55 	bls.w	80033fc <HAL_ETH_Init+0x58>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003552:	2304      	movs	r3, #4
 8003554:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8003558:	23e0      	movs	r3, #224	; 0xe0
 800355a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_ERROR;
 800355e:	2001      	movs	r0, #1
 8003560:	e7ee      	b.n	8003540 <HAL_ETH_Init+0x19c>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003562:	60de      	str	r6, [r3, #12]
 8003564:	e7ab      	b.n	80034be <HAL_ETH_Init+0x11a>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003566:	60de      	str	r6, [r3, #12]
 8003568:	e7d4      	b.n	8003514 <HAL_ETH_Init+0x170>
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800
 8003570:	40013800 	.word	0x40013800
 8003574:	40028000 	.word	0x40028000

08003578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800357c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800373c <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003582:	4a6c      	ldr	r2, [pc, #432]	; (8003734 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8003584:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003586:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8003588:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800358a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800358e:	43ac      	bics	r4, r5
 8003590:	f040 80b6 	bne.w	8003700 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003594:	684d      	ldr	r5, [r1, #4]
 8003596:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800359a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800359c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035a0:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035a4:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035a6:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035a8:	2f01      	cmp	r7, #1
 80035aa:	d834      	bhi.n	8003616 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 80035ac:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035ae:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80035b2:	68cf      	ldr	r7, [r1, #12]
 80035b4:	fa07 f708 	lsl.w	r7, r7, r8
 80035b8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80035bc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80035be:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035c0:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c4:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80035c8:	409f      	lsls	r7, r3
 80035ca:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80035ce:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80035d0:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d2:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035d4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80035d8:	688f      	ldr	r7, [r1, #8]
 80035da:	fa07 f708 	lsl.w	r7, r7, r8
 80035de:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80035e2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e4:	d119      	bne.n	800361a <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 80035e6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80035ea:	f003 0b07 	and.w	fp, r3, #7
 80035ee:	f04f 0e0f 	mov.w	lr, #15
 80035f2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80035f6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80035fa:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80035fe:	fa0e fe0b 	lsl.w	lr, lr, fp
 8003602:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003606:	690f      	ldr	r7, [r1, #16]
 8003608:	fa07 f70b 	lsl.w	r7, r7, fp
 800360c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8003610:	f8ca 7020 	str.w	r7, [sl, #32]
 8003614:	e001      	b.n	800361a <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003616:	2c03      	cmp	r4, #3
 8003618:	d1da      	bne.n	80035d0 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 800361a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800361c:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003620:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003624:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003628:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 800362c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800362e:	d067      	beq.n	8003700 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003630:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8003634:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003638:	f003 0703 	and.w	r7, r3, #3
 800363c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003640:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003644:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003648:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800364a:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800364e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8003652:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8003656:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800365a:	9401      	str	r4, [sp, #4]
 800365c:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800365e:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8003662:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003666:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800366a:	4c33      	ldr	r4, [pc, #204]	; (8003738 <HAL_GPIO_Init+0x1c0>)
 800366c:	42a0      	cmp	r0, r4
 800366e:	d04e      	beq.n	800370e <HAL_GPIO_Init+0x196>
 8003670:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003674:	42a0      	cmp	r0, r4
 8003676:	d04c      	beq.n	8003712 <HAL_GPIO_Init+0x19a>
 8003678:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800367c:	42a0      	cmp	r0, r4
 800367e:	d04a      	beq.n	8003716 <HAL_GPIO_Init+0x19e>
 8003680:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003684:	42a0      	cmp	r0, r4
 8003686:	d048      	beq.n	800371a <HAL_GPIO_Init+0x1a2>
 8003688:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800368c:	42a0      	cmp	r0, r4
 800368e:	d046      	beq.n	800371e <HAL_GPIO_Init+0x1a6>
 8003690:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003694:	42a0      	cmp	r0, r4
 8003696:	d044      	beq.n	8003722 <HAL_GPIO_Init+0x1aa>
 8003698:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800369c:	42a0      	cmp	r0, r4
 800369e:	d042      	beq.n	8003726 <HAL_GPIO_Init+0x1ae>
 80036a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80036a4:	42a0      	cmp	r0, r4
 80036a6:	d040      	beq.n	800372a <HAL_GPIO_Init+0x1b2>
 80036a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80036ac:	42a0      	cmp	r0, r4
 80036ae:	d03e      	beq.n	800372e <HAL_GPIO_Init+0x1b6>
 80036b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80036b4:	42a0      	cmp	r0, r4
 80036b6:	bf0c      	ite	eq
 80036b8:	2409      	moveq	r4, #9
 80036ba:	240a      	movne	r4, #10
 80036bc:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036be:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036c0:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80036c4:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80036c6:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 80036ca:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80036cc:	bf54      	ite	pl
 80036ce:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80036d0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036d4:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 80036d6:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80036d8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80036da:	bf54      	ite	pl
 80036dc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80036de:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036e2:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 80036e4:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 80036e6:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80036e8:	bf54      	ite	pl
 80036ea:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80036ec:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036f0:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80036f2:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80036f4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80036f6:	bf54      	ite	pl
 80036f8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80036fa:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80036fe:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003700:	3301      	adds	r3, #1
 8003702:	2b10      	cmp	r3, #16
 8003704:	f47f af3e 	bne.w	8003584 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8003708:	b003      	add	sp, #12
 800370a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800370e:	2400      	movs	r4, #0
 8003710:	e7d4      	b.n	80036bc <HAL_GPIO_Init+0x144>
 8003712:	2401      	movs	r4, #1
 8003714:	e7d2      	b.n	80036bc <HAL_GPIO_Init+0x144>
 8003716:	2402      	movs	r4, #2
 8003718:	e7d0      	b.n	80036bc <HAL_GPIO_Init+0x144>
 800371a:	2403      	movs	r4, #3
 800371c:	e7ce      	b.n	80036bc <HAL_GPIO_Init+0x144>
 800371e:	2404      	movs	r4, #4
 8003720:	e7cc      	b.n	80036bc <HAL_GPIO_Init+0x144>
 8003722:	2405      	movs	r4, #5
 8003724:	e7ca      	b.n	80036bc <HAL_GPIO_Init+0x144>
 8003726:	2406      	movs	r4, #6
 8003728:	e7c8      	b.n	80036bc <HAL_GPIO_Init+0x144>
 800372a:	2407      	movs	r4, #7
 800372c:	e7c6      	b.n	80036bc <HAL_GPIO_Init+0x144>
 800372e:	2408      	movs	r4, #8
 8003730:	e7c4      	b.n	80036bc <HAL_GPIO_Init+0x144>
 8003732:	bf00      	nop
 8003734:	40013c00 	.word	0x40013c00
 8003738:	40020000 	.word	0x40020000
 800373c:	40023800 	.word	0x40023800

08003740 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003740:	6903      	ldr	r3, [r0, #16]
 8003742:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003744:	bf14      	ite	ne
 8003746:	2001      	movne	r0, #1
 8003748:	2000      	moveq	r0, #0
 800374a:	4770      	bx	lr

0800374c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800374c:	b10a      	cbz	r2, 8003752 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800374e:	6181      	str	r1, [r0, #24]
  }
}
 8003750:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003752:	0409      	lsls	r1, r1, #16
 8003754:	e7fb      	b.n	800374e <HAL_GPIO_WritePin+0x2>

08003756 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003756:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800375a:	4605      	mov	r5, r0
 800375c:	b085      	sub	sp, #20
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800375e:	f895 42f8 	ldrb.w	r4, [r5, #760]	; 0x2f8
{
 8003762:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8003766:	2c01      	cmp	r4, #1
{
 8003768:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
 800376c:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8003770:	d025      	beq.n	80037be <HAL_HCD_HC_Init+0x68>
 8003772:	2401      	movs	r4, #1
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
 8003774:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
 8003776:	2700      	movs	r7, #0
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003778:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  __HAL_LOCK(hhcd);
 800377c:	f885 42f8 	strb.w	r4, [r5, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003780:	242c      	movs	r4, #44	; 0x2c
 8003782:	fb04 5401 	mla	r4, r4, r1, r5
 8003786:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 800378a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 800378e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8003792:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003796:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
 800379a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 800379e:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 80037a2:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80037a6:	6828      	ldr	r0, [r5, #0]
 80037a8:	f8cd e000 	str.w	lr, [sp]
 80037ac:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80037b0:	f004 f8db 	bl	800796a <USB_HC_Init>
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 80037b4:	f885 72f8 	strb.w	r7, [r5, #760]	; 0x2f8

  return status;
}
 80037b8:	b005      	add	sp, #20
 80037ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hhcd);
 80037be:	2002      	movs	r0, #2
 80037c0:	e7fa      	b.n	80037b8 <HAL_HCD_HC_Init+0x62>

080037c2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80037c2:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 80037c4:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
{
 80037c8:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d009      	beq.n	80037e2 <HAL_HCD_HC_Halt+0x20>
 80037ce:	2301      	movs	r3, #1
 80037d0:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037d4:	6800      	ldr	r0, [r0, #0]
 80037d6:	f004 f95d 	bl	8007a94 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80037da:	2000      	movs	r0, #0
 80037dc:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8

  return status;
}
 80037e0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80037e2:	2002      	movs	r0, #2
 80037e4:	e7fc      	b.n	80037e0 <HAL_HCD_HC_Halt+0x1e>

080037e6 <HAL_HCD_Init>:
{
 80037e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 80037ea:	4606      	mov	r6, r0
{
 80037ec:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 80037ee:	2800      	cmp	r0, #0
 80037f0:	d043      	beq.n	800387a <HAL_HCD_Init+0x94>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80037f2:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
  USBx = hhcd->Instance;
 80037f6:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80037f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037fc:	b91b      	cbnz	r3, 8003806 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 80037fe:	f880 22f8 	strb.w	r2, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8003802:	f007 f871 	bl	800a8e8 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8003806:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003808:	466d      	mov	r5, sp
 800380a:	f106 0804 	add.w	r8, r6, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800380e:	4637      	mov	r7, r6
  hhcd->State = HAL_HCD_STATE_BUSY;
 8003810:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003814:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8003816:	4634      	mov	r4, r6
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003818:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 800381c:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8003820:	bf08      	it	eq
 8003822:	6133      	streq	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
 8003824:	f003 ff11 	bl	800764a <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800382a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800382c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800382e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003830:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003834:	e885 0003 	stmia.w	r5, {r0, r1}
 8003838:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800383c:	6830      	ldr	r0, [r6, #0]
 800383e:	f003 fec3 	bl	80075c8 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003842:	f857 0b10 	ldr.w	r0, [r7], #16
 8003846:	2101      	movs	r1, #1
 8003848:	f003 ff05 	bl	8007656 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800384c:	46ec      	mov	ip, sp
 800384e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003850:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003854:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003856:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800385a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800385e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003862:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8003866:	6830      	ldr	r0, [r6, #0]
 8003868:	f003 ffb2 	bl	80077d0 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 800386c:	2301      	movs	r3, #1
  return HAL_OK;
 800386e:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8003870:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
}
 8003874:	b00a      	add	sp, #40	; 0x28
 8003876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800387a:	2001      	movs	r0, #1
 800387c:	e7fa      	b.n	8003874 <HAL_HCD_Init+0x8e>
	...

08003880 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003880:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
 8003882:	262c      	movs	r6, #44	; 0x2c
{
 8003884:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8003888:	9d05      	ldr	r5, [sp, #20]
  hhcd->hc[ch_num].ep_is_in = direction;
 800388a:	fb06 0601 	mla	r6, r6, r1, r0
{
 800388e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8003892:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003896:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 800389a:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f

  if (token == 0U)
 800389e:	b97f      	cbnz	r7, 80038c0 <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80038a0:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80038a2:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].do_ping = do_ping;
 80038a4:	f886 c03d 	strb.w	ip, [r6, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80038a8:	f886 7042 	strb.w	r7, [r6, #66]	; 0x42
  switch (ep_type)
 80038ac:	d03c      	beq.n	8003928 <HAL_HCD_HC_SubmitRequest+0xa8>
 80038ae:	42bb      	cmp	r3, r7
 80038b0:	d03a      	beq.n	8003928 <HAL_HCD_HC_SubmitRequest+0xa8>
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d11f      	bne.n	80038f6 <HAL_HCD_HC_SubmitRequest+0x76>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038b6:	232c      	movs	r3, #44	; 0x2c
 80038b8:	2200      	movs	r2, #0
 80038ba:	fb03 0301 	mla	r3, r3, r1, r0
 80038be:	e030      	b.n	8003922 <HAL_HCD_HC_SubmitRequest+0xa2>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038c0:	f04f 0c02 	mov.w	ip, #2
 80038c4:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch (ep_type)
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d814      	bhi.n	80038f6 <HAL_HCD_HC_SubmitRequest+0x76>
 80038cc:	a601      	add	r6, pc, #4	; (adr r6, 80038d4 <HAL_HCD_HC_SubmitRequest+0x54>)
 80038ce:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	080038e5 	.word	0x080038e5
 80038d8:	080038b7 	.word	0x080038b7
 80038dc:	08003929 	.word	0x08003929
 80038e0:	08003929 	.word	0x08003929
      if ((token == 1U) && (direction == 0U)) /*send data */
 80038e4:	2f01      	cmp	r7, #1
 80038e6:	d106      	bne.n	80038f6 <HAL_HCD_HC_SubmitRequest+0x76>
 80038e8:	b92a      	cbnz	r2, 80038f6 <HAL_HCD_HC_SubmitRequest+0x76>
        if (length == 0U)
 80038ea:	232c      	movs	r3, #44	; 0x2c
          hhcd->hc[ch_num].toggle_out = 1U;
 80038ec:	fb03 0301 	mla	r3, r3, r1, r0
        if (length == 0U)
 80038f0:	b99c      	cbnz	r4, 800391a <HAL_HCD_HC_SubmitRequest+0x9a>
          hhcd->hc[ch_num].toggle_out = 1U;
 80038f2:	f883 7055 	strb.w	r7, [r3, #85]	; 0x55

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80038f6:	222c      	movs	r2, #44	; 0x2c
 80038f8:	fb02 0301 	mla	r3, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 80038fc:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003900:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_len  = length;
 8003902:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].xfer_count = 0U;
 8003904:	2400      	movs	r4, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003906:	645d      	str	r5, [r3, #68]	; 0x44
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003908:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800390a:	f8a3 4060 	strh.w	r4, [r3, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 800390e:	651c      	str	r4, [r3, #80]	; 0x50
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003910:	7c02      	ldrb	r2, [r0, #16]
 8003912:	6800      	ldr	r0, [r0, #0]
}
 8003914:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003916:	f004 b92b 	b.w	8007b70 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800391a:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 800391e:	2e00      	cmp	r6, #0
 8003920:	d1e9      	bne.n	80038f6 <HAL_HCD_HC_SubmitRequest+0x76>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 8003926:	e7e6      	b.n	80038f6 <HAL_HCD_HC_SubmitRequest+0x76>
      if (direction == 0U)
 8003928:	232c      	movs	r3, #44	; 0x2c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800392a:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 800392e:	b92a      	cbnz	r2, 800393c <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003930:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 8003934:	2e00      	cmp	r6, #0
 8003936:	d0f4      	beq.n	8003922 <HAL_HCD_HC_SubmitRequest+0xa2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003938:	2202      	movs	r2, #2
 800393a:	e7f2      	b.n	8003922 <HAL_HCD_HC_SubmitRequest+0xa2>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800393c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8003940:	2a00      	cmp	r2, #0
 8003942:	d1f9      	bne.n	8003938 <HAL_HCD_HC_SubmitRequest+0xb8>
 8003944:	e7ed      	b.n	8003922 <HAL_HCD_HC_SubmitRequest+0xa2>
 8003946:	bf00      	nop

08003948 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800394c:	f8d0 9000 	ldr.w	r9, [r0]
{
 8003950:	b085      	sub	sp, #20
 8003952:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003954:	4648      	mov	r0, r9
 8003956:	f003 ff36 	bl	80077c6 <USB_GetMode>
 800395a:	2801      	cmp	r0, #1
 800395c:	f040 80f2 	bne.w	8003b44 <HAL_HCD_IRQHandler+0x1fc>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003960:	6820      	ldr	r0, [r4, #0]
 8003962:	f003 ff24 	bl	80077ae <USB_ReadInterrupts>
 8003966:	2800      	cmp	r0, #0
 8003968:	f000 80ec 	beq.w	8003b44 <HAL_HCD_IRQHandler+0x1fc>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800396c:	6820      	ldr	r0, [r4, #0]
 800396e:	f003 ff1e 	bl	80077ae <USB_ReadInterrupts>
 8003972:	0281      	lsls	r1, r0, #10
 8003974:	d503      	bpl.n	800397e <HAL_HCD_IRQHandler+0x36>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800397c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800397e:	6820      	ldr	r0, [r4, #0]
 8003980:	f003 ff15 	bl	80077ae <USB_ReadInterrupts>
 8003984:	02c2      	lsls	r2, r0, #11
 8003986:	d503      	bpl.n	8003990 <HAL_HCD_IRQHandler+0x48>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800398e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003990:	6820      	ldr	r0, [r4, #0]
 8003992:	f003 ff0c 	bl	80077ae <USB_ReadInterrupts>
 8003996:	0143      	lsls	r3, r0, #5
 8003998:	d503      	bpl.n	80039a2 <HAL_HCD_IRQHandler+0x5a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80039a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80039a2:	6820      	ldr	r0, [r4, #0]
 80039a4:	f003 ff03 	bl	80077ae <USB_ReadInterrupts>
 80039a8:	0787      	lsls	r7, r0, #30
 80039aa:	d502      	bpl.n	80039b2 <HAL_HCD_IRQHandler+0x6a>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	2202      	movs	r2, #2
 80039b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80039b2:	6820      	ldr	r0, [r4, #0]
 80039b4:	f003 fefb 	bl	80077ae <USB_ReadInterrupts>
 80039b8:	0086      	lsls	r6, r0, #2
 80039ba:	d515      	bpl.n	80039e8 <HAL_HCD_IRQHandler+0xa0>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80039c2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80039c4:	f8d9 3440 	ldr.w	r3, [r9, #1088]	; 0x440
 80039c8:	07dd      	lsls	r5, r3, #31
 80039ca:	d40d      	bmi.n	80039e8 <HAL_HCD_IRQHandler+0xa0>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80039cc:	2110      	movs	r1, #16
 80039ce:	4648      	mov	r0, r9
 80039d0:	f003 fe70 	bl	80076b4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80039d4:	4648      	mov	r0, r9
 80039d6:	f003 fe93 	bl	8007700 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039da:	2101      	movs	r1, #1
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	f003 ff59 	bl	8007894 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80039e2:	4620      	mov	r0, r4
 80039e4:	f006 ffcc 	bl	800a980 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80039e8:	6820      	ldr	r0, [r4, #0]
 80039ea:	f003 fee0 	bl	80077ae <USB_ReadInterrupts>
 80039ee:	01c0      	lsls	r0, r0, #7
 80039f0:	d53d      	bpl.n	8003a6e <HAL_HCD_IRQHandler+0x126>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f2:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039f4:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80039f8:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80039fa:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80039fe:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a00:	9b03      	ldr	r3, [sp, #12]
 8003a02:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a06:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a08:	9b02      	ldr	r3, [sp, #8]
 8003a0a:	0799      	lsls	r1, r3, #30
 8003a0c:	d509      	bpl.n	8003a22 <HAL_HCD_IRQHandler+0xda>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a0e:	9b02      	ldr	r3, [sp, #8]
 8003a10:	07da      	lsls	r2, r3, #31
 8003a12:	d502      	bpl.n	8003a1a <HAL_HCD_IRQHandler+0xd2>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a14:	4620      	mov	r0, r4
 8003a16:	f006 ffaf 	bl	800a978 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a1a:	9b03      	ldr	r3, [sp, #12]
 8003a1c:	f043 0302 	orr.w	r3, r3, #2
 8003a20:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a22:	9b02      	ldr	r3, [sp, #8]
 8003a24:	071b      	lsls	r3, r3, #28
 8003a26:	d518      	bpl.n	8003a5a <HAL_HCD_IRQHandler+0x112>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a28:	9b03      	ldr	r3, [sp, #12]
 8003a2a:	f043 0308 	orr.w	r3, r3, #8
 8003a2e:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a30:	9b02      	ldr	r3, [sp, #8]
 8003a32:	075f      	lsls	r7, r3, #29
 8003a34:	f140 8091 	bpl.w	8003b5a <HAL_HCD_IRQHandler+0x212>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a38:	69a1      	ldr	r1, [r4, #24]
 8003a3a:	2902      	cmp	r1, #2
 8003a3c:	f040 8085 	bne.w	8003b4a <HAL_HCD_IRQHandler+0x202>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a40:	9b02      	ldr	r3, [sp, #8]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a42:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a44:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a4c:	bf18      	it	ne
 8003a4e:	2101      	movne	r1, #1
 8003a50:	f003 ff20 	bl	8007894 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a54:	4620      	mov	r0, r4
 8003a56:	f006 ff9b 	bl	800a990 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a5a:	9b02      	ldr	r3, [sp, #8]
 8003a5c:	069e      	lsls	r6, r3, #26
 8003a5e:	d503      	bpl.n	8003a68 <HAL_HCD_IRQHandler+0x120>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a60:	9b03      	ldr	r3, [sp, #12]
 8003a62:	f043 0320 	orr.w	r3, r3, #32
 8003a66:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003a6e:	6820      	ldr	r0, [r4, #0]
 8003a70:	f003 fe9d 	bl	80077ae <USB_ReadInterrupts>
 8003a74:	0705      	lsls	r5, r0, #28
 8003a76:	d505      	bpl.n	8003a84 <HAL_HCD_IRQHandler+0x13c>
      HAL_HCD_SOF_Callback(hhcd);
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f006 ff79 	bl	800a970 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	2208      	movs	r2, #8
 8003a82:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	f003 fe92 	bl	80077ae <USB_ReadInterrupts>
 8003a8a:	06c0      	lsls	r0, r0, #27
 8003a8c:	d542      	bpl.n	8003b14 <HAL_HCD_IRQHandler+0x1cc>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a8e:	6826      	ldr	r6, [r4, #0]
 8003a90:	69b3      	ldr	r3, [r6, #24]
 8003a92:	f023 0310 	bic.w	r3, r3, #16
 8003a96:	61b3      	str	r3, [r6, #24]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a98:	6a37      	ldr	r7, [r6, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a9a:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d133      	bne.n	8003b0a <HAL_HCD_IRQHandler+0x1c2>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aa2:	f3c7 180a 	ubfx	r8, r7, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003aa6:	f1b8 0f00 	cmp.w	r8, #0
 8003aaa:	d02e      	beq.n	8003b0a <HAL_HCD_IRQHandler+0x1c2>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003aac:	f007 070f 	and.w	r7, r7, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ab0:	252c      	movs	r5, #44	; 0x2c
 8003ab2:	fb05 4507 	mla	r5, r5, r7, r4
 8003ab6:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8003ab8:	b339      	cbz	r1, 8003b0a <HAL_HCD_IRQHandler+0x1c2>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003aba:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003abc:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8003abe:	4443      	add	r3, r8
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d84e      	bhi.n	8003b62 <HAL_HCD_IRQHandler+0x21a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	f003 fe51 	bl	800776e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003acc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ace:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ad2:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003ad6:	4443      	add	r3, r8
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ad8:	017a      	lsls	r2, r7, #5
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ada:	4588      	cmp	r8, r1
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003adc:	eb06 1747 	add.w	r7, r6, r7, lsl #5
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003ae0:	646b      	str	r3, [r5, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003ae2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003ae4:	4443      	add	r3, r8
 8003ae6:	652b      	str	r3, [r5, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ae8:	693b      	ldr	r3, [r7, #16]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003aea:	d10e      	bne.n	8003b0a <HAL_HCD_IRQHandler+0x1c2>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003aec:	f3c3 43c9 	ubfx	r3, r3, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003af0:	b15b      	cbz	r3, 8003b0a <HAL_HCD_IRQHandler+0x1c2>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003af2:	5993      	ldr	r3, [r2, r6]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003af4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003afc:	5193      	str	r3, [r2, r6]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003afe:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8003b02:	f083 0301 	eor.w	r3, r3, #1
 8003b06:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b0a:	6822      	ldr	r2, [r4, #0]
 8003b0c:	6993      	ldr	r3, [r2, #24]
 8003b0e:	f043 0310 	orr.w	r3, r3, #16
 8003b12:	6193      	str	r3, [r2, #24]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b14:	6820      	ldr	r0, [r4, #0]
 8003b16:	f003 fe4a 	bl	80077ae <USB_ReadInterrupts>
 8003b1a:	0181      	lsls	r1, r0, #6
 8003b1c:	d512      	bpl.n	8003b44 <HAL_HCD_IRQHandler+0x1fc>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b1e:	f04f 0a00 	mov.w	sl, #0
 8003b22:	f509 69a0 	add.w	r9, r9, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b26:	f04f 0802 	mov.w	r8, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b2a:	272c      	movs	r7, #44	; 0x2c
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b2c:	46d3      	mov	fp, sl
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b2e:	6820      	ldr	r0, [r4, #0]
 8003b30:	f003 ffab 	bl	8007a8a <USB_HC_ReadInterrupt>
 8003b34:	9000      	str	r0, [sp, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b36:	68a3      	ldr	r3, [r4, #8]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b38:	6826      	ldr	r6, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b3a:	4553      	cmp	r3, sl
 8003b3c:	d815      	bhi.n	8003b6a <HAL_HCD_IRQHandler+0x222>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b42:	6173      	str	r3, [r6, #20]
}
 8003b44:	b005      	add	sp, #20
 8003b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b4a:	68e3      	ldr	r3, [r4, #12]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d181      	bne.n	8003a54 <HAL_HCD_IRQHandler+0x10c>
          USBx_HOST->HFIR = 60000U;
 8003b50:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003b54:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8003b58:	e77c      	b.n	8003a54 <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f006 ff1c 	bl	800a998 <HAL_HCD_PortDisabled_Callback>
 8003b60:	e77b      	b.n	8003a5a <HAL_HCD_IRQHandler+0x112>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b62:	2304      	movs	r3, #4
 8003b64:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
 8003b68:	e7cf      	b.n	8003b0a <HAL_HCD_IRQHandler+0x1c2>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003b6a:	9a00      	ldr	r2, [sp, #0]
 8003b6c:	f00a 030f 	and.w	r3, sl, #15
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
 8003b74:	07da      	lsls	r2, r3, #31
 8003b76:	f140 80a8 	bpl.w	8003cca <HAL_HCD_IRQHandler+0x382>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003b7a:	f8d9 3000 	ldr.w	r3, [r9]
 8003b7e:	fa5f f58a 	uxtb.w	r5, sl
  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8003b82:	4630      	mov	r0, r6
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003b84:	041b      	lsls	r3, r3, #16
  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8003b86:	4629      	mov	r1, r5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003b88:	f140 8163 	bpl.w	8003e52 <HAL_HCD_IRQHandler+0x50a>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8003b8c:	f003 fe13 	bl	80077b6 <USB_ReadChInterrupts>
 8003b90:	0742      	lsls	r2, r0, #29
 8003b92:	d509      	bpl.n	8003ba8 <HAL_HCD_IRQHandler+0x260>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003b94:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8003b98:	2204      	movs	r2, #4
 8003b9a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b9e:	609a      	str	r2, [r3, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003ba0:	2207      	movs	r2, #7
 8003ba2:	fb07 4305 	mla	r3, r7, r5, r4
 8003ba6:	e00f      	b.n	8003bc8 <HAL_HCD_IRQHandler+0x280>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8003ba8:	4629      	mov	r1, r5
 8003baa:	6820      	ldr	r0, [r4, #0]
 8003bac:	f003 fe03 	bl	80077b6 <USB_ReadChInterrupts>
 8003bb0:	05c3      	lsls	r3, r0, #23
 8003bb2:	d522      	bpl.n	8003bfa <HAL_HCD_IRQHandler+0x2b2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003bb4:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8003bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bbc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8003bc0:	609a      	str	r2, [r3, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003bc8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bcc:	4629      	mov	r1, r5
 8003bce:	6820      	ldr	r0, [r4, #0]
 8003bd0:	f003 ff60 	bl	8007a94 <USB_HC_Halt>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	6820      	ldr	r0, [r4, #0]
 8003bd8:	f003 fded 	bl	80077b6 <USB_ReadChInterrupts>
 8003bdc:	f410 7f00 	tst.w	r0, #512	; 0x200
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003be0:	4629      	mov	r1, r5
 8003be2:	6820      	ldr	r0, [r4, #0]
  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8003be4:	d036      	beq.n	8003c54 <HAL_HCD_IRQHandler+0x30c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003be6:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bea:	f003 ff53 	bl	8007a94 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bf2:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003bf6:	60b3      	str	r3, [r6, #8]
 8003bf8:	e067      	b.n	8003cca <HAL_HCD_IRQHandler+0x382>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	6820      	ldr	r0, [r4, #0]
 8003bfe:	f003 fdda 	bl	80077b6 <USB_ReadChInterrupts>
 8003c02:	0700      	lsls	r0, r0, #28
 8003c04:	d509      	bpl.n	8003c1a <HAL_HCD_IRQHandler+0x2d2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c06:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8003c10:	609a      	str	r2, [r3, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c12:	2206      	movs	r2, #6
 8003c14:	fb07 4305 	mla	r3, r7, r5, r4
 8003c18:	e7d6      	b.n	8003bc8 <HAL_HCD_IRQHandler+0x280>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	6820      	ldr	r0, [r4, #0]
 8003c1e:	f003 fdca 	bl	80077b6 <USB_ReadChInterrupts>
 8003c22:	0541      	lsls	r1, r0, #21
 8003c24:	d50a      	bpl.n	8003c3c <HAL_HCD_IRQHandler+0x2f4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003c26:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8003c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c2e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8003c32:	609a      	str	r2, [r3, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003c34:	2209      	movs	r2, #9
 8003c36:	fb07 4305 	mla	r3, r7, r5, r4
 8003c3a:	e7c5      	b.n	8003bc8 <HAL_HCD_IRQHandler+0x280>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	6820      	ldr	r0, [r4, #0]
 8003c40:	f003 fdb9 	bl	80077b6 <USB_ReadChInterrupts>
 8003c44:	0602      	lsls	r2, r0, #24
 8003c46:	d5c5      	bpl.n	8003bd4 <HAL_HCD_IRQHandler+0x28c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c48:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8003c4c:	2280      	movs	r2, #128	; 0x80
 8003c4e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8003c52:	e7a4      	b.n	8003b9e <HAL_HCD_IRQHandler+0x256>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003c54:	f003 fdaf 	bl	80077b6 <USB_ReadChInterrupts>
 8003c58:	07c3      	lsls	r3, r0, #31
 8003c5a:	d548      	bpl.n	8003cee <HAL_HCD_IRQHandler+0x3a6>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c5c:	f506 60a0 	add.w	r0, r6, #1280	; 0x500
 8003c60:	2320      	movs	r3, #32
 8003c62:	0169      	lsls	r1, r5, #5
 8003c64:	eb00 1645 	add.w	r6, r0, r5, lsl #5
 8003c68:	60b3      	str	r3, [r6, #8]
    if (hhcd->Init.dma_enable != 0U)
 8003c6a:	6923      	ldr	r3, [r4, #16]
 8003c6c:	b143      	cbz	r3, 8003c80 <HAL_HCD_IRQHandler+0x338>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c6e:	6933      	ldr	r3, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c70:	fb07 4205 	mla	r2, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c74:	f3c3 0c12 	ubfx	ip, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c78:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8003c7a:	eba3 030c 	sub.w	r3, r3, ip
 8003c7e:	6513      	str	r3, [r2, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c80:	fb07 4305 	mla	r3, r7, r5, r4
 8003c84:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c86:	f8c3 b05c 	str.w	fp, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c8a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c8e:	60b2      	str	r2, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c90:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8003c94:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8003c98:	d11c      	bne.n	8003cd4 <HAL_HCD_IRQHandler+0x38c>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	6820      	ldr	r0, [r4, #0]
 8003c9e:	f003 fef9 	bl	8007a94 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	60b3      	str	r3, [r6, #8]
    if (hhcd->Init.dma_enable == 1U)
 8003ca6:	6923      	ldr	r3, [r4, #16]
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003ca8:	fb07 4505 	mla	r5, r7, r5, r4
    if (hhcd->Init.dma_enable == 1U)
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d106      	bne.n	8003cbe <HAL_HCD_IRQHandler+0x376>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003cb0:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 8003cb4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cba:	07de      	lsls	r6, r3, #31
 8003cbc:	d505      	bpl.n	8003cca <HAL_HCD_IRQHandler+0x382>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cbe:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8003cc2:	f083 0301 	eor.w	r3, r3, #1
 8003cc6:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003cca:	f10a 0a01 	add.w	sl, sl, #1
 8003cce:	f109 0920 	add.w	r9, r9, #32
 8003cd2:	e730      	b.n	8003b36 <HAL_HCD_IRQHandler+0x1ee>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003cd4:	2a01      	cmp	r2, #1
 8003cd6:	d1e6      	bne.n	8003ca6 <HAL_HCD_IRQHandler+0x35e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003cd8:	580e      	ldr	r6, [r1, r0]
 8003cda:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8003cde:	500e      	str	r6, [r1, r0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	4620      	mov	r0, r4
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ce4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ce8:	f006 fe4e 	bl	800a988 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003cec:	e7db      	b.n	8003ca6 <HAL_HCD_IRQHandler+0x35e>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8003cee:	4629      	mov	r1, r5
 8003cf0:	6820      	ldr	r0, [r4, #0]
 8003cf2:	f003 fd60 	bl	80077b6 <USB_ReadChInterrupts>
 8003cf6:	0680      	lsls	r0, r0, #26
 8003cf8:	d505      	bpl.n	8003d06 <HAL_HCD_IRQHandler+0x3be>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003cfa:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8003cfe:	2320      	movs	r3, #32
 8003d00:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8003d04:	e777      	b.n	8003bf6 <HAL_HCD_IRQHandler+0x2ae>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8003d06:	4629      	mov	r1, r5
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	f003 fd54 	bl	80077b6 <USB_ReadChInterrupts>
 8003d0e:	f010 0202 	ands.w	r2, r0, #2
 8003d12:	d061      	beq.n	8003dd8 <HAL_HCD_IRQHandler+0x490>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d14:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d18:	fb07 4205 	mla	r2, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d1c:	0169      	lsls	r1, r5, #5
 8003d1e:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 8003d22:	f8c3 8008 	str.w	r8, [r3, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d26:	f892 3061 	ldrb.w	r3, [r2, #97]	; 0x61
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d10c      	bne.n	8003d48 <HAL_HCD_IRQHandler+0x400>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d2e:	f240 2301 	movw	r3, #513	; 0x201
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003d32:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d36:	fb07 4305 	mla	r3, r7, r5, r4
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8003d42:	f006 fe21 	bl	800a988 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d46:	e7c0      	b.n	8003cca <HAL_HCD_IRQHandler+0x382>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d48:	2b06      	cmp	r3, #6
 8003d4a:	d102      	bne.n	8003d52 <HAL_HCD_IRQHandler+0x40a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003d4c:	f240 2305 	movw	r3, #517	; 0x205
 8003d50:	e7ef      	b.n	8003d32 <HAL_HCD_IRQHandler+0x3ea>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d52:	2b07      	cmp	r3, #7
 8003d54:	d001      	beq.n	8003d5a <HAL_HCD_IRQHandler+0x412>
 8003d56:	2b09      	cmp	r3, #9
 8003d58:	d10f      	bne.n	8003d7a <HAL_HCD_IRQHandler+0x432>
      hhcd->hc[ch_num].state = HC_HALTED;
 8003d5a:	fb07 4305 	mla	r3, r7, r5, r4
      hhcd->hc[ch_num].ErrCnt++;
 8003d5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].state = HC_HALTED;
 8003d60:	f883 8061 	strb.w	r8, [r3, #97]	; 0x61
      hhcd->hc[ch_num].ErrCnt++;
 8003d64:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d66:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 8003d68:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d6a:	f240 81a9 	bls.w	80040c0 <HAL_HCD_IRQHandler+0x778>
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d6e:	2204      	movs	r2, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d70:	f8c3 b05c 	str.w	fp, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d74:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8003d78:	e7dd      	b.n	8003d36 <HAL_HCD_IRQHandler+0x3ee>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d102      	bne.n	8003d84 <HAL_HCD_IRQHandler+0x43c>
      hhcd->hc[ch_num].state = HC_HALTED;
 8003d7e:	f882 8061 	strb.w	r8, [r2, #97]	; 0x61
 8003d82:	e7d8      	b.n	8003d36 <HAL_HCD_IRQHandler+0x3ee>
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d104      	bne.n	8003d92 <HAL_HCD_IRQHandler+0x44a>
      hhcd->hc[ch_num].state = HC_HALTED;
 8003d88:	fb07 4305 	mla	r3, r7, r5, r4
      hhcd->hc[ch_num].state = HC_HALTED;
 8003d8c:	f883 8061 	strb.w	r8, [r3, #97]	; 0x61
 8003d90:	e7d1      	b.n	8003d36 <HAL_HCD_IRQHandler+0x3ee>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d111      	bne.n	8003dba <HAL_HCD_IRQHandler+0x472>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d96:	fb07 4305 	mla	r3, r7, r5, r4
 8003d9a:	f240 2202 	movw	r2, #514	; 0x202
 8003d9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003da2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003da6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8003daa:	d1c4      	bne.n	8003d36 <HAL_HCD_IRQHandler+0x3ee>
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003dac:	598b      	ldr	r3, [r1, r6]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003db6:	518b      	str	r3, [r1, r6]
 8003db8:	e7bd      	b.n	8003d36 <HAL_HCD_IRQHandler+0x3ee>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d109      	bne.n	8003dd2 <HAL_HCD_IRQHandler+0x48a>
      hhcd->hc[ch_num].ErrCnt++;
 8003dbe:	fb07 4305 	mla	r3, r7, r5, r4
 8003dc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dc4:	3201      	adds	r2, #1
 8003dc6:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003dc8:	f44f 7201 	mov.w	r2, #516	; 0x204
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003dcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003dd0:	e7b1      	b.n	8003d36 <HAL_HCD_IRQHandler+0x3ee>
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d1af      	bne.n	8003d36 <HAL_HCD_IRQHandler+0x3ee>
 8003dd6:	e778      	b.n	8003cca <HAL_HCD_IRQHandler+0x382>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003dd8:	4629      	mov	r1, r5
 8003dda:	6820      	ldr	r0, [r4, #0]
 8003ddc:	9201      	str	r2, [sp, #4]
 8003dde:	f003 fcea 	bl	80077b6 <USB_ReadChInterrupts>
 8003de2:	f010 0340 	ands.w	r3, r0, #64	; 0x40
 8003de6:	d00f      	beq.n	8003e08 <HAL_HCD_IRQHandler+0x4c0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003de8:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8003dec:	2340      	movs	r3, #64	; 0x40
    hhcd->hc[ch_num].state = HC_NYET;
 8003dee:	2105      	movs	r1, #5
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003df0:	9a01      	ldr	r2, [sp, #4]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003df2:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8003df6:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8003df8:	fb07 4305 	mla	r3, r7, r5, r4
 8003dfc:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e00:	65da      	str	r2, [r3, #92]	; 0x5c
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e02:	4629      	mov	r1, r5
 8003e04:	6820      	ldr	r0, [r4, #0]
 8003e06:	e052      	b.n	8003eae <HAL_HCD_IRQHandler+0x566>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8003e08:	4629      	mov	r1, r5
 8003e0a:	6820      	ldr	r0, [r4, #0]
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	f003 fcd2 	bl	80077b6 <USB_ReadChInterrupts>
 8003e12:	06c1      	lsls	r1, r0, #27
 8003e14:	f57f af59 	bpl.w	8003cca <HAL_HCD_IRQHandler+0x382>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e18:	fb07 4205 	mla	r2, r7, r5, r4
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e1c:	6820      	ldr	r0, [r4, #0]
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e1e:	9b01      	ldr	r3, [sp, #4]
 8003e20:	f892 103f 	ldrb.w	r1, [r2, #63]	; 0x3f
 8003e24:	2903      	cmp	r1, #3
 8003e26:	d107      	bne.n	8003e38 <HAL_HCD_IRQHandler+0x4f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e28:	65d3      	str	r3, [r2, #92]	; 0x5c
        hhcd->hc[ch_num].state = HC_NAK;
 8003e2a:	2304      	movs	r3, #4
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e2c:	4629      	mov	r1, r5
        hhcd->hc[ch_num].state = HC_NAK;
 8003e2e:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e32:	f003 fe2f 	bl	8007a94 <USB_HC_Halt>
 8003e36:	e006      	b.n	8003e46 <HAL_HCD_IRQHandler+0x4fe>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e38:	f011 01fd 	ands.w	r1, r1, #253	; 0xfd
 8003e3c:	d103      	bne.n	8003e46 <HAL_HCD_IRQHandler+0x4fe>
      if (hhcd->Init.dma_enable == 0U)
 8003e3e:	6923      	ldr	r3, [r4, #16]
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e40:	65d1      	str	r1, [r2, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f1      	beq.n	8003e2a <HAL_HCD_IRQHandler+0x4e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e46:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8003e4a:	2310      	movs	r3, #16
 8003e4c:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8003e50:	e6d1      	b.n	8003bf6 <HAL_HCD_IRQHandler+0x2ae>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8003e52:	f003 fcb0 	bl	80077b6 <USB_ReadChInterrupts>
 8003e56:	f010 0304 	ands.w	r3, r0, #4
 8003e5a:	d00b      	beq.n	8003e74 <HAL_HCD_IRQHandler+0x52c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e5c:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8003e60:	2304      	movs	r3, #4
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e62:	2207      	movs	r2, #7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e64:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8003e68:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e6a:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_STALL;
 8003e6e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8003e72:	e7c6      	b.n	8003e02 <HAL_HCD_IRQHandler+0x4ba>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8003e74:	4629      	mov	r1, r5
 8003e76:	6820      	ldr	r0, [r4, #0]
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	f003 fc9c 	bl	80077b6 <USB_ReadChInterrupts>
 8003e7e:	0682      	lsls	r2, r0, #26
 8003e80:	d518      	bpl.n	8003eb4 <HAL_HCD_IRQHandler+0x56c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e82:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8003e86:	2220      	movs	r2, #32
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e88:	9b01      	ldr	r3, [sp, #4]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e8a:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8003e8e:	60b2      	str	r2, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e90:	fb07 4205 	mla	r2, r7, r5, r4
 8003e94:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
 8003e98:	2901      	cmp	r1, #1
 8003e9a:	f47f af16 	bne.w	8003cca <HAL_HCD_IRQHandler+0x382>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e9e:	6820      	ldr	r0, [r4, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ea0:	4629      	mov	r1, r5
      hhcd->hc[ch_num].do_ping = 0U;
 8003ea2:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ea6:	f240 3302 	movw	r3, #770	; 0x302
 8003eaa:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eae:	f003 fdf1 	bl	8007a94 <USB_HC_Halt>
 8003eb2:	e70a      	b.n	8003cca <HAL_HCD_IRQHandler+0x382>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	6820      	ldr	r0, [r4, #0]
 8003eb8:	f003 fc7d 	bl	80077b6 <USB_ReadChInterrupts>
 8003ebc:	f410 7200 	ands.w	r2, r0, #512	; 0x200
 8003ec0:	d007      	beq.n	8003ed2 <HAL_HCD_IRQHandler+0x58a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ec2:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8003ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eca:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8003ece:	60b3      	str	r3, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ed0:	e797      	b.n	8003e02 <HAL_HCD_IRQHandler+0x4ba>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	6820      	ldr	r0, [r4, #0]
 8003ed6:	9201      	str	r2, [sp, #4]
 8003ed8:	f003 fc6d 	bl	80077b6 <USB_ReadChInterrupts>
 8003edc:	f010 0301 	ands.w	r3, r0, #1
 8003ee0:	d01b      	beq.n	8003f1a <HAL_HCD_IRQHandler+0x5d2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ee2:	fb07 4305 	mla	r3, r7, r5, r4
 8003ee6:	9a01      	ldr	r2, [sp, #4]
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003ee8:	4629      	mov	r1, r5
 8003eea:	6820      	ldr	r0, [r4, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003eec:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003eee:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ef2:	9301      	str	r3, [sp, #4]
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003ef4:	f003 fc5f 	bl	80077b6 <USB_ReadChInterrupts>
 8003ef8:	0643      	lsls	r3, r0, #25
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003efa:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003efe:	d505      	bpl.n	8003f0c <HAL_HCD_IRQHandler+0x5c4>
      hhcd->hc[ch_num].do_ping = 1U;
 8003f00:	9b01      	ldr	r3, [sp, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f08:	2340      	movs	r3, #64	; 0x40
 8003f0a:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f0c:	2301      	movs	r3, #1
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f0e:	fb07 4205 	mla	r2, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f12:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f14:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f18:	e773      	b.n	8003e02 <HAL_HCD_IRQHandler+0x4ba>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	6820      	ldr	r0, [r4, #0]
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	f003 fc49 	bl	80077b6 <USB_ReadChInterrupts>
 8003f24:	0640      	lsls	r0, r0, #25
 8003f26:	d513      	bpl.n	8003f50 <HAL_HCD_IRQHandler+0x608>
    hhcd->hc[ch_num].state = HC_NYET;
 8003f28:	fb07 4205 	mla	r2, r7, r5, r4
 8003f2c:	2105      	movs	r1, #5
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f2e:	9b01      	ldr	r3, [sp, #4]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f30:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
    hhcd->hc[ch_num].state = HC_NYET;
 8003f34:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8003f38:	2101      	movs	r1, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f3a:	65d3      	str	r3, [r2, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f3c:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    hhcd->hc[ch_num].do_ping = 1U;
 8003f40:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f44:	4629      	mov	r1, r5
 8003f46:	6820      	ldr	r0, [r4, #0]
 8003f48:	f003 fda4 	bl	8007a94 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f4c:	2340      	movs	r3, #64	; 0x40
 8003f4e:	e652      	b.n	8003bf6 <HAL_HCD_IRQHandler+0x2ae>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8003f50:	4629      	mov	r1, r5
 8003f52:	6820      	ldr	r0, [r4, #0]
 8003f54:	f003 fc2f 	bl	80077b6 <USB_ReadChInterrupts>
 8003f58:	0701      	lsls	r1, r0, #28
 8003f5a:	d509      	bpl.n	8003f70 <HAL_HCD_IRQHandler+0x628>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f5c:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8003f60:	2308      	movs	r3, #8
    hhcd->hc[ch_num].state = HC_STALL;
 8003f62:	2206      	movs	r2, #6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f64:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8003f68:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003f6a:	fb07 4305 	mla	r3, r7, r5, r4
 8003f6e:	e77e      	b.n	8003e6e <HAL_HCD_IRQHandler+0x526>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8003f70:	4629      	mov	r1, r5
 8003f72:	6820      	ldr	r0, [r4, #0]
 8003f74:	f003 fc1f 	bl	80077b6 <USB_ReadChInterrupts>
 8003f78:	06c2      	lsls	r2, r0, #27
 8003f7a:	d512      	bpl.n	8003fa2 <HAL_HCD_IRQHandler+0x65a>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f7c:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 8003f80:	2204      	movs	r2, #4
 8003f82:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003f86:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f8a:	f8c3 b05c 	str.w	fp, [r3, #92]	; 0x5c
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003f8e:	b92a      	cbnz	r2, 8003f9c <HAL_HCD_IRQHandler+0x654>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003f90:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8003f94:	b912      	cbnz	r2, 8003f9c <HAL_HCD_IRQHandler+0x654>
        hhcd->hc[ch_num].do_ping = 1U;
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	6820      	ldr	r0, [r4, #0]
 8003fa0:	e747      	b.n	8003e32 <HAL_HCD_IRQHandler+0x4ea>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	6820      	ldr	r0, [r4, #0]
 8003fa6:	f003 fc06 	bl	80077b6 <USB_ReadChInterrupts>
 8003faa:	0603      	lsls	r3, r0, #24
 8003fac:	d524      	bpl.n	8003ff8 <HAL_HCD_IRQHandler+0x6b0>
    if (hhcd->Init.dma_enable == 0U)
 8003fae:	6923      	ldr	r3, [r4, #16]
 8003fb0:	b973      	cbnz	r3, 8003fd0 <HAL_HCD_IRQHandler+0x688>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003fb2:	fb07 4305 	mla	r3, r7, r5, r4
 8003fb6:	2207      	movs	r2, #7
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fb8:	4629      	mov	r1, r5
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003fba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fbe:	6820      	ldr	r0, [r4, #0]
 8003fc0:	f003 fd68 	bl	8007a94 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003fc4:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8003fce:	e612      	b.n	8003bf6 <HAL_HCD_IRQHandler+0x2ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003fd0:	fb07 4305 	mla	r3, r7, r5, r4
 8003fd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fd6:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fd8:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 8003fda:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fdc:	d909      	bls.n	8003ff2 <HAL_HCD_IRQHandler+0x6aa>
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fde:	2204      	movs	r2, #4
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	4620      	mov	r0, r4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003fe4:	f8c3 b05c 	str.w	fp, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fe8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fec:	f006 fccc 	bl	800a988 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ff0:	e7e8      	b.n	8003fc4 <HAL_HCD_IRQHandler+0x67c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ff2:	f883 8060 	strb.w	r8, [r3, #96]	; 0x60
 8003ff6:	e7e5      	b.n	8003fc4 <HAL_HCD_IRQHandler+0x67c>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	6820      	ldr	r0, [r4, #0]
 8003ffc:	f003 fbdb 	bl	80077b6 <USB_ReadChInterrupts>
 8004000:	0540      	lsls	r0, r0, #21
 8004002:	d50f      	bpl.n	8004024 <HAL_HCD_IRQHandler+0x6dc>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004004:	fb07 4305 	mla	r3, r7, r5, r4
 8004008:	2209      	movs	r2, #9
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800400a:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800400e:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004010:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004014:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004016:	eb06 1645 	add.w	r6, r6, r5, lsl #5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800401a:	f003 fd3b 	bl	8007a94 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800401e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004022:	e5e8      	b.n	8003bf6 <HAL_HCD_IRQHandler+0x2ae>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8004024:	4629      	mov	r1, r5
 8004026:	6820      	ldr	r0, [r4, #0]
 8004028:	f003 fbc5 	bl	80077b6 <USB_ReadChInterrupts>
 800402c:	0781      	lsls	r1, r0, #30
 800402e:	f57f ae4c 	bpl.w	8003cca <HAL_HCD_IRQHandler+0x382>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004032:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8004036:	0169      	lsls	r1, r5, #5
 8004038:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 800403c:	f8c3 8008 	str.w	r8, [r3, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004040:	fb07 4305 	mla	r3, r7, r5, r4
 8004044:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8004048:	2a01      	cmp	r2, #1
 800404a:	d123      	bne.n	8004094 <HAL_HCD_IRQHandler+0x74c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800404c:	f240 2201 	movw	r2, #513	; 0x201
 8004050:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004054:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8004058:	3a02      	subs	r2, #2
 800405a:	2a01      	cmp	r2, #1
 800405c:	f63f ae6b 	bhi.w	8003d36 <HAL_HCD_IRQHandler+0x3ee>
        if (hhcd->Init.dma_enable == 0U)
 8004060:	6922      	ldr	r2, [r4, #16]
 8004062:	b932      	cbnz	r2, 8004072 <HAL_HCD_IRQHandler+0x72a>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004064:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8004068:	f082 0201 	eor.w	r2, r2, #1
 800406c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8004070:	e661      	b.n	8003d36 <HAL_HCD_IRQHandler+0x3ee>
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004072:	2a01      	cmp	r2, #1
 8004074:	f47f ae5f 	bne.w	8003d36 <HAL_HCD_IRQHandler+0x3ee>
 8004078:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800407a:	2a00      	cmp	r2, #0
 800407c:	f43f ae5b 	beq.w	8003d36 <HAL_HCD_IRQHandler+0x3ee>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004080:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8004084:	3a01      	subs	r2, #1
 8004086:	440a      	add	r2, r1
 8004088:	fbb2 f2f1 	udiv	r2, r2, r1
          if ((num_packets & 1U) != 0U)
 800408c:	07d2      	lsls	r2, r2, #31
 800408e:	f57f ae52 	bpl.w	8003d36 <HAL_HCD_IRQHandler+0x3ee>
 8004092:	e7e7      	b.n	8004064 <HAL_HCD_IRQHandler+0x71c>
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8004094:	2a03      	cmp	r2, #3
 8004096:	f43f ae79 	beq.w	8003d8c <HAL_HCD_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800409a:	2a04      	cmp	r2, #4
 800409c:	d102      	bne.n	80040a4 <HAL_HCD_IRQHandler+0x75c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800409e:	f240 2202 	movw	r2, #514	; 0x202
 80040a2:	e693      	b.n	8003dcc <HAL_HCD_IRQHandler+0x484>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80040a4:	2a05      	cmp	r2, #5
 80040a6:	d0fa      	beq.n	800409e <HAL_HCD_IRQHandler+0x756>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80040a8:	2a06      	cmp	r2, #6
 80040aa:	d102      	bne.n	80040b2 <HAL_HCD_IRQHandler+0x76a>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80040ac:	f240 2205 	movw	r2, #517	; 0x205
 80040b0:	e68c      	b.n	8003dcc <HAL_HCD_IRQHandler+0x484>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80040b2:	2a07      	cmp	r2, #7
 80040b4:	f43f ae51 	beq.w	8003d5a <HAL_HCD_IRQHandler+0x412>
 80040b8:	2a09      	cmp	r2, #9
 80040ba:	f47f ae06 	bne.w	8003cca <HAL_HCD_IRQHandler+0x382>
 80040be:	e64c      	b.n	8003d5a <HAL_HCD_IRQHandler+0x412>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040c0:	f883 8060 	strb.w	r8, [r3, #96]	; 0x60
 80040c4:	e672      	b.n	8003dac <HAL_HCD_IRQHandler+0x464>

080040c6 <HAL_HCD_Start>:
{
 80040c6:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 80040c8:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
{
 80040cc:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d00c      	beq.n	80040ec <HAL_HCD_Start+0x26>
 80040d2:	2101      	movs	r1, #1
 80040d4:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80040d8:	6800      	ldr	r0, [r0, #0]
 80040da:	f003 fc16 	bl	800790a <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 80040de:	6820      	ldr	r0, [r4, #0]
 80040e0:	f003 faad 	bl	800763e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80040e4:	2000      	movs	r0, #0
 80040e6:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 80040ea:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80040ec:	2002      	movs	r0, #2
 80040ee:	e7fc      	b.n	80040ea <HAL_HCD_Start+0x24>

080040f0 <HAL_HCD_Stop>:
{
 80040f0:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 80040f2:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
{
 80040f6:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d009      	beq.n	8004110 <HAL_HCD_Stop+0x20>
 80040fc:	2301      	movs	r3, #1
 80040fe:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004102:	6800      	ldr	r0, [r0, #0]
 8004104:	f003 fddb 	bl	8007cbe <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004108:	2000      	movs	r0, #0
 800410a:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 800410e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8004110:	2002      	movs	r0, #2
 8004112:	e7fc      	b.n	800410e <HAL_HCD_Stop+0x1e>

08004114 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8004114:	6800      	ldr	r0, [r0, #0]
 8004116:	f003 bbda 	b.w	80078ce <USB_ResetPort>

0800411a <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800411a:	232c      	movs	r3, #44	; 0x2c
 800411c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8004120:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 8004124:	4770      	bx	lr

08004126 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8004126:	232c      	movs	r3, #44	; 0x2c
 8004128:	fb03 0101 	mla	r1, r3, r1, r0
}
 800412c:	6d08      	ldr	r0, [r1, #80]	; 0x50
 800412e:	4770      	bx	lr

08004130 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004130:	6800      	ldr	r0, [r0, #0]
 8004132:	f003 bc15 	b.w	8007960 <USB_GetCurrentFrame>

08004136 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8004136:	6800      	ldr	r0, [r0, #0]
 8004138:	f003 bc07 	b.w	800794a <USB_GetHostSpeed>

0800413c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800413c:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800413e:	4604      	mov	r4, r0
 8004140:	2800      	cmp	r0, #0
 8004142:	d04a      	beq.n	80041da <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004144:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004148:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800414c:	b91b      	cbnz	r3, 8004156 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800414e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004152:	f7fe f803 	bl	800215c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004156:	2324      	movs	r3, #36	; 0x24
 8004158:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004166:	6862      	ldr	r2, [r4, #4]
 8004168:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800416c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004174:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004176:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800417a:	2901      	cmp	r1, #1
 800417c:	d124      	bne.n	80041c8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800417e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004182:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004184:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004186:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004188:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800418c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004190:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004198:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800419a:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800419e:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041a0:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80041a6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041a8:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80041b8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ba:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041c0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 80041c6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041c8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041cc:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041ce:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041d0:	d1d8      	bne.n	8004184 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041d6:	605a      	str	r2, [r3, #4]
 80041d8:	e7d4      	b.n	8004184 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80041da:	2001      	movs	r0, #1
 80041dc:	e7f3      	b.n	80041c6 <HAL_I2C_Init+0x8a>

080041de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041de:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	b2dc      	uxtb	r4, r3
 80041e8:	d11d      	bne.n	8004226 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ea:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d019      	beq.n	8004226 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041f2:	2324      	movs	r3, #36	; 0x24
 80041f4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041f8:	6803      	ldr	r3, [r0, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004208:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4311      	orrs	r1, r2
 800420e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004218:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800421a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800421e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004222:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004224:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004226:	2002      	movs	r0, #2
 8004228:	e7fc      	b.n	8004224 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800422a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800422a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800422c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004230:	2b20      	cmp	r3, #32
 8004232:	b2dc      	uxtb	r4, r3
 8004234:	d11c      	bne.n	8004270 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004236:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800423a:	2b01      	cmp	r3, #1
 800423c:	d018      	beq.n	8004270 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800423e:	2324      	movs	r3, #36	; 0x24
 8004240:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004244:	6803      	ldr	r3, [r0, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800424e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004250:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004254:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004258:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	f042 0201 	orr.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004262:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004264:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004268:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800426c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800426e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004270:	2002      	movs	r0, #2
 8004272:	e7fc      	b.n	800426e <HAL_I2CEx_ConfigDigitalFilter+0x44>

08004274 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004274:	4a02      	ldr	r2, [pc, #8]	; (8004280 <HAL_PWR_EnableBkUpAccess+0xc>)
 8004276:	6813      	ldr	r3, [r2, #0]
 8004278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427c:	6013      	str	r3, [r2, #0]
}
 800427e:	4770      	bx	lr
 8004280:	40007000 	.word	0x40007000

08004284 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004284:	4b19      	ldr	r3, [pc, #100]	; (80042ec <HAL_PWREx_EnableOverDrive+0x68>)
{
 8004286:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800428a:	4c19      	ldr	r4, [pc, #100]	; (80042f0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800428c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004290:	641a      	str	r2, [r3, #64]	; 0x40
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042a4:	f7fe fc48 	bl	8002b38 <HAL_GetTick>
 80042a8:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042aa:	6863      	ldr	r3, [r4, #4]
 80042ac:	03da      	lsls	r2, r3, #15
 80042ae:	d50c      	bpl.n	80042ca <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042b0:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042b2:	4d0f      	ldr	r5, [pc, #60]	; (80042f0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b8:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80042ba:	f7fe fc3d 	bl	8002b38 <HAL_GetTick>
 80042be:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042c0:	686b      	ldr	r3, [r5, #4]
 80042c2:	039b      	lsls	r3, r3, #14
 80042c4:	d50a      	bpl.n	80042dc <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80042c6:	2000      	movs	r0, #0
 80042c8:	e006      	b.n	80042d8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042ca:	f7fe fc35 	bl	8002b38 <HAL_GetTick>
 80042ce:	1b40      	subs	r0, r0, r5
 80042d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80042d4:	d9e9      	bls.n	80042aa <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80042d6:	2003      	movs	r0, #3
}
 80042d8:	b003      	add	sp, #12
 80042da:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042dc:	f7fe fc2c 	bl	8002b38 <HAL_GetTick>
 80042e0:	1b00      	subs	r0, r0, r4
 80042e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80042e6:	d9eb      	bls.n	80042c0 <HAL_PWREx_EnableOverDrive+0x3c>
 80042e8:	e7f5      	b.n	80042d6 <HAL_PWREx_EnableOverDrive+0x52>
 80042ea:	bf00      	nop
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40007000 	.word	0x40007000

080042f4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80042f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80042fc:	4604      	mov	r4, r0
 80042fe:	460e      	mov	r6, r1
 8004300:	4615      	mov	r5, r2
 8004302:	461f      	mov	r7, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004304:	6822      	ldr	r2, [r4, #0]
 8004306:	6893      	ldr	r3, [r2, #8]
 8004308:	4233      	tst	r3, r6
 800430a:	bf14      	ite	ne
 800430c:	2301      	movne	r3, #1
 800430e:	2300      	moveq	r3, #0
 8004310:	42ab      	cmp	r3, r5
 8004312:	d101      	bne.n	8004318 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8004314:	2000      	movs	r0, #0
 8004316:	e012      	b.n	800433e <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8004318:	f1b8 3fff 	cmp.w	r8, #4294967295
 800431c:	d0f3      	beq.n	8004306 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7fe fc0b 	bl	8002b38 <HAL_GetTick>
 8004322:	1bc0      	subs	r0, r0, r7
 8004324:	4540      	cmp	r0, r8
 8004326:	d802      	bhi.n	800432e <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8004328:	f1b8 0f00 	cmp.w	r8, #0
 800432c:	d1ea      	bne.n	8004304 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800432e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004330:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004332:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004336:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800433e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004344 <HAL_QSPI_Init>:
{
 8004344:	b530      	push	{r4, r5, lr}
 8004346:	4604      	mov	r4, r0
 8004348:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800434a:	f7fe fbf5 	bl	8002b38 <HAL_GetTick>
 800434e:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8004350:	2c00      	cmp	r4, #0
 8004352:	d047      	beq.n	80043e4 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004354:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004358:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800435c:	b94a      	cbnz	r2, 8004372 <HAL_QSPI_Init+0x2e>
 800435e:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8004360:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8004362:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8004366:	f7fd ff71 	bl	800224c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800436a:	f241 3288 	movw	r2, #5000	; 0x1388
 800436e:	9b03      	ldr	r3, [sp, #12]
 8004370:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004372:	6820      	ldr	r0, [r4, #0]
 8004374:	68a1      	ldr	r1, [r4, #8]
 8004376:	6802      	ldr	r2, [r0, #0]
 8004378:	3901      	subs	r1, #1
 800437a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800437e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004382:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004384:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004386:	4620      	mov	r0, r4
 8004388:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800438a:	9200      	str	r2, [sp, #0]
 800438c:	2200      	movs	r2, #0
 800438e:	f7ff ffb1 	bl	80042f4 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8004392:	bb10      	cbnz	r0, 80043da <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004394:	6822      	ldr	r2, [r4, #0]
 8004396:	69e5      	ldr	r5, [r4, #28]
 8004398:	68e3      	ldr	r3, [r4, #12]
 800439a:	6811      	ldr	r1, [r2, #0]
 800439c:	432b      	orrs	r3, r5
 800439e:	6a25      	ldr	r5, [r4, #32]
 80043a0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80043a4:	432b      	orrs	r3, r5
 80043a6:	6865      	ldr	r5, [r4, #4]
 80043a8:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 80043ac:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80043b0:	430b      	orrs	r3, r1
 80043b2:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80043b4:	6855      	ldr	r5, [r2, #4]
 80043b6:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80043ba:	430b      	orrs	r3, r1
 80043bc:	6921      	ldr	r1, [r4, #16]
 80043be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80043c2:	4909      	ldr	r1, [pc, #36]	; (80043e8 <HAL_QSPI_Init+0xa4>)
 80043c4:	4029      	ands	r1, r5
 80043c6:	430b      	orrs	r3, r1
 80043c8:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80043ca:	6813      	ldr	r3, [r2, #0]
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80043d2:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80043d4:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80043d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80043da:	2300      	movs	r3, #0
 80043dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80043e0:	b005      	add	sp, #20
 80043e2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80043e4:	2001      	movs	r0, #1
 80043e6:	e7fb      	b.n	80043e0 <HAL_QSPI_Init+0x9c>
 80043e8:	ffe0f8fe 	.word	0xffe0f8fe

080043ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043f0:	4604      	mov	r4, r0
 80043f2:	b340      	cbz	r0, 8004446 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f4:	6803      	ldr	r3, [r0, #0]
 80043f6:	07db      	lsls	r3, r3, #31
 80043f8:	d410      	bmi.n	800441c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	079f      	lsls	r7, r3, #30
 80043fe:	d464      	bmi.n	80044ca <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	0719      	lsls	r1, r3, #28
 8004404:	f100 80aa 	bmi.w	800455c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	075a      	lsls	r2, r3, #29
 800440c:	f100 80cb 	bmi.w	80045a6 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004410:	69a2      	ldr	r2, [r4, #24]
 8004412:	2a00      	cmp	r2, #0
 8004414:	f040 8134 	bne.w	8004680 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8004418:	2000      	movs	r0, #0
 800441a:	e02b      	b.n	8004474 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800441c:	4b96      	ldr	r3, [pc, #600]	; (8004678 <HAL_RCC_OscConfig+0x28c>)
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	f002 020c 	and.w	r2, r2, #12
 8004424:	2a04      	cmp	r2, #4
 8004426:	d007      	beq.n	8004438 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	f002 020c 	and.w	r2, r2, #12
 800442e:	2a08      	cmp	r2, #8
 8004430:	d10b      	bne.n	800444a <HAL_RCC_OscConfig+0x5e>
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	0256      	lsls	r6, r2, #9
 8004436:	d508      	bpl.n	800444a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004438:	4b8f      	ldr	r3, [pc, #572]	; (8004678 <HAL_RCC_OscConfig+0x28c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	039d      	lsls	r5, r3, #14
 800443e:	d5dc      	bpl.n	80043fa <HAL_RCC_OscConfig+0xe>
 8004440:	6863      	ldr	r3, [r4, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1d9      	bne.n	80043fa <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8004446:	2001      	movs	r0, #1
 8004448:	e014      	b.n	8004474 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800444a:	6862      	ldr	r2, [r4, #4]
 800444c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004450:	d113      	bne.n	800447a <HAL_RCC_OscConfig+0x8e>
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004458:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800445a:	f7fe fb6d 	bl	8002b38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	4e86      	ldr	r6, [pc, #536]	; (8004678 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8004460:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	6833      	ldr	r3, [r6, #0]
 8004464:	0398      	lsls	r0, r3, #14
 8004466:	d4c8      	bmi.n	80043fa <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004468:	f7fe fb66 	bl	8002b38 <HAL_GetTick>
 800446c:	1b40      	subs	r0, r0, r5
 800446e:	2864      	cmp	r0, #100	; 0x64
 8004470:	d9f7      	bls.n	8004462 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8004472:	2003      	movs	r0, #3
}
 8004474:	b002      	add	sp, #8
 8004476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800447a:	4d7f      	ldr	r5, [pc, #508]	; (8004678 <HAL_RCC_OscConfig+0x28c>)
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	b992      	cbnz	r2, 80044a6 <HAL_RCC_OscConfig+0xba>
 8004480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	682b      	ldr	r3, [r5, #0]
 8004488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800448e:	f7fe fb53 	bl	8002b38 <HAL_GetTick>
 8004492:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	0399      	lsls	r1, r3, #14
 8004498:	d5af      	bpl.n	80043fa <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449a:	f7fe fb4d 	bl	8002b38 <HAL_GetTick>
 800449e:	1b80      	subs	r0, r0, r6
 80044a0:	2864      	cmp	r0, #100	; 0x64
 80044a2:	d9f7      	bls.n	8004494 <HAL_RCC_OscConfig+0xa8>
 80044a4:	e7e5      	b.n	8004472 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a6:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_OscConfig+0xd0>
 80044ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b0:	602b      	str	r3, [r5, #0]
 80044b2:	682b      	ldr	r3, [r5, #0]
 80044b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b8:	602b      	str	r3, [r5, #0]
 80044ba:	e7ce      	b.n	800445a <HAL_RCC_OscConfig+0x6e>
 80044bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c0:	602b      	str	r3, [r5, #0]
 80044c2:	682b      	ldr	r3, [r5, #0]
 80044c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c8:	e7f6      	b.n	80044b8 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ca:	4b6b      	ldr	r3, [pc, #428]	; (8004678 <HAL_RCC_OscConfig+0x28c>)
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	f012 0f0c 	tst.w	r2, #12
 80044d2:	d007      	beq.n	80044e4 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	f002 020c 	and.w	r2, r2, #12
 80044da:	2a08      	cmp	r2, #8
 80044dc:	d111      	bne.n	8004502 <HAL_RCC_OscConfig+0x116>
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	0252      	lsls	r2, r2, #9
 80044e2:	d40e      	bmi.n	8004502 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e4:	4a64      	ldr	r2, [pc, #400]	; (8004678 <HAL_RCC_OscConfig+0x28c>)
 80044e6:	6813      	ldr	r3, [r2, #0]
 80044e8:	079b      	lsls	r3, r3, #30
 80044ea:	d502      	bpl.n	80044f2 <HAL_RCC_OscConfig+0x106>
 80044ec:	68e3      	ldr	r3, [r4, #12]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d1a9      	bne.n	8004446 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f2:	6813      	ldr	r3, [r2, #0]
 80044f4:	6921      	ldr	r1, [r4, #16]
 80044f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80044fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80044fe:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004500:	e77e      	b.n	8004400 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004502:	68e2      	ldr	r2, [r4, #12]
 8004504:	b1c2      	cbz	r2, 8004538 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8004506:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004508:	4d5b      	ldr	r5, [pc, #364]	; (8004678 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004510:	f7fe fb12 	bl	8002b38 <HAL_GetTick>
 8004514:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004516:	682b      	ldr	r3, [r5, #0]
 8004518:	079f      	lsls	r7, r3, #30
 800451a:	d507      	bpl.n	800452c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	6922      	ldr	r2, [r4, #16]
 8004520:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004524:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004528:	602b      	str	r3, [r5, #0]
 800452a:	e769      	b.n	8004400 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800452c:	f7fe fb04 	bl	8002b38 <HAL_GetTick>
 8004530:	1b80      	subs	r0, r0, r6
 8004532:	2802      	cmp	r0, #2
 8004534:	d9ef      	bls.n	8004516 <HAL_RCC_OscConfig+0x12a>
 8004536:	e79c      	b.n	8004472 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8004538:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453a:	4e4f      	ldr	r6, [pc, #316]	; (8004678 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 800453c:	f022 0201 	bic.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004542:	f7fe faf9 	bl	8002b38 <HAL_GetTick>
 8004546:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	0798      	lsls	r0, r3, #30
 800454c:	f57f af58 	bpl.w	8004400 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004550:	f7fe faf2 	bl	8002b38 <HAL_GetTick>
 8004554:	1b40      	subs	r0, r0, r5
 8004556:	2802      	cmp	r0, #2
 8004558:	d9f6      	bls.n	8004548 <HAL_RCC_OscConfig+0x15c>
 800455a:	e78a      	b.n	8004472 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800455c:	6963      	ldr	r3, [r4, #20]
 800455e:	4d46      	ldr	r5, [pc, #280]	; (8004678 <HAL_RCC_OscConfig+0x28c>)
 8004560:	b183      	cbz	r3, 8004584 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8004562:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800456a:	f7fe fae5 	bl	8002b38 <HAL_GetTick>
 800456e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004570:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004572:	079b      	lsls	r3, r3, #30
 8004574:	f53f af48 	bmi.w	8004408 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004578:	f7fe fade 	bl	8002b38 <HAL_GetTick>
 800457c:	1b80      	subs	r0, r0, r6
 800457e:	2802      	cmp	r0, #2
 8004580:	d9f6      	bls.n	8004570 <HAL_RCC_OscConfig+0x184>
 8004582:	e776      	b.n	8004472 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8004584:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800458c:	f7fe fad4 	bl	8002b38 <HAL_GetTick>
 8004590:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004592:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004594:	079f      	lsls	r7, r3, #30
 8004596:	f57f af37 	bpl.w	8004408 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800459a:	f7fe facd 	bl	8002b38 <HAL_GetTick>
 800459e:	1b80      	subs	r0, r0, r6
 80045a0:	2802      	cmp	r0, #2
 80045a2:	d9f6      	bls.n	8004592 <HAL_RCC_OscConfig+0x1a6>
 80045a4:	e765      	b.n	8004472 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a6:	4b34      	ldr	r3, [pc, #208]	; (8004678 <HAL_RCC_OscConfig+0x28c>)
 80045a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045aa:	00d0      	lsls	r0, r2, #3
 80045ac:	d427      	bmi.n	80045fe <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80045b0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c2:	4d2e      	ldr	r5, [pc, #184]	; (800467c <HAL_RCC_OscConfig+0x290>)
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	05d9      	lsls	r1, r3, #23
 80045c8:	d51b      	bpl.n	8004602 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ca:	68a3      	ldr	r3, [r4, #8]
 80045cc:	4d2a      	ldr	r5, [pc, #168]	; (8004678 <HAL_RCC_OscConfig+0x28c>)
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d127      	bne.n	8004622 <HAL_RCC_OscConfig+0x236>
 80045d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045da:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80045de:	f7fe faab 	bl	8002b38 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e2:	4e25      	ldr	r6, [pc, #148]	; (8004678 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80045e4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80045e8:	079b      	lsls	r3, r3, #30
 80045ea:	d53f      	bpl.n	800466c <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 80045ec:	2f00      	cmp	r7, #0
 80045ee:	f43f af0f 	beq.w	8004410 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f2:	4a21      	ldr	r2, [pc, #132]	; (8004678 <HAL_RCC_OscConfig+0x28c>)
 80045f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80045f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fa:	6413      	str	r3, [r2, #64]	; 0x40
 80045fc:	e708      	b.n	8004410 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 80045fe:	2700      	movs	r7, #0
 8004600:	e7df      	b.n	80045c2 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8004602:	682b      	ldr	r3, [r5, #0]
 8004604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004608:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800460a:	f7fe fa95 	bl	8002b38 <HAL_GetTick>
 800460e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	05da      	lsls	r2, r3, #23
 8004614:	d4d9      	bmi.n	80045ca <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004616:	f7fe fa8f 	bl	8002b38 <HAL_GetTick>
 800461a:	1b80      	subs	r0, r0, r6
 800461c:	2864      	cmp	r0, #100	; 0x64
 800461e:	d9f7      	bls.n	8004610 <HAL_RCC_OscConfig+0x224>
 8004620:	e727      	b.n	8004472 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004622:	b9ab      	cbnz	r3, 8004650 <HAL_RCC_OscConfig+0x264>
 8004624:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004626:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	672b      	str	r3, [r5, #112]	; 0x70
 8004630:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004632:	f023 0304 	bic.w	r3, r3, #4
 8004636:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004638:	f7fe fa7e 	bl	8002b38 <HAL_GetTick>
 800463c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004640:	0798      	lsls	r0, r3, #30
 8004642:	d5d3      	bpl.n	80045ec <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004644:	f7fe fa78 	bl	8002b38 <HAL_GetTick>
 8004648:	1b80      	subs	r0, r0, r6
 800464a:	4540      	cmp	r0, r8
 800464c:	d9f7      	bls.n	800463e <HAL_RCC_OscConfig+0x252>
 800464e:	e710      	b.n	8004472 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004650:	2b05      	cmp	r3, #5
 8004652:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004654:	d103      	bne.n	800465e <HAL_RCC_OscConfig+0x272>
 8004656:	f043 0304 	orr.w	r3, r3, #4
 800465a:	672b      	str	r3, [r5, #112]	; 0x70
 800465c:	e7b9      	b.n	80045d2 <HAL_RCC_OscConfig+0x1e6>
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	672b      	str	r3, [r5, #112]	; 0x70
 8004664:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004666:	f023 0304 	bic.w	r3, r3, #4
 800466a:	e7b5      	b.n	80045d8 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466c:	f7fe fa64 	bl	8002b38 <HAL_GetTick>
 8004670:	1b40      	subs	r0, r0, r5
 8004672:	4540      	cmp	r0, r8
 8004674:	d9b7      	bls.n	80045e6 <HAL_RCC_OscConfig+0x1fa>
 8004676:	e6fc      	b.n	8004472 <HAL_RCC_OscConfig+0x86>
 8004678:	40023800 	.word	0x40023800
 800467c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004680:	4d38      	ldr	r5, [pc, #224]	; (8004764 <HAL_RCC_OscConfig+0x378>)
 8004682:	68ab      	ldr	r3, [r5, #8]
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b08      	cmp	r3, #8
 800468a:	d041      	beq.n	8004710 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 800468c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8004690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004694:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004696:	d12e      	bne.n	80046f6 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8004698:	f7fe fa4e 	bl	8002b38 <HAL_GetTick>
 800469c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469e:	682b      	ldr	r3, [r5, #0]
 80046a0:	0199      	lsls	r1, r3, #6
 80046a2:	d422      	bmi.n	80046ea <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	1e5a      	subs	r2, r3, #1
 80046aa:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80046ae:	430b      	orrs	r3, r1
 80046b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80046b6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80046ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80046bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80046c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046c4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80046c6:	682b      	ldr	r3, [r5, #0]
 80046c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80046ce:	f7fe fa33 	bl	8002b38 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d2:	4d24      	ldr	r5, [pc, #144]	; (8004764 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 80046d4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d6:	682b      	ldr	r3, [r5, #0]
 80046d8:	019a      	lsls	r2, r3, #6
 80046da:	f53f ae9d 	bmi.w	8004418 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046de:	f7fe fa2b 	bl	8002b38 <HAL_GetTick>
 80046e2:	1b00      	subs	r0, r0, r4
 80046e4:	2802      	cmp	r0, #2
 80046e6:	d9f6      	bls.n	80046d6 <HAL_RCC_OscConfig+0x2ea>
 80046e8:	e6c3      	b.n	8004472 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ea:	f7fe fa25 	bl	8002b38 <HAL_GetTick>
 80046ee:	1b80      	subs	r0, r0, r6
 80046f0:	2802      	cmp	r0, #2
 80046f2:	d9d4      	bls.n	800469e <HAL_RCC_OscConfig+0x2b2>
 80046f4:	e6bd      	b.n	8004472 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80046f6:	f7fe fa1f 	bl	8002b38 <HAL_GetTick>
 80046fa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	019b      	lsls	r3, r3, #6
 8004700:	f57f ae8a 	bpl.w	8004418 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004704:	f7fe fa18 	bl	8002b38 <HAL_GetTick>
 8004708:	1b00      	subs	r0, r0, r4
 800470a:	2802      	cmp	r0, #2
 800470c:	d9f6      	bls.n	80046fc <HAL_RCC_OscConfig+0x310>
 800470e:	e6b0      	b.n	8004472 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004710:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8004712:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004714:	f43f ae97 	beq.w	8004446 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800471c:	69e1      	ldr	r1, [r4, #28]
 800471e:	428a      	cmp	r2, r1
 8004720:	f47f ae91 	bne.w	8004446 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004724:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004728:	6a21      	ldr	r1, [r4, #32]
 800472a:	428a      	cmp	r2, r1
 800472c:	f47f ae8b 	bne.w	8004446 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004730:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004734:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004736:	401a      	ands	r2, r3
 8004738:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800473c:	f47f ae83 	bne.w	8004446 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004740:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004742:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004746:	0852      	lsrs	r2, r2, #1
 8004748:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800474a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800474e:	f47f ae7a 	bne.w	8004446 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004752:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004756:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004758:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800475c:	f43f ae5c 	beq.w	8004418 <HAL_RCC_OscConfig+0x2c>
 8004760:	e671      	b.n	8004446 <HAL_RCC_OscConfig+0x5a>
 8004762:	bf00      	nop
 8004764:	40023800 	.word	0x40023800

08004768 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004768:	4913      	ldr	r1, [pc, #76]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800476a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800476c:	688b      	ldr	r3, [r1, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b04      	cmp	r3, #4
 8004774:	d01b      	beq.n	80047ae <HAL_RCC_GetSysClockFreq+0x46>
 8004776:	2b08      	cmp	r3, #8
 8004778:	d11b      	bne.n	80047b2 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800477a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800477c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004780:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004784:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004788:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800478c:	bf1a      	itte	ne
 800478e:	480b      	ldrne	r0, [pc, #44]	; (80047bc <HAL_RCC_GetSysClockFreq+0x54>)
 8004790:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004792:	480b      	ldreq	r0, [pc, #44]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x58>)
 8004794:	fba1 0100 	umull	r0, r1, r1, r0
 8004798:	f7fc fa26 	bl	8000be8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x50>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80047a4:	3301      	adds	r3, #1
 80047a6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80047a8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80047ac:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ae:	4803      	ldr	r0, [pc, #12]	; (80047bc <HAL_RCC_GetSysClockFreq+0x54>)
 80047b0:	e7fc      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80047b2:	4803      	ldr	r0, [pc, #12]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80047b4:	e7fa      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x44>
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800
 80047bc:	017d7840 	.word	0x017d7840
 80047c0:	00f42400 	.word	0x00f42400

080047c4 <HAL_RCC_ClockConfig>:
{
 80047c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80047ca:	4604      	mov	r4, r0
 80047cc:	b910      	cbnz	r0, 80047d4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80047ce:	2001      	movs	r0, #1
}
 80047d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d4:	4a46      	ldr	r2, [pc, #280]	; (80048f0 <HAL_RCC_ClockConfig+0x12c>)
 80047d6:	6813      	ldr	r3, [r2, #0]
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	428b      	cmp	r3, r1
 80047de:	d328      	bcc.n	8004832 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	6822      	ldr	r2, [r4, #0]
 80047e2:	0797      	lsls	r7, r2, #30
 80047e4:	d430      	bmi.n	8004848 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e6:	07d0      	lsls	r0, r2, #31
 80047e8:	d444      	bmi.n	8004874 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047ea:	4a41      	ldr	r2, [pc, #260]	; (80048f0 <HAL_RCC_ClockConfig+0x12c>)
 80047ec:	6813      	ldr	r3, [r2, #0]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	42ab      	cmp	r3, r5
 80047f4:	d867      	bhi.n	80048c6 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f6:	6822      	ldr	r2, [r4, #0]
 80047f8:	0751      	lsls	r1, r2, #29
 80047fa:	d470      	bmi.n	80048de <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fc:	0713      	lsls	r3, r2, #28
 80047fe:	d507      	bpl.n	8004810 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004800:	4a3c      	ldr	r2, [pc, #240]	; (80048f4 <HAL_RCC_ClockConfig+0x130>)
 8004802:	6921      	ldr	r1, [r4, #16]
 8004804:	6893      	ldr	r3, [r2, #8]
 8004806:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800480a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800480e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004810:	f7ff ffaa 	bl	8004768 <HAL_RCC_GetSysClockFreq>
 8004814:	4b37      	ldr	r3, [pc, #220]	; (80048f4 <HAL_RCC_ClockConfig+0x130>)
 8004816:	4a38      	ldr	r2, [pc, #224]	; (80048f8 <HAL_RCC_ClockConfig+0x134>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800481e:	5cd3      	ldrb	r3, [r2, r3]
 8004820:	40d8      	lsrs	r0, r3
 8004822:	4b36      	ldr	r3, [pc, #216]	; (80048fc <HAL_RCC_ClockConfig+0x138>)
 8004824:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004826:	4b36      	ldr	r3, [pc, #216]	; (8004900 <HAL_RCC_ClockConfig+0x13c>)
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	f7fe f8ad 	bl	8002988 <HAL_InitTick>
  return HAL_OK;
 800482e:	2000      	movs	r0, #0
 8004830:	e7ce      	b.n	80047d0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	6813      	ldr	r3, [r2, #0]
 8004834:	f023 030f 	bic.w	r3, r3, #15
 8004838:	430b      	orrs	r3, r1
 800483a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483c:	6813      	ldr	r3, [r2, #0]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	428b      	cmp	r3, r1
 8004844:	d1c3      	bne.n	80047ce <HAL_RCC_ClockConfig+0xa>
 8004846:	e7cb      	b.n	80047e0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	f012 0f04 	tst.w	r2, #4
 800484c:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <HAL_RCC_ClockConfig+0x130>)
 800484e:	d003      	beq.n	8004858 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004850:	6899      	ldr	r1, [r3, #8]
 8004852:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8004856:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004858:	0716      	lsls	r6, r2, #28
 800485a:	d503      	bpl.n	8004864 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800485c:	6899      	ldr	r1, [r3, #8]
 800485e:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8004862:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004864:	4923      	ldr	r1, [pc, #140]	; (80048f4 <HAL_RCC_ClockConfig+0x130>)
 8004866:	68a0      	ldr	r0, [r4, #8]
 8004868:	688b      	ldr	r3, [r1, #8]
 800486a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800486e:	4303      	orrs	r3, r0
 8004870:	608b      	str	r3, [r1, #8]
 8004872:	e7b8      	b.n	80047e6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004874:	6861      	ldr	r1, [r4, #4]
 8004876:	4b1f      	ldr	r3, [pc, #124]	; (80048f4 <HAL_RCC_ClockConfig+0x130>)
 8004878:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487a:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800487c:	d11b      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004882:	d0a4      	beq.n	80047ce <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004884:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004886:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	4f1a      	ldr	r7, [pc, #104]	; (80048f4 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488c:	f022 0203 	bic.w	r2, r2, #3
 8004890:	430a      	orrs	r2, r1
 8004892:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004894:	f7fe f950 	bl	8002b38 <HAL_GetTick>
 8004898:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6862      	ldr	r2, [r4, #4]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80048a6:	d0a0      	beq.n	80047ea <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fe f946 	bl	8002b38 <HAL_GetTick>
 80048ac:	1b80      	subs	r0, r0, r6
 80048ae:	4540      	cmp	r0, r8
 80048b0:	d9f3      	bls.n	800489a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80048b2:	2003      	movs	r0, #3
 80048b4:	e78c      	b.n	80047d0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b6:	2902      	cmp	r1, #2
 80048b8:	d102      	bne.n	80048c0 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ba:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80048be:	e7e0      	b.n	8004882 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c0:	f012 0f02 	tst.w	r2, #2
 80048c4:	e7dd      	b.n	8004882 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	6813      	ldr	r3, [r2, #0]
 80048c8:	f023 030f 	bic.w	r3, r3, #15
 80048cc:	432b      	orrs	r3, r5
 80048ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d0:	6813      	ldr	r3, [r2, #0]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	42ab      	cmp	r3, r5
 80048d8:	f47f af79 	bne.w	80047ce <HAL_RCC_ClockConfig+0xa>
 80048dc:	e78b      	b.n	80047f6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048de:	4905      	ldr	r1, [pc, #20]	; (80048f4 <HAL_RCC_ClockConfig+0x130>)
 80048e0:	68e0      	ldr	r0, [r4, #12]
 80048e2:	688b      	ldr	r3, [r1, #8]
 80048e4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80048e8:	4303      	orrs	r3, r0
 80048ea:	608b      	str	r3, [r1, #8]
 80048ec:	e786      	b.n	80047fc <HAL_RCC_ClockConfig+0x38>
 80048ee:	bf00      	nop
 80048f0:	40023c00 	.word	0x40023c00
 80048f4:	40023800 	.word	0x40023800
 80048f8:	08011b94 	.word	0x08011b94
 80048fc:	20000000 	.word	0x20000000
 8004900:	20000008 	.word	0x20000008

08004904 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004904:	4b04      	ldr	r3, [pc, #16]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004906:	4a05      	ldr	r2, [pc, #20]	; (800491c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800490e:	5cd3      	ldrb	r3, [r2, r3]
 8004910:	4a03      	ldr	r2, [pc, #12]	; (8004920 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004912:	6810      	ldr	r0, [r2, #0]
}
 8004914:	40d8      	lsrs	r0, r3
 8004916:	4770      	bx	lr
 8004918:	40023800 	.word	0x40023800
 800491c:	08011ba4 	.word	0x08011ba4
 8004920:	20000000 	.word	0x20000000

08004924 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004924:	4b04      	ldr	r3, [pc, #16]	; (8004938 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004926:	4a05      	ldr	r2, [pc, #20]	; (800493c <HAL_RCC_GetPCLK2Freq+0x18>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800492e:	5cd3      	ldrb	r3, [r2, r3]
 8004930:	4a03      	ldr	r2, [pc, #12]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004932:	6810      	ldr	r0, [r2, #0]
}
 8004934:	40d8      	lsrs	r0, r3
 8004936:	4770      	bx	lr
 8004938:	40023800 	.word	0x40023800
 800493c:	08011ba4 	.word	0x08011ba4
 8004940:	20000000 	.word	0x20000000

08004944 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004944:	230f      	movs	r3, #15
 8004946:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <HAL_RCC_GetClockConfig+0x34>)
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	f002 0203 	and.w	r2, r2, #3
 8004950:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004958:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004960:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	08db      	lsrs	r3, r3, #3
 8004966:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800496a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <HAL_RCC_GetClockConfig+0x38>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	600b      	str	r3, [r1, #0]
}
 8004976:	4770      	bx	lr
 8004978:	40023800 	.word	0x40023800
 800497c:	40023c00 	.word	0x40023c00

08004980 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004980:	6803      	ldr	r3, [r0, #0]
{
 8004982:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004986:	f013 0601 	ands.w	r6, r3, #1
{
 800498a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800498c:	d00b      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800498e:	4aaa      	ldr	r2, [pc, #680]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004990:	6891      	ldr	r1, [r2, #8]
 8004992:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8004996:	6091      	str	r1, [r2, #8]
 8004998:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800499a:	6891      	ldr	r1, [r2, #8]
 800499c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800499e:	fab6 f686 	clz	r6, r6
 80049a2:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049a4:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049a6:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80049aa:	d012      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049ac:	49a2      	ldr	r1, [pc, #648]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80049ae:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80049b0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049b4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049b8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80049bc:	bf08      	it	eq
 80049be:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049c0:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049c4:	bf16      	itet	ne
 80049c6:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80049ca:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049cc:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049ce:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049d2:	02d8      	lsls	r0, r3, #11
 80049d4:	d510      	bpl.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049d6:	4898      	ldr	r0, [pc, #608]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80049d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80049da:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049de:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049e2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80049e6:	ea42 0201 	orr.w	r2, r2, r1
 80049ea:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049ee:	f000 8184 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80049f2:	2900      	cmp	r1, #0
 80049f4:	bf08      	it	eq
 80049f6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80049f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80049fc:	bf18      	it	ne
 80049fe:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a00:	0699      	lsls	r1, r3, #26
 8004a02:	d531      	bpl.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a04:	4b8c      	ldr	r3, [pc, #560]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a06:	4f8d      	ldr	r7, [pc, #564]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a0e:	641a      	str	r2, [r3, #64]	; 0x40
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a16:	9301      	str	r3, [sp, #4]
 8004a18:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a20:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a22:	f7fe f889 	bl	8002b38 <HAL_GetTick>
 8004a26:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	05da      	lsls	r2, r3, #23
 8004a2c:	f140 8167 	bpl.w	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a30:	4f81      	ldr	r7, [pc, #516]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a34:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004a38:	f040 816c 	bne.w	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a3e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004a42:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004a46:	4a7c      	ldr	r2, [pc, #496]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004a48:	f040 818a 	bne.w	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004a4c:	6891      	ldr	r1, [r2, #8]
 8004a4e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004a52:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004a56:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004a5a:	4301      	orrs	r1, r0
 8004a5c:	6091      	str	r1, [r2, #8]
 8004a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a62:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	06d9      	lsls	r1, r3, #27
 8004a6c:	d50c      	bpl.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a6e:	4a72      	ldr	r2, [pc, #456]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004a70:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004a74:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004a78:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8004a7c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004a80:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004a82:	4301      	orrs	r1, r0
 8004a84:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a88:	045a      	lsls	r2, r3, #17
 8004a8a:	d508      	bpl.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a8c:	496a      	ldr	r1, [pc, #424]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004a8e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004a90:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004a94:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004a98:	4302      	orrs	r2, r0
 8004a9a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a9e:	041f      	lsls	r7, r3, #16
 8004aa0:	d508      	bpl.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aa2:	4965      	ldr	r1, [pc, #404]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004aa4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004aa6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004aaa:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004aae:	4302      	orrs	r2, r0
 8004ab0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ab4:	03d8      	lsls	r0, r3, #15
 8004ab6:	d508      	bpl.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ab8:	495f      	ldr	r1, [pc, #380]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004aba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004abc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004ac0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004ac4:	4302      	orrs	r2, r0
 8004ac6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004aca:	0399      	lsls	r1, r3, #14
 8004acc:	d508      	bpl.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ace:	495a      	ldr	r1, [pc, #360]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004ad0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004ad2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004ad6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004ada:	4302      	orrs	r2, r0
 8004adc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ae0:	065a      	lsls	r2, r3, #25
 8004ae2:	d508      	bpl.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ae4:	4954      	ldr	r1, [pc, #336]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004ae6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004ae8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004aec:	f022 0203 	bic.w	r2, r2, #3
 8004af0:	4302      	orrs	r2, r0
 8004af2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004af6:	061f      	lsls	r7, r3, #24
 8004af8:	d508      	bpl.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004afa:	494f      	ldr	r1, [pc, #316]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004afc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004afe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b02:	f022 020c 	bic.w	r2, r2, #12
 8004b06:	4302      	orrs	r2, r0
 8004b08:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b0c:	05d8      	lsls	r0, r3, #23
 8004b0e:	d508      	bpl.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b10:	4949      	ldr	r1, [pc, #292]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b12:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004b14:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b18:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004b1c:	4302      	orrs	r2, r0
 8004b1e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b22:	0599      	lsls	r1, r3, #22
 8004b24:	d508      	bpl.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b26:	4944      	ldr	r1, [pc, #272]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b28:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004b2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b2e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b32:	4302      	orrs	r2, r0
 8004b34:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b38:	055a      	lsls	r2, r3, #21
 8004b3a:	d508      	bpl.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b3c:	493e      	ldr	r1, [pc, #248]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b40:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b48:	4302      	orrs	r2, r0
 8004b4a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b4e:	051f      	lsls	r7, r3, #20
 8004b50:	d508      	bpl.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b52:	4939      	ldr	r1, [pc, #228]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b56:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b5a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b5e:	4302      	orrs	r2, r0
 8004b60:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b64:	04d8      	lsls	r0, r3, #19
 8004b66:	d508      	bpl.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b68:	4933      	ldr	r1, [pc, #204]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b6a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004b6c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b70:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004b74:	4302      	orrs	r2, r0
 8004b76:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b7a:	0499      	lsls	r1, r3, #18
 8004b7c:	d508      	bpl.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b7e:	492e      	ldr	r1, [pc, #184]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b80:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004b82:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b86:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004b8a:	4302      	orrs	r2, r0
 8004b8c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b90:	025a      	lsls	r2, r3, #9
 8004b92:	d508      	bpl.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b94:	4928      	ldr	r1, [pc, #160]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b96:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004b98:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b9c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004ba0:	4302      	orrs	r2, r0
 8004ba2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ba6:	029f      	lsls	r7, r3, #10
 8004ba8:	d50c      	bpl.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004baa:	4823      	ldr	r0, [pc, #140]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004bac:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004bae:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8004bb2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bb6:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8004bba:	bf08      	it	eq
 8004bbc:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8004bc4:	f013 0f08 	tst.w	r3, #8
 8004bc8:	bf18      	it	ne
 8004bca:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bcc:	0358      	lsls	r0, r3, #13
 8004bce:	d508      	bpl.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bd0:	4919      	ldr	r1, [pc, #100]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004bd2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004bd4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004bdc:	4302      	orrs	r2, r0
 8004bde:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004be2:	0219      	lsls	r1, r3, #8
 8004be4:	d509      	bpl.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004be6:	4914      	ldr	r1, [pc, #80]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004be8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004bec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bf0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004bf4:	4302      	orrs	r2, r0
 8004bf6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bfa:	2e01      	cmp	r6, #1
 8004bfc:	f000 80b4 	beq.w	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004c00:	019a      	lsls	r2, r3, #6
 8004c02:	f100 80b1 	bmi.w	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c06:	2d01      	cmp	r5, #1
 8004c08:	d175      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c0a:	4d0b      	ldr	r5, [pc, #44]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c12:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c14:	f7fd ff90 	bl	8002b38 <HAL_GetTick>
 8004c18:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c1a:	682b      	ldr	r3, [r5, #0]
 8004c1c:	009f      	lsls	r7, r3, #2
 8004c1e:	f100 8127 	bmi.w	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c22:	6822      	ldr	r2, [r4, #0]
 8004c24:	0316      	lsls	r6, r2, #12
 8004c26:	d501      	bpl.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004c28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c2a:	b14b      	cbz	r3, 8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004c2c:	02d0      	lsls	r0, r2, #11
 8004c2e:	d522      	bpl.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c32:	bb03      	cbnz	r3, 8004c76 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8004c34:	e004      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004c36:	bf00      	nop
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c40:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c44:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c4c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6961      	ldr	r1, [r4, #20]
 8004c54:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004c58:	69a1      	ldr	r1, [r4, #24]
 8004c5a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004c5e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c62:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8004c66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004c68:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004c6c:	3901      	subs	r1, #1
 8004c6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004c72:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c76:	0291      	lsls	r1, r2, #10
 8004c78:	d515      	bpl.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004c7a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c80:	d111      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c82:	4982      	ldr	r1, [pc, #520]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004c84:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c88:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c8c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004c90:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004c94:	4303      	orrs	r3, r0
 8004c96:	6960      	ldr	r0, [r4, #20]
 8004c98:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004c9c:	6a20      	ldr	r0, [r4, #32]
 8004c9e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ca6:	0712      	lsls	r2, r2, #28
 8004ca8:	d519      	bpl.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004caa:	4a78      	ldr	r2, [pc, #480]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cac:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cb0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004cb4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004cb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	6961      	ldr	r1, [r4, #20]
 8004cc0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004cc4:	69e1      	ldr	r1, [r4, #28]
 8004cc6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004cce:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004cd2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004cd4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004cde:	4c6b      	ldr	r4, [pc, #428]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce8:	f7fd ff26 	bl	8002b38 <HAL_GetTick>
 8004cec:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	f140 80c4 	bpl.w	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	e009      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8004cfa:	2601      	movs	r6, #1
 8004cfc:	e67c      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7fd ff1b 	bl	8002b38 <HAL_GetTick>
 8004d02:	eba0 0008 	sub.w	r0, r0, r8
 8004d06:	2864      	cmp	r0, #100	; 0x64
 8004d08:	f67f ae8e 	bls.w	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8004d0c:	2003      	movs	r0, #3
}
 8004d0e:	b003      	add	sp, #12
 8004d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d14:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d16:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	f43f ae8e 	beq.w	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d2c:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004d30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d34:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004d36:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d3a:	07db      	lsls	r3, r3, #31
 8004d3c:	f57f ae7e 	bpl.w	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8004d40:	f7fd fefa 	bl	8002b38 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d44:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004d48:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d4c:	0798      	lsls	r0, r3, #30
 8004d4e:	f53f ae75 	bmi.w	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d52:	f7fd fef1 	bl	8002b38 <HAL_GetTick>
 8004d56:	eba0 0008 	sub.w	r0, r0, r8
 8004d5a:	4548      	cmp	r0, r9
 8004d5c:	d9f5      	bls.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8004d5e:	e7d5      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d60:	6891      	ldr	r1, [r2, #8]
 8004d62:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004d66:	e679      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8004d68:	4e48      	ldr	r6, [pc, #288]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d6a:	6833      	ldr	r3, [r6, #0]
 8004d6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d70:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004d72:	f7fd fee1 	bl	8002b38 <HAL_GetTick>
 8004d76:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d78:	6833      	ldr	r3, [r6, #0]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	d472      	bmi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d7e:	6822      	ldr	r2, [r4, #0]
 8004d80:	07d7      	lsls	r7, r2, #31
 8004d82:	d512      	bpl.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004d84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d86:	b983      	cbnz	r3, 8004daa <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d88:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d8c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d94:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	6861      	ldr	r1, [r4, #4]
 8004d9c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004da0:	68a1      	ldr	r1, [r4, #8]
 8004da2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004da6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004daa:	0316      	lsls	r6, r2, #12
 8004dac:	d503      	bpl.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004dae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db4:	d005      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004db6:	02d0      	lsls	r0, r2, #11
 8004db8:	d51e      	bpl.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dc0:	d11a      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dc2:	4932      	ldr	r1, [pc, #200]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dc4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dc8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dd0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004dd4:	4303      	orrs	r3, r0
 8004dd6:	6860      	ldr	r0, [r4, #4]
 8004dd8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004ddc:	68e0      	ldr	r0, [r4, #12]
 8004dde:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004de2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004de6:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8004dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dec:	f020 001f 	bic.w	r0, r0, #31
 8004df0:	3b01      	subs	r3, #1
 8004df2:	4303      	orrs	r3, r0
 8004df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004df8:	01d1      	lsls	r1, r2, #7
 8004dfa:	d511      	bpl.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dfc:	4923      	ldr	r1, [pc, #140]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dfe:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e02:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e06:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004e0a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004e0e:	4303      	orrs	r3, r0
 8004e10:	6860      	ldr	r0, [r4, #4]
 8004e12:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004e16:	6920      	ldr	r0, [r4, #16]
 8004e18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004e1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e20:	0192      	lsls	r2, r2, #6
 8004e22:	d50d      	bpl.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e24:	6923      	ldr	r3, [r4, #16]
 8004e26:	6862      	ldr	r2, [r4, #4]
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004e2e:	68e2      	ldr	r2, [r4, #12]
 8004e30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004e34:	68a2      	ldr	r2, [r4, #8]
 8004e36:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004e3a:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004e40:	4e12      	ldr	r6, [pc, #72]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e42:	6833      	ldr	r3, [r6, #0]
 8004e44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e48:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004e4a:	f7fd fe75 	bl	8002b38 <HAL_GetTick>
 8004e4e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e50:	6833      	ldr	r3, [r6, #0]
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	f53f aed7 	bmi.w	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e58:	f7fd fe6e 	bl	8002b38 <HAL_GetTick>
 8004e5c:	1bc0      	subs	r0, r0, r7
 8004e5e:	2864      	cmp	r0, #100	; 0x64
 8004e60:	d9f6      	bls.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004e62:	e753      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e64:	f7fd fe68 	bl	8002b38 <HAL_GetTick>
 8004e68:	1bc0      	subs	r0, r0, r7
 8004e6a:	2864      	cmp	r0, #100	; 0x64
 8004e6c:	d984      	bls.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004e6e:	e74d      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e70:	f7fd fe62 	bl	8002b38 <HAL_GetTick>
 8004e74:	1b80      	subs	r0, r0, r6
 8004e76:	2864      	cmp	r0, #100	; 0x64
 8004e78:	f67f aecf 	bls.w	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004e7c:	e746      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e7e:	f7fd fe5b 	bl	8002b38 <HAL_GetTick>
 8004e82:	1b40      	subs	r0, r0, r5
 8004e84:	2864      	cmp	r0, #100	; 0x64
 8004e86:	f67f af32 	bls.w	8004cee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004e8a:	e73f      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8004e8c:	40023800 	.word	0x40023800

08004e90 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e90:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004e94:	d13e      	bne.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004e96:	4b2c      	ldr	r3, [pc, #176]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004e9c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8004ea0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8004ea4:	d044      	beq.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8004ea6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8004eaa:	d049      	beq.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 8004eac:	2a00      	cmp	r2, #0
 8004eae:	d149      	bne.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004eb0:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004eb2:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004eb4:	0251      	lsls	r1, r2, #9
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004eb6:	4a24      	ldr	r2, [pc, #144]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ebc:	bf54      	ite	pl
 8004ebe:	4823      	ldrpl	r0, [pc, #140]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004ec0:	4823      	ldrmi	r0, [pc, #140]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004ec2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004ec6:	fbb0 f3f3 	udiv	r3, r0, r3
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004eca:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8004ece:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8004ed2:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004ed4:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004ed8:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004edc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004ee0:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8004ee4:	e012      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004ee6:	481a      	ldr	r0, [pc, #104]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004ee8:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004eea:	fbb0 f3f3 	udiv	r3, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004eee:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004ef2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8004ef6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8004efa:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004efc:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004f00:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004f04:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8004f0e:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8004f12:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004f14:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8004f18:	d114      	bne.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
    saiclocksource = RCC->DCKCFGR1;
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004f1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004f20:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8004f24:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8004f28:	d002      	beq.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8004f2a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8004f2e:	e7bc      	b.n	8004eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004f30:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f32:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004f34:	0252      	lsls	r2, r2, #9
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004f3a:	d4d4      	bmi.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f3c:	4803      	ldr	r0, [pc, #12]	; (8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004f3e:	e7d3      	b.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        frequency = frequency/(tmpreg);
        break;
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f40:	4804      	ldr	r0, [pc, #16]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004f42:	4770      	bx	lr
    switch (saiclocksource)
 8004f44:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8004f46:	4770      	bx	lr
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	00f42400 	.word	0x00f42400
 8004f50:	017d7840 	.word	0x017d7840
 8004f54:	00bb8000 	.word	0x00bb8000

08004f58 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f58:	6802      	ldr	r2, [r0, #0]
{
 8004f5a:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f5c:	68d3      	ldr	r3, [r2, #12]
{
 8004f5e:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f64:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f66:	f7fd fde7 	bl	8002b38 <HAL_GetTick>
 8004f6a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	069b      	lsls	r3, r3, #26
 8004f72:	d501      	bpl.n	8004f78 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004f74:	2000      	movs	r0, #0
}
 8004f76:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f78:	f7fd fdde 	bl	8002b38 <HAL_GetTick>
 8004f7c:	1b40      	subs	r0, r0, r5
 8004f7e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f82:	d9f3      	bls.n	8004f6c <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8004f84:	2003      	movs	r0, #3
 8004f86:	e7f6      	b.n	8004f76 <HAL_RTC_WaitForSynchro+0x1e>

08004f88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004f8a:	6803      	ldr	r3, [r0, #0]
{
 8004f8c:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004f8e:	68dc      	ldr	r4, [r3, #12]
 8004f90:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8004f94:	d117      	bne.n	8004fc6 <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004f96:	68da      	ldr	r2, [r3, #12]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f98:	2704      	movs	r7, #4
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004f9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f9e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004fa0:	f7fd fdca 	bl	8002b38 <HAL_GetTick>
 8004fa4:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004fa6:	682b      	ldr	r3, [r5, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	065b      	lsls	r3, r3, #25
 8004fac:	d400      	bmi.n	8004fb0 <RTC_EnterInitMode+0x28>
 8004fae:	b10c      	cbz	r4, 8004fb4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
}
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fb4:	f7fd fdc0 	bl	8002b38 <HAL_GetTick>
 8004fb8:	1b80      	subs	r0, r0, r6
 8004fba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004fbe:	d9f2      	bls.n	8004fa6 <RTC_EnterInitMode+0x1e>
        status = HAL_ERROR;
 8004fc0:	2401      	movs	r4, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004fc2:	776f      	strb	r7, [r5, #29]
        status = HAL_ERROR;
 8004fc4:	e7ef      	b.n	8004fa6 <RTC_EnterInitMode+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2400      	movs	r4, #0
 8004fc8:	e7f2      	b.n	8004fb0 <RTC_EnterInitMode+0x28>

08004fca <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004fca:	6803      	ldr	r3, [r0, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 8004fd2:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004fd4:	60da      	str	r2, [r3, #12]
{
 8004fd6:	4604      	mov	r4, r0

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	069b      	lsls	r3, r3, #26
 8004fdc:	d501      	bpl.n	8004fe2 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8004fe0:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fe2:	f7ff ffb9 	bl	8004f58 <HAL_RTC_WaitForSynchro>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d0f9      	beq.n	8004fde <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004fea:	2304      	movs	r3, #4
      status = HAL_ERROR;
 8004fec:	2001      	movs	r0, #1
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004fee:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8004ff0:	e7f6      	b.n	8004fe0 <RTC_ExitInitMode+0x16>

08004ff2 <HAL_RTC_Init>:
{
 8004ff2:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d041      	beq.n	800507e <HAL_RTC_Init+0x8c>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ffa:	7f43      	ldrb	r3, [r0, #29]
 8004ffc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005000:	b913      	cbnz	r3, 8005008 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8005002:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8005004:	f7fd f990 	bl	8002328 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005008:	2302      	movs	r3, #2
 800500a:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	06d2      	lsls	r2, r2, #27
 8005012:	d503      	bpl.n	800501c <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_READY;
 8005014:	2301      	movs	r3, #1
 8005016:	2000      	movs	r0, #0
 8005018:	7763      	strb	r3, [r4, #29]
}
 800501a:	bd10      	pop	{r4, pc}
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800501c:	22ca      	movs	r2, #202	; 0xca
    status = RTC_EnterInitMode(hrtc);
 800501e:	4620      	mov	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005020:	625a      	str	r2, [r3, #36]	; 0x24
 8005022:	2253      	movs	r2, #83	; 0x53
 8005024:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8005026:	f7ff ffaf 	bl	8004f88 <RTC_EnterInitMode>
    if (status == HAL_OK)
 800502a:	bb10      	cbnz	r0, 8005072 <HAL_RTC_Init+0x80>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800502c:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800502e:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8005036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503a:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800503c:	6862      	ldr	r2, [r4, #4]
 800503e:	6899      	ldr	r1, [r3, #8]
 8005040:	4302      	orrs	r2, r0
 8005042:	6960      	ldr	r0, [r4, #20]
 8005044:	4302      	orrs	r2, r0
      status = RTC_ExitInitMode(hrtc);
 8005046:	4620      	mov	r0, r4
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005048:	430a      	orrs	r2, r1
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800504a:	68a1      	ldr	r1, [r4, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800504c:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800504e:	68e2      	ldr	r2, [r4, #12]
 8005050:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005058:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 800505a:	f7ff ffb6 	bl	8004fca <RTC_ExitInitMode>
    if (status == HAL_OK)
 800505e:	b940      	cbnz	r0, 8005072 <HAL_RTC_Init+0x80>
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005060:	6823      	ldr	r3, [r4, #0]
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005062:	69a1      	ldr	r1, [r4, #24]
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005066:	f022 0208 	bic.w	r2, r2, #8
 800506a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800506c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800506e:	430a      	orrs	r2, r1
 8005070:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	22ff      	movs	r2, #255	; 0xff
 8005076:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8005078:	2800      	cmp	r0, #0
 800507a:	d0cb      	beq.n	8005014 <HAL_RTC_Init+0x22>
 800507c:	e7cd      	b.n	800501a <HAL_RTC_Init+0x28>
    return HAL_ERROR;
 800507e:	2001      	movs	r0, #1
 8005080:	e7cb      	b.n	800501a <HAL_RTC_Init+0x28>

08005082 <RTC_ByteToBcd2>:
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint32_t bcdhigh = 0U;
 8005082:	2300      	movs	r3, #0

  while (number >= 10U)
 8005084:	2809      	cmp	r0, #9
 8005086:	d803      	bhi.n	8005090 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005088:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800508c:	b2c0      	uxtb	r0, r0
 800508e:	4770      	bx	lr
    number -= 10U;
 8005090:	380a      	subs	r0, #10
    bcdhigh++;
 8005092:	3301      	adds	r3, #1
    number -= 10U;
 8005094:	b2c0      	uxtb	r0, r0
 8005096:	e7f5      	b.n	8005084 <RTC_ByteToBcd2+0x2>

08005098 <HAL_RTC_SetTime>:
{
 8005098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 800509c:	7f03      	ldrb	r3, [r0, #28]
{
 800509e:	4606      	mov	r6, r0
 80050a0:	460f      	mov	r7, r1
 80050a2:	2002      	movs	r0, #2
  __HAL_LOCK(hrtc);
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d042      	beq.n	800512e <HAL_RTC_SetTime+0x96>
 80050a8:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050aa:	7770      	strb	r0, [r6, #29]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050ac:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 80050ae:	7733      	strb	r3, [r6, #28]
  if (Format == RTC_FORMAT_BIN)
 80050b0:	7838      	ldrb	r0, [r7, #0]
 80050b2:	787d      	ldrb	r5, [r7, #1]
 80050b4:	f897 8002 	ldrb.w	r8, [r7, #2]
 80050b8:	2a00      	cmp	r2, #0
 80050ba:	d13a      	bne.n	8005132 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050bc:	688a      	ldr	r2, [r1, #8]
 80050be:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 80050c2:	bf08      	it	eq
 80050c4:	70fa      	strbeq	r2, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80050c6:	f7ff ffdc 	bl	8005082 <RTC_ByteToBcd2>
 80050ca:	4602      	mov	r2, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80050cc:	4628      	mov	r0, r5
 80050ce:	f7ff ffd8 	bl	8005082 <RTC_ByteToBcd2>
 80050d2:	4604      	mov	r4, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80050d4:	4640      	mov	r0, r8
 80050d6:	f7ff ffd4 	bl	8005082 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80050da:	78fd      	ldrb	r5, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80050dc:	ea40 5585 	orr.w	r5, r0, r5, lsl #22
 80050e0:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80050e4:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050e8:	23ca      	movs	r3, #202	; 0xca
  status = RTC_EnterInitMode(hrtc);
 80050ea:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050ec:	624b      	str	r3, [r1, #36]	; 0x24
 80050ee:	2353      	movs	r3, #83	; 0x53
 80050f0:	624b      	str	r3, [r1, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80050f2:	f7ff ff49 	bl	8004f88 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80050f6:	b9a8      	cbnz	r0, 8005124 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80050f8:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 80050fc:	6832      	ldr	r2, [r6, #0]
 80050fe:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8005102:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005104:	6893      	ldr	r3, [r2, #8]
 8005106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800510a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800510c:	6891      	ldr	r1, [r2, #8]
 800510e:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8005112:	4303      	orrs	r3, r0
    status = RTC_ExitInitMode(hrtc);
 8005114:	4630      	mov	r0, r6
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005116:	430b      	orrs	r3, r1
 8005118:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 800511a:	f7ff ff56 	bl	8004fca <RTC_ExitInitMode>
  if (status == HAL_OK)
 800511e:	b908      	cbnz	r0, 8005124 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8005120:	2301      	movs	r3, #1
 8005122:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005124:	6833      	ldr	r3, [r6, #0]
 8005126:	22ff      	movs	r2, #255	; 0xff
 8005128:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 800512a:	2300      	movs	r3, #0
 800512c:	7733      	strb	r3, [r6, #28]
}
 800512e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005132:	688a      	ldr	r2, [r1, #8]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005134:	022d      	lsls	r5, r5, #8
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005136:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800513a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
      sTime->TimeFormat = 0x00U;
 800513e:	bf08      	it	eq
 8005140:	70fa      	strbeq	r2, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005142:	ea45 0308 	orr.w	r3, r5, r8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005146:	78fc      	ldrb	r4, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005148:	ea43 5484 	orr.w	r4, r3, r4, lsl #22
 800514c:	e7cc      	b.n	80050e8 <HAL_RTC_SetTime+0x50>

0800514e <HAL_RTC_SetDate>:
{
 800514e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8005152:	7f03      	ldrb	r3, [r0, #28]
{
 8005154:	4606      	mov	r6, r0
  __HAL_LOCK(hrtc);
 8005156:	2b01      	cmp	r3, #1
 8005158:	f04f 0302 	mov.w	r3, #2
 800515c:	d03b      	beq.n	80051d6 <HAL_RTC_SetDate+0x88>
 800515e:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005160:	7773      	strb	r3, [r6, #29]
  __HAL_LOCK(hrtc);
 8005162:	7730      	strb	r0, [r6, #28]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005164:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005166:	78c8      	ldrb	r0, [r1, #3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005168:	784c      	ldrb	r4, [r1, #1]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800516a:	036d      	lsls	r5, r5, #13
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800516c:	f891 8002 	ldrb.w	r8, [r1, #2]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005170:	bb9a      	cbnz	r2, 80051da <HAL_RTC_SetDate+0x8c>
 8005172:	06e3      	lsls	r3, r4, #27
 8005174:	d503      	bpl.n	800517e <HAL_RTC_SetDate+0x30>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005176:	f024 0410 	bic.w	r4, r4, #16
 800517a:	340a      	adds	r4, #10
 800517c:	704c      	strb	r4, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800517e:	f7ff ff80 	bl	8005082 <RTC_ByteToBcd2>
 8005182:	4607      	mov	r7, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005184:	7848      	ldrb	r0, [r1, #1]
 8005186:	f7ff ff7c 	bl	8005082 <RTC_ByteToBcd2>
 800518a:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800518c:	4640      	mov	r0, r8
 800518e:	f7ff ff78 	bl	8005082 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005192:	ea40 0205 	orr.w	r2, r0, r5
 8005196:	ea42 4507 	orr.w	r5, r2, r7, lsl #16
 800519a:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800519e:	6833      	ldr	r3, [r6, #0]
 80051a0:	22ca      	movs	r2, #202	; 0xca
  status = RTC_EnterInitMode(hrtc);
 80051a2:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051a4:	625a      	str	r2, [r3, #36]	; 0x24
 80051a6:	2253      	movs	r2, #83	; 0x53
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80051aa:	f7ff feed 	bl	8004f88 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80051ae:	b958      	cbnz	r0, 80051c8 <HAL_RTC_SetDate+0x7a>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80051b0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80051b4:	6832      	ldr	r2, [r6, #0]
    status = RTC_ExitInitMode(hrtc);
 80051b6:	4630      	mov	r0, r6
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80051b8:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80051bc:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 80051be:	f7ff ff04 	bl	8004fca <RTC_ExitInitMode>
  if (status == HAL_OK)
 80051c2:	b908      	cbnz	r0, 80051c8 <HAL_RTC_SetDate+0x7a>
    hrtc->State = HAL_RTC_STATE_READY;
 80051c4:	2301      	movs	r3, #1
 80051c6:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051c8:	6833      	ldr	r3, [r6, #0]
 80051ca:	22ff      	movs	r2, #255	; 0xff
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 80051ce:	2300      	movs	r3, #0
 80051d0:	7733      	strb	r3, [r6, #28]
}
 80051d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hrtc);
 80051d6:	4618      	mov	r0, r3
 80051d8:	e7fb      	b.n	80051d2 <HAL_RTC_SetDate+0x84>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80051da:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80051de:	ea45 0308 	orr.w	r3, r5, r8
 80051e2:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 80051e6:	e7da      	b.n	800519e <HAL_RTC_SetDate+0x50>

080051e8 <HAL_RTC_SetAlarm>:
{
 80051e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(hrtc);
 80051ec:	7f03      	ldrb	r3, [r0, #28]
{
 80051ee:	4604      	mov	r4, r0
 80051f0:	2002      	movs	r0, #2
  __HAL_LOCK(hrtc);
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d07b      	beq.n	80052ee <HAL_RTC_SetAlarm+0x106>
 80051f6:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051f8:	6827      	ldr	r7, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051fa:	7760      	strb	r0, [r4, #29]
  __HAL_LOCK(hrtc);
 80051fc:	7723      	strb	r3, [r4, #28]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	7808      	ldrb	r0, [r1, #0]
 8005202:	f891 9001 	ldrb.w	r9, [r1, #1]
 8005206:	f891 b002 	ldrb.w	fp, [r1, #2]
 800520a:	f891 8020 	ldrb.w	r8, [r1, #32]
 800520e:	69ce      	ldr	r6, [r1, #28]
  if (Format == RTC_FORMAT_BIN)
 8005210:	2a00      	cmp	r2, #0
 8005212:	d14d      	bne.n	80052b0 <HAL_RTC_SetAlarm+0xc8>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005214:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005218:	bf08      	it	eq
 800521a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800521c:	f7ff ff31 	bl	8005082 <RTC_ByteToBcd2>
 8005220:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005222:	4648      	mov	r0, r9
 8005224:	f7ff ff2d 	bl	8005082 <RTC_ByteToBcd2>
 8005228:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800522a:	4658      	mov	r0, fp
 800522c:	f7ff ff29 	bl	8005082 <RTC_ByteToBcd2>
 8005230:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005232:	4640      	mov	r0, r8
 8005234:	f7ff ff25 	bl	8005082 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005238:	694b      	ldr	r3, [r1, #20]
 800523a:	ea46 0c03 	orr.w	ip, r6, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800523e:	78ce      	ldrb	r6, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005240:	ea4c 5c86 	orr.w	ip, ip, r6, lsl #22
 8005244:	ea4c 0202 	orr.w	r2, ip, r2
 8005248:	ea42 460a 	orr.w	r6, r2, sl, lsl #16
 800524c:	ea46 2309 	orr.w	r3, r6, r9, lsl #8
 8005250:	ea43 6500 	orr.w	r5, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005254:	698b      	ldr	r3, [r1, #24]
 8005256:	684e      	ldr	r6, [r1, #4]
 8005258:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800525a:	23ca      	movs	r3, #202	; 0xca
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
 800525e:	2353      	movs	r3, #83	; 0x53
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005262:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8005264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005268:	68bb      	ldr	r3, [r7, #8]
  if (sAlarm->Alarm == RTC_ALARM_A)
 800526a:	d142      	bne.n	80052f2 <HAL_RTC_SetAlarm+0x10a>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800526c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005270:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005278:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8005282:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 8005284:	f7fd fc58 	bl	8002b38 <HAL_GetTick>
 8005288:	4680      	mov	r8, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	68df      	ldr	r7, [r3, #12]
 800528e:	f017 0701 	ands.w	r7, r7, #1
 8005292:	d01f      	beq.n	80052d4 <HAL_RTC_SetAlarm+0xec>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005294:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005296:	645e      	str	r6, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800529e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052a0:	22ff      	movs	r2, #255	; 0xff
 80052a2:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hrtc);
 80052a4:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80052a8:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 80052aa:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY;
 80052ac:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80052ae:	e01e      	b.n	80052ee <HAL_RTC_SetAlarm+0x106>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052b0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80052b4:	bf08      	it	eq
 80052b6:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80052b8:	694b      	ldr	r3, [r1, #20]
 80052ba:	431e      	orrs	r6, r3
 80052bc:	ea46 060b 	orr.w	r6, r6, fp
 80052c0:	ea46 4500 	orr.w	r5, r6, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80052c4:	78c8      	ldrb	r0, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80052c6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 80052ca:	ea45 5580 	orr.w	r5, r5, r0, lsl #22
 80052ce:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
 80052d2:	e7bf      	b.n	8005254 <HAL_RTC_SetAlarm+0x6c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052d4:	f7fd fc30 	bl	8002b38 <HAL_GetTick>
 80052d8:	eba0 0008 	sub.w	r0, r0, r8
 80052dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80052e0:	d9d3      	bls.n	800528a <HAL_RTC_SetAlarm+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052e6:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052ea:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80052ec:	7727      	strb	r7, [r4, #28]
}
 80052ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80052f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f6:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052fe:	60bb      	str	r3, [r7, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f463 7320 	orn	r3, r3, #640	; 0x280
 8005308:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 800530a:	f7fd fc15 	bl	8002b38 <HAL_GetTick>
 800530e:	4680      	mov	r8, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	68df      	ldr	r7, [r3, #12]
 8005314:	f017 0702 	ands.w	r7, r7, #2
 8005318:	d005      	beq.n	8005326 <HAL_RTC_SetAlarm+0x13e>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800531a:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800531c:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005324:	e7bb      	b.n	800529e <HAL_RTC_SetAlarm+0xb6>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005326:	f7fd fc07 	bl	8002b38 <HAL_GetTick>
 800532a:	eba0 0008 	sub.w	r0, r0, r8
 800532e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005332:	d9ed      	bls.n	8005310 <HAL_RTC_SetAlarm+0x128>
 8005334:	e7d5      	b.n	80052e2 <HAL_RTC_SetAlarm+0xfa>

08005336 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8005336:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005338:	7f03      	ldrb	r3, [r0, #28]
 800533a:	2b01      	cmp	r3, #1
 800533c:	f04f 0302 	mov.w	r3, #2
 8005340:	d027      	beq.n	8005392 <HAL_RTCEx_SetTimeStamp+0x5c>

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005342:	7743      	strb	r3, [r0, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8005344:	6803      	ldr	r3, [r0, #0]
 8005346:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005348:	f024 0406 	bic.w	r4, r4, #6
 800534c:	64dc      	str	r4, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800534e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005350:	4322      	orrs	r2, r4
 8005352:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800535a:	f022 0208 	bic.w	r2, r2, #8

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800535e:	430a      	orrs	r2, r1

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005360:	21ca      	movs	r1, #202	; 0xca
 8005362:	6259      	str	r1, [r3, #36]	; 0x24
 8005364:	2153      	movs	r1, #83	; 0x53
 8005366:	6259      	str	r1, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005368:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8005372:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800537c:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005384:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005386:	22ff      	movs	r2, #255	; 0xff
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800538a:	2301      	movs	r3, #1
 800538c:	7743      	strb	r3, [r0, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800538e:	2300      	movs	r3, #0
 8005390:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 8005392:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005394:	bd10      	pop	{r4, pc}
	...

08005398 <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005398:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <SAI_Disable.isra.0+0x34>)
 800539a:	f641 3258 	movw	r2, #7000	; 0x1b58
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80053a4:	6802      	ldr	r2, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80053a6:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80053a8:	6811      	ldr	r1, [r2, #0]
 80053aa:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80053ae:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80053b0:	3b01      	subs	r3, #1
 80053b2:	d206      	bcs.n	80053c2 <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80053b4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80053b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053bc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
      break;
 80053c0:	4770      	bx	lr
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80053c2:	6811      	ldr	r1, [r2, #0]
 80053c4:	03c9      	lsls	r1, r1, #15
 80053c6:	d4f3      	bmi.n	80053b0 <SAI_Disable.isra.0+0x18>

  return status;
}
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	20000000 	.word	0x20000000

080053d0 <HAL_SAI_Init>:
{
 80053d0:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 80053d2:	4604      	mov	r4, r0
 80053d4:	2800      	cmp	r0, #0
 80053d6:	f000 80cc 	beq.w	8005572 <HAL_SAI_Init+0x1a2>
  if (hsai->State == HAL_SAI_STATE_RESET)
 80053da:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80053de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80053e2:	b91b      	cbnz	r3, 80053ec <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 80053e4:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80053e8:	f7fd fa7c 	bl	80028e4 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 80053ec:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 80053ee:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 80053f0:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 80053f4:	f7ff ffd0 	bl	8005398 <SAI_Disable.isra.0>
  switch (hsai->Init.SynchroExt)
 80053f8:	68e3      	ldr	r3, [r4, #12]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	f000 80a7 	beq.w	800554e <HAL_SAI_Init+0x17e>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005400:	2b02      	cmp	r3, #2
 8005402:	bf14      	ite	ne
 8005404:	2300      	movne	r3, #0
 8005406:	2320      	moveq	r3, #32
  switch (hsai->Init.Synchro)
 8005408:	68a2      	ldr	r2, [r4, #8]
 800540a:	2a02      	cmp	r2, #2
 800540c:	f000 80a3 	beq.w	8005556 <HAL_SAI_Init+0x186>
 8005410:	2a03      	cmp	r2, #3
 8005412:	f000 809e 	beq.w	8005552 <HAL_SAI_Init+0x182>
 8005416:	2a01      	cmp	r2, #1
 8005418:	bf14      	ite	ne
 800541a:	2500      	movne	r5, #0
 800541c:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005420:	6822      	ldr	r2, [r4, #0]
 8005422:	4955      	ldr	r1, [pc, #340]	; (8005578 <HAL_SAI_Init+0x1a8>)
 8005424:	4855      	ldr	r0, [pc, #340]	; (800557c <HAL_SAI_Init+0x1ac>)
 8005426:	428a      	cmp	r2, r1
 8005428:	d003      	beq.n	8005432 <HAL_SAI_Init+0x62>
 800542a:	4e55      	ldr	r6, [pc, #340]	; (8005580 <HAL_SAI_Init+0x1b0>)
 800542c:	42b2      	cmp	r2, r6
 800542e:	f040 8095 	bne.w	800555c <HAL_SAI_Init+0x18c>
    SAI1->GCR = tmpregisterGCR;
 8005432:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005436:	69e3      	ldr	r3, [r4, #28]
 8005438:	b343      	cbz	r3, 800548c <HAL_SAI_Init+0xbc>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800543a:	428a      	cmp	r2, r1
 800543c:	d003      	beq.n	8005446 <HAL_SAI_Init+0x76>
 800543e:	4b50      	ldr	r3, [pc, #320]	; (8005580 <HAL_SAI_Init+0x1b0>)
 8005440:	429a      	cmp	r2, r3
 8005442:	f040 808e 	bne.w	8005562 <HAL_SAI_Init+0x192>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005446:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800544a:	f7ff fd21 	bl	8004e90 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	4a4c      	ldr	r2, [pc, #304]	; (8005584 <HAL_SAI_Init+0x1b4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d002      	beq.n	800545c <HAL_SAI_Init+0x8c>
 8005456:	3220      	adds	r2, #32
 8005458:	4293      	cmp	r3, r2
 800545a:	d103      	bne.n	8005464 <HAL_SAI_Init+0x94>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800545c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005460:	f7ff fd16 	bl	8004e90 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005464:	220a      	movs	r2, #10
 8005466:	69e3      	ldr	r3, [r4, #28]
 8005468:	4350      	muls	r0, r2
 800546a:	025b      	lsls	r3, r3, #9
 800546c:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8005470:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10) > 8)
 8005474:	fb02 0013 	mls	r0, r2, r3, r0
 8005478:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1;
 800547a:	bf08      	it	eq
 800547c:	3301      	addeq	r3, #1
 800547e:	6223      	str	r3, [r4, #32]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005480:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005482:	2b04      	cmp	r3, #4
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005484:	bf02      	ittt	eq
 8005486:	6a23      	ldreq	r3, [r4, #32]
 8005488:	085b      	lsreq	r3, r3, #1
 800548a:	6223      	streq	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800548c:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800548e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005490:	f033 0102 	bics.w	r1, r3, #2
 8005494:	d167      	bne.n	8005566 <HAL_SAI_Init+0x196>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005496:	2a01      	cmp	r2, #1
 8005498:	bf18      	it	ne
 800549a:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800549e:	6822      	ldr	r2, [r4, #0]
 80054a0:	4839      	ldr	r0, [pc, #228]	; (8005588 <HAL_SAI_Init+0x1b8>)
 80054a2:	6816      	ldr	r6, [r2, #0]
 80054a4:	4030      	ands	r0, r6
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054a6:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80054a8:	4333      	orrs	r3, r6
 80054aa:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80054ac:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054ae:	4333      	orrs	r3, r6
 80054b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80054b2:	6810      	ldr	r0, [r2, #0]
 80054b4:	4333      	orrs	r3, r6
 80054b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054b8:	4333      	orrs	r3, r6
 80054ba:	6926      	ldr	r6, [r4, #16]
 80054bc:	4333      	orrs	r3, r6
 80054be:	6966      	ldr	r6, [r4, #20]
 80054c0:	4333      	orrs	r3, r6
 80054c2:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80054c4:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054c6:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80054ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80054cc:	432b      	orrs	r3, r5
 80054ce:	430b      	orrs	r3, r1
 80054d0:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80054d2:	6853      	ldr	r3, [r2, #4]
 80054d4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80054d8:	f023 030f 	bic.w	r3, r3, #15
 80054dc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80054de:	69a3      	ldr	r3, [r4, #24]
 80054e0:	6851      	ldr	r1, [r2, #4]
 80054e2:	4303      	orrs	r3, r0
 80054e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80054e6:	4303      	orrs	r3, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80054e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80054ea:	430b      	orrs	r3, r1
 80054ec:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80054ee:	4b27      	ldr	r3, [pc, #156]	; (800558c <HAL_SAI_Init+0x1bc>)
 80054f0:	6891      	ldr	r1, [r2, #8]
 80054f2:	400b      	ands	r3, r1
 80054f4:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80054f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80054f8:	6891      	ldr	r1, [r2, #8]
 80054fa:	4303      	orrs	r3, r0
 80054fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80054fe:	4303      	orrs	r3, r0
 8005500:	430b      	orrs	r3, r1
 8005502:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005504:	3901      	subs	r1, #1
 8005506:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005508:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800550a:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800550c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005510:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005512:	68d3      	ldr	r3, [r2, #12]
 8005514:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8005518:	f023 030f 	bic.w	r3, r3, #15
 800551c:	041b      	lsls	r3, r3, #16
 800551e:	0c1b      	lsrs	r3, r3, #16
 8005520:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005522:	68d1      	ldr	r1, [r2, #12]
 8005524:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 8005528:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800552a:	2000      	movs	r0, #0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800552c:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800552e:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005530:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005534:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005536:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005538:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800553c:	60d3      	str	r3, [r2, #12]
  hsai->State = HAL_SAI_STATE_READY;
 800553e:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005540:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8005544:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8005548:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 800554c:	bd70      	pop	{r4, r5, r6, pc}
  switch (hsai->Init.SynchroExt)
 800554e:	2310      	movs	r3, #16
 8005550:	e75a      	b.n	8005408 <HAL_SAI_Init+0x38>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005552:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005556:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800555a:	e761      	b.n	8005420 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 800555c:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
 8005560:	e769      	b.n	8005436 <HAL_SAI_Init+0x66>
    uint32_t freq = 0;
 8005562:	2000      	movs	r0, #0
 8005564:	e773      	b.n	800544e <HAL_SAI_Init+0x7e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005566:	2a01      	cmp	r2, #1
 8005568:	bf14      	ite	ne
 800556a:	2100      	movne	r1, #0
 800556c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8005570:	e795      	b.n	800549e <HAL_SAI_Init+0xce>
    return HAL_ERROR;
 8005572:	2001      	movs	r0, #1
 8005574:	e7ea      	b.n	800554c <HAL_SAI_Init+0x17c>
 8005576:	bf00      	nop
 8005578:	40015804 	.word	0x40015804
 800557c:	40015000 	.word	0x40015000
 8005580:	40015824 	.word	0x40015824
 8005584:	40015c04 	.word	0x40015c04
 8005588:	ff05c010 	.word	0xff05c010
 800558c:	fff88000 	.word	0xfff88000

08005590 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8005590:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800559c:	4770      	bx	lr

0800559e <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800559e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055a0:	4605      	mov	r5, r0
 80055a2:	b089      	sub	sp, #36	; 0x24
 80055a4:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80055a6:	f7fd fac7 	bl	8002b38 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 80055aa:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 80055ac:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80055ae:	2108      	movs	r1, #8
 80055b0:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 80055b2:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80055b6:	f001 fdaf 	bl	8007118 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80055ba:	4604      	mov	r4, r0
 80055bc:	b9d8      	cbnz	r0, 80055f6 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80055be:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80055c0:	6828      	ldr	r0, [r5, #0]
 80055c2:	0409      	lsls	r1, r1, #16
 80055c4:	f001 fe52 	bl	800726c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80055c8:	4604      	mov	r4, r0
 80055ca:	b9a0      	cbnz	r0, 80055f6 <SD_FindSCR+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 80055cc:	f04f 32ff 	mov.w	r2, #4294967295
 80055d0:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80055d2:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80055d4:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80055d6:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 80055d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80055dc:	2302      	movs	r3, #2
 80055de:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80055e2:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80055e4:	a902      	add	r1, sp, #8
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80055e6:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80055e8:	f001 fccd 	bl	8006f86 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80055ec:	6828      	ldr	r0, [r5, #0]
 80055ee:	f001 fe6d 	bl	80072cc <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80055f2:	4604      	mov	r4, r0
 80055f4:	b190      	cbz	r0, 800561c <SD_FindSCR+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80055f6:	4620      	mov	r0, r4
 80055f8:	b009      	add	sp, #36	; 0x24
 80055fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80055fc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80055fe:	0293      	lsls	r3, r2, #10
 8005600:	d512      	bpl.n	8005628 <SD_FindSCR+0x8a>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8005602:	f001 fc9f 	bl	8006f44 <SDMMC_ReadFIFO>
 8005606:	ab08      	add	r3, sp, #32
 8005608:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 800560c:	3401      	adds	r4, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800560e:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005612:	f7fd fa91 	bl	8002b38 <HAL_GetTick>
 8005616:	1bc0      	subs	r0, r0, r7
 8005618:	3001      	adds	r0, #1
 800561a:	d023      	beq.n	8005664 <SD_FindSCR+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800561c:	6828      	ldr	r0, [r5, #0]
 800561e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005620:	f012 0f2a 	tst.w	r2, #42	; 0x2a
 8005624:	d0ea      	beq.n	80055fc <SD_FindSCR+0x5e>
 8005626:	e002      	b.n	800562e <SD_FindSCR+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8005628:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800562a:	0491      	lsls	r1, r2, #18
 800562c:	d4f1      	bmi.n	8005612 <SD_FindSCR+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800562e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005630:	0712      	lsls	r2, r2, #28
 8005632:	d502      	bpl.n	800563a <SD_FindSCR+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005634:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005636:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8005638:	e7dd      	b.n	80055f6 <SD_FindSCR+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800563a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800563c:	0793      	lsls	r3, r2, #30
 800563e:	d501      	bpl.n	8005644 <SD_FindSCR+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005640:	2402      	movs	r4, #2
 8005642:	e7f8      	b.n	8005636 <SD_FindSCR+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005644:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005646:	f014 0420 	ands.w	r4, r4, #32
 800564a:	d001      	beq.n	8005650 <SD_FindSCR+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800564c:	2420      	movs	r4, #32
 800564e:	e7f2      	b.n	8005636 <SD_FindSCR+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005650:	9b01      	ldr	r3, [sp, #4]
 8005652:	f240 523a 	movw	r2, #1338	; 0x53a
 8005656:	ba1b      	rev	r3, r3
 8005658:	6382      	str	r2, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800565a:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800565c:	9b00      	ldr	r3, [sp, #0]
 800565e:	ba1b      	rev	r3, r3
 8005660:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8005662:	e7c8      	b.n	80055f6 <SD_FindSCR+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 8005664:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005668:	e7c5      	b.n	80055f6 <SD_FindSCR+0x58>
	...

0800566c <HAL_SD_ReadBlocks_DMA>:
{
 800566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005670:	4604      	mov	r4, r0
 8005672:	b086      	sub	sp, #24
 8005674:	4615      	mov	r5, r2
 8005676:	461f      	mov	r7, r3
  if(NULL == pData)
 8005678:	b941      	cbnz	r1, 800568c <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800567a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800567c:	2601      	movs	r6, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800567e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005682:	6383      	str	r3, [r0, #56]	; 0x38
}
 8005684:	4630      	mov	r0, r6
 8005686:	b006      	add	sp, #24
 8005688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 800568c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005690:	2b01      	cmp	r3, #1
 8005692:	b2de      	uxtb	r6, r3
 8005694:	d170      	bne.n	8005778 <HAL_SD_ReadBlocks_DMA+0x10c>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005696:	2300      	movs	r3, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005698:	443a      	add	r2, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800569a:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800569c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800569e:	4282      	cmp	r2, r0
 80056a0:	d904      	bls.n	80056ac <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80056a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056a8:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80056aa:	e7eb      	b.n	8005684 <HAL_SD_ReadBlocks_DMA+0x18>
    hsd->Instance->DCTRL = 0U;
 80056ac:	f8d4 c000 	ldr.w	ip, [r4]
    hsd->State = HAL_SD_STATE_BUSY;
 80056b0:	2203      	movs	r2, #3
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80056b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80056b4:	ea4f 2847 	mov.w	r8, r7, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 80056b8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80056bc:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80056c0:	f8dc 203c 	ldr.w	r2, [ip, #60]	; 0x3c
 80056c4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80056c8:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80056cc:	4a2c      	ldr	r2, [pc, #176]	; (8005780 <HAL_SD_ReadBlocks_DMA+0x114>)
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056ce:	6083      	str	r3, [r0, #8]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80056d0:	63c2      	str	r2, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80056d2:	4a2c      	ldr	r2, [pc, #176]	; (8005784 <HAL_SD_ReadBlocks_DMA+0x118>)
    hsd->hdmarx->XferAbortCallback = NULL;
 80056d4:	e9c0 2313 	strd	r2, r3, [r0, #76]	; 0x4c
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80056d8:	6802      	ldr	r2, [r0, #0]
 80056da:	6813      	ldr	r3, [r2, #0]
 80056dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056e0:	6013      	str	r3, [r2, #0]
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80056e2:	460a      	mov	r2, r1
 80056e4:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80056e8:	f10c 0180 	add.w	r1, ip, #128	; 0x80
 80056ec:	f7fd fc40 	bl	8002f70 <HAL_DMA_Start_IT>
 80056f0:	6822      	ldr	r2, [r4, #0]
 80056f2:	b160      	cbz	r0, 800570e <HAL_SD_ReadBlocks_DMA+0xa2>
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80056f4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80056f6:	f423 7395 	bic.w	r3, r3, #298	; 0x12a
 80056fa:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056fc:	4b22      	ldr	r3, [pc, #136]	; (8005788 <HAL_SD_ReadBlocks_DMA+0x11c>)
 80056fe:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005700:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005706:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005708:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
      return HAL_ERROR;
 800570c:	e7ba      	b.n	8005684 <HAL_SD_ReadBlocks_DMA+0x18>
      __HAL_SD_DMA_ENABLE(hsd);
 800570e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005710:	2190      	movs	r1, #144	; 0x90
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005712:	2000      	movs	r0, #0
      __HAL_SD_DMA_ENABLE(hsd);
 8005714:	f043 0308 	orr.w	r3, r3, #8
 8005718:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800571a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800571c:	2b01      	cmp	r3, #1
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800571e:	f04f 33ff 	mov.w	r3, #4294967295
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005722:	e9cd 3800 	strd	r3, r8, [sp]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005726:	f04f 0302 	mov.w	r3, #2
        add *= 512U;
 800572a:	bf18      	it	ne
 800572c:	026d      	lslne	r5, r5, #9
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800572e:	e9cd 1302 	strd	r1, r3, [sp, #8]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005732:	2301      	movs	r3, #1
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005734:	4669      	mov	r1, sp
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005736:	e9cd 0304 	strd	r0, r3, [sp, #16]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800573a:	4610      	mov	r0, r2
 800573c:	f001 fc23 	bl	8006f86 <SDMMC_ConfigData>
      if(NumberOfBlocks > 1U)
 8005740:	2f01      	cmp	r7, #1
 8005742:	d912      	bls.n	800576a <HAL_SD_ReadBlocks_DMA+0xfe>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005744:	2382      	movs	r3, #130	; 0x82
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005746:	4629      	mov	r1, r5
 8005748:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800574a:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800574c:	f001 fd14 	bl	8007178 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005750:	b1a0      	cbz	r0, 800577c <HAL_SD_ReadBlocks_DMA+0x110>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	4a0c      	ldr	r2, [pc, #48]	; (8005788 <HAL_SD_ReadBlocks_DMA+0x11c>)
 8005756:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005758:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800575a:	4318      	orrs	r0, r3
        hsd->State = HAL_SD_STATE_READY;
 800575c:	2301      	movs	r3, #1
        hsd->ErrorCode |= errorstate;
 800575e:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005760:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005764:	2300      	movs	r3, #0
 8005766:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8005768:	e78c      	b.n	8005684 <HAL_SD_ReadBlocks_DMA+0x18>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800576a:	2381      	movs	r3, #129	; 0x81
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800576c:	4629      	mov	r1, r5
 800576e:	6820      	ldr	r0, [r4, #0]
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005770:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005772:	f001 fce9 	bl	8007148 <SDMMC_CmdReadSingleBlock>
 8005776:	e7eb      	b.n	8005750 <HAL_SD_ReadBlocks_DMA+0xe4>
    return HAL_BUSY;
 8005778:	2602      	movs	r6, #2
 800577a:	e783      	b.n	8005684 <HAL_SD_ReadBlocks_DMA+0x18>
      return HAL_OK;
 800577c:	4606      	mov	r6, r0
 800577e:	e781      	b.n	8005684 <HAL_SD_ReadBlocks_DMA+0x18>
 8005780:	080058a7 	.word	0x080058a7
 8005784:	08005df5 	.word	0x08005df5
 8005788:	004005ff 	.word	0x004005ff

0800578c <HAL_SD_WriteBlocks_DMA>:
{
 800578c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005790:	4604      	mov	r4, r0
 8005792:	b086      	sub	sp, #24
 8005794:	461e      	mov	r6, r3
  if(NULL == pData)
 8005796:	4688      	mov	r8, r1
 8005798:	b941      	cbnz	r1, 80057ac <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800579a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800579c:	2701      	movs	r7, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800579e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057a2:	6383      	str	r3, [r0, #56]	; 0x38
}
 80057a4:	4638      	mov	r0, r7
 80057a6:	b006      	add	sp, #24
 80057a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80057ac:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	b2df      	uxtb	r7, r3
 80057b4:	d16e      	bne.n	8005894 <HAL_SD_WriteBlocks_DMA+0x108>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057b6:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80057b8:	1993      	adds	r3, r2, r6
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057ba:	6381      	str	r1, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80057bc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80057be:	4283      	cmp	r3, r0
 80057c0:	d904      	bls.n	80057cc <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80057c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057c8:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80057ca:	e7eb      	b.n	80057a4 <HAL_SD_WriteBlocks_DMA+0x18>
    hsd->Instance->DCTRL = 0U;
 80057cc:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 80057ce:	2303      	movs	r3, #3
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80057d0:	4d31      	ldr	r5, [pc, #196]	; (8005898 <HAL_SD_WriteBlocks_DMA+0x10c>)
    hsd->State = HAL_SD_STATE_BUSY;
 80057d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80057d6:	62c1      	str	r1, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80057d8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80057da:	f043 031a 	orr.w	r3, r3, #26
 80057de:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80057e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057e2:	63dd      	str	r5, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80057e4:	4d2d      	ldr	r5, [pc, #180]	; (800589c <HAL_SD_WriteBlocks_DMA+0x110>)
    hsd->hdmatx->XferAbortCallback = NULL;
 80057e6:	e9c3 5113 	strd	r5, r1, [r3, #76]	; 0x4c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80057ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80057ec:	2b01      	cmp	r3, #1
      add *= 512U;
 80057ee:	bf18      	it	ne
 80057f0:	0252      	lslne	r2, r2, #9
    if(NumberOfBlocks > 1U)
 80057f2:	2e01      	cmp	r6, #1
 80057f4:	d912      	bls.n	800581c <HAL_SD_WriteBlocks_DMA+0x90>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80057f6:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80057f8:	4611      	mov	r1, r2
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80057fa:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80057fc:	f001 fcec 	bl	80071d8 <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005800:	4605      	mov	r5, r0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005802:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005804:	b180      	cbz	r0, 8005828 <HAL_SD_WriteBlocks_DMA+0x9c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005806:	4b26      	ldr	r3, [pc, #152]	; (80058a0 <HAL_SD_WriteBlocks_DMA+0x114>)
 8005808:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800580a:	2301      	movs	r3, #1
      hsd->ErrorCode |= errorstate;
 800580c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800580e:	4305      	orrs	r5, r0
 8005810:	63a5      	str	r5, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005812:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005816:	2300      	movs	r3, #0
 8005818:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800581a:	e7c3      	b.n	80057a4 <HAL_SD_WriteBlocks_DMA+0x18>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800581c:	2390      	movs	r3, #144	; 0x90
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800581e:	4611      	mov	r1, r2
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005820:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005822:	f001 fcc1 	bl	80071a8 <SDMMC_CmdWriteSingleBlock>
 8005826:	e7eb      	b.n	8005800 <HAL_SD_WriteBlocks_DMA+0x74>
    __HAL_SD_DMA_ENABLE(hsd);
 8005828:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800582a:	0276      	lsls	r6, r6, #9
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800582c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800582e:	3280      	adds	r2, #128	; 0x80
    __HAL_SD_DMA_ENABLE(hsd);
 8005830:	f043 0308 	orr.w	r3, r3, #8
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005834:	6801      	ldr	r1, [r0, #0]
    __HAL_SD_DMA_ENABLE(hsd);
 8005836:	f842 3c54 	str.w	r3, [r2, #-84]
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800583a:	2340      	movs	r3, #64	; 0x40
 800583c:	6083      	str	r3, [r0, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800583e:	680b      	ldr	r3, [r1, #0]
 8005840:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005848:	600b      	str	r3, [r1, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800584a:	08b3      	lsrs	r3, r6, #2
 800584c:	4641      	mov	r1, r8
 800584e:	f7fd fb8f 	bl	8002f70 <HAL_DMA_Start_IT>
 8005852:	b178      	cbz	r0, 8005874 <HAL_SD_WriteBlocks_DMA+0xe8>
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005858:	f022 021a 	bic.w	r2, r2, #26
 800585c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800585e:	4a10      	ldr	r2, [pc, #64]	; (80058a0 <HAL_SD_WriteBlocks_DMA+0x114>)
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005862:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005868:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800586a:	2301      	movs	r3, #1
 800586c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005870:	6325      	str	r5, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005872:	e797      	b.n	80057a4 <HAL_SD_WriteBlocks_DMA+0x18>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005874:	f04f 33ff 	mov.w	r3, #4294967295
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005878:	4669      	mov	r1, sp
 800587a:	6820      	ldr	r0, [r4, #0]
      return HAL_OK;
 800587c:	462f      	mov	r7, r5
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800587e:	9504      	str	r5, [sp, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005880:	e9cd 3600 	strd	r3, r6, [sp]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005884:	2390      	movs	r3, #144	; 0x90
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005886:	e9cd 3502 	strd	r3, r5, [sp, #8]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800588a:	2301      	movs	r3, #1
 800588c:	9305      	str	r3, [sp, #20]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800588e:	f001 fb7a 	bl	8006f86 <SDMMC_ConfigData>
      return HAL_OK;
 8005892:	e787      	b.n	80057a4 <HAL_SD_WriteBlocks_DMA+0x18>
    return HAL_BUSY;
 8005894:	2702      	movs	r7, #2
 8005896:	e785      	b.n	80057a4 <HAL_SD_WriteBlocks_DMA+0x18>
 8005898:	08005591 	.word	0x08005591
 800589c:	08005df5 	.word	0x08005df5
 80058a0:	004005ff 	.word	0x004005ff

080058a4 <HAL_SD_ErrorCallback>:
 80058a4:	4770      	bx	lr

080058a6 <SD_DMAReceiveCplt>:
{
 80058a6:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80058a8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80058aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80058ac:	2b82      	cmp	r3, #130	; 0x82
 80058ae:	d109      	bne.n	80058c4 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80058b0:	6820      	ldr	r0, [r4, #0]
 80058b2:	f001 fca9 	bl	8007208 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 80058b6:	b128      	cbz	r0, 80058c4 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 80058b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058ba:	4318      	orrs	r0, r3
 80058bc:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 80058be:	4620      	mov	r0, r4
 80058c0:	f7ff fff0 	bl	80058a4 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80058c4:	6823      	ldr	r3, [r4, #0]
  HAL_SD_RxCpltCallback(hsd);
 80058c6:	4620      	mov	r0, r4
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80058c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ca:	f022 0208 	bic.w	r2, r2, #8
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80058d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80058dc:	2300      	movs	r3, #0
 80058de:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 80058e0:	f002 fa68 	bl	8007db4 <HAL_SD_RxCpltCallback>
}
 80058e4:	bd10      	pop	{r4, pc}
	...

080058e8 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80058e8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80058ea:	0f9a      	lsrs	r2, r3, #30
 80058ec:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80058ee:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80058f2:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80058f4:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80058f8:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80058fa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80058fe:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005900:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005904:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005906:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005908:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800590a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800590c:	0d1a      	lsrs	r2, r3, #20
 800590e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005910:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8005914:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005916:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800591a:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800591c:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8005920:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005922:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8005926:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005928:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800592c:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800592e:	2200      	movs	r2, #0
 8005930:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8005932:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8005934:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 8005936:	2a00      	cmp	r2, #0
 8005938:	d16c      	bne.n	8005a14 <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800593a:	f640 74fc 	movw	r4, #4092	; 0xffc
 800593e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005940:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 8005944:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8005948:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800594a:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800594e:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005950:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8005954:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005956:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800595a:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800595c:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005960:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005964:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005966:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005968:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800596a:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800596c:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800596e:	f002 0207 	and.w	r2, r2, #7
 8005972:	3202      	adds	r2, #2
 8005974:	fa03 f202 	lsl.w	r2, r3, r2
 8005978:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800597a:	7a0b      	ldrb	r3, [r1, #8]
 800597c:	f003 040f 	and.w	r4, r3, #15
 8005980:	2301      	movs	r3, #1
 8005982:	40a3      	lsls	r3, r4
 8005984:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005986:	0a5b      	lsrs	r3, r3, #9
 8005988:	4353      	muls	r3, r2
 800598a:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800598c:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005990:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005992:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005994:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8005998:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800599a:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800599e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80059a2:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80059a4:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80059a6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->Reserved3 = 0;
 80059a8:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80059aa:	0fda      	lsrs	r2, r3, #31
 80059ac:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80059ae:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80059b2:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80059b4:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80059b8:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80059ba:	f3c3 5283 	ubfx	r2, r3, #22, #4
 80059be:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80059c0:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80059c4:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80059c8:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 80059cc:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80059d0:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80059d4:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80059d8:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80059dc:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80059e0:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80059e4:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80059e8:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80059ec:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80059f0:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80059f4:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80059f8:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80059fc:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005a00:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005a04:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005a08:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8005a12:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005a14:	2a01      	cmp	r2, #1
 8005a16:	d10f      	bne.n	8005a38 <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8005a1e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8005a22:	4313      	orrs	r3, r2
 8005a24:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005a26:	690b      	ldr	r3, [r1, #16]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	029b      	lsls	r3, r3, #10
 8005a2c:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005a2e:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a34:	6583      	str	r3, [r0, #88]	; 0x58
 8005a36:	e7ab      	b.n	8005990 <HAL_SD_GetCardCSD+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a38:	6803      	ldr	r3, [r0, #0]
 8005a3a:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <HAL_SD_GetCardCSD+0x168>)
 8005a3c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a44:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	e7e0      	b.n	8005a12 <HAL_SD_GetCardCSD+0x12a>
 8005a50:	004005ff 	.word	0x004005ff

08005a54 <HAL_SD_InitCard>:
{
 8005a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005a58:	2300      	movs	r3, #0
{
 8005a5a:	b098      	sub	sp, #96	; 0x60
 8005a5c:	4604      	mov	r4, r0
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005a5e:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005a60:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005a64:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005a68:	2376      	movs	r3, #118	; 0x76
 8005a6a:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 8005a6c:	ab0a      	add	r3, sp, #40	; 0x28
 8005a6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a72:	ab07      	add	r3, sp, #28
 8005a74:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a7c:	f001 fa46 	bl	8006f0c <SDMMC_Init>
  if(status != HAL_OK)
 8005a80:	4605      	mov	r5, r0
 8005a82:	2800      	cmp	r0, #0
 8005a84:	f040 80e3 	bne.w	8005c4e <HAL_SD_InitCard+0x1fa>
  __HAL_SD_DISABLE(hsd);
 8005a88:	6820      	ldr	r0, [r4, #0]
 8005a8a:	6843      	ldr	r3, [r0, #4]
 8005a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a90:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005a92:	f001 fa5a 	bl	8006f4a <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8005a96:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 8005a98:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8005a9a:	6853      	ldr	r3, [r2, #4]
 8005a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aa0:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8005aa2:	f7fd f84f 	bl	8002b44 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005aa6:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8005aa8:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005aaa:	f001 fa7f 	bl	8006fac <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aae:	4605      	mov	r5, r0
 8005ab0:	b940      	cbnz	r0, 8005ac4 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005ab2:	6820      	ldr	r0, [r4, #0]
 8005ab4:	f001 fd4a 	bl	800754c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ab8:	b170      	cbz	r0, 8005ad8 <HAL_SD_InitCard+0x84>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005aba:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005abc:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005abe:	f001 fa75 	bl	8006fac <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ac2:	b198      	cbz	r0, 8005aec <HAL_SD_InitCard+0x98>
    hsd->State = HAL_SD_STATE_READY;
 8005ac4:	2501      	movs	r5, #1
 8005ac6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005aca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005acc:	4303      	orrs	r3, r0
 8005ace:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	b018      	add	sp, #96	; 0x60
 8005ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005adc:	2100      	movs	r1, #0
 8005ade:	6820      	ldr	r0, [r4, #0]
 8005ae0:	f001 fbc4 	bl	800726c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ae4:	b128      	cbz	r0, 8005af2 <HAL_SD_InitCard+0x9e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ae6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005aea:	e7eb      	b.n	8005ac4 <HAL_SD_InitCard+0x70>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005aec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d0f4      	beq.n	8005adc <HAL_SD_InitCard+0x88>
{
 8005af2:	2600      	movs	r6, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005af4:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005af8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8005c58 <HAL_SD_InitCard+0x204>
 8005afc:	e014      	b.n	8005b28 <HAL_SD_InitCard+0xd4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005afe:	4631      	mov	r1, r6
 8005b00:	6820      	ldr	r0, [r4, #0]
 8005b02:	f001 fbb3 	bl	800726c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d1dc      	bne.n	8005ac4 <HAL_SD_InitCard+0x70>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005b0a:	4641      	mov	r1, r8
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	f001 fc7f 	bl	8007410 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d1e7      	bne.n	8005ae6 <HAL_SD_InitCard+0x92>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b16:	4631      	mov	r1, r6
 8005b18:	6820      	ldr	r0, [r4, #0]
 8005b1a:	f001 fa31 	bl	8006f80 <SDMMC_GetResponse>
    count++;
 8005b1e:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b20:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005b22:	0fc6      	lsrs	r6, r0, #31
    count++;
 8005b24:	3301      	adds	r3, #1
 8005b26:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005b28:	9b06      	ldr	r3, [sp, #24]
 8005b2a:	42bb      	cmp	r3, r7
 8005b2c:	d801      	bhi.n	8005b32 <HAL_SD_InitCard+0xde>
 8005b2e:	2e00      	cmp	r6, #0
 8005b30:	d0e5      	beq.n	8005afe <HAL_SD_InitCard+0xaa>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005b32:	9b06      	ldr	r3, [sp, #24]
 8005b34:	42bb      	cmp	r3, r7
 8005b36:	d80c      	bhi.n	8005b52 <HAL_SD_InitCard+0xfe>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005b38:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8005b3c:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005b3e:	6820      	ldr	r0, [r4, #0]
 8005b40:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 8005b42:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005b46:	f001 fa04 	bl	8006f52 <SDMMC_GetPowerState>
 8005b4a:	b928      	cbnz	r0, 8005b58 <HAL_SD_InitCard+0x104>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005b4c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005b50:	e7b8      	b.n	8005ac4 <HAL_SD_InitCard+0x70>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005b52:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8005b56:	e7b5      	b.n	8005ac4 <HAL_SD_InitCard+0x70>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d043      	beq.n	8005be6 <HAL_SD_InitCard+0x192>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005b5e:	6820      	ldr	r0, [r4, #0]
 8005b60:	f001 fc0a 	bl	8007378 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d1ad      	bne.n	8005ac4 <HAL_SD_InitCard+0x70>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b68:	4601      	mov	r1, r0
 8005b6a:	6820      	ldr	r0, [r4, #0]
 8005b6c:	f001 fa08 	bl	8006f80 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b70:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b72:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b74:	6820      	ldr	r0, [r4, #0]
 8005b76:	f001 fa03 	bl	8006f80 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b7a:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005b7c:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	f001 f9fe 	bl	8006f80 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b84:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005b86:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b88:	6820      	ldr	r0, [r4, #0]
 8005b8a:	f001 f9f9 	bl	8006f80 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005b90:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d026      	beq.n	8005be6 <HAL_SD_InitCard+0x192>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005b98:	f10d 0116 	add.w	r1, sp, #22
 8005b9c:	6820      	ldr	r0, [r4, #0]
 8005b9e:	f001 fc93 	bl	80074c8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d18e      	bne.n	8005ac4 <HAL_SD_InitCard+0x70>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ba6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ba8:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d01b      	beq.n	8005be6 <HAL_SD_InitCard+0x192>
    hsd->SdCard.RelCardAdd = sd_rca;
 8005bae:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8005bb2:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bb4:	0409      	lsls	r1, r1, #16
 8005bb6:	f001 fbf4 	bl	80073a2 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d182      	bne.n	8005ac4 <HAL_SD_InitCard+0x70>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bbe:	4601      	mov	r1, r0
 8005bc0:	6820      	ldr	r0, [r4, #0]
 8005bc2:	f001 f9dd 	bl	8006f80 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005bc6:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bc8:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005bca:	6820      	ldr	r0, [r4, #0]
 8005bcc:	f001 f9d8 	bl	8006f80 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005bd0:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005bd2:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005bd4:	6820      	ldr	r0, [r4, #0]
 8005bd6:	f001 f9d3 	bl	8006f80 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005bda:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005bdc:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005bde:	6820      	ldr	r0, [r4, #0]
 8005be0:	f001 f9ce 	bl	8006f80 <SDMMC_GetResponse>
 8005be4:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005be6:	2104      	movs	r1, #4
 8005be8:	6820      	ldr	r0, [r4, #0]
 8005bea:	f001 f9c9 	bl	8006f80 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005bee:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005bf0:	0d00      	lsrs	r0, r0, #20
 8005bf2:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f7ff fe77 	bl	80058e8 <HAL_SD_GetCardCSD>
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	f47f af72 	bne.w	8005ae6 <HAL_SD_InitCard+0x92>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005c02:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005c04:	4603      	mov	r3, r0
 8005c06:	6820      	ldr	r0, [r4, #0]
 8005c08:	0412      	lsls	r2, r2, #16
 8005c0a:	f001 fb17 	bl	800723c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	f47f af58 	bne.w	8005ac4 <HAL_SD_InitCard+0x70>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005c14:	f104 0310 	add.w	r3, r4, #16
 8005c18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c1c:	1d23      	adds	r3, r4, #4
 8005c1e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005c22:	6820      	ldr	r0, [r4, #0]
 8005c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c26:	f001 f971 	bl	8006f0c <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005c2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c2e:	6820      	ldr	r0, [r4, #0]
 8005c30:	f001 fa72 	bl	8007118 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c34:	2800      	cmp	r0, #0
 8005c36:	f43f af4b 	beq.w	8005ad0 <HAL_SD_InitCard+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c3a:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8005c3c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c3e:	4a05      	ldr	r2, [pc, #20]	; (8005c54 <HAL_SD_InitCard+0x200>)
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005c42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c44:	4318      	orrs	r0, r3
 8005c46:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c48:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    return HAL_ERROR;
 8005c4c:	e740      	b.n	8005ad0 <HAL_SD_InitCard+0x7c>
    return HAL_ERROR;
 8005c4e:	2501      	movs	r5, #1
 8005c50:	e73e      	b.n	8005ad0 <HAL_SD_InitCard+0x7c>
 8005c52:	bf00      	nop
 8005c54:	004005ff 	.word	0x004005ff
 8005c58:	c1100000 	.word	0xc1100000

08005c5c <HAL_SD_Init>:
{
 8005c5c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8005c5e:	4604      	mov	r4, r0
 8005c60:	b908      	cbnz	r0, 8005c66 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8005c62:	2001      	movs	r0, #1
}
 8005c64:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8005c66:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005c6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c6e:	b913      	cbnz	r3, 8005c76 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8005c70:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8005c72:	f7fc fb7b 	bl	800236c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8005c76:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005c78:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8005c7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005c7e:	f7ff fee9 	bl	8005a54 <HAL_SD_InitCard>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d1ed      	bne.n	8005c62 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8005c86:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c88:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005c8a:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005c8c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005c90:	e7e8      	b.n	8005c64 <HAL_SD_Init+0x8>

08005c92 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005c92:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005c94:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005c96:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005c98:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005c9a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005c9c:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005c9e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005ca0:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005ca2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005ca4:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005ca6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005ca8:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005caa:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005cac:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005cae:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 8005cb0:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005cb2:	61cb      	str	r3, [r1, #28]
}
 8005cb4:	4770      	bx	lr
	...

08005cb8 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8005cb8:	2303      	movs	r3, #3
{
 8005cba:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8005cbc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8005cc0:	b08b      	sub	sp, #44	; 0x2c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005cc2:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d002      	beq.n	8005cd2 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005ccc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005cd0:	d103      	bne.n	8005cda <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd8:	e05d      	b.n	8005d96 <HAL_SD_ConfigWideBusOperation+0xde>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005cda:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005cde:	6800      	ldr	r0, [r0, #0]
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005ce0:	d137      	bne.n	8005d52 <HAL_SD_ConfigWideBusOperation+0x9a>
  uint32_t scr[2U] = {0U, 0U};
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ce8:	f001 f94a 	bl	8006f80 <SDMMC_GetResponse>
 8005cec:	0180      	lsls	r0, r0, #6
 8005cee:	d449      	bmi.n	8005d84 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8005cf0:	a904      	add	r1, sp, #16
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f7ff fc53 	bl	800559e <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cf8:	b960      	cbnz	r0, 8005d14 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005cfa:	9b05      	ldr	r3, [sp, #20]
 8005cfc:	0359      	lsls	r1, r3, #13
 8005cfe:	d544      	bpl.n	8005d8a <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d00:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005d02:	6820      	ldr	r0, [r4, #0]
 8005d04:	0409      	lsls	r1, r1, #16
 8005d06:	f001 fab1 	bl	800726c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d0a:	b918      	cbnz	r0, 8005d14 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005d0c:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005d0e:	6820      	ldr	r0, [r4, #0]
 8005d10:	f001 fac4 	bl	800729c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8005d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d16:	4318      	orrs	r0, r3
 8005d18:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005d1a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d1c:	6827      	ldr	r7, [r4, #0]
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005d1e:	2e00      	cmp	r6, #0
 8005d20:	d03b      	beq.n	8005d9a <HAL_SD_ConfigWideBusOperation+0xe2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d22:	4b29      	ldr	r3, [pc, #164]	; (8005dc8 <HAL_SD_ConfigWideBusOperation+0x110>)
    hsd->State = HAL_SD_STATE_READY;
 8005d24:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d26:	63bb      	str	r3, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d28:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d30:	6820      	ldr	r0, [r4, #0]
 8005d32:	f001 f9f1 	bl	8007118 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d36:	b130      	cbz	r0, 8005d46 <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d38:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8005d3a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d3c:	4a22      	ldr	r2, [pc, #136]	; (8005dc8 <HAL_SD_ConfigWideBusOperation+0x110>)
 8005d3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d42:	4318      	orrs	r0, r3
 8005d44:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8005d46:	2301      	movs	r3, #1
}
 8005d48:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8005d4a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005d4e:	b00b      	add	sp, #44	; 0x2c
 8005d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005d52:	b9e9      	cbnz	r1, 8005d90 <HAL_SD_ConfigWideBusOperation+0xd8>
  uint32_t scr[2U] = {0U, 0U};
 8005d54:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005d58:	f001 f912 	bl	8006f80 <SDMMC_GetResponse>
 8005d5c:	0182      	lsls	r2, r0, #6
 8005d5e:	d411      	bmi.n	8005d84 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 8005d60:	a904      	add	r1, sp, #16
 8005d62:	4620      	mov	r0, r4
 8005d64:	f7ff fc1b 	bl	800559e <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d1d3      	bne.n	8005d14 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005d6c:	9b05      	ldr	r3, [sp, #20]
 8005d6e:	03db      	lsls	r3, r3, #15
 8005d70:	d50b      	bpl.n	8005d8a <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d72:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005d74:	6820      	ldr	r0, [r4, #0]
 8005d76:	0409      	lsls	r1, r1, #16
 8005d78:	f001 fa78 	bl	800726c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d1c9      	bne.n	8005d14 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005d80:	4601      	mov	r1, r0
 8005d82:	e7c4      	b.n	8005d0e <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005d84:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005d88:	e7c4      	b.n	8005d14 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d8a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005d8e:	e7c1      	b.n	8005d14 <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d96:	63a3      	str	r3, [r4, #56]	; 0x38
 8005d98:	e7bf      	b.n	8005d1a <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005d9a:	6863      	ldr	r3, [r4, #4]
 8005d9c:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005d9e:	68a3      	ldr	r3, [r4, #8]
 8005da0:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005da2:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 8005da4:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005da8:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8005daa:	4635      	mov	r5, r6
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005dac:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005dae:	69a3      	ldr	r3, [r4, #24]
 8005db0:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 8005db2:	ab0a      	add	r3, sp, #40	; 0x28
 8005db4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8005db8:	ab04      	add	r3, sp, #16
 8005dba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dc2:	f001 f8a3 	bl	8006f0c <SDMMC_Init>
 8005dc6:	e7b1      	b.n	8005d2c <HAL_SD_ConfigWideBusOperation+0x74>
 8005dc8:	004005ff 	.word	0x004005ff

08005dcc <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005dcc:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8005dce:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005dd0:	0409      	lsls	r1, r1, #16
{
 8005dd2:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005dd4:	6800      	ldr	r0, [r0, #0]
 8005dd6:	f001 fa91 	bl	80072fc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dda:	4601      	mov	r1, r0
 8005ddc:	b928      	cbnz	r0, 8005dea <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005dde:	6820      	ldr	r0, [r4, #0]
 8005de0:	f001 f8ce 	bl	8006f80 <SDMMC_GetResponse>
}
 8005de4:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8005de8:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8005dea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005dec:	4308      	orrs	r0, r1
 8005dee:	63a0      	str	r0, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8005df0:	2000      	movs	r0, #0
 8005df2:	e7f7      	b.n	8005de4 <HAL_SD_GetCardState+0x18>

08005df4 <SD_DMAError>:
{
 8005df4:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005df6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005df8:	f7fd f8f7 	bl	8002fea <HAL_DMA_GetError>
 8005dfc:	2802      	cmp	r0, #2
 8005dfe:	d026      	beq.n	8005e4e <SD_DMAError+0x5a>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005e00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005e04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005e06:	2a01      	cmp	r2, #1
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005e0a:	d001      	beq.n	8005e10 <SD_DMAError+0x1c>
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d11b      	bne.n	8005e48 <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e10:	6823      	ldr	r3, [r4, #0]
      CardState = HAL_SD_GetCardState(hsd);
 8005e12:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e14:	4a0e      	ldr	r2, [pc, #56]	; (8005e50 <SD_DMAError+0x5c>)
 8005e16:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e1a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005e1e:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005e20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e26:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005e28:	f7ff ffd0 	bl	8005dcc <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005e2c:	3805      	subs	r0, #5
 8005e2e:	2801      	cmp	r0, #1
 8005e30:	d805      	bhi.n	8005e3e <SD_DMAError+0x4a>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005e32:	6820      	ldr	r0, [r4, #0]
 8005e34:	f001 f9e8 	bl	8007208 <SDMMC_CmdStopTransfer>
 8005e38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e3a:	4318      	orrs	r0, r3
 8005e3c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_SD_ErrorCallback(hsd);
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f7ff fd2b 	bl	80058a4 <HAL_SD_ErrorCallback>
}
 8005e4e:	bd10      	pop	{r4, pc}
 8005e50:	004005ff 	.word	0x004005ff

08005e54 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005e58:	4604      	mov	r4, r0
 8005e5a:	b1c8      	cbz	r0, 8005e90 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005e5c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005e60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e64:	b91b      	cbnz	r3, 8005e6e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005e66:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005e6a:	f7fc fcd3 	bl	8002814 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005e6e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005e70:	1d21      	adds	r1, r4, #4
 8005e72:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005e74:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005e78:	f000 ffd7 	bl	8006e2a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005e7c:	6862      	ldr	r2, [r4, #4]
 8005e7e:	4629      	mov	r1, r5
 8005e80:	6820      	ldr	r0, [r4, #0]
 8005e82:	f001 f80d 	bl	8006ea0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005e86:	2301      	movs	r3, #1

  return HAL_OK;
 8005e88:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005e8a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005e90:	2001      	movs	r0, #1
 8005e92:	e7fc      	b.n	8005e8e <HAL_SDRAM_Init+0x3a>

08005e94 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8005e94:	b510      	push	{r4, lr}
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8005e96:	4604      	mov	r4, r0
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d030      	beq.n	8005efe <HAL_SPDIFRX_Init+0x6a>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8005e9c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8005ea0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005ea4:	b91b      	cbnz	r3, 8005eae <HAL_SPDIFRX_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8005ea6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8005eaa:	f7fc faab 	bl	8002404 <HAL_SPDIFRX_MspInit>

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8005eae:	6821      	ldr	r1, [r4, #0]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8005eb0:	2302      	movs	r3, #2
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8005eb2:	6860      	ldr	r0, [r4, #4]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8005eb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_SPDIFRX_IDLE(hspdif);
 8005eb8:	680b      	ldr	r3, [r1, #0]
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	600b      	str	r3, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 8005ec0:	69a3      	ldr	r3, [r4, #24]
  tmpreg = hspdif->Instance->CR;
 8005ec2:	680a      	ldr	r2, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 8005ec4:	4303      	orrs	r3, r0
             hspdif->Init.InputSelection |
 8005ec6:	68a0      	ldr	r0, [r4, #8]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8005ec8:	f422 22ef 	bic.w	r2, r2, #489472	; 0x77800
             hspdif->Init.InputSelection |
 8005ecc:	4303      	orrs	r3, r0
             hspdif->Init.Retries |
 8005ece:	68e0      	ldr	r0, [r4, #12]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8005ed0:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
             hspdif->Init.Retries |
 8005ed4:	4303      	orrs	r3, r0
             hspdif->Init.WaitForActivity |
 8005ed6:	6920      	ldr	r0, [r4, #16]
 8005ed8:	4303      	orrs	r3, r0
             hspdif->Init.ChannelSelection |
 8005eda:	6960      	ldr	r0, [r4, #20]
 8005edc:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 8005ede:	69e0      	ldr	r0, [r4, #28]
 8005ee0:	4303      	orrs	r3, r0
             hspdif->Init.PreambleTypeMask |
 8005ee2:	6a20      	ldr	r0, [r4, #32]
 8005ee4:	4303      	orrs	r3, r0
             hspdif->Init.ChannelStatusMask |
 8005ee6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005ee8:	4303      	orrs	r3, r0
             hspdif->Init.ValidityBitMask |
 8005eea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005eec:	4303      	orrs	r3, r0
            );


  hspdif->Instance->CR = tmpreg;

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8005eee:	2000      	movs	r0, #0
  tmpreg |= (hspdif->Init.StereoMode |
 8005ef0:	4313      	orrs	r3, r2
  hspdif->Instance->CR = tmpreg;
 8005ef2:	600b      	str	r3, [r1, #0]

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8005ef4:	2301      	movs	r3, #1
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8005ef6:	64a0      	str	r0, [r4, #72]	; 0x48
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8005ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  return HAL_OK;
}
 8005efc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005efe:	2001      	movs	r0, #1
 8005f00:	e7fc      	b.n	8005efc <HAL_SPDIFRX_Init+0x68>

08005f02 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f02:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f04:	4604      	mov	r4, r0
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d063      	beq.n	8005fd2 <HAL_SPI_Init+0xd0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d15c      	bne.n	8005fca <HAL_SPI_Init+0xc8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f10:	6842      	ldr	r2, [r0, #4]
 8005f12:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005f16:	d000      	beq.n	8005f1a <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f18:	61c3      	str	r3, [r0, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f1e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005f22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f26:	b923      	cbnz	r3, 8005f32 <HAL_SPI_Init+0x30>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f28:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005f2a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005f2e:	f7fc fab3 	bl	8002498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f32:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f34:	6822      	ldr	r2, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f36:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005f38:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005f3c:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f3e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8005f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f46:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	d843      	bhi.n	8005fd6 <HAL_SPI_Init+0xd4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f4e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f52:	d000      	beq.n	8005f56 <HAL_SPI_Init+0x54>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f54:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f56:	6863      	ldr	r3, [r4, #4]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f58:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f5c:	68a6      	ldr	r6, [r4, #8]
 8005f5e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005f62:	69a1      	ldr	r1, [r4, #24]
 8005f64:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8005f68:	4333      	orrs	r3, r6
 8005f6a:	6926      	ldr	r6, [r4, #16]
 8005f6c:	f006 0602 	and.w	r6, r6, #2
 8005f70:	4333      	orrs	r3, r6
 8005f72:	6966      	ldr	r6, [r4, #20]
 8005f74:	f006 0601 	and.w	r6, r6, #1
 8005f78:	4333      	orrs	r3, r6
 8005f7a:	f401 7600 	and.w	r6, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f7e:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f80:	4333      	orrs	r3, r6
 8005f82:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f84:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f88:	f006 0638 	and.w	r6, r6, #56	; 0x38
 8005f8c:	4333      	orrs	r3, r6
 8005f8e:	6a26      	ldr	r6, [r4, #32]
 8005f90:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8005f94:	4333      	orrs	r3, r6
 8005f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f98:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 8005f9c:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f9e:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fa0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005fa2:	f006 0608 	and.w	r6, r6, #8
 8005fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	4333      	orrs	r3, r6
 8005fae:	4318      	orrs	r0, r3
 8005fb0:	4301      	orrs	r1, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fb2:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005fb4:	430d      	orrs	r5, r1
 8005fb6:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fb8:	69d3      	ldr	r3, [r2, #28]
 8005fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fbe:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8005fc0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fc2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fc4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fca:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fcc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fd0:	e7a3      	b.n	8005f1a <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	e7f8      	b.n	8005fc8 <HAL_SPI_Init+0xc6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fd6:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fd8:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
 8005fdc:	e7b9      	b.n	8005f52 <HAL_SPI_Init+0x50>
	...

08005fe0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fe0:	6a03      	ldr	r3, [r0, #32]
 8005fe2:	f023 0301 	bic.w	r3, r3, #1
{
 8005fe6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fe8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fec:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fee:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ff0:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8005ff4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ff6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8005ffa:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005ffe:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006000:	688d      	ldr	r5, [r1, #8]
 8006002:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006004:	4d0e      	ldr	r5, [pc, #56]	; (8006040 <TIM_OC1_SetConfig+0x60>)
 8006006:	42a8      	cmp	r0, r5
 8006008:	d002      	beq.n	8006010 <TIM_OC1_SetConfig+0x30>
 800600a:	4e0e      	ldr	r6, [pc, #56]	; (8006044 <TIM_OC1_SetConfig+0x64>)
 800600c:	42b0      	cmp	r0, r6
 800600e:	d111      	bne.n	8006034 <TIM_OC1_SetConfig+0x54>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006010:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006014:	68ce      	ldr	r6, [r1, #12]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006016:	42a8      	cmp	r0, r5
    tmpccer |= OC_Config->OCNPolarity;
 8006018:	ea43 0306 	orr.w	r3, r3, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800601c:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006020:	d002      	beq.n	8006028 <TIM_OC1_SetConfig+0x48>
 8006022:	4d08      	ldr	r5, [pc, #32]	; (8006044 <TIM_OC1_SetConfig+0x64>)
 8006024:	42a8      	cmp	r0, r5
 8006026:	d105      	bne.n	8006034 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006028:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800602c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006030:	4335      	orrs	r5, r6
 8006032:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006034:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006036:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006038:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800603a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603c:	6203      	str	r3, [r0, #32]
}
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	40010000 	.word	0x40010000
 8006044:	40010400 	.word	0x40010400

08006048 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006048:	6a03      	ldr	r3, [r0, #32]
 800604a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800604e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006050:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006056:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 800605c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800605e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8006062:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006066:	432c      	orrs	r4, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006068:	688d      	ldr	r5, [r1, #8]
 800606a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800606e:	4d11      	ldr	r5, [pc, #68]	; (80060b4 <TIM_OC3_SetConfig+0x6c>)
 8006070:	42a8      	cmp	r0, r5
 8006072:	d003      	beq.n	800607c <TIM_OC3_SetConfig+0x34>
 8006074:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006078:	42a8      	cmp	r0, r5
 800607a:	d114      	bne.n	80060a6 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800607c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800607e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006082:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006086:	4d0b      	ldr	r5, [pc, #44]	; (80060b4 <TIM_OC3_SetConfig+0x6c>)
 8006088:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800608a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608e:	d003      	beq.n	8006098 <TIM_OC3_SetConfig+0x50>
 8006090:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006094:	42a8      	cmp	r0, r5
 8006096:	d106      	bne.n	80060a6 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006098:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800609c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80060a0:	4335      	orrs	r5, r6
 80060a2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060a8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80060aa:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80060ac:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ae:	6203      	str	r3, [r0, #32]
}
 80060b0:	bd70      	pop	{r4, r5, r6, pc}
 80060b2:	bf00      	nop
 80060b4:	40010000 	.word	0x40010000

080060b8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060b8:	6a03      	ldr	r3, [r0, #32]
 80060ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80060be:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060c0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060c6:	69c3      	ldr	r3, [r0, #28]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060d2:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060da:	688d      	ldr	r5, [r1, #8]
 80060dc:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e0:	4d08      	ldr	r5, [pc, #32]	; (8006104 <TIM_OC4_SetConfig+0x4c>)
 80060e2:	42a8      	cmp	r0, r5
 80060e4:	d003      	beq.n	80060ee <TIM_OC4_SetConfig+0x36>
 80060e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80060ea:	42a8      	cmp	r0, r5
 80060ec:	d104      	bne.n	80060f8 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060ee:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060f2:	694d      	ldr	r5, [r1, #20]
 80060f4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060fa:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060fc:	684b      	ldr	r3, [r1, #4]
 80060fe:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006100:	6202      	str	r2, [r0, #32]
}
 8006102:	bd30      	pop	{r4, r5, pc}
 8006104:	40010000 	.word	0x40010000

08006108 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006108:	6a03      	ldr	r3, [r0, #32]
 800610a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800610e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006110:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006112:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006114:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006116:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006118:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 800611c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800611e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8006126:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006128:	688d      	ldr	r5, [r1, #8]
 800612a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612e:	4d09      	ldr	r5, [pc, #36]	; (8006154 <TIM_OC5_SetConfig+0x4c>)
 8006130:	42a8      	cmp	r0, r5
 8006132:	d003      	beq.n	800613c <TIM_OC5_SetConfig+0x34>
 8006134:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006138:	42a8      	cmp	r0, r5
 800613a:	d104      	bne.n	8006146 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800613c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006140:	694d      	ldr	r5, [r1, #20]
 8006142:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006146:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006148:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800614a:	684b      	ldr	r3, [r1, #4]
 800614c:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614e:	6202      	str	r2, [r0, #32]
}
 8006150:	bd30      	pop	{r4, r5, pc}
 8006152:	bf00      	nop
 8006154:	40010000 	.word	0x40010000

08006158 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006158:	6a03      	ldr	r3, [r0, #32]
 800615a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800615e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006160:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006162:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006164:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006166:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006168:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800616c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800616e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006176:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800617a:	688d      	ldr	r5, [r1, #8]
 800617c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006180:	4d08      	ldr	r5, [pc, #32]	; (80061a4 <TIM_OC6_SetConfig+0x4c>)
 8006182:	42a8      	cmp	r0, r5
 8006184:	d003      	beq.n	800618e <TIM_OC6_SetConfig+0x36>
 8006186:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800618a:	42a8      	cmp	r0, r5
 800618c:	d104      	bne.n	8006198 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800618e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006192:	694d      	ldr	r5, [r1, #20]
 8006194:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006198:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800619a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800619c:	684b      	ldr	r3, [r1, #4]
 800619e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a0:	6202      	str	r2, [r0, #32]
}
 80061a2:	bd30      	pop	{r4, r5, pc}
 80061a4:	40010000 	.word	0x40010000

080061a8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80061a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d133      	bne.n	8006218 <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 80061b0:	2302      	movs	r3, #2
 80061b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061b6:	6803      	ldr	r3, [r0, #0]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c0:	4a16      	ldr	r2, [pc, #88]	; (800621c <HAL_TIM_Base_Start_IT+0x74>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01a      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x54>
 80061c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ca:	d017      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x54>
 80061cc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d013      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x54>
 80061d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00f      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x54>
 80061dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00b      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x54>
 80061e4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d007      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x54>
 80061ec:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d003      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x54>
 80061f4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d107      	bne.n	800620c <HAL_TIM_Base_Start_IT+0x64>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fc:	6899      	ldr	r1, [r3, #8]
 80061fe:	4a08      	ldr	r2, [pc, #32]	; (8006220 <HAL_TIM_Base_Start_IT+0x78>)
 8006200:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006202:	2a06      	cmp	r2, #6
 8006204:	d006      	beq.n	8006214 <HAL_TIM_Base_Start_IT+0x6c>
 8006206:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800620a:	d003      	beq.n	8006214 <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006214:	2000      	movs	r0, #0
}
 8006216:	4770      	bx	lr
    return HAL_ERROR;
 8006218:	2001      	movs	r0, #1
 800621a:	4770      	bx	lr
 800621c:	40010000 	.word	0x40010000
 8006220:	00010007 	.word	0x00010007

08006224 <HAL_TIM_OC_DelayElapsedCallback>:
 8006224:	4770      	bx	lr

08006226 <HAL_TIM_IC_CaptureCallback>:
 8006226:	4770      	bx	lr

08006228 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006228:	4770      	bx	lr

0800622a <HAL_TIM_TriggerCallback>:
 800622a:	4770      	bx	lr

0800622c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800622c:	6803      	ldr	r3, [r0, #0]
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	0791      	lsls	r1, r2, #30
{
 8006232:	b510      	push	{r4, lr}
 8006234:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006236:	d50f      	bpl.n	8006258 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	0792      	lsls	r2, r2, #30
 800623c:	d50c      	bpl.n	8006258 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800623e:	f06f 0202 	mvn.w	r2, #2
 8006242:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006244:	2201      	movs	r2, #1
 8006246:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	0799      	lsls	r1, r3, #30
 800624c:	f000 8085 	beq.w	800635a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006250:	f7ff ffe9 	bl	8006226 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006254:	2300      	movs	r3, #0
 8006256:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	0752      	lsls	r2, r2, #29
 800625e:	d510      	bpl.n	8006282 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	0750      	lsls	r0, r2, #29
 8006264:	d50d      	bpl.n	8006282 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006266:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800626a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800626c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800626e:	2202      	movs	r2, #2
 8006270:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006278:	d075      	beq.n	8006366 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800627a:	f7ff ffd4 	bl	8006226 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627e:	2300      	movs	r3, #0
 8006280:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	691a      	ldr	r2, [r3, #16]
 8006286:	0711      	lsls	r1, r2, #28
 8006288:	d50f      	bpl.n	80062aa <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	0712      	lsls	r2, r2, #28
 800628e:	d50c      	bpl.n	80062aa <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006290:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8006294:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006298:	2204      	movs	r2, #4
 800629a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	079b      	lsls	r3, r3, #30
 80062a0:	d067      	beq.n	8006372 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80062a2:	f7ff ffc0 	bl	8006226 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a6:	2300      	movs	r3, #0
 80062a8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	06d0      	lsls	r0, r2, #27
 80062b0:	d510      	bpl.n	80062d4 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	06d1      	lsls	r1, r2, #27
 80062b6:	d50d      	bpl.n	80062d4 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062b8:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 80062bc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062c0:	2208      	movs	r2, #8
 80062c2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80062ca:	d058      	beq.n	800637e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80062cc:	f7ff ffab 	bl	8006226 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d0:	2300      	movs	r3, #0
 80062d2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	07d2      	lsls	r2, r2, #31
 80062da:	d508      	bpl.n	80062ee <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	07d0      	lsls	r0, r2, #31
 80062e0:	d505      	bpl.n	80062ee <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062e2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80062e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ea:	f7fb fe23 	bl	8001f34 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	691a      	ldr	r2, [r3, #16]
 80062f2:	0611      	lsls	r1, r2, #24
 80062f4:	d508      	bpl.n	8006308 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	0612      	lsls	r2, r2, #24
 80062fa:	d505      	bpl.n	8006308 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8006300:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006302:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006304:	f000 faf5 	bl	80068f2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	05d0      	lsls	r0, r2, #23
 800630e:	d508      	bpl.n	8006322 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	0611      	lsls	r1, r2, #24
 8006314:	d505      	bpl.n	8006322 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006316:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800631a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800631c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800631e:	f000 fae9 	bl	80068f4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	691a      	ldr	r2, [r3, #16]
 8006326:	0652      	lsls	r2, r2, #25
 8006328:	d508      	bpl.n	800633c <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	0650      	lsls	r0, r2, #25
 800632e:	d505      	bpl.n	800633c <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006330:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8006334:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006336:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006338:	f7ff ff77 	bl	800622a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	0691      	lsls	r1, r2, #26
 8006342:	d522      	bpl.n	800638a <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	0692      	lsls	r2, r2, #26
 8006348:	d51f      	bpl.n	800638a <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800634a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800634e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006350:	611a      	str	r2, [r3, #16]
}
 8006352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006356:	f000 bacb 	b.w	80068f0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800635a:	f7ff ff63 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800635e:	4620      	mov	r0, r4
 8006360:	f7ff ff62 	bl	8006228 <HAL_TIM_PWM_PulseFinishedCallback>
 8006364:	e776      	b.n	8006254 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006366:	f7ff ff5d 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636a:	4620      	mov	r0, r4
 800636c:	f7ff ff5c 	bl	8006228 <HAL_TIM_PWM_PulseFinishedCallback>
 8006370:	e785      	b.n	800627e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006372:	f7ff ff57 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006376:	4620      	mov	r0, r4
 8006378:	f7ff ff56 	bl	8006228 <HAL_TIM_PWM_PulseFinishedCallback>
 800637c:	e793      	b.n	80062a6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800637e:	f7ff ff51 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006382:	4620      	mov	r0, r4
 8006384:	f7ff ff50 	bl	8006228 <HAL_TIM_PWM_PulseFinishedCallback>
 8006388:	e7a2      	b.n	80062d0 <HAL_TIM_IRQHandler+0xa4>
}
 800638a:	bd10      	pop	{r4, pc}

0800638c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800638c:	4a30      	ldr	r2, [pc, #192]	; (8006450 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800638e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006390:	4290      	cmp	r0, r2
 8006392:	d012      	beq.n	80063ba <TIM_Base_SetConfig+0x2e>
 8006394:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006398:	d00f      	beq.n	80063ba <TIM_Base_SetConfig+0x2e>
 800639a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800639e:	4290      	cmp	r0, r2
 80063a0:	d00b      	beq.n	80063ba <TIM_Base_SetConfig+0x2e>
 80063a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063a6:	4290      	cmp	r0, r2
 80063a8:	d007      	beq.n	80063ba <TIM_Base_SetConfig+0x2e>
 80063aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063ae:	4290      	cmp	r0, r2
 80063b0:	d003      	beq.n	80063ba <TIM_Base_SetConfig+0x2e>
 80063b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80063b6:	4290      	cmp	r0, r2
 80063b8:	d119      	bne.n	80063ee <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80063ba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80063c0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063c2:	4a23      	ldr	r2, [pc, #140]	; (8006450 <TIM_Base_SetConfig+0xc4>)
 80063c4:	4290      	cmp	r0, r2
 80063c6:	d029      	beq.n	800641c <TIM_Base_SetConfig+0x90>
 80063c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80063cc:	d026      	beq.n	800641c <TIM_Base_SetConfig+0x90>
 80063ce:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80063d2:	4290      	cmp	r0, r2
 80063d4:	d022      	beq.n	800641c <TIM_Base_SetConfig+0x90>
 80063d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063da:	4290      	cmp	r0, r2
 80063dc:	d01e      	beq.n	800641c <TIM_Base_SetConfig+0x90>
 80063de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063e2:	4290      	cmp	r0, r2
 80063e4:	d01a      	beq.n	800641c <TIM_Base_SetConfig+0x90>
 80063e6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80063ea:	4290      	cmp	r0, r2
 80063ec:	d016      	beq.n	800641c <TIM_Base_SetConfig+0x90>
 80063ee:	4a19      	ldr	r2, [pc, #100]	; (8006454 <TIM_Base_SetConfig+0xc8>)
 80063f0:	4290      	cmp	r0, r2
 80063f2:	d013      	beq.n	800641c <TIM_Base_SetConfig+0x90>
 80063f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063f8:	4290      	cmp	r0, r2
 80063fa:	d00f      	beq.n	800641c <TIM_Base_SetConfig+0x90>
 80063fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006400:	4290      	cmp	r0, r2
 8006402:	d00b      	beq.n	800641c <TIM_Base_SetConfig+0x90>
 8006404:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006408:	4290      	cmp	r0, r2
 800640a:	d007      	beq.n	800641c <TIM_Base_SetConfig+0x90>
 800640c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006410:	4290      	cmp	r0, r2
 8006412:	d003      	beq.n	800641c <TIM_Base_SetConfig+0x90>
 8006414:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006418:	4290      	cmp	r0, r2
 800641a:	d103      	bne.n	8006424 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
 800641c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006420:	68ca      	ldr	r2, [r1, #12]
 8006422:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006424:	694a      	ldr	r2, [r1, #20]
 8006426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800642a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800642c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800642e:	688b      	ldr	r3, [r1, #8]
 8006430:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006432:	680b      	ldr	r3, [r1, #0]
 8006434:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006436:	4b06      	ldr	r3, [pc, #24]	; (8006450 <TIM_Base_SetConfig+0xc4>)
 8006438:	4298      	cmp	r0, r3
 800643a:	d003      	beq.n	8006444 <TIM_Base_SetConfig+0xb8>
 800643c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006440:	4298      	cmp	r0, r3
 8006442:	d101      	bne.n	8006448 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8006444:	690b      	ldr	r3, [r1, #16]
 8006446:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006448:	2301      	movs	r3, #1
 800644a:	6143      	str	r3, [r0, #20]
}
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40010000 	.word	0x40010000
 8006454:	40014000 	.word	0x40014000

08006458 <HAL_TIM_Base_Init>:
{
 8006458:	b510      	push	{r4, lr}
  if (htim == NULL)
 800645a:	4604      	mov	r4, r0
 800645c:	b350      	cbz	r0, 80064b4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800645e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006462:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006466:	b91b      	cbnz	r3, 8006470 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006468:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800646c:	f7fc f85a 	bl	8002524 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006470:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006472:	6820      	ldr	r0, [r4, #0]
 8006474:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8006476:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800647a:	f7ff ff87 	bl	800638c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800647e:	2301      	movs	r3, #1
  return HAL_OK;
 8006480:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006482:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006486:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800648a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800648e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006492:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006496:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800649a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800649e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80064a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064a6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80064aa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80064ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80064b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80064b4:	2001      	movs	r0, #1
 80064b6:	e7fc      	b.n	80064b2 <HAL_TIM_Base_Init+0x5a>

080064b8 <HAL_TIM_PWM_Init>:
{
 80064b8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80064ba:	4604      	mov	r4, r0
 80064bc:	b350      	cbz	r0, 8006514 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80064be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80064c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80064c6:	b91b      	cbnz	r3, 80064d0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80064c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80064cc:	f7fc f87e 	bl	80025cc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d2:	6820      	ldr	r0, [r4, #0]
 80064d4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80064d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064da:	f7ff ff57 	bl	800638c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064de:	2301      	movs	r3, #1
  return HAL_OK;
 80064e0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064e2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80064ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80064ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80064f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80064f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006502:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006506:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800650a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800650e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006512:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006514:	2001      	movs	r0, #1
 8006516:	e7fc      	b.n	8006512 <HAL_TIM_PWM_Init+0x5a>

08006518 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006518:	6a03      	ldr	r3, [r0, #32]
 800651a:	f023 0310 	bic.w	r3, r3, #16
{
 800651e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006520:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006522:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006524:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006526:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8006528:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800652c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800652e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8006532:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006536:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800653a:	688d      	ldr	r5, [r1, #8]
 800653c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006540:	4d10      	ldr	r5, [pc, #64]	; (8006584 <TIM_OC2_SetConfig+0x6c>)
 8006542:	42a8      	cmp	r0, r5
 8006544:	d003      	beq.n	800654e <TIM_OC2_SetConfig+0x36>
 8006546:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800654a:	42a8      	cmp	r0, r5
 800654c:	d114      	bne.n	8006578 <TIM_OC2_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800654e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006554:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006558:	4d0a      	ldr	r5, [pc, #40]	; (8006584 <TIM_OC2_SetConfig+0x6c>)
 800655a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800655c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006560:	d003      	beq.n	800656a <TIM_OC2_SetConfig+0x52>
 8006562:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006566:	42a8      	cmp	r0, r5
 8006568:	d106      	bne.n	8006578 <TIM_OC2_SetConfig+0x60>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800656a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800656e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006572:	4335      	orrs	r5, r6
 8006574:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8006578:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800657a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800657c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800657e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006580:	6203      	str	r3, [r0, #32]
}
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	40010000 	.word	0x40010000

08006588 <HAL_TIM_PWM_ConfigChannel>:
{
 8006588:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800658a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800658e:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8006590:	2b01      	cmp	r3, #1
 8006592:	d079      	beq.n	8006688 <HAL_TIM_PWM_ConfigChannel+0x100>
 8006594:	2001      	movs	r0, #1
  switch (Channel)
 8006596:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 8006598:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  switch (Channel)
 800659c:	d052      	beq.n	8006644 <HAL_TIM_PWM_ConfigChannel+0xbc>
 800659e:	d808      	bhi.n	80065b2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80065a0:	2a04      	cmp	r2, #4
 80065a2:	d02d      	beq.n	8006600 <HAL_TIM_PWM_ConfigChannel+0x78>
 80065a4:	2a08      	cmp	r2, #8
 80065a6:	d03c      	beq.n	8006622 <HAL_TIM_PWM_ConfigChannel+0x9a>
 80065a8:	b1c2      	cbz	r2, 80065dc <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_UNLOCK(htim);
 80065aa:	2300      	movs	r3, #0
 80065ac:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80065b0:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80065b2:	2a10      	cmp	r2, #16
 80065b4:	d057      	beq.n	8006666 <HAL_TIM_PWM_ConfigChannel+0xde>
 80065b6:	2a14      	cmp	r2, #20
 80065b8:	d1f7      	bne.n	80065aa <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065ba:	6828      	ldr	r0, [r5, #0]
 80065bc:	f7ff fdcc 	bl	8006158 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065c0:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80065da:	e053      	b.n	8006684 <HAL_TIM_PWM_ConfigChannel+0xfc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065dc:	6828      	ldr	r0, [r5, #0]
 80065de:	f7ff fcff 	bl	8005fe0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065e2:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065e4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065e6:	699a      	ldr	r2, [r3, #24]
 80065e8:	f042 0208 	orr.w	r2, r2, #8
 80065ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065ee:	699a      	ldr	r2, [r3, #24]
 80065f0:	f022 0204 	bic.w	r2, r2, #4
 80065f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065f6:	699a      	ldr	r2, [r3, #24]
 80065f8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065fa:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80065fc:	2000      	movs	r0, #0
      break;
 80065fe:	e7d4      	b.n	80065aa <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006600:	6828      	ldr	r0, [r5, #0]
 8006602:	f7ff ff89 	bl	8006518 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006606:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006608:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800660a:	699a      	ldr	r2, [r3, #24]
 800660c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006610:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006612:	699a      	ldr	r2, [r3, #24]
 8006614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006618:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800661a:	699a      	ldr	r2, [r3, #24]
 800661c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006620:	e7eb      	b.n	80065fa <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006622:	6828      	ldr	r0, [r5, #0]
 8006624:	f7ff fd10 	bl	8006048 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006628:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800662a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800662c:	69da      	ldr	r2, [r3, #28]
 800662e:	f042 0208 	orr.w	r2, r2, #8
 8006632:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006634:	69da      	ldr	r2, [r3, #28]
 8006636:	f022 0204 	bic.w	r2, r2, #4
 800663a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800663c:	69da      	ldr	r2, [r3, #28]
 800663e:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006640:	61da      	str	r2, [r3, #28]
      break;
 8006642:	e7db      	b.n	80065fc <HAL_TIM_PWM_ConfigChannel+0x74>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006644:	6828      	ldr	r0, [r5, #0]
 8006646:	f7ff fd37 	bl	80060b8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800664a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800664c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800664e:	69da      	ldr	r2, [r3, #28]
 8006650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006656:	69da      	ldr	r2, [r3, #28]
 8006658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800665c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006664:	e7ec      	b.n	8006640 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006666:	6828      	ldr	r0, [r5, #0]
 8006668:	f7ff fd4e 	bl	8006108 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800666c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800666e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006672:	f042 0208 	orr.w	r2, r2, #8
 8006676:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800667a:	f022 0204 	bic.w	r2, r2, #4
 800667e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006682:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006684:	655a      	str	r2, [r3, #84]	; 0x54
 8006686:	e7b9      	b.n	80065fc <HAL_TIM_PWM_ConfigChannel+0x74>
  __HAL_LOCK(htim);
 8006688:	2002      	movs	r0, #2
 800668a:	e791      	b.n	80065b0 <HAL_TIM_PWM_ConfigChannel+0x28>

0800668c <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800668c:	4311      	orrs	r1, r2
{
 800668e:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8006690:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006692:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006696:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800669a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800669c:	6083      	str	r3, [r0, #8]
}
 800669e:	bd10      	pop	{r4, pc}

080066a0 <HAL_TIM_ConfigClockSource>:
{
 80066a0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80066a2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80066a6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	f04f 0302 	mov.w	r3, #2
 80066ae:	f000 808f 	beq.w	80067d0 <HAL_TIM_ConfigClockSource+0x130>
 80066b2:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80066b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b8:	4b46      	ldr	r3, [pc, #280]	; (80067d4 <HAL_TIM_ConfigClockSource+0x134>)
  __HAL_LOCK(htim);
 80066ba:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80066be:	6800      	ldr	r0, [r0, #0]
 80066c0:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80066c4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80066c6:	680b      	ldr	r3, [r1, #0]
 80066c8:	2b60      	cmp	r3, #96	; 0x60
 80066ca:	d052      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0xd2>
 80066cc:	d833      	bhi.n	8006736 <HAL_TIM_ConfigClockSource+0x96>
 80066ce:	2b40      	cmp	r3, #64	; 0x40
 80066d0:	d067      	beq.n	80067a2 <HAL_TIM_ConfigClockSource+0x102>
 80066d2:	d816      	bhi.n	8006702 <HAL_TIM_ConfigClockSource+0x62>
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d00d      	beq.n	80066f4 <HAL_TIM_ConfigClockSource+0x54>
 80066d8:	d80a      	bhi.n	80066f0 <HAL_TIM_ConfigClockSource+0x50>
 80066da:	f033 0110 	bics.w	r1, r3, #16
 80066de:	d009      	beq.n	80066f4 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80066e6:	2300      	movs	r3, #0
 80066e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80066ec:	4610      	mov	r0, r2
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80066f0:	2b30      	cmp	r3, #48	; 0x30
 80066f2:	d1f5      	bne.n	80066e0 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 80066f4:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80066f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f043 0307 	orr.w	r3, r3, #7
 8006700:	e017      	b.n	8006732 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8006702:	2b50      	cmp	r3, #80	; 0x50
 8006704:	d1ec      	bne.n	80066e0 <HAL_TIM_ConfigClockSource+0x40>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006706:	684a      	ldr	r2, [r1, #4]
 8006708:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800670a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800670c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800670e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006712:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8006716:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006718:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800671a:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800671c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006720:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006724:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006726:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006728:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800672e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8006732:	6083      	str	r3, [r0, #8]
 8006734:	e011      	b.n	800675a <HAL_TIM_ConfigClockSource+0xba>
  switch (sClockSourceConfig->ClockSource)
 8006736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673a:	d00e      	beq.n	800675a <HAL_TIM_ConfigClockSource+0xba>
 800673c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006740:	d00d      	beq.n	800675e <HAL_TIM_ConfigClockSource+0xbe>
 8006742:	2b70      	cmp	r3, #112	; 0x70
 8006744:	d1cc      	bne.n	80066e0 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8006746:	68cb      	ldr	r3, [r1, #12]
 8006748:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800674c:	f7ff ff9e 	bl	800668c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006750:	6822      	ldr	r2, [r4, #0]
 8006752:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006754:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006758:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800675a:	2200      	movs	r2, #0
 800675c:	e7c0      	b.n	80066e0 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 800675e:	68cb      	ldr	r3, [r1, #12]
 8006760:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006764:	f7ff ff92 	bl	800668c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	6893      	ldr	r3, [r2, #8]
 800676c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006770:	e7f2      	b.n	8006758 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006772:	684d      	ldr	r5, [r1, #4]
 8006774:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006776:	6a01      	ldr	r1, [r0, #32]
 8006778:	f021 0110 	bic.w	r1, r1, #16
 800677c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800677e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8006780:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006782:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006786:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800678a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800678e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8006792:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006794:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006796:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800679c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80067a0:	e7c7      	b.n	8006732 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067a2:	684a      	ldr	r2, [r1, #4]
 80067a4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80067a6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067a8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067aa:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ae:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 80067b2:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b6:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067bc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80067c0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80067c2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80067c4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80067c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ca:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80067ce:	e7b0      	b.n	8006732 <HAL_TIM_ConfigClockSource+0x92>
  __HAL_LOCK(htim);
 80067d0:	461a      	mov	r2, r3
 80067d2:	e78b      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x4c>
 80067d4:	fffe0088 	.word	0xfffe0088

080067d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067d8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80067de:	2b01      	cmp	r3, #1
 80067e0:	f04f 0302 	mov.w	r3, #2
 80067e4:	d03d      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0x8a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067ea:	4d1f      	ldr	r5, [pc, #124]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
  tmpcr2 = htim->Instance->CR2;
 80067ec:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067ee:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 80067f0:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80067f2:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067f4:	d003      	beq.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80067f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80067fa:	42ab      	cmp	r3, r5
 80067fc:	d103      	bne.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006802:	684d      	ldr	r5, [r1, #4]
 8006804:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006806:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006808:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800680c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800680e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006810:	4a15      	ldr	r2, [pc, #84]	; (8006868 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01a      	beq.n	800684c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681a:	d017      	beq.n	800684c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800681c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006820:	4293      	cmp	r3, r2
 8006822:	d013      	beq.n	800684c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006824:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006828:	4293      	cmp	r3, r2
 800682a:	d00f      	beq.n	800684c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800682c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006830:	4293      	cmp	r3, r2
 8006832:	d00b      	beq.n	800684c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006834:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006838:	4293      	cmp	r3, r2
 800683a:	d007      	beq.n	800684c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 800683c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006840:	4293      	cmp	r3, r2
 8006842:	d003      	beq.n	800684c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8006844:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006848:	4293      	cmp	r3, r2
 800684a:	d104      	bne.n	8006856 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800684c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800684e:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006852:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006854:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006856:	2301      	movs	r3, #1
 8006858:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800685c:	2300      	movs	r3, #0
 800685e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8006862:	4618      	mov	r0, r3

  return HAL_OK;
}
 8006864:	bd30      	pop	{r4, r5, pc}
 8006866:	bf00      	nop
 8006868:	40010000 	.word	0x40010000

0800686c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800686c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800686e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006872:	2b01      	cmp	r3, #1
 8006874:	d038      	beq.n	80068e8 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006876:	68cb      	ldr	r3, [r1, #12]
 8006878:	688a      	ldr	r2, [r1, #8]
 800687a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800687e:	4c1b      	ldr	r4, [pc, #108]	; (80068ec <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006880:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006882:	684a      	ldr	r2, [r1, #4]
 8006884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006888:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800688a:	680a      	ldr	r2, [r1, #0]
 800688c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006890:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006892:	690a      	ldr	r2, [r1, #16]
 8006894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006898:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800689a:	694a      	ldr	r2, [r1, #20]
 800689c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068a2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80068a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068a8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068aa:	698a      	ldr	r2, [r1, #24]
 80068ac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80068b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068b4:	6802      	ldr	r2, [r0, #0]
 80068b6:	42a2      	cmp	r2, r4
 80068b8:	d003      	beq.n	80068c2 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 80068ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068be:	42a2      	cmp	r2, r4
 80068c0:	d10c      	bne.n	80068dc <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068c2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80068c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068c8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068cc:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068ce:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068d4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068d6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80068da:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068dc:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80068de:	2300      	movs	r3, #0
 80068e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80068e4:	4618      	mov	r0, r3
}
 80068e6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80068e8:	2002      	movs	r0, #2
 80068ea:	e7fc      	b.n	80068e6 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 80068ec:	40010000 	.word	0x40010000

080068f0 <HAL_TIMEx_CommutCallback>:
 80068f0:	4770      	bx	lr

080068f2 <HAL_TIMEx_BreakCallback>:
 80068f2:	4770      	bx	lr

080068f4 <HAL_TIMEx_Break2Callback>:
 80068f4:	4770      	bx	lr
	...

080068f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068fc:	69c0      	ldr	r0, [r0, #28]
 80068fe:	6921      	ldr	r1, [r4, #16]
 8006900:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006902:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006904:	430a      	orrs	r2, r1
 8006906:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006908:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800690a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800690c:	498e      	ldr	r1, [pc, #568]	; (8006b48 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800690e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006910:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8006912:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006914:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006916:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006918:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006920:	430a      	orrs	r2, r1
 8006922:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006924:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006926:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8006928:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800692a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800692e:	430a      	orrs	r2, r1
 8006930:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006932:	4a86      	ldr	r2, [pc, #536]	; (8006b4c <UART_SetConfig+0x254>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d117      	bne.n	8006968 <UART_SetConfig+0x70>
 8006938:	4b85      	ldr	r3, [pc, #532]	; (8006b50 <UART_SetConfig+0x258>)
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	3b01      	subs	r3, #1
 8006944:	2b02      	cmp	r3, #2
 8006946:	f200 80e2 	bhi.w	8006b0e <UART_SetConfig+0x216>
 800694a:	4a82      	ldr	r2, [pc, #520]	; (8006b54 <UART_SetConfig+0x25c>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800694c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006950:	5cd3      	ldrb	r3, [r2, r3]
 8006952:	f040 80b3 	bne.w	8006abc <UART_SetConfig+0x1c4>
  {
    switch (clocksource)
 8006956:	2b08      	cmp	r3, #8
 8006958:	d822      	bhi.n	80069a0 <UART_SetConfig+0xa8>
 800695a:	e8df f003 	tbb	[pc, r3]
 800695e:	db90      	.short	0xdb90
 8006960:	21d52198 	.word	0x21d52198
 8006964:	2121      	.short	0x2121
 8006966:	99          	.byte	0x99
 8006967:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006968:	4a7b      	ldr	r2, [pc, #492]	; (8006b58 <UART_SetConfig+0x260>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d106      	bne.n	800697c <UART_SetConfig+0x84>
 800696e:	4b78      	ldr	r3, [pc, #480]	; (8006b50 <UART_SetConfig+0x258>)
 8006970:	4a7a      	ldr	r2, [pc, #488]	; (8006b5c <UART_SetConfig+0x264>)
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006976:	f003 030c 	and.w	r3, r3, #12
 800697a:	e7e7      	b.n	800694c <UART_SetConfig+0x54>
 800697c:	4a78      	ldr	r2, [pc, #480]	; (8006b60 <UART_SetConfig+0x268>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d118      	bne.n	80069b4 <UART_SetConfig+0xbc>
 8006982:	4b73      	ldr	r3, [pc, #460]	; (8006b50 <UART_SetConfig+0x258>)
 8006984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006988:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800698c:	2b20      	cmp	r3, #32
 800698e:	f000 80b3 	beq.w	8006af8 <UART_SetConfig+0x200>
 8006992:	d807      	bhi.n	80069a4 <UART_SetConfig+0xac>
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 80c0 	beq.w	8006b1a <UART_SetConfig+0x222>
 800699a:	2b10      	cmp	r3, #16
 800699c:	f000 80b1 	beq.w	8006b02 <UART_SetConfig+0x20a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069a0:	2001      	movs	r0, #1
 80069a2:	e070      	b.n	8006a86 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069a4:	2b30      	cmp	r3, #48	; 0x30
 80069a6:	d1fb      	bne.n	80069a0 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80069ac:	d070      	beq.n	8006a90 <UART_SetConfig+0x198>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80069b2:	e0b9      	b.n	8006b28 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069b4:	4a6b      	ldr	r2, [pc, #428]	; (8006b64 <UART_SetConfig+0x26c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d10f      	bne.n	80069da <UART_SetConfig+0xe2>
 80069ba:	4b65      	ldr	r3, [pc, #404]	; (8006b50 <UART_SetConfig+0x258>)
 80069bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069c4:	2b80      	cmp	r3, #128	; 0x80
 80069c6:	f000 8097 	beq.w	8006af8 <UART_SetConfig+0x200>
 80069ca:	d804      	bhi.n	80069d6 <UART_SetConfig+0xde>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 80a4 	beq.w	8006b1a <UART_SetConfig+0x222>
 80069d2:	2b40      	cmp	r3, #64	; 0x40
 80069d4:	e7e2      	b.n	800699c <UART_SetConfig+0xa4>
 80069d6:	2bc0      	cmp	r3, #192	; 0xc0
 80069d8:	e7e5      	b.n	80069a6 <UART_SetConfig+0xae>
 80069da:	4a63      	ldr	r2, [pc, #396]	; (8006b68 <UART_SetConfig+0x270>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d112      	bne.n	8006a06 <UART_SetConfig+0x10e>
 80069e0:	4b5b      	ldr	r3, [pc, #364]	; (8006b50 <UART_SetConfig+0x258>)
 80069e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ee:	f000 8083 	beq.w	8006af8 <UART_SetConfig+0x200>
 80069f2:	d805      	bhi.n	8006a00 <UART_SetConfig+0x108>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 8090 	beq.w	8006b1a <UART_SetConfig+0x222>
 80069fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069fe:	e7cd      	b.n	800699c <UART_SetConfig+0xa4>
 8006a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a04:	e7cf      	b.n	80069a6 <UART_SetConfig+0xae>
 8006a06:	4a59      	ldr	r2, [pc, #356]	; (8006b6c <UART_SetConfig+0x274>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d110      	bne.n	8006a2e <UART_SetConfig+0x136>
 8006a0c:	4b50      	ldr	r3, [pc, #320]	; (8006b50 <UART_SetConfig+0x258>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a1a:	d06d      	beq.n	8006af8 <UART_SetConfig+0x200>
 8006a1c:	d804      	bhi.n	8006a28 <UART_SetConfig+0x130>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d075      	beq.n	8006b0e <UART_SetConfig+0x216>
 8006a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a26:	e7b9      	b.n	800699c <UART_SetConfig+0xa4>
 8006a28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a2c:	e7bb      	b.n	80069a6 <UART_SetConfig+0xae>
 8006a2e:	4a50      	ldr	r2, [pc, #320]	; (8006b70 <UART_SetConfig+0x278>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d110      	bne.n	8006a56 <UART_SetConfig+0x15e>
 8006a34:	4b46      	ldr	r3, [pc, #280]	; (8006b50 <UART_SetConfig+0x258>)
 8006a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a3a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a42:	d059      	beq.n	8006af8 <UART_SetConfig+0x200>
 8006a44:	d804      	bhi.n	8006a50 <UART_SetConfig+0x158>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d067      	beq.n	8006b1a <UART_SetConfig+0x222>
 8006a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a4e:	e7a5      	b.n	800699c <UART_SetConfig+0xa4>
 8006a50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a54:	e7a7      	b.n	80069a6 <UART_SetConfig+0xae>
 8006a56:	4a47      	ldr	r2, [pc, #284]	; (8006b74 <UART_SetConfig+0x27c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d1a1      	bne.n	80069a0 <UART_SetConfig+0xa8>
 8006a5c:	4b3c      	ldr	r3, [pc, #240]	; (8006b50 <UART_SetConfig+0x258>)
 8006a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a6a:	d045      	beq.n	8006af8 <UART_SetConfig+0x200>
 8006a6c:	d804      	bhi.n	8006a78 <UART_SetConfig+0x180>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d053      	beq.n	8006b1a <UART_SetConfig+0x222>
 8006a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a76:	e791      	b.n	800699c <UART_SetConfig+0xa4>
 8006a78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a7c:	e793      	b.n	80069a6 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a7e:	f7fd ff41 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006a82:	b928      	cbnz	r0, 8006a90 <UART_SetConfig+0x198>
 8006a84:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a86:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8006a88:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68

  return ret;
}
 8006a8c:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8006a8e:	483a      	ldr	r0, [pc, #232]	; (8006b78 <UART_SetConfig+0x280>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a90:	6862      	ldr	r2, [r4, #4]
 8006a92:	0853      	lsrs	r3, r2, #1
 8006a94:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a98:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a9c:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aa0:	f1a0 0210 	sub.w	r2, r0, #16
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	f63f af7b 	bhi.w	80069a0 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aaa:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006aae:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8006ab2:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ab4:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8006ab6:	4318      	orrs	r0, r3
 8006ab8:	60d0      	str	r0, [r2, #12]
 8006aba:	e7e3      	b.n	8006a84 <UART_SetConfig+0x18c>
    switch (clocksource)
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	f63f af6f 	bhi.w	80069a0 <UART_SetConfig+0xa8>
 8006ac2:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <UART_SetConfig+0x1d0>)
 8006ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac8:	08006b21 	.word	0x08006b21
 8006acc:	08006aed 	.word	0x08006aed
 8006ad0:	08006aff 	.word	0x08006aff
 8006ad4:	080069a1 	.word	0x080069a1
 8006ad8:	08006af3 	.word	0x08006af3
 8006adc:	080069a1 	.word	0x080069a1
 8006ae0:	080069a1 	.word	0x080069a1
 8006ae4:	080069a1 	.word	0x080069a1
 8006ae8:	080069af 	.word	0x080069af
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aec:	f7fd ff1a 	bl	8004924 <HAL_RCC_GetPCLK2Freq>
        break;
 8006af0:	e018      	b.n	8006b24 <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006af2:	f7fd fe39 	bl	8004768 <HAL_RCC_GetSysClockFreq>
        break;
 8006af6:	e015      	b.n	8006b24 <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006af8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006afc:	d0c7      	beq.n	8006a8e <UART_SetConfig+0x196>
        pclk = (uint32_t) HSI_VALUE;
 8006afe:	481e      	ldr	r0, [pc, #120]	; (8006b78 <UART_SetConfig+0x280>)
 8006b00:	e012      	b.n	8006b28 <UART_SetConfig+0x230>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b02:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006b06:	d1f4      	bne.n	8006af2 <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 8006b08:	f7fd fe2e 	bl	8004768 <HAL_RCC_GetSysClockFreq>
        break;
 8006b0c:	e7b9      	b.n	8006a82 <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b0e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006b12:	d1eb      	bne.n	8006aec <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b14:	f7fd ff06 	bl	8004924 <HAL_RCC_GetPCLK2Freq>
        break;
 8006b18:	e7b3      	b.n	8006a82 <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b1a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006b1e:	d0ae      	beq.n	8006a7e <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b20:	f7fd fef0 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d0ad      	beq.n	8006a84 <UART_SetConfig+0x18c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b28:	6862      	ldr	r2, [r4, #4]
 8006b2a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8006b2e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b32:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006b36:	f1a3 0110 	sub.w	r1, r3, #16
 8006b3a:	4291      	cmp	r1, r2
 8006b3c:	f63f af30 	bhi.w	80069a0 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b40:	6822      	ldr	r2, [r4, #0]
 8006b42:	60d3      	str	r3, [r2, #12]
 8006b44:	e79e      	b.n	8006a84 <UART_SetConfig+0x18c>
 8006b46:	bf00      	nop
 8006b48:	efff69f3 	.word	0xefff69f3
 8006b4c:	40011000 	.word	0x40011000
 8006b50:	40023800 	.word	0x40023800
 8006b54:	08011bac 	.word	0x08011bac
 8006b58:	40004400 	.word	0x40004400
 8006b5c:	08011baf 	.word	0x08011baf
 8006b60:	40004800 	.word	0x40004800
 8006b64:	40004c00 	.word	0x40004c00
 8006b68:	40005000 	.word	0x40005000
 8006b6c:	40011400 	.word	0x40011400
 8006b70:	40007800 	.word	0x40007800
 8006b74:	40007c00 	.word	0x40007c00
 8006b78:	00f42400 	.word	0x00f42400

08006b7c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b7e:	07da      	lsls	r2, r3, #31
{
 8006b80:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b82:	d506      	bpl.n	8006b92 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b84:	6801      	ldr	r1, [r0, #0]
 8006b86:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006b88:	684a      	ldr	r2, [r1, #4]
 8006b8a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006b8e:	4322      	orrs	r2, r4
 8006b90:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b92:	079c      	lsls	r4, r3, #30
 8006b94:	d506      	bpl.n	8006ba4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b96:	6801      	ldr	r1, [r0, #0]
 8006b98:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006b9a:	684a      	ldr	r2, [r1, #4]
 8006b9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ba0:	4322      	orrs	r2, r4
 8006ba2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ba4:	0759      	lsls	r1, r3, #29
 8006ba6:	d506      	bpl.n	8006bb6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ba8:	6801      	ldr	r1, [r0, #0]
 8006baa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006bac:	684a      	ldr	r2, [r1, #4]
 8006bae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bb2:	4322      	orrs	r2, r4
 8006bb4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bb6:	071a      	lsls	r2, r3, #28
 8006bb8:	d506      	bpl.n	8006bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bba:	6801      	ldr	r1, [r0, #0]
 8006bbc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006bbe:	684a      	ldr	r2, [r1, #4]
 8006bc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bc4:	4322      	orrs	r2, r4
 8006bc6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bc8:	06dc      	lsls	r4, r3, #27
 8006bca:	d506      	bpl.n	8006bda <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bcc:	6801      	ldr	r1, [r0, #0]
 8006bce:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006bd0:	688a      	ldr	r2, [r1, #8]
 8006bd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bd6:	4322      	orrs	r2, r4
 8006bd8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bda:	0699      	lsls	r1, r3, #26
 8006bdc:	d506      	bpl.n	8006bec <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bde:	6801      	ldr	r1, [r0, #0]
 8006be0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006be2:	688a      	ldr	r2, [r1, #8]
 8006be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006be8:	4322      	orrs	r2, r4
 8006bea:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bec:	065a      	lsls	r2, r3, #25
 8006bee:	d510      	bpl.n	8006c12 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bf0:	6801      	ldr	r1, [r0, #0]
 8006bf2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006bf4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bf6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bfa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006bfe:	ea42 0204 	orr.w	r2, r2, r4
 8006c02:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c04:	d105      	bne.n	8006c12 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c06:	684a      	ldr	r2, [r1, #4]
 8006c08:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006c0a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006c0e:	4322      	orrs	r2, r4
 8006c10:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c12:	061b      	lsls	r3, r3, #24
 8006c14:	d506      	bpl.n	8006c24 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c16:	6802      	ldr	r2, [r0, #0]
 8006c18:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006c1a:	6853      	ldr	r3, [r2, #4]
 8006c1c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006c20:	430b      	orrs	r3, r1
 8006c22:	6053      	str	r3, [r2, #4]
  }
}
 8006c24:	bd10      	pop	{r4, pc}

08006c26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006c2e:	4604      	mov	r4, r0
 8006c30:	460e      	mov	r6, r1
 8006c32:	4615      	mov	r5, r2
 8006c34:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c36:	6822      	ldr	r2, [r4, #0]
 8006c38:	69d3      	ldr	r3, [r2, #28]
 8006c3a:	ea36 0303 	bics.w	r3, r6, r3
 8006c3e:	bf0c      	ite	eq
 8006c40:	2301      	moveq	r3, #1
 8006c42:	2300      	movne	r3, #0
 8006c44:	42ab      	cmp	r3, r5
 8006c46:	d001      	beq.n	8006c4c <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8006c48:	2000      	movs	r0, #0
 8006c4a:	e026      	b.n	8006c9a <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8006c4c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006c50:	d0f2      	beq.n	8006c38 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c52:	f7fb ff71 	bl	8002b38 <HAL_GetTick>
 8006c56:	1bc0      	subs	r0, r0, r7
 8006c58:	4540      	cmp	r0, r8
 8006c5a:	6820      	ldr	r0, [r4, #0]
 8006c5c:	d802      	bhi.n	8006c64 <UART_WaitOnFlagUntilTimeout+0x3e>
 8006c5e:	f1b8 0f00 	cmp.w	r8, #0
 8006c62:	d11c      	bne.n	8006c9e <UART_WaitOnFlagUntilTimeout+0x78>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	e840 3200 	strex	r2, r3, [r0]
 8006c70:	2a00      	cmp	r2, #0
 8006c72:	d1f7      	bne.n	8006c64 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	f100 0308 	add.w	r3, r0, #8
 8006c78:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c80:	f100 0108 	add.w	r1, r0, #8
 8006c84:	e841 3200 	strex	r2, r3, [r1]
 8006c88:	2a00      	cmp	r2, #0
 8006c8a:	d1f3      	bne.n	8006c74 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8006c8c:	2320      	movs	r3, #32
 8006c8e:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006c90:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8006c94:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8006c96:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
}
 8006c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c9e:	6803      	ldr	r3, [r0, #0]
 8006ca0:	075a      	lsls	r2, r3, #29
 8006ca2:	d5c8      	bpl.n	8006c36 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ca4:	69c3      	ldr	r3, [r0, #28]
 8006ca6:	051b      	lsls	r3, r3, #20
 8006ca8:	d5c5      	bpl.n	8006c36 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cae:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	e840 3200 	strex	r2, r3, [r0]
 8006cbc:	2a00      	cmp	r2, #0
 8006cbe:	d1f7      	bne.n	8006cb0 <UART_WaitOnFlagUntilTimeout+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	f100 0308 	add.w	r3, r0, #8
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	f100 0108 	add.w	r1, r0, #8
 8006cd0:	e841 3200 	strex	r2, r3, [r1]
 8006cd4:	2a00      	cmp	r2, #0
 8006cd6:	d1f3      	bne.n	8006cc0 <UART_WaitOnFlagUntilTimeout+0x9a>
          huart->gState = HAL_UART_STATE_READY;
 8006cd8:	2320      	movs	r3, #32
 8006cda:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006cdc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ce0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006ce4:	e7d6      	b.n	8006c94 <UART_WaitOnFlagUntilTimeout+0x6e>

08006ce6 <HAL_UART_Transmit>:
{
 8006ce6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006cea:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006cec:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8006cee:	4604      	mov	r4, r0
 8006cf0:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8006cf2:	2b20      	cmp	r3, #32
{
 8006cf4:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006cf6:	d142      	bne.n	8006d7e <HAL_UART_Transmit+0x98>
    if ((pData == NULL) || (Size == 0U))
 8006cf8:	2900      	cmp	r1, #0
 8006cfa:	d042      	beq.n	8006d82 <HAL_UART_Transmit+0x9c>
 8006cfc:	2a00      	cmp	r2, #0
 8006cfe:	d040      	beq.n	8006d82 <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d00:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d02:	2500      	movs	r5, #0
 8006d04:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d08:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8006d0a:	f7fb ff15 	bl	8002b38 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d0e:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8006d10:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8006d12:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d16:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8006d1a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d1e:	d103      	bne.n	8006d28 <HAL_UART_Transmit+0x42>
 8006d20:	6922      	ldr	r2, [r4, #16]
 8006d22:	b90a      	cbnz	r2, 8006d28 <HAL_UART_Transmit+0x42>
 8006d24:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8006d26:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8006d28:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d2c:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8006d30:	b292      	uxth	r2, r2
 8006d32:	b93a      	cbnz	r2, 8006d44 <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d34:	2140      	movs	r1, #64	; 0x40
 8006d36:	4620      	mov	r0, r4
 8006d38:	f7ff ff75 	bl	8006c26 <UART_WaitOnFlagUntilTimeout>
 8006d3c:	b950      	cbnz	r0, 8006d54 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8006d3e:	2320      	movs	r3, #32
 8006d40:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8006d42:	e008      	b.n	8006d56 <HAL_UART_Transmit+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d44:	2200      	movs	r2, #0
 8006d46:	2180      	movs	r1, #128	; 0x80
 8006d48:	4620      	mov	r0, r4
 8006d4a:	9303      	str	r3, [sp, #12]
 8006d4c:	f7ff ff6b 	bl	8006c26 <UART_WaitOnFlagUntilTimeout>
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	b118      	cbz	r0, 8006d5c <HAL_UART_Transmit+0x76>
        return HAL_TIMEOUT;
 8006d54:	2003      	movs	r0, #3
}
 8006d56:	b004      	add	sp, #16
 8006d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d5c:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8006d5e:	b95e      	cbnz	r6, 8006d78 <HAL_UART_Transmit+0x92>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d60:	f835 2b02 	ldrh.w	r2, [r5], #2
 8006d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d68:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8006d6a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8006d6e:	3a01      	subs	r2, #1
 8006d70:	b292      	uxth	r2, r2
 8006d72:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8006d76:	e7d7      	b.n	8006d28 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d78:	f816 2b01 	ldrb.w	r2, [r6], #1
 8006d7c:	e7f4      	b.n	8006d68 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8006d7e:	2002      	movs	r0, #2
 8006d80:	e7e9      	b.n	8006d56 <HAL_UART_Transmit+0x70>
      return  HAL_ERROR;
 8006d82:	2001      	movs	r0, #1
 8006d84:	e7e7      	b.n	8006d56 <HAL_UART_Transmit+0x70>

08006d86 <UART_CheckIdleState>:
{
 8006d86:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d88:	2500      	movs	r5, #0
{
 8006d8a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d8c:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8006d90:	f7fb fed2 	bl	8002b38 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d94:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8006d96:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	0712      	lsls	r2, r2, #28
 8006d9c:	d40a      	bmi.n	8006db4 <UART_CheckIdleState+0x2e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006da0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006da2:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 8006da6:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006da8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dac:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dae:	6660      	str	r0, [r4, #100]	; 0x64
}
 8006db0:	b003      	add	sp, #12
 8006db2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006db4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006db8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	9200      	str	r2, [sp, #0]
 8006dc0:	462a      	mov	r2, r5
 8006dc2:	f7ff ff30 	bl	8006c26 <UART_WaitOnFlagUntilTimeout>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d0e9      	beq.n	8006d9e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006dca:	2003      	movs	r0, #3
 8006dcc:	e7f0      	b.n	8006db0 <UART_CheckIdleState+0x2a>

08006dce <HAL_UART_Init>:
{
 8006dce:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	b340      	cbz	r0, 8006e26 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006dd4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006dd6:	b91b      	cbnz	r3, 8006de0 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8006dd8:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8006ddc:	f7fb fc92 	bl	8002704 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006de0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006de2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006de4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8006de6:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8006de8:	6813      	ldr	r3, [r2, #0]
 8006dea:	f023 0301 	bic.w	r3, r3, #1
 8006dee:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006df0:	f7ff fd82 	bl	80068f8 <UART_SetConfig>
 8006df4:	2801      	cmp	r0, #1
 8006df6:	d016      	beq.n	8006e26 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dfa:	b113      	cbz	r3, 8006e02 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f7ff febd 	bl	8006b7c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e02:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8006e04:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e14:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	f042 0201 	orr.w	r2, r2, #1
}
 8006e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8006e20:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006e22:	f7ff bfb0 	b.w	8006d86 <UART_CheckIdleState>
}
 8006e26:	2001      	movs	r0, #1
 8006e28:	bd10      	pop	{r4, pc}

08006e2a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006e2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006e2e:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e30:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8006e34:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8006e38:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8006e3c:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8006e40:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8006e44:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006e46:	b9a2      	cbnz	r2, 8006e72 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e48:	ea43 0209 	orr.w	r2, r3, r9
 8006e4c:	6801      	ldr	r1, [r0, #0]
 8006e4e:	432a      	orrs	r2, r5
 8006e50:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8006e54:	ea42 0308 	orr.w	r3, r2, r8
 8006e58:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8006e5c:	ea43 030e 	orr.w	r3, r3, lr
 8006e60:	ea43 030c 	orr.w	r3, r3, ip
 8006e64:	433b      	orrs	r3, r7
 8006e66:	4333      	orrs	r3, r6
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e72:	6802      	ldr	r2, [r0, #0]
 8006e74:	ea43 0309 	orr.w	r3, r3, r9
 8006e78:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006e80:	ea45 0308 	orr.w	r3, r5, r8
 8006e84:	6842      	ldr	r2, [r0, #4]
 8006e86:	ea43 030e 	orr.w	r3, r3, lr
 8006e8a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8006e8e:	ea43 030c 	orr.w	r3, r3, ip
 8006e92:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8006e96:	433b      	orrs	r3, r7
 8006e98:	4333      	orrs	r3, r6
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	6043      	str	r3, [r0, #4]
 8006e9e:	e7e5      	b.n	8006e6c <FMC_SDRAM_Init+0x42>

08006ea0 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ea0:	68cb      	ldr	r3, [r1, #12]
 8006ea2:	f103 3cff 	add.w	ip, r3, #4294967295
 8006ea6:	694b      	ldr	r3, [r1, #20]
{
 8006ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	680f      	ldr	r7, [r1, #0]
 8006eae:	684c      	ldr	r4, [r1, #4]
 8006eb0:	688e      	ldr	r6, [r1, #8]
 8006eb2:	051b      	lsls	r3, r3, #20
 8006eb4:	690d      	ldr	r5, [r1, #16]
 8006eb6:	3c01      	subs	r4, #1
 8006eb8:	6989      	ldr	r1, [r1, #24]
 8006eba:	3e01      	subs	r6, #1
 8006ebc:	3d01      	subs	r5, #1
 8006ebe:	3f01      	subs	r7, #1
 8006ec0:	3901      	subs	r1, #1
 8006ec2:	0124      	lsls	r4, r4, #4
 8006ec4:	0236      	lsls	r6, r6, #8
 8006ec6:	042d      	lsls	r5, r5, #16
 8006ec8:	0609      	lsls	r1, r1, #24
 8006eca:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006ece:	b95a      	cbnz	r2, 8006ee8 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ed0:	433b      	orrs	r3, r7
 8006ed2:	6882      	ldr	r2, [r0, #8]
 8006ed4:	4323      	orrs	r3, r4
 8006ed6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006eda:	4333      	orrs	r3, r6
 8006edc:	432b      	orrs	r3, r5
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ee8:	6882      	ldr	r2, [r0, #8]
 8006eea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006eee:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8006ef2:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006ef4:	ea44 0306 	orr.w	r3, r4, r6
 8006ef8:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006efa:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006efc:	68c2      	ldr	r2, [r0, #12]
 8006efe:	432b      	orrs	r3, r5
 8006f00:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006f04:	430b      	orrs	r3, r1
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60c3      	str	r3, [r0, #12]
 8006f0a:	e7eb      	b.n	8006ee4 <FMC_SDRAM_Timing_Init+0x44>

08006f0c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	ac03      	add	r4, sp, #12
 8006f12:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006f16:	460b      	mov	r3, r1
 8006f18:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006f1a:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8006f1c:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8006f1e:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006f20:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 8006f24:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8006f26:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006f28:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 8006f2c:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8006f2e:	9907      	ldr	r1, [sp, #28]
 8006f30:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8006f32:	9908      	ldr	r1, [sp, #32]
 8006f34:	430b      	orrs	r3, r1

  return HAL_OK;
}
 8006f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006f3a:	4313      	orrs	r3, r2
}
 8006f3c:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006f3e:	6043      	str	r3, [r0, #4]
}
 8006f40:	2000      	movs	r0, #0
 8006f42:	4770      	bx	lr

08006f44 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8006f44:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8006f48:	4770      	bx	lr

08006f4a <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8006f4e:	2000      	movs	r0, #0
 8006f50:	4770      	bx	lr

08006f52 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006f52:	6800      	ldr	r0, [r0, #0]
}
 8006f54:	f000 0003 	and.w	r0, r0, #3
 8006f58:	4770      	bx	lr

08006f5a <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006f5a:	680b      	ldr	r3, [r1, #0]
{
 8006f5c:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8006f5e:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006f60:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f62:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006f66:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006f6a:	4323      	orrs	r3, r4
                       Command->Response         |\
 8006f6c:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8006f6e:	6909      	ldr	r1, [r1, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006f70:	f022 020f 	bic.w	r2, r2, #15
                       Command->Response         |\
 8006f74:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8006f76:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	bd10      	pop	{r4, pc}

08006f80 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006f80:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 8006f82:	5840      	ldr	r0, [r0, r1]
}  
 8006f84:	4770      	bx	lr

08006f86 <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006f86:	680b      	ldr	r3, [r1, #0]
{
 8006f88:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006f8a:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006f8c:	684b      	ldr	r3, [r1, #4]
 8006f8e:	6283      	str	r3, [r0, #40]	; 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006f90:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006f92:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006f96:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006f9a:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8006f9c:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8006f9e:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8006fa0:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8006fa2:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 8006fa8:	2000      	movs	r0, #0
 8006faa:	bd10      	pop	{r4, pc}

08006fac <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006fac:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006fae:	2300      	movs	r3, #0
{
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006fb4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006fb6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006fba:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fc2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006fc4:	f7ff ffc9 	bl	8006f5a <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <SDMMC_CmdGoIdleState+0x48>)
 8006fca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fd8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	d307      	bcc.n	8006fee <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006fde:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006fe0:	0612      	lsls	r2, r2, #24
 8006fe2:	d5fa      	bpl.n	8006fda <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006fe4:	23c5      	movs	r3, #197	; 0xc5
  
  return SDMMC_ERROR_NONE;
 8006fe6:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006fe8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8006fea:	b006      	add	sp, #24
 8006fec:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8006fee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8006ff2:	e7fa      	b.n	8006fea <SDMMC_CmdGoIdleState+0x3e>
 8006ff4:	20000000 	.word	0x20000000

08006ff8 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006ff8:	4b45      	ldr	r3, [pc, #276]	; (8007110 <SDMMC_GetCmdResp1+0x118>)
{
 8006ffa:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006ffc:	681b      	ldr	r3, [r3, #0]
{
 8006ffe:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007000:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007004:	fbb3 f3f0 	udiv	r3, r3, r0
 8007008:	435a      	muls	r2, r3
    if (count-- == 0U)
 800700a:	2a00      	cmp	r2, #0
 800700c:	d049      	beq.n	80070a2 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 800700e:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007010:	f013 0f45 	tst.w	r3, #69	; 0x45
 8007014:	d007      	beq.n	8007026 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007016:	051b      	lsls	r3, r3, #20
 8007018:	d405      	bmi.n	8007026 <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800701a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800701c:	0758      	lsls	r0, r3, #29
 800701e:	d504      	bpl.n	800702a <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007020:	2004      	movs	r0, #4
 8007022:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007024:	bd10      	pop	{r4, pc}
 8007026:	3a01      	subs	r2, #1
 8007028:	e7ef      	b.n	800700a <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800702a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800702c:	f010 0001 	ands.w	r0, r0, #1
 8007030:	d002      	beq.n	8007038 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007032:	2301      	movs	r3, #1
 8007034:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007036:	e7f5      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007038:	23c5      	movs	r3, #197	; 0xc5
 800703a:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800703c:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800703e:	b2db      	uxtb	r3, r3
 8007040:	4299      	cmp	r1, r3
 8007042:	d131      	bne.n	80070a8 <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8007044:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007046:	4833      	ldr	r0, [pc, #204]	; (8007114 <SDMMC_GetCmdResp1+0x11c>)
 8007048:	4018      	ands	r0, r3
 800704a:	2800      	cmp	r0, #0
 800704c:	d0ea      	beq.n	8007024 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800704e:	2b00      	cmp	r3, #0
 8007050:	db2c      	blt.n	80070ac <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007052:	005a      	lsls	r2, r3, #1
 8007054:	d42d      	bmi.n	80070b2 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007056:	009c      	lsls	r4, r3, #2
 8007058:	d42d      	bmi.n	80070b6 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800705a:	00d9      	lsls	r1, r3, #3
 800705c:	d42d      	bmi.n	80070ba <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800705e:	011a      	lsls	r2, r3, #4
 8007060:	d42e      	bmi.n	80070c0 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007062:	015c      	lsls	r4, r3, #5
 8007064:	d42f      	bmi.n	80070c6 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007066:	01d9      	lsls	r1, r3, #7
 8007068:	d430      	bmi.n	80070cc <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800706a:	021a      	lsls	r2, r3, #8
 800706c:	d431      	bmi.n	80070d2 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800706e:	025c      	lsls	r4, r3, #9
 8007070:	d432      	bmi.n	80070d8 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007072:	0299      	lsls	r1, r3, #10
 8007074:	d433      	bmi.n	80070de <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007076:	02da      	lsls	r2, r3, #11
 8007078:	d434      	bmi.n	80070e4 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800707a:	035c      	lsls	r4, r3, #13
 800707c:	d435      	bmi.n	80070ea <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800707e:	0399      	lsls	r1, r3, #14
 8007080:	d436      	bmi.n	80070f0 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007082:	03da      	lsls	r2, r3, #15
 8007084:	d437      	bmi.n	80070f6 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007086:	041c      	lsls	r4, r3, #16
 8007088:	d438      	bmi.n	80070fc <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800708a:	0459      	lsls	r1, r3, #17
 800708c:	d439      	bmi.n	8007102 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800708e:	049a      	lsls	r2, r3, #18
 8007090:	d43a      	bmi.n	8007108 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007092:	f013 0f08 	tst.w	r3, #8
 8007096:	bf14      	ite	ne
 8007098:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800709c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80070a0:	e7c0      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80070a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80070a6:	e7bd      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070a8:	2001      	movs	r0, #1
 80070aa:	e7bb      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80070ac:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80070b0:	e7b8      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80070b2:	2040      	movs	r0, #64	; 0x40
 80070b4:	e7b6      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80070b6:	2080      	movs	r0, #128	; 0x80
 80070b8:	e7b4      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80070ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80070be:	e7b1      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80070c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80070c4:	e7ae      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80070c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80070ca:	e7ab      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80070cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80070d0:	e7a8      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80070d2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80070d6:	e7a5      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80070d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80070dc:	e7a2      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80070de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80070e2:	e79f      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 80070e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80070e8:	e79c      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80070ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80070ee:	e799      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80070f0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80070f4:	e796      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80070f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80070fa:	e793      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80070fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007100:	e790      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007102:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007106:	e78d      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8007108:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800710c:	e78a      	b.n	8007024 <SDMMC_GetCmdResp1+0x2c>
 800710e:	bf00      	nop
 8007110:	20000000 	.word	0x20000000
 8007114:	fdffe008 	.word	0xfdffe008

08007118 <SDMMC_CmdBlockLength>:
{
 8007118:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800711a:	2340      	movs	r3, #64	; 0x40
{
 800711c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800711e:	2510      	movs	r5, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007120:	2200      	movs	r2, #0
{
 8007122:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007124:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007126:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007128:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800712c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007130:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007134:	f7ff ff11 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007138:	f241 3288 	movw	r2, #5000	; 0x1388
 800713c:	4629      	mov	r1, r5
 800713e:	4620      	mov	r0, r4
 8007140:	f7ff ff5a 	bl	8006ff8 <SDMMC_GetCmdResp1>
}
 8007144:	b007      	add	sp, #28
 8007146:	bd30      	pop	{r4, r5, pc}

08007148 <SDMMC_CmdReadSingleBlock>:
{
 8007148:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800714a:	2340      	movs	r3, #64	; 0x40
{
 800714c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800714e:	2511      	movs	r5, #17
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007150:	2200      	movs	r2, #0
{
 8007152:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007154:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007156:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007158:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800715c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007160:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007164:	f7ff fef9 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007168:	f241 3288 	movw	r2, #5000	; 0x1388
 800716c:	4629      	mov	r1, r5
 800716e:	4620      	mov	r0, r4
 8007170:	f7ff ff42 	bl	8006ff8 <SDMMC_GetCmdResp1>
}
 8007174:	b007      	add	sp, #28
 8007176:	bd30      	pop	{r4, r5, pc}

08007178 <SDMMC_CmdReadMultiBlock>:
{
 8007178:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800717a:	2340      	movs	r3, #64	; 0x40
{
 800717c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800717e:	2512      	movs	r5, #18
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007180:	2200      	movs	r2, #0
{
 8007182:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007184:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007186:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007188:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800718c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007190:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007194:	f7ff fee1 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007198:	f241 3288 	movw	r2, #5000	; 0x1388
 800719c:	4629      	mov	r1, r5
 800719e:	4620      	mov	r0, r4
 80071a0:	f7ff ff2a 	bl	8006ff8 <SDMMC_GetCmdResp1>
}
 80071a4:	b007      	add	sp, #28
 80071a6:	bd30      	pop	{r4, r5, pc}

080071a8 <SDMMC_CmdWriteSingleBlock>:
{
 80071a8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071aa:	2340      	movs	r3, #64	; 0x40
{
 80071ac:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071ae:	2518      	movs	r5, #24
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071b0:	2200      	movs	r2, #0
{
 80071b2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80071b4:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071b6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071b8:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071c4:	f7ff fec9 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80071c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071cc:	4629      	mov	r1, r5
 80071ce:	4620      	mov	r0, r4
 80071d0:	f7ff ff12 	bl	8006ff8 <SDMMC_GetCmdResp1>
}
 80071d4:	b007      	add	sp, #28
 80071d6:	bd30      	pop	{r4, r5, pc}

080071d8 <SDMMC_CmdWriteMultiBlock>:
{
 80071d8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071da:	2340      	movs	r3, #64	; 0x40
{
 80071dc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071de:	2519      	movs	r5, #25
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071e0:	2200      	movs	r2, #0
{
 80071e2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80071e4:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071e6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071e8:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071f4:	f7ff feb1 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80071f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071fc:	4629      	mov	r1, r5
 80071fe:	4620      	mov	r0, r4
 8007200:	f7ff fefa 	bl	8006ff8 <SDMMC_GetCmdResp1>
}
 8007204:	b007      	add	sp, #28
 8007206:	bd30      	pop	{r4, r5, pc}

08007208 <SDMMC_CmdStopTransfer>:
{
 8007208:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800720a:	2300      	movs	r3, #0
{
 800720c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800720e:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007210:	2240      	movs	r2, #64	; 0x40
{
 8007212:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007214:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007216:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800721a:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800721e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007222:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007224:	f7ff fe99 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007228:	4a03      	ldr	r2, [pc, #12]	; (8007238 <SDMMC_CmdStopTransfer+0x30>)
 800722a:	4629      	mov	r1, r5
 800722c:	4620      	mov	r0, r4
 800722e:	f7ff fee3 	bl	8006ff8 <SDMMC_GetCmdResp1>
}
 8007232:	b007      	add	sp, #28
 8007234:	bd30      	pop	{r4, r5, pc}
 8007236:	bf00      	nop
 8007238:	05f5e100 	.word	0x05f5e100

0800723c <SDMMC_CmdSelDesel>:
{
 800723c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800723e:	2340      	movs	r3, #64	; 0x40
{
 8007240:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007242:	2507      	movs	r5, #7
{
 8007244:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007246:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007248:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800724a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800724c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007254:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007258:	f7ff fe7f 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800725c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007260:	4629      	mov	r1, r5
 8007262:	4620      	mov	r0, r4
 8007264:	f7ff fec8 	bl	8006ff8 <SDMMC_GetCmdResp1>
}
 8007268:	b007      	add	sp, #28
 800726a:	bd30      	pop	{r4, r5, pc}

0800726c <SDMMC_CmdAppCommand>:
{
 800726c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800726e:	2340      	movs	r3, #64	; 0x40
{
 8007270:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007272:	2537      	movs	r5, #55	; 0x37
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007274:	2200      	movs	r2, #0
{
 8007276:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007278:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800727a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800727c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007284:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007288:	f7ff fe67 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800728c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007290:	4629      	mov	r1, r5
 8007292:	4620      	mov	r0, r4
 8007294:	f7ff feb0 	bl	8006ff8 <SDMMC_GetCmdResp1>
}
 8007298:	b007      	add	sp, #28
 800729a:	bd30      	pop	{r4, r5, pc}

0800729c <SDMMC_CmdBusWidth>:
{
 800729c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800729e:	2340      	movs	r3, #64	; 0x40
{
 80072a0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072a2:	2506      	movs	r5, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072a4:	2200      	movs	r2, #0
{
 80072a6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80072a8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072aa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072ac:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072b8:	f7ff fe4f 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80072bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c0:	4629      	mov	r1, r5
 80072c2:	4620      	mov	r0, r4
 80072c4:	f7ff fe98 	bl	8006ff8 <SDMMC_GetCmdResp1>
}
 80072c8:	b007      	add	sp, #28
 80072ca:	bd30      	pop	{r4, r5, pc}

080072cc <SDMMC_CmdSendSCR>:
{
 80072cc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80072ce:	2300      	movs	r3, #0
{
 80072d0:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80072d2:	2533      	movs	r5, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072d4:	2240      	movs	r2, #64	; 0x40
{
 80072d6:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072d8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072da:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80072de:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072e6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072e8:	f7ff fe37 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80072ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f0:	4629      	mov	r1, r5
 80072f2:	4620      	mov	r0, r4
 80072f4:	f7ff fe80 	bl	8006ff8 <SDMMC_GetCmdResp1>
}
 80072f8:	b007      	add	sp, #28
 80072fa:	bd30      	pop	{r4, r5, pc}

080072fc <SDMMC_CmdSendStatus>:
{
 80072fc:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072fe:	2340      	movs	r3, #64	; 0x40
{
 8007300:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007302:	250d      	movs	r5, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007304:	2200      	movs	r2, #0
{
 8007306:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007308:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800730a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800730c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007314:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007318:	f7ff fe1f 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800731c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007320:	4629      	mov	r1, r5
 8007322:	4620      	mov	r0, r4
 8007324:	f7ff fe68 	bl	8006ff8 <SDMMC_GetCmdResp1>
}
 8007328:	b007      	add	sp, #28
 800732a:	bd30      	pop	{r4, r5, pc}

0800732c <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800732c:	4b11      	ldr	r3, [pc, #68]	; (8007374 <SDMMC_GetCmdResp2+0x48>)
 800732e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8007332:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	fbb3 f3f1 	udiv	r3, r3, r1
 800733a:	f241 3188 	movw	r1, #5000	; 0x1388
 800733e:	434b      	muls	r3, r1
    if (count-- == 0U)
 8007340:	3b01      	subs	r3, #1
 8007342:	d313      	bcc.n	800736c <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDMMCx->STA;
 8007344:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007346:	f011 0f45 	tst.w	r1, #69	; 0x45
 800734a:	d0f9      	beq.n	8007340 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800734c:	0509      	lsls	r1, r1, #20
 800734e:	d4f7      	bmi.n	8007340 <SDMMC_GetCmdResp2+0x14>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007350:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8007352:	075b      	lsls	r3, r3, #29
 8007354:	d502      	bpl.n	800735c <SDMMC_GetCmdResp2+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007356:	2004      	movs	r0, #4
 8007358:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800735a:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800735c:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800735e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007362:	bf14      	ite	ne
 8007364:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007366:	23c5      	moveq	r3, #197	; 0xc5
 8007368:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800736a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800736c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	20000000 	.word	0x20000000

08007378 <SDMMC_CmdSendCID>:
{
 8007378:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800737a:	2300      	movs	r3, #0
{
 800737c:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800737e:	2202      	movs	r2, #2
{
 8007380:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007382:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007384:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007388:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800738a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800738e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007392:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007394:	f7ff fde1 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007398:	4620      	mov	r0, r4
 800739a:	f7ff ffc7 	bl	800732c <SDMMC_GetCmdResp2>
}
 800739e:	b006      	add	sp, #24
 80073a0:	bd10      	pop	{r4, pc}

080073a2 <SDMMC_CmdSendCSD>:
{
 80073a2:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80073a4:	2209      	movs	r2, #9
{
 80073a6:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80073a8:	23c0      	movs	r3, #192	; 0xc0
{
 80073aa:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80073ac:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073ae:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80073b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073b8:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073bc:	a901      	add	r1, sp, #4
 80073be:	f7ff fdcc 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80073c2:	4620      	mov	r0, r4
 80073c4:	f7ff ffb2 	bl	800732c <SDMMC_GetCmdResp2>
}
 80073c8:	b006      	add	sp, #24
 80073ca:	bd10      	pop	{r4, pc}

080073cc <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80073cc:	4b0f      	ldr	r3, [pc, #60]	; (800740c <SDMMC_GetCmdResp3+0x40>)
 80073ce:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 80073d2:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80073da:	f241 3188 	movw	r1, #5000	; 0x1388
 80073de:	434b      	muls	r3, r1
    if (count-- == 0U)
 80073e0:	3b01      	subs	r3, #1
 80073e2:	d30f      	bcc.n	8007404 <SDMMC_GetCmdResp3+0x38>
    sta_reg = SDMMCx->STA;
 80073e4:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80073e6:	f011 0f45 	tst.w	r1, #69	; 0x45
 80073ea:	d0f9      	beq.n	80073e0 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80073ec:	0509      	lsls	r1, r1, #20
 80073ee:	d4f7      	bmi.n	80073e0 <SDMMC_GetCmdResp3+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80073f0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80073f2:	f010 0004 	ands.w	r0, r0, #4
 80073f6:	d002      	beq.n	80073fe <SDMMC_GetCmdResp3+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80073f8:	2004      	movs	r0, #4
 80073fa:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073fc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80073fe:	23c5      	movs	r3, #197	; 0xc5
 8007400:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007402:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007404:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	20000000 	.word	0x20000000

08007410 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007410:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007414:	2229      	movs	r2, #41	; 0x29
 8007416:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007418:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
{
 800741c:	b510      	push	{r4, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	4604      	mov	r4, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007422:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007426:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800742c:	2100      	movs	r1, #0
 800742e:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007432:	a901      	add	r1, sp, #4
 8007434:	f7ff fd91 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007438:	4620      	mov	r0, r4
 800743a:	f7ff ffc7 	bl	80073cc <SDMMC_GetCmdResp3>
}
 800743e:	b006      	add	sp, #24
 8007440:	bd10      	pop	{r4, pc}
	...

08007444 <SDMMC_GetCmdResp6>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007444:	4b1f      	ldr	r3, [pc, #124]	; (80074c4 <SDMMC_GetCmdResp6+0x80>)
{
 8007446:	b510      	push	{r4, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007448:	681b      	ldr	r3, [r3, #0]
{
 800744a:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800744c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8007450:	fbb3 f3f0 	udiv	r3, r3, r0
 8007454:	f241 3088 	movw	r0, #5000	; 0x1388
 8007458:	4343      	muls	r3, r0
    if (count-- == 0U)
 800745a:	3b01      	subs	r3, #1
 800745c:	d329      	bcc.n	80074b2 <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDMMCx->STA;
 800745e:	6b60      	ldr	r0, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007460:	f010 0f45 	tst.w	r0, #69	; 0x45
 8007464:	d0f9      	beq.n	800745a <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007466:	0500      	lsls	r0, r0, #20
 8007468:	d4f7      	bmi.n	800745a <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800746a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800746c:	0758      	lsls	r0, r3, #29
 800746e:	d502      	bpl.n	8007476 <SDMMC_GetCmdResp6+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007470:	2004      	movs	r0, #4
 8007472:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007474:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007476:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007478:	f010 0001 	ands.w	r0, r0, #1
 800747c:	d002      	beq.n	8007484 <SDMMC_GetCmdResp6+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800747e:	2301      	movs	r3, #1
 8007480:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007482:	e7f7      	b.n	8007474 <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007484:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007486:	b2db      	uxtb	r3, r3
 8007488:	4299      	cmp	r1, r3
 800748a:	d115      	bne.n	80074b8 <SDMMC_GetCmdResp6+0x74>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800748c:	23c5      	movs	r3, #197	; 0xc5
 800748e:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8007490:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007492:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8007496:	d102      	bne.n	800749e <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007498:	0c1b      	lsrs	r3, r3, #16
 800749a:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 800749c:	e7ea      	b.n	8007474 <SDMMC_GetCmdResp6+0x30>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800749e:	045a      	lsls	r2, r3, #17
 80074a0:	d40c      	bmi.n	80074bc <SDMMC_GetCmdResp6+0x78>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80074a2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80074a6:	bf14      	ite	ne
 80074a8:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80074ac:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80074b0:	e7e0      	b.n	8007474 <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80074b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80074b6:	e7dd      	b.n	8007474 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074b8:	2001      	movs	r0, #1
 80074ba:	e7db      	b.n	8007474 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80074bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80074c0:	e7d8      	b.n	8007474 <SDMMC_GetCmdResp6+0x30>
 80074c2:	bf00      	nop
 80074c4:	20000000 	.word	0x20000000

080074c8 <SDMMC_CmdSetRelAdd>:
{
 80074c8:	b530      	push	{r4, r5, lr}
 80074ca:	b089      	sub	sp, #36	; 0x24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80074cc:	2300      	movs	r3, #0
 80074ce:	2503      	movs	r5, #3
{
 80074d0:	4604      	mov	r4, r0
 80074d2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074d4:	2140      	movs	r1, #64	; 0x40
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80074d6:	e9cd 3503 	strd	r3, r5, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074da:	e9cd 1305 	strd	r1, r3, [sp, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074e2:	a903      	add	r1, sp, #12
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074e4:	9307      	str	r3, [sp, #28]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074e6:	f7ff fd38 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80074ea:	9a01      	ldr	r2, [sp, #4]
 80074ec:	4629      	mov	r1, r5
 80074ee:	4620      	mov	r0, r4
 80074f0:	f7ff ffa8 	bl	8007444 <SDMMC_GetCmdResp6>
}
 80074f4:	b009      	add	sp, #36	; 0x24
 80074f6:	bd30      	pop	{r4, r5, pc}

080074f8 <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074f8:	4b13      	ldr	r3, [pc, #76]	; (8007548 <SDMMC_GetCmdResp7+0x50>)
 80074fa:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 80074fe:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	fbb3 f3f1 	udiv	r3, r3, r1
 8007506:	f241 3188 	movw	r1, #5000	; 0x1388
 800750a:	434b      	muls	r3, r1
    if (count-- == 0U)
 800750c:	3b01      	subs	r3, #1
 800750e:	d317      	bcc.n	8007540 <SDMMC_GetCmdResp7+0x48>
    sta_reg = SDMMCx->STA;
 8007510:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007512:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007516:	d0f9      	beq.n	800750c <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007518:	0508      	lsls	r0, r1, #20
 800751a:	d4f7      	bmi.n	800750c <SDMMC_GetCmdResp7+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800751c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800751e:	0759      	lsls	r1, r3, #29
 8007520:	d502      	bpl.n	8007528 <SDMMC_GetCmdResp7+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007522:	2004      	movs	r0, #4
 8007524:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007526:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007528:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800752a:	f010 0001 	ands.w	r0, r0, #1
 800752e:	d002      	beq.n	8007536 <SDMMC_GetCmdResp7+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007530:	2301      	movs	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007532:	6393      	str	r3, [r2, #56]	; 0x38
 8007534:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007536:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8007538:	065b      	lsls	r3, r3, #25
 800753a:	d503      	bpl.n	8007544 <SDMMC_GetCmdResp7+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800753c:	2340      	movs	r3, #64	; 0x40
 800753e:	e7f8      	b.n	8007532 <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 8007540:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	20000000 	.word	0x20000000

0800754c <SDMMC_CmdOperCond>:
{
 800754c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800754e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
{
 8007552:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007554:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007556:	2140      	movs	r1, #64	; 0x40
{
 8007558:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800755a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800755e:	2300      	movs	r3, #0
 8007560:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007564:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007568:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800756a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800756c:	f7ff fcf5 	bl	8006f5a <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007570:	4620      	mov	r0, r4
 8007572:	f7ff ffc1 	bl	80074f8 <SDMMC_GetCmdResp7>
}
 8007576:	b006      	add	sp, #24
 8007578:	bd10      	pop	{r4, pc}
	...

0800757c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800757c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800757e:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8007580:	4a10      	ldr	r2, [pc, #64]	; (80075c4 <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 8007582:	9301      	str	r3, [sp, #4]
    count++;
 8007584:	9b01      	ldr	r3, [sp, #4]
 8007586:	3301      	adds	r3, #1
 8007588:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800758a:	9b01      	ldr	r3, [sp, #4]
 800758c:	4293      	cmp	r3, r2
 800758e:	d816      	bhi.n	80075be <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007590:	6903      	ldr	r3, [r0, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	daf6      	bge.n	8007584 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8007596:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 8007598:	4a0a      	ldr	r2, [pc, #40]	; (80075c4 <USB_CoreReset+0x48>)
  count = 0U;
 800759a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800759c:	6903      	ldr	r3, [r0, #16]
 800759e:	f043 0301 	orr.w	r3, r3, #1
 80075a2:	6103      	str	r3, [r0, #16]
    count++;
 80075a4:	9b01      	ldr	r3, [sp, #4]
 80075a6:	3301      	adds	r3, #1
 80075a8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80075aa:	9b01      	ldr	r3, [sp, #4]
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d806      	bhi.n	80075be <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075b0:	6903      	ldr	r3, [r0, #16]
 80075b2:	f013 0301 	ands.w	r3, r3, #1
 80075b6:	d1f5      	bne.n	80075a4 <USB_CoreReset+0x28>

  return HAL_OK;
 80075b8:	4618      	mov	r0, r3
}
 80075ba:	b002      	add	sp, #8
 80075bc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80075be:	2003      	movs	r0, #3
 80075c0:	e7fb      	b.n	80075ba <USB_CoreReset+0x3e>
 80075c2:	bf00      	nop
 80075c4:	00030d40 	.word	0x00030d40

080075c8 <USB_CoreInit>:
{
 80075c8:	b084      	sub	sp, #16
 80075ca:	b538      	push	{r3, r4, r5, lr}
 80075cc:	ad05      	add	r5, sp, #20
 80075ce:	4604      	mov	r4, r0
 80075d0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d126      	bne.n	8007628 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80075dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075e0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075e2:	68c3      	ldr	r3, [r0, #12]
 80075e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80075e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ec:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075ee:	68c3      	ldr	r3, [r0, #12]
 80075f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80075f4:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80075f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d103      	bne.n	8007604 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075fc:	68c3      	ldr	r3, [r0, #12]
 80075fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007602:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8007604:	4620      	mov	r0, r4
 8007606:	f7ff ffb9 	bl	800757c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800760a:	9b08      	ldr	r3, [sp, #32]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d107      	bne.n	8007620 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007610:	68a3      	ldr	r3, [r4, #8]
 8007612:	f043 0306 	orr.w	r3, r3, #6
 8007616:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007618:	68a3      	ldr	r3, [r4, #8]
 800761a:	f043 0320 	orr.w	r3, r3, #32
 800761e:	60a3      	str	r3, [r4, #8]
}
 8007620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007624:	b004      	add	sp, #16
 8007626:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007628:	68c3      	ldr	r3, [r0, #12]
 800762a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800762e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8007630:	f7ff ffa4 	bl	800757c <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007634:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800763a:	63a3      	str	r3, [r4, #56]	; 0x38
 800763c:	e7e5      	b.n	800760a <USB_CoreInit+0x42>

0800763e <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800763e:	6883      	ldr	r3, [r0, #8]
 8007640:	f043 0301 	orr.w	r3, r3, #1
 8007644:	6083      	str	r3, [r0, #8]
}
 8007646:	2000      	movs	r0, #0
 8007648:	4770      	bx	lr

0800764a <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800764a:	6883      	ldr	r3, [r0, #8]
 800764c:	f023 0301 	bic.w	r3, r3, #1
 8007650:	6083      	str	r3, [r0, #8]
}
 8007652:	2000      	movs	r0, #0
 8007654:	4770      	bx	lr

08007656 <USB_SetCurrentMode>:
{
 8007656:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007658:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800765a:	2901      	cmp	r1, #1
{
 800765c:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800765e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007662:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007664:	d10f      	bne.n	8007686 <USB_SetCurrentMode+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007666:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8007668:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800766a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800766e:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8007670:	2001      	movs	r0, #1
      ms++;
 8007672:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8007674:	f7fb fa66 	bl	8002b44 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8007678:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800767a:	07d9      	lsls	r1, r3, #31
 800767c:	d414      	bmi.n	80076a8 <USB_SetCurrentMode+0x52>
 800767e:	2c32      	cmp	r4, #50	; 0x32
 8007680:	d1f6      	bne.n	8007670 <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 8007682:	2001      	movs	r0, #1
}
 8007684:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8007686:	2900      	cmp	r1, #0
 8007688:	d1fb      	bne.n	8007682 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800768a:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 800768c:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800768e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007692:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8007694:	2001      	movs	r0, #1
      ms++;
 8007696:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8007698:	f7fb fa54 	bl	8002b44 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800769c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800769e:	07da      	lsls	r2, r3, #31
 80076a0:	d502      	bpl.n	80076a8 <USB_SetCurrentMode+0x52>
 80076a2:	2c32      	cmp	r4, #50	; 0x32
 80076a4:	d1f6      	bne.n	8007694 <USB_SetCurrentMode+0x3e>
 80076a6:	e7ec      	b.n	8007682 <USB_SetCurrentMode+0x2c>
    return HAL_ERROR;
 80076a8:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 80076ac:	4258      	negs	r0, r3
 80076ae:	4158      	adcs	r0, r3
 80076b0:	e7e8      	b.n	8007684 <USB_SetCurrentMode+0x2e>
	...

080076b4 <USB_FlushTxFifo>:
{
 80076b4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80076b6:	2300      	movs	r3, #0
    if (count > 200000U)
 80076b8:	4a10      	ldr	r2, [pc, #64]	; (80076fc <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 80076ba:	9301      	str	r3, [sp, #4]
    count++;
 80076bc:	9b01      	ldr	r3, [sp, #4]
 80076be:	3301      	adds	r3, #1
 80076c0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80076c2:	9b01      	ldr	r3, [sp, #4]
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d816      	bhi.n	80076f6 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076c8:	6903      	ldr	r3, [r0, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	daf6      	bge.n	80076bc <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076ce:	0189      	lsls	r1, r1, #6
  count = 0U;
 80076d0:	2300      	movs	r3, #0
    if (count > 200000U)
 80076d2:	4a0a      	ldr	r2, [pc, #40]	; (80076fc <USB_FlushTxFifo+0x48>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076d4:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 80076d8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076da:	6101      	str	r1, [r0, #16]
    count++;
 80076dc:	9b01      	ldr	r3, [sp, #4]
 80076de:	3301      	adds	r3, #1
 80076e0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80076e2:	9b01      	ldr	r3, [sp, #4]
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d806      	bhi.n	80076f6 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076e8:	6903      	ldr	r3, [r0, #16]
 80076ea:	f013 0320 	ands.w	r3, r3, #32
 80076ee:	d1f5      	bne.n	80076dc <USB_FlushTxFifo+0x28>
  return HAL_OK;
 80076f0:	4618      	mov	r0, r3
}
 80076f2:	b002      	add	sp, #8
 80076f4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80076f6:	2003      	movs	r0, #3
 80076f8:	e7fb      	b.n	80076f2 <USB_FlushTxFifo+0x3e>
 80076fa:	bf00      	nop
 80076fc:	00030d40 	.word	0x00030d40

08007700 <USB_FlushRxFifo>:
{
 8007700:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8007702:	2300      	movs	r3, #0
    if (count > 200000U)
 8007704:	4a0f      	ldr	r2, [pc, #60]	; (8007744 <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 8007706:	9301      	str	r3, [sp, #4]
    count++;
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	3301      	adds	r3, #1
 800770c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800770e:	9b01      	ldr	r3, [sp, #4]
 8007710:	4293      	cmp	r3, r2
 8007712:	d814      	bhi.n	800773e <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007714:	6903      	ldr	r3, [r0, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	daf6      	bge.n	8007708 <USB_FlushRxFifo+0x8>
  count = 0U;
 800771a:	2300      	movs	r3, #0
    if (count > 200000U)
 800771c:	4a09      	ldr	r2, [pc, #36]	; (8007744 <USB_FlushRxFifo+0x44>)
  count = 0U;
 800771e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007720:	2310      	movs	r3, #16
 8007722:	6103      	str	r3, [r0, #16]
    count++;
 8007724:	9b01      	ldr	r3, [sp, #4]
 8007726:	3301      	adds	r3, #1
 8007728:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800772a:	9b01      	ldr	r3, [sp, #4]
 800772c:	4293      	cmp	r3, r2
 800772e:	d806      	bhi.n	800773e <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007730:	6903      	ldr	r3, [r0, #16]
 8007732:	f013 0310 	ands.w	r3, r3, #16
 8007736:	d1f5      	bne.n	8007724 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8007738:	4618      	mov	r0, r3
}
 800773a:	b002      	add	sp, #8
 800773c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800773e:	2003      	movs	r0, #3
 8007740:	e7fb      	b.n	800773a <USB_FlushRxFifo+0x3a>
 8007742:	bf00      	nop
 8007744:	00030d40 	.word	0x00030d40

08007748 <USB_WritePacket>:
{
 8007748:	b510      	push	{r4, lr}
 800774a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800774e:	b944      	cbnz	r4, 8007762 <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8007750:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007752:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 8007754:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007756:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800775a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 800775e:	428b      	cmp	r3, r1
 8007760:	d101      	bne.n	8007766 <USB_WritePacket+0x1e>
}
 8007762:	2000      	movs	r0, #0
 8007764:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007766:	f851 2b04 	ldr.w	r2, [r1], #4
 800776a:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800776c:	e7f7      	b.n	800775e <USB_WritePacket+0x16>

0800776e <USB_ReadPacket>:
{
 800776e:	4603      	mov	r3, r0
  uint32_t count32b = (uint32_t)len >> 2U;
 8007770:	0890      	lsrs	r0, r2, #2
  uint16_t remaining_bytes = len % 4U;
 8007772:	f002 0203 	and.w	r2, r2, #3
{
 8007776:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 8007778:	2400      	movs	r4, #0
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800777a:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 800777e:	4284      	cmp	r4, r0
 8007780:	d310      	bcc.n	80077a4 <USB_ReadPacket+0x36>
 8007782:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  if (remaining_bytes != 0U)
 8007786:	b162      	cbz	r2, 80077a2 <USB_ReadPacket+0x34>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800778c:	681c      	ldr	r4, [r3, #0]
    i = 0U;
 800778e:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007790:	00d9      	lsls	r1, r3, #3
 8007792:	fa24 f101 	lsr.w	r1, r4, r1
 8007796:	54c1      	strb	r1, [r0, r3]
      i++;
 8007798:	3301      	adds	r3, #1
    } while (remaining_bytes != 0U);
 800779a:	b299      	uxth	r1, r3
 800779c:	428a      	cmp	r2, r1
 800779e:	d1f7      	bne.n	8007790 <USB_ReadPacket+0x22>
      pDest++;
 80077a0:	4410      	add	r0, r2
}
 80077a2:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80077a4:	682e      	ldr	r6, [r5, #0]
 80077a6:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 0U; i < count32b; i++)
 80077aa:	3401      	adds	r4, #1
 80077ac:	e7e7      	b.n	800777e <USB_ReadPacket+0x10>

080077ae <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80077ae:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80077b0:	6980      	ldr	r0, [r0, #24]
}
 80077b2:	4010      	ands	r0, r2
 80077b4:	4770      	bx	lr

080077b6 <USB_ReadChInterrupts>:
  tmpreg = USBx_HC(chnum)->HCINT;
 80077b6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80077ba:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80077be:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
}
 80077c2:	4018      	ands	r0, r3
 80077c4:	4770      	bx	lr

080077c6 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80077c6:	6940      	ldr	r0, [r0, #20]
}
 80077c8:	f000 0001 	and.w	r0, r0, #1
 80077cc:	4770      	bx	lr
	...

080077d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077d0:	b084      	sub	sp, #16
 80077d2:	b570      	push	{r4, r5, r6, lr}
 80077d4:	4604      	mov	r4, r0
 80077d6:	a805      	add	r0, sp, #20
 80077d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80077e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80077e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077e8:	63a3      	str	r3, [r4, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80077ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80077ec:	05da      	lsls	r2, r3, #23
 80077ee:	d53a      	bpl.n	8007866 <USB_HostInit+0x96>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80077f0:	9b07      	ldr	r3, [sp, #28]
 80077f2:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80077f4:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 80077f8:	d137      	bne.n	800786a <USB_HostInit+0x9a>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80077fa:	f043 0304 	orr.w	r3, r3, #4
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80077fe:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007802:	2110      	movs	r1, #16
 8007804:	4620      	mov	r0, r4
 8007806:	f7ff ff55 	bl	80076b4 <USB_FlushTxFifo>
 800780a:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800780c:	4620      	mov	r0, r4
 800780e:	f7ff ff77 	bl	8007700 <USB_FlushRxFifo>
 8007812:	4308      	orrs	r0, r1
  {
    ret = HAL_ERROR;
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007814:	2300      	movs	r3, #0
 8007816:	9e06      	ldr	r6, [sp, #24]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007818:	b2c0      	uxtb	r0, r0
 800781a:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
 800781e:	461d      	mov	r5, r3
 8007820:	f04f 31ff 	mov.w	r1, #4294967295
    ret = HAL_ERROR;
 8007824:	3800      	subs	r0, #0
 8007826:	bf18      	it	ne
 8007828:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.Host_channels; i++)
 800782a:	429e      	cmp	r6, r3
 800782c:	d120      	bne.n	8007870 <USB_HostInit+0xa0>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
    USBx_HC(i)->HCINTMSK = 0U;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800782e:	61a5      	str	r5, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007830:	6161      	str	r1, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007832:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007834:	05db      	lsls	r3, r3, #23
 8007836:	d520      	bpl.n	800787a <USB_HostInit+0xaa>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800783c:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800783e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8007842:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007844:	4b10      	ldr	r3, [pc, #64]	; (8007888 <USB_HostInit+0xb8>)
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007846:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800784a:	9b08      	ldr	r3, [sp, #32]
 800784c:	b91b      	cbnz	r3, 8007856 <USB_HostInit+0x86>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800784e:	69a3      	ldr	r3, [r4, #24]
 8007850:	f043 0310 	orr.w	r3, r3, #16
 8007854:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007856:	69a2      	ldr	r2, [r4, #24]
 8007858:	4b0c      	ldr	r3, [pc, #48]	; (800788c <USB_HostInit+0xbc>)
 800785a:	4313      	orrs	r3, r2
 800785c:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 800785e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007862:	b004      	add	sp, #16
 8007864:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007866:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800786a:	f023 0304 	bic.w	r3, r3, #4
 800786e:	e7c6      	b.n	80077fe <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007870:	6091      	str	r1, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007872:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8007874:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007876:	3220      	adds	r2, #32
 8007878:	e7d7      	b.n	800782a <USB_HostInit+0x5a>
    USBx->GRXFSIZ  = 0x80U;
 800787a:	2380      	movs	r3, #128	; 0x80
 800787c:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800787e:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8007882:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007884:	4b02      	ldr	r3, [pc, #8]	; (8007890 <USB_HostInit+0xc0>)
 8007886:	e7de      	b.n	8007846 <USB_HostInit+0x76>
 8007888:	00e00300 	.word	0x00e00300
 800788c:	a3200008 	.word	0xa3200008
 8007890:	004000e0 	.word	0x004000e0

08007894 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007894:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 8007898:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800789a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800789e:	f023 0303 	bic.w	r3, r3, #3
{
 80078a2:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80078a4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80078a8:	f001 0303 	and.w	r3, r1, #3
 80078ac:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80078b0:	ea43 0304 	orr.w	r3, r3, r4
 80078b4:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 80078b8:	d104      	bne.n	80078c4 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
 80078ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 80078be:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 80078c0:	2000      	movs	r0, #0
 80078c2:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 80078c4:	2902      	cmp	r1, #2
 80078c6:	d1fb      	bne.n	80078c0 <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
 80078c8:	f241 7370 	movw	r3, #6000	; 0x1770
 80078cc:	e7f7      	b.n	80078be <USB_InitFSLSPClkSel+0x2a>

080078ce <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80078ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80078d0:	2500      	movs	r5, #0
{
 80078d2:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
 80078d4:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80078d6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80078da:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80078dc:	9b01      	ldr	r3, [sp, #4]
 80078de:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078e2:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80078e4:	9b01      	ldr	r3, [sp, #4]
 80078e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ea:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 80078ee:	2064      	movs	r0, #100	; 0x64
 80078f0:	f7fb f928 	bl	8002b44 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80078f4:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 80078f6:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80078f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078fc:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8007900:	f7fb f920 	bl	8002b44 <HAL_Delay>

  return HAL_OK;
}
 8007904:	4628      	mov	r0, r5
 8007906:	b003      	add	sp, #12
 8007908:	bd30      	pop	{r4, r5, pc}

0800790a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800790a:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8007910:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8007914:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007916:	9b01      	ldr	r3, [sp, #4]
 8007918:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800791c:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800791e:	9b01      	ldr	r3, [sp, #4]
 8007920:	04da      	lsls	r2, r3, #19
 8007922:	d406      	bmi.n	8007932 <USB_DriveVbus+0x28>
 8007924:	2901      	cmp	r1, #1
 8007926:	d104      	bne.n	8007932 <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007928:	9b01      	ldr	r3, [sp, #4]
 800792a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800792e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007932:	9b01      	ldr	r3, [sp, #4]
 8007934:	04db      	lsls	r3, r3, #19
 8007936:	d505      	bpl.n	8007944 <USB_DriveVbus+0x3a>
 8007938:	b921      	cbnz	r1, 8007944 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800793a:	9b01      	ldr	r3, [sp, #4]
 800793c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007940:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8007944:	2000      	movs	r0, #0
 8007946:	b002      	add	sp, #8
 8007948:	4770      	bx	lr

0800794a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800794a:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8007950:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8007954:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007956:	9801      	ldr	r0, [sp, #4]
}
 8007958:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800795c:	b002      	add	sp, #8
 800795e:	4770      	bx	lr

08007960 <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007960:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007964:	6880      	ldr	r0, [r0, #8]
}
 8007966:	b280      	uxth	r0, r0
 8007968:	4770      	bx	lr

0800796a <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800796a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800796e:	eb00 1741 	add.w	r7, r0, r1, lsl #5
{
 8007972:	461c      	mov	r4, r3
 8007974:	f89d 601c 	ldrb.w	r6, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007978:	f04f 33ff 	mov.w	r3, #4294967295
 800797c:	f507 6ca0 	add.w	ip, r7, #1280	; 0x500
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007980:	fa4f fe82 	sxtb.w	lr, r2
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007984:	f8cc 3008 	str.w	r3, [ip, #8]
  switch (ep_type)
 8007988:	2e03      	cmp	r6, #3
 800798a:	d87a      	bhi.n	8007a82 <USB_HC_Init+0x118>
 800798c:	e8df f006 	tbb	[pc, r6]
 8007990:	65026d02 	.word	0x65026d02
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007994:	f240 439d 	movw	r3, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
 8007998:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800799c:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 80079a0:	da04      	bge.n	80079ac <USB_HC_Init+0x42>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80079a2:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80079a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079aa:	e053      	b.n	8007a54 <USB_HC_Init+0xea>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80079ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80079ae:	05db      	lsls	r3, r3, #23
 80079b0:	d44c      	bmi.n	8007a4c <USB_HC_Init+0xe2>
  HAL_StatusTypeDef ret = HAL_OK;
 80079b2:	2500      	movs	r5, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80079b4:	f8dc 300c 	ldr.w	r3, [ip, #12]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 80079b8:	f1be 0f00 	cmp.w	lr, #0
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80079bc:	f043 0302 	orr.w	r3, r3, #2
 80079c0:	f8cc 300c 	str.w	r3, [ip, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80079c4:	f001 030f 	and.w	r3, r1, #15
 80079c8:	f04f 0101 	mov.w	r1, #1
 80079cc:	f8d0 8418 	ldr.w	r8, [r0, #1048]	; 0x418
 80079d0:	fa01 f103 	lsl.w	r1, r1, r3
 80079d4:	ea41 0108 	orr.w	r1, r1, r8
 80079d8:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
    HCcharEpDir = 0U;
 80079dc:	bfb8      	it	lt
 80079de:	f44f 4100 	movlt.w	r1, #32768	; 0x8000
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80079e2:	6983      	ldr	r3, [r0, #24]
    HCcharEpDir = 0U;
 80079e4:	bfa8      	it	ge
 80079e6:	2100      	movge	r1, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80079e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80079ec:	6183      	str	r3, [r0, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80079ee:	f7ff ffac 	bl	800794a <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80079f2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d145      	bne.n	8007a86 <USB_HC_Init+0x11c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80079fa:	2802      	cmp	r0, #2
 80079fc:	bf0c      	ite	eq
 80079fe:	2000      	moveq	r0, #0
 8007a00:	f44f 3000 	movne.w	r0, #131072	; 0x20000
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a04:	05a3      	lsls	r3, r4, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a06:	f8bd 4020 	ldrh.w	r4, [sp, #32]
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a0a:	02d2      	lsls	r2, r2, #11
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a0c:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a10:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a14:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a18:	4323      	orrs	r3, r4
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	04b2      	lsls	r2, r6, #18

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007a1e:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a22:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007a26:	2e01      	cmp	r6, #1
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a28:	ea43 0302 	orr.w	r3, r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a2c:	ea43 0301 	orr.w	r3, r3, r1
 8007a30:	ea43 0300 	orr.w	r3, r3, r0
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a34:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007a38:	d105      	bne.n	8007a46 <USB_HC_Init+0xdc>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007a3a:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8007a3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a42:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
}
 8007a46:	4628      	mov	r0, r5
 8007a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007a4c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8007a50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a54:	f8cc 300c 	str.w	r3, [ip, #12]
 8007a58:	e7ab      	b.n	80079b2 <USB_HC_Init+0x48>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a5a:	f240 639d 	movw	r3, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8007a5e:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a62:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8007a66:	daa4      	bge.n	80079b2 <USB_HC_Init+0x48>
 8007a68:	e79b      	b.n	80079a2 <USB_HC_Init+0x38>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a6a:	f240 2325 	movw	r3, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8007a6e:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a72:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8007a76:	da9c      	bge.n	80079b2 <USB_HC_Init+0x48>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007a78:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8007a7c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007a80:	e7e8      	b.n	8007a54 <USB_HC_Init+0xea>
  switch (ep_type)
 8007a82:	2501      	movs	r5, #1
 8007a84:	e796      	b.n	80079b4 <USB_HC_Init+0x4a>
    HCcharLowSpeed = 0U;
 8007a86:	2000      	movs	r0, #0
 8007a88:	e7bc      	b.n	8007a04 <USB_HC_Init+0x9a>

08007a8a <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007a8a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007a8e:	6940      	ldr	r0, [r0, #20]
}
 8007a90:	b280      	uxth	r0, r0
 8007a92:	4770      	bx	lr

08007a94 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 8007a96:	2300      	movs	r3, #0
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007a98:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  __IO uint32_t count = 0U;
 8007a9c:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007a9e:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8007aa2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007aa6:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007aaa:	6885      	ldr	r5, [r0, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007aac:	0c9b      	lsrs	r3, r3, #18
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007aae:	06ad      	lsls	r5, r5, #26
 8007ab0:	d501      	bpl.n	8007ab6 <USB_HC_Halt+0x22>
 8007ab2:	2c00      	cmp	r4, #0
 8007ab4:	da25      	bge.n	8007b02 <USB_HC_Halt+0x6e>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ab6:	f013 0f01 	tst.w	r3, #1
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007aba:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8007abe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ac2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ac6:	d11f      	bne.n	8007b08 <USB_HC_Halt+0x74>

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ac8:	6883      	ldr	r3, [r0, #8]
 8007aca:	069b      	lsls	r3, r3, #26
 8007acc:	d419      	bmi.n	8007b02 <USB_HC_Halt+0x6e>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007ace:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007ad0:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ad4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007ad8:	d132      	bne.n	8007b40 <USB_HC_Halt+0xac>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ada:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ade:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ae2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8007ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007aea:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        do
        {
          count++;
 8007aee:	9b01      	ldr	r3, [sp, #4]
 8007af0:	3301      	adds	r3, #1
 8007af2:	9301      	str	r3, [sp, #4]

          if (count > 1000U)
 8007af4:	9b01      	ldr	r3, [sp, #4]
 8007af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007afa:	d802      	bhi.n	8007b02 <USB_HC_Halt+0x6e>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007afc:	6813      	ldr	r3, [r2, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	dbf5      	blt.n	8007aee <USB_HC_Halt+0x5a>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8007b02:	2000      	movs	r0, #0
 8007b04:	b003      	add	sp, #12
 8007b06:	bd30      	pop	{r4, r5, pc}
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007b08:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8007b0c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b10:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007b14:	d114      	bne.n	8007b40 <USB_HC_Halt+0xac>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b1a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b1e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8007b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b26:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        count++;
 8007b2a:	9b01      	ldr	r3, [sp, #4]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 8007b30:	9b01      	ldr	r3, [sp, #4]
 8007b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b36:	d8e4      	bhi.n	8007b02 <USB_HC_Halt+0x6e>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b38:	6813      	ldr	r3, [r2, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	dbf5      	blt.n	8007b2a <USB_HC_Halt+0x96>
 8007b3e:	e7e0      	b.n	8007b02 <USB_HC_Halt+0x6e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b44:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8007b48:	e7db      	b.n	8007b02 <USB_HC_Halt+0x6e>
	...

08007b4c <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b4c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8007b50:	4a06      	ldr	r2, [pc, #24]	; (8007b6c <USB_DoPing+0x20>)
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
  tmpreg |= USB_OTG_HCCHAR_CHENA;
  USBx_HC(chnum)->HCCHAR = tmpreg;

  return HAL_OK;
}
 8007b52:	2000      	movs	r0, #0
  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b54:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b58:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b64:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	80080000 	.word	0x80080000

08007b70 <USB_HC_StartXfer>:
{
 8007b70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007b74:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8007b76:	4615      	mov	r5, r2
 8007b78:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007b7a:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007b7c:	05db      	lsls	r3, r3, #23
 8007b7e:	d50f      	bpl.n	8007ba0 <USB_HC_StartXfer+0x30>
 8007b80:	790b      	ldrb	r3, [r1, #4]
 8007b82:	b96b      	cbnz	r3, 8007ba0 <USB_HC_StartXfer+0x30>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007b84:	2d01      	cmp	r5, #1
 8007b86:	d168      	bne.n	8007c5a <USB_HC_StartXfer+0xea>
 8007b88:	79cb      	ldrb	r3, [r1, #7]
 8007b8a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8007b8e:	d107      	bne.n	8007ba0 <USB_HC_StartXfer+0x30>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007b90:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8007b94:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8007b98:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8007b9c:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
  if (hc->xfer_len > 0U)
 8007ba0:	694b      	ldr	r3, [r1, #20]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d065      	beq.n	8007c72 <USB_HC_StartXfer+0x102>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007ba6:	890e      	ldrh	r6, [r1, #8]
 8007ba8:	1e58      	subs	r0, r3, #1
 8007baa:	4430      	add	r0, r6
 8007bac:	fbb0 f0f6 	udiv	r0, r0, r6
 8007bb0:	b280      	uxth	r0, r0
 8007bb2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8007bb6:	bf28      	it	cs
 8007bb8:	f44f 7080 	movcs.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8007bbc:	78cf      	ldrb	r7, [r1, #3]
 8007bbe:	2f00      	cmp	r7, #0
 8007bc0:	d059      	beq.n	8007c76 <USB_HC_StartXfer+0x106>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007bc2:	f8b1 8008 	ldrh.w	r8, [r1, #8]
 8007bc6:	fb00 f808 	mul.w	r8, r0, r8
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007bca:	f891 c00a 	ldrb.w	ip, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bce:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 8007bd2:	f8c1 8010 	str.w	r8, [r1, #16]
 8007bd6:	f3c8 0812 	ubfx	r8, r8, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007bda:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8007bde:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007be2:	ea4c 40c0 	orr.w	r0, ip, r0, lsl #19
 8007be6:	ea40 0008 	orr.w	r0, r0, r8
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bea:	f8c6 0510 	str.w	r0, [r6, #1296]	; 0x510
  if (dma != 0U)
 8007bee:	b115      	cbz	r5, 8007bf6 <USB_HC_StartXfer+0x86>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007bf0:	68c8      	ldr	r0, [r1, #12]
 8007bf2:	f8c6 0514 	str.w	r0, [r6, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007bf6:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
 8007bfa:	f504 6c80 	add.w	ip, r4, #1024	; 0x400
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007bfe:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c02:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007c04:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c08:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007c0a:	f8c6 e500 	str.w	lr, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c0e:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8007c12:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
 8007c16:	ea40 000e 	orr.w	r0, r0, lr
 8007c1a:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c1e:	f8d6 0500 	ldr.w	r0, [r6, #1280]	; 0x500
 8007c22:	9003      	str	r0, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c24:	9803      	ldr	r0, [sp, #12]
 8007c26:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
 8007c2a:	9003      	str	r0, [sp, #12]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c2c:	9803      	ldr	r0, [sp, #12]
  if (hc->ep_is_in != 0U)
 8007c2e:	b327      	cbz	r7, 8007c7a <USB_HC_StartXfer+0x10a>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c30:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c34:	9003      	str	r0, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c36:	9803      	ldr	r0, [sp, #12]
 8007c38:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007c3c:	9003      	str	r0, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c3e:	9803      	ldr	r0, [sp, #12]
 8007c40:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007c44:	ea57 0005 	orrs.w	r0, r7, r5
 8007c48:	d10f      	bne.n	8007c6a <USB_HC_StartXfer+0xfa>
 8007c4a:	b173      	cbz	r3, 8007c6a <USB_HC_StartXfer+0xfa>
    switch (hc->ep_type)
 8007c4c:	79c8      	ldrb	r0, [r1, #7]
 8007c4e:	2803      	cmp	r0, #3
 8007c50:	d821      	bhi.n	8007c96 <USB_HC_StartXfer+0x126>
 8007c52:	e8df f000 	tbb	[pc, r0]
 8007c56:	2815      	.short	0x2815
 8007c58:	2815      	.short	0x2815
    if ((dma == 0U) && (hc->do_ping == 1U))
 8007c5a:	2d00      	cmp	r5, #0
 8007c5c:	d1a0      	bne.n	8007ba0 <USB_HC_StartXfer+0x30>
 8007c5e:	794b      	ldrb	r3, [r1, #5]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d19d      	bne.n	8007ba0 <USB_HC_StartXfer+0x30>
      (void)USB_DoPing(USBx, hc->ch_num);
 8007c64:	4611      	mov	r1, r2
 8007c66:	f7ff ff71 	bl	8007b4c <USB_DoPing>
}
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	b004      	add	sp, #16
 8007c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    num_packets = 1U;
 8007c72:	2001      	movs	r0, #1
 8007c74:	e7a2      	b.n	8007bbc <USB_HC_StartXfer+0x4c>
  if (hc->xfer_len > 0U)
 8007c76:	4698      	mov	r8, r3
 8007c78:	e7a7      	b.n	8007bca <USB_HC_StartXfer+0x5a>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c7a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8007c7e:	e7d9      	b.n	8007c34 <USB_HC_StartXfer+0xc4>
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007c80:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c82:	1cd8      	adds	r0, r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007c84:	b2ad      	uxth	r5, r5
 8007c86:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8007c8a:	4285      	cmp	r5, r0
 8007c8c:	d203      	bcs.n	8007c96 <USB_HC_StartXfer+0x126>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007c8e:	69a0      	ldr	r0, [r4, #24]
 8007c90:	f040 0020 	orr.w	r0, r0, #32
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007c94:	61a0      	str	r0, [r4, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007c96:	2000      	movs	r0, #0
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	9000      	str	r0, [sp, #0]
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	68c9      	ldr	r1, [r1, #12]
 8007ca0:	f7ff fd52 	bl	8007748 <USB_WritePacket>
 8007ca4:	e7e1      	b.n	8007c6a <USB_HC_StartXfer+0xfa>
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007ca6:	f8dc 5010 	ldr.w	r5, [ip, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007caa:	1cd8      	adds	r0, r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007cac:	b2ad      	uxth	r5, r5
 8007cae:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8007cb2:	4285      	cmp	r5, r0
 8007cb4:	d2ef      	bcs.n	8007c96 <USB_HC_StartXfer+0x126>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007cb6:	69a0      	ldr	r0, [r4, #24]
 8007cb8:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8007cbc:	e7ea      	b.n	8007c94 <USB_HC_StartXfer+0x124>

08007cbe <USB_StopHost>:
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 8007cbe:	2300      	movs	r3, #0
{
 8007cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0U;
 8007cc2:	9301      	str	r3, [sp, #4]
{
 8007cc4:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007cc6:	6883      	ldr	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007cc8:	2110      	movs	r1, #16
 8007cca:	f504 65e0 	add.w	r5, r4, #1792	; 0x700
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007cce:	f023 0301 	bic.w	r3, r3, #1
 8007cd2:	6083      	str	r3, [r0, #8]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007cd4:	f7ff fcee 	bl	80076b4 <USB_FlushTxFifo>
 8007cd8:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f7ff fd10 	bl	8007700 <USB_FlushRxFifo>
 8007ce0:	4308      	orrs	r0, r1
 8007ce2:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8007ce6:	b2c0      	uxtb	r0, r0
  {
    ret = HAL_ERROR;
 8007ce8:	4619      	mov	r1, r3
 8007cea:	3800      	subs	r0, #0
 8007cec:	bf18      	it	ne
 8007cee:	2001      	movne	r0, #1
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8007cf0:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007cf2:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8007cf6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8007cfa:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
 8007cfe:	42a9      	cmp	r1, r5
 8007d00:	d1f6      	bne.n	8007cf0 <USB_StopHost+0x32>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8007d02:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d08:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8007d0c:	601a      	str	r2, [r3, #0]

    do
    {
      count++;
 8007d0e:	9a01      	ldr	r2, [sp, #4]
 8007d10:	3201      	adds	r2, #1
 8007d12:	9201      	str	r2, [sp, #4]

      if (count > 1000U)
 8007d14:	9a01      	ldr	r2, [sp, #4]
 8007d16:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8007d1a:	d802      	bhi.n	8007d22 <USB_StopHost+0x64>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	2a00      	cmp	r2, #0
 8007d20:	dbf5      	blt.n	8007d0e <USB_StopHost+0x50>
  for (i = 0U; i <= 15U; i++)
 8007d22:	3320      	adds	r3, #32
 8007d24:	42ab      	cmp	r3, r5
 8007d26:	d1ec      	bne.n	8007d02 <USB_StopHost+0x44>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007d28:	f04f 33ff 	mov.w	r3, #4294967295
 8007d2c:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007d30:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d32:	68a3      	ldr	r3, [r4, #8]
 8007d34:	f043 0301 	orr.w	r3, r3, #1
 8007d38:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return ret;
}
 8007d3a:	b003      	add	sp, #12
 8007d3c:	bd30      	pop	{r4, r5, pc}
	...

08007d40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007d40:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007d42:	4903      	ldr	r1, [pc, #12]	; (8007d50 <MX_FATFS_Init+0x10>)
 8007d44:	4803      	ldr	r0, [pc, #12]	; (8007d54 <MX_FATFS_Init+0x14>)
 8007d46:	f001 f9d3 	bl	80090f0 <FATFS_LinkDriver>
 8007d4a:	4b03      	ldr	r3, [pc, #12]	; (8007d58 <MX_FATFS_Init+0x18>)
 8007d4c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007d4e:	bd08      	pop	{r3, pc}
 8007d50:	20001708 	.word	0x20001708
 8007d54:	08011bbc 	.word	0x08011bbc
 8007d58:	2000170c 	.word	0x2000170c

08007d5c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007d5c:	b508      	push	{r3, lr}
 8007d5e:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007d60:	460a      	mov	r2, r1
 8007d62:	4601      	mov	r1, r0
 8007d64:	4803      	ldr	r0, [pc, #12]	; (8007d74 <BSP_SD_ReadBlocks_DMA+0x18>)
 8007d66:	f7fd fc81 	bl	800566c <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8007d6a:	3800      	subs	r0, #0
 8007d6c:	bf18      	it	ne
 8007d6e:	2001      	movne	r0, #1
 8007d70:	bd08      	pop	{r3, pc}
 8007d72:	bf00      	nop
 8007d74:	2000126c 	.word	0x2000126c

08007d78 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007d78:	b508      	push	{r3, lr}
 8007d7a:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007d7c:	460a      	mov	r2, r1
 8007d7e:	4601      	mov	r1, r0
 8007d80:	4803      	ldr	r0, [pc, #12]	; (8007d90 <BSP_SD_WriteBlocks_DMA+0x18>)
 8007d82:	f7fd fd03 	bl	800578c <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8007d86:	3800      	subs	r0, #0
 8007d88:	bf18      	it	ne
 8007d8a:	2001      	movne	r0, #1
 8007d8c:	bd08      	pop	{r3, pc}
 8007d8e:	bf00      	nop
 8007d90:	2000126c 	.word	0x2000126c

08007d94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007d94:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007d96:	4803      	ldr	r0, [pc, #12]	; (8007da4 <BSP_SD_GetCardState+0x10>)
 8007d98:	f7fe f818 	bl	8005dcc <HAL_SD_GetCardState>
}
 8007d9c:	3804      	subs	r0, #4
 8007d9e:	bf18      	it	ne
 8007da0:	2001      	movne	r0, #1
 8007da2:	bd08      	pop	{r3, pc}
 8007da4:	2000126c 	.word	0x2000126c

08007da8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007da8:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007daa:	4801      	ldr	r0, [pc, #4]	; (8007db0 <BSP_SD_GetCardInfo+0x8>)
 8007dac:	f7fd bf71 	b.w	8005c92 <HAL_SD_GetCardInfo>
 8007db0:	2000126c 	.word	0x2000126c

08007db4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007db4:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8007db6:	f000 f917 	bl	8007fe8 <BSP_SD_ReadCpltCallback>
}
 8007dba:	bd08      	pop	{r3, pc}

08007dbc <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8007dbc:	2301      	movs	r3, #1
{
 8007dbe:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8007dc0:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007dc4:	f000 f81e 	bl	8007e04 <BSP_PlatformIsDetected>
 8007dc8:	b908      	cbnz	r0, 8007dce <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 8007dca:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8007dce:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8007dd2:	b003      	add	sp, #12
 8007dd4:	f85d fb04 	ldr.w	pc, [sp], #4

08007dd8 <BSP_SD_Init>:
{
 8007dd8:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007dda:	f7ff ffef 	bl	8007dbc <BSP_SD_IsDetected>
 8007dde:	2801      	cmp	r0, #1
 8007de0:	d10c      	bne.n	8007dfc <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 8007de2:	4807      	ldr	r0, [pc, #28]	; (8007e00 <BSP_SD_Init+0x28>)
 8007de4:	f7fd ff3a 	bl	8005c5c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8007de8:	b938      	cbnz	r0, 8007dfa <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007dea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007dee:	4804      	ldr	r0, [pc, #16]	; (8007e00 <BSP_SD_Init+0x28>)
 8007df0:	f7fd ff62 	bl	8005cb8 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8007df4:	3800      	subs	r0, #0
 8007df6:	bf18      	it	ne
 8007df8:	2001      	movne	r0, #1
}
 8007dfa:	bd08      	pop	{r3, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 8007dfc:	2002      	movs	r0, #2
 8007dfe:	e7fc      	b.n	8007dfa <BSP_SD_Init+0x22>
 8007e00:	2000126c 	.word	0x2000126c

08007e04 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007e08:	4803      	ldr	r0, [pc, #12]	; (8007e18 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 8007e0a:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007e0c:	f7fb fc98 	bl	8003740 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8007e10:	fab0 f080 	clz	r0, r0
 8007e14:	0940      	lsrs	r0, r0, #5
 8007e16:	bd08      	pop	{r3, pc}
 8007e18:	40020800 	.word	0x40020800

08007e1c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007e1c:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <SD_ioctl+0x50>)
{
 8007e1e:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007e20:	781c      	ldrb	r4, [r3, #0]
{
 8007e22:	b089      	sub	sp, #36	; 0x24
 8007e24:	4615      	mov	r5, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007e26:	f014 0401 	ands.w	r4, r4, #1
 8007e2a:	d11b      	bne.n	8007e64 <SD_ioctl+0x48>

  switch (cmd)
 8007e2c:	2903      	cmp	r1, #3
 8007e2e:	d803      	bhi.n	8007e38 <SD_ioctl+0x1c>
 8007e30:	e8df f001 	tbb	[pc, r1]
 8007e34:	120c061a 	.word	0x120c061a
 8007e38:	2404      	movs	r4, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	b009      	add	sp, #36	; 0x24
 8007e3e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8007e40:	4668      	mov	r0, sp
 8007e42:	f7ff ffb1 	bl	8007da8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007e46:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007e48:	602b      	str	r3, [r5, #0]
    break;
 8007e4a:	e7f6      	b.n	8007e3a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8007e4c:	4668      	mov	r0, sp
 8007e4e:	f7ff ffab 	bl	8007da8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007e52:	9b07      	ldr	r3, [sp, #28]
 8007e54:	802b      	strh	r3, [r5, #0]
    break;
 8007e56:	e7f0      	b.n	8007e3a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8007e58:	4668      	mov	r0, sp
 8007e5a:	f7ff ffa5 	bl	8007da8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007e5e:	9b07      	ldr	r3, [sp, #28]
 8007e60:	0a5b      	lsrs	r3, r3, #9
 8007e62:	e7f1      	b.n	8007e48 <SD_ioctl+0x2c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007e64:	2403      	movs	r4, #3
 8007e66:	e7e8      	b.n	8007e3a <SD_ioctl+0x1e>
    res = RES_OK;
 8007e68:	460c      	mov	r4, r1
 8007e6a:	e7e6      	b.n	8007e3a <SD_ioctl+0x1e>
 8007e6c:	2000000c 	.word	0x2000000c

08007e70 <SD_status>:
{
 8007e70:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8007e72:	2301      	movs	r3, #1
 8007e74:	4c05      	ldr	r4, [pc, #20]	; (8007e8c <SD_status+0x1c>)
 8007e76:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007e78:	f7ff ff8c 	bl	8007d94 <BSP_SD_GetCardState>
 8007e7c:	b918      	cbnz	r0, 8007e86 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8007e7e:	7823      	ldrb	r3, [r4, #0]
 8007e80:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007e84:	7023      	strb	r3, [r4, #0]
  return Stat;
 8007e86:	7820      	ldrb	r0, [r4, #0]
}
 8007e88:	bd10      	pop	{r4, pc}
 8007e8a:	bf00      	nop
 8007e8c:	2000000c 	.word	0x2000000c

08007e90 <SD_CheckStatusWithTimeout.constprop.0>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 8007e90:	b538      	push	{r3, r4, r5, lr}
  timer = osKernelSysTick();
 8007e92:	f001 f93c 	bl	800910e <osKernelSysTick>
  while( osKernelSysTick() - timer < timeout)
 8007e96:	f247 552f 	movw	r5, #29999	; 0x752f
  timer = osKernelSysTick();
 8007e9a:	4604      	mov	r4, r0
  while( osKernelSysTick() - timer < timeout)
 8007e9c:	f001 f937 	bl	800910e <osKernelSysTick>
 8007ea0:	1b03      	subs	r3, r0, r4
 8007ea2:	42ab      	cmp	r3, r5
 8007ea4:	d902      	bls.n	8007eac <SD_CheckStatusWithTimeout.constprop.0+0x1c>
  return -1;
 8007ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eaa:	e003      	b.n	8007eb4 <SD_CheckStatusWithTimeout.constprop.0+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007eac:	f7ff ff72 	bl	8007d94 <BSP_SD_GetCardState>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d1f3      	bne.n	8007e9c <SD_CheckStatusWithTimeout.constprop.0+0xc>
}
 8007eb4:	bd38      	pop	{r3, r4, r5, pc}
	...

08007eb8 <SD_write>:
{
 8007eb8:	b530      	push	{r4, r5, lr}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	9201      	str	r2, [sp, #4]
 8007ec0:	9300      	str	r3, [sp, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007ec2:	f7ff ffe5 	bl	8007e90 <SD_CheckStatusWithTimeout.constprop.0>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	e9dd 2100 	ldrd	r2, r1, [sp]
 8007ecc:	da02      	bge.n	8007ed4 <SD_write+0x1c>
  DRESULT res = RES_ERROR;
 8007ece:	2001      	movs	r0, #1
}
 8007ed0:	b007      	add	sp, #28
 8007ed2:	bd30      	pop	{r4, r5, pc}
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f7ff ff4f 	bl	8007d78 <BSP_SD_WriteBlocks_DMA>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d1f7      	bne.n	8007ece <SD_write+0x16>
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007ede:	4b0e      	ldr	r3, [pc, #56]	; (8007f18 <SD_write+0x60>)
 8007ee0:	f247 5230 	movw	r2, #30000	; 0x7530
 8007ee4:	a803      	add	r0, sp, #12
 8007ee6:	6819      	ldr	r1, [r3, #0]
 8007ee8:	f001 f982 	bl	80091f0 <osMessageGet>
    if (event.status == osEventMessage)
 8007eec:	9b03      	ldr	r3, [sp, #12]
 8007eee:	2b10      	cmp	r3, #16
 8007ef0:	d1ed      	bne.n	8007ece <SD_write+0x16>
      if (event.value.v == WRITE_CPLT_MSG)
 8007ef2:	9b04      	ldr	r3, [sp, #16]
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d1ea      	bne.n	8007ece <SD_write+0x16>
        timer = osKernelSysTick();
 8007ef8:	f001 f909 	bl	800910e <osKernelSysTick>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007efc:	f247 552f 	movw	r5, #29999	; 0x752f
        timer = osKernelSysTick();
 8007f00:	4604      	mov	r4, r0
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007f02:	f001 f904 	bl	800910e <osKernelSysTick>
 8007f06:	1b03      	subs	r3, r0, r4
 8007f08:	42ab      	cmp	r3, r5
 8007f0a:	d8e0      	bhi.n	8007ece <SD_write+0x16>
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007f0c:	f7ff ff42 	bl	8007d94 <BSP_SD_GetCardState>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d1f6      	bne.n	8007f02 <SD_write+0x4a>
 8007f14:	e7dc      	b.n	8007ed0 <SD_write+0x18>
 8007f16:	bf00      	nop
 8007f18:	20001710 	.word	0x20001710

08007f1c <SD_read>:
{
 8007f1c:	b530      	push	{r4, r5, lr}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	460c      	mov	r4, r1
 8007f22:	9201      	str	r2, [sp, #4]
 8007f24:	9300      	str	r3, [sp, #0]
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007f26:	f7ff ffb3 	bl	8007e90 <SD_CheckStatusWithTimeout.constprop.0>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8007f30:	da02      	bge.n	8007f38 <SD_read+0x1c>
  DRESULT res = RES_ERROR;
 8007f32:	2001      	movs	r0, #1
}
 8007f34:	b007      	add	sp, #28
 8007f36:	bd30      	pop	{r4, r5, pc}
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f7ff ff0f 	bl	8007d5c <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d1f7      	bne.n	8007f32 <SD_read+0x16>
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007f42:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <SD_read+0x60>)
 8007f44:	f247 5230 	movw	r2, #30000	; 0x7530
 8007f48:	a803      	add	r0, sp, #12
 8007f4a:	6819      	ldr	r1, [r3, #0]
 8007f4c:	f001 f950 	bl	80091f0 <osMessageGet>
    if (event.status == osEventMessage)
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	2b10      	cmp	r3, #16
 8007f54:	d1ed      	bne.n	8007f32 <SD_read+0x16>
      if (event.value.v == READ_CPLT_MSG)
 8007f56:	9b04      	ldr	r3, [sp, #16]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d1ea      	bne.n	8007f32 <SD_read+0x16>
        timer = osKernelSysTick();
 8007f5c:	f001 f8d7 	bl	800910e <osKernelSysTick>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007f60:	f247 552f 	movw	r5, #29999	; 0x752f
        timer = osKernelSysTick();
 8007f64:	4604      	mov	r4, r0
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007f66:	f001 f8d2 	bl	800910e <osKernelSysTick>
 8007f6a:	1b03      	subs	r3, r0, r4
 8007f6c:	42ab      	cmp	r3, r5
 8007f6e:	d8e0      	bhi.n	8007f32 <SD_read+0x16>
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007f70:	f7ff ff10 	bl	8007d94 <BSP_SD_GetCardState>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d1f6      	bne.n	8007f66 <SD_read+0x4a>
 8007f78:	e7dc      	b.n	8007f34 <SD_read+0x18>
 8007f7a:	bf00      	nop
 8007f7c:	20001710 	.word	0x20001710

08007f80 <SD_initialize>:
{
 8007f80:	b5f0      	push	{r4, r5, r6, r7, lr}
Stat = STA_NOINIT;
 8007f82:	4c16      	ldr	r4, [pc, #88]	; (8007fdc <SD_initialize+0x5c>)
 8007f84:	2501      	movs	r5, #1
{
 8007f86:	b085      	sub	sp, #20
Stat = STA_NOINIT;
 8007f88:	7025      	strb	r5, [r4, #0]
  if(osKernelRunning())
 8007f8a:	f001 f8b9 	bl	8009100 <osKernelRunning>
 8007f8e:	b310      	cbz	r0, 8007fd6 <SD_initialize+0x56>
    if(BSP_SD_Init() == MSD_OK)
 8007f90:	f7ff ff22 	bl	8007dd8 <BSP_SD_Init>
 8007f94:	b950      	cbnz	r0, 8007fac <SD_initialize+0x2c>
  Stat = STA_NOINIT;
 8007f96:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007f98:	f7ff fefc 	bl	8007d94 <BSP_SD_GetCardState>
 8007f9c:	b918      	cbnz	r0, 8007fa6 <SD_initialize+0x26>
    Stat &= ~STA_NOINIT;
 8007f9e:	7823      	ldrb	r3, [r4, #0]
 8007fa0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007fa4:	7023      	strb	r3, [r4, #0]
  return Stat;
 8007fa6:	7823      	ldrb	r3, [r4, #0]
 8007fa8:	b2db      	uxtb	r3, r3
      Stat = SD_CheckStatus(lun);
 8007faa:	7023      	strb	r3, [r4, #0]
    if (Stat != STA_NOINIT)
 8007fac:	7823      	ldrb	r3, [r4, #0]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d011      	beq.n	8007fd6 <SD_initialize+0x56>
      if (SDQueueID == NULL)
 8007fb2:	4e0b      	ldr	r6, [pc, #44]	; (8007fe0 <SD_initialize+0x60>)
 8007fb4:	6837      	ldr	r7, [r6, #0]
 8007fb6:	b977      	cbnz	r7, 8007fd6 <SD_initialize+0x56>
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8007fb8:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <SD_initialize+0x64>)
 8007fba:	466d      	mov	r5, sp
 8007fbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007fbe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f001 f8d9 	bl	800917c <osMessageCreate>
 8007fca:	6030      	str	r0, [r6, #0]
      if (SDQueueID == NULL)
 8007fcc:	b918      	cbnz	r0, 8007fd6 <SD_initialize+0x56>
        Stat |= STA_NOINIT;
 8007fce:	7823      	ldrb	r3, [r4, #0]
 8007fd0:	f043 0301 	orr.w	r3, r3, #1
 8007fd4:	7023      	strb	r3, [r4, #0]
  return Stat;
 8007fd6:	7820      	ldrb	r0, [r4, #0]
}
 8007fd8:	b005      	add	sp, #20
 8007fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fdc:	2000000c 	.word	0x2000000c
 8007fe0:	20001710 	.word	0x20001710
 8007fe4:	08011adc 	.word	0x08011adc

08007fe8 <BSP_SD_ReadCpltCallback>:
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8007fe8:	4b02      	ldr	r3, [pc, #8]	; (8007ff4 <BSP_SD_ReadCpltCallback+0xc>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	2101      	movs	r1, #1
 8007fee:	6818      	ldr	r0, [r3, #0]
 8007ff0:	f001 b8d6 	b.w	80091a0 <osMessagePut>
 8007ff4:	20001710 	.word	0x20001710

08007ff8 <USBH_CDC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	4770      	bx	lr

08007ffc <USBH_CDC_InterfaceDeInit>:
{
 8007ffc:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ffe:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 8008002:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008004:	69dd      	ldr	r5, [r3, #28]
  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008006:	7829      	ldrb	r1, [r5, #0]
 8008008:	b139      	cbz	r1, 800801a <USBH_CDC_InterfaceDeInit+0x1e>
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800800a:	f001 f825 	bl	8009058 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800800e:	7829      	ldrb	r1, [r5, #0]
 8008010:	4620      	mov	r0, r4
 8008012:	f001 f83e 	bl	8009092 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008016:	2300      	movs	r3, #0
 8008018:	702b      	strb	r3, [r5, #0]
  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800801a:	7b29      	ldrb	r1, [r5, #12]
 800801c:	b141      	cbz	r1, 8008030 <USBH_CDC_InterfaceDeInit+0x34>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800801e:	4620      	mov	r0, r4
 8008020:	f001 f81a 	bl	8009058 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008024:	7b29      	ldrb	r1, [r5, #12]
 8008026:	4620      	mov	r0, r4
 8008028:	f001 f833 	bl	8009092 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800802c:	2300      	movs	r3, #0
 800802e:	732b      	strb	r3, [r5, #12]
  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008030:	7b69      	ldrb	r1, [r5, #13]
 8008032:	b141      	cbz	r1, 8008046 <USBH_CDC_InterfaceDeInit+0x4a>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008034:	4620      	mov	r0, r4
 8008036:	f001 f80f 	bl	8009058 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800803a:	7b69      	ldrb	r1, [r5, #13]
 800803c:	4620      	mov	r0, r4
 800803e:	f001 f828 	bl	8009092 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008042:	2300      	movs	r3, #0
 8008044:	736b      	strb	r3, [r5, #13]
  if ((phost->pActiveClass->pData) != NULL)
 8008046:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800804a:	69d8      	ldr	r0, [r3, #28]
 800804c:	b128      	cbz	r0, 800805a <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free(phost->pActiveClass->pData);
 800804e:	f006 fdf7 	bl	800ec40 <free>
    phost->pActiveClass->pData = 0U;
 8008052:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8008056:	2200      	movs	r2, #0
 8008058:	61da      	str	r2, [r3, #28]
}
 800805a:	2000      	movs	r0, #0
 800805c:	bd38      	pop	{r3, r4, r5, pc}

0800805e <USBH_CDC_InterfaceInit>:
{
 800805e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008062:	2202      	movs	r2, #2
 8008064:	2301      	movs	r3, #1
{
 8008066:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008068:	4611      	mov	r1, r2
 800806a:	f000 fa0d 	bl	8008488 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800806e:	2801      	cmp	r0, #1
  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008070:	4606      	mov	r6, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008072:	d904      	bls.n	800807e <USBH_CDC_InterfaceInit+0x20>
    return USBH_FAIL;
 8008074:	2702      	movs	r7, #2
}
 8008076:	4638      	mov	r0, r7
 8008078:	b004      	add	sp, #16
 800807a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = USBH_SelectInterface(phost, interface);
 800807e:	4601      	mov	r1, r0
 8008080:	4628      	mov	r0, r5
 8008082:	f000 f9f8 	bl	8008476 <USBH_SelectInterface>
  if (status != USBH_OK)
 8008086:	4607      	mov	r7, r0
 8008088:	2800      	cmp	r0, #0
 800808a:	d1f3      	bne.n	8008074 <USBH_CDC_InterfaceInit+0x16>
  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800808c:	f8d5 837c 	ldr.w	r8, [r5, #892]	; 0x37c
 8008090:	2050      	movs	r0, #80	; 0x50
 8008092:	f006 fdcd 	bl	800ec30 <malloc>
 8008096:	4604      	mov	r4, r0
 8008098:	f8c8 001c 	str.w	r0, [r8, #28]
  if (CDC_Handle == NULL)
 800809c:	2800      	cmp	r0, #0
 800809e:	d0e9      	beq.n	8008074 <USBH_CDC_InterfaceInit+0x16>
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80080a0:	2250      	movs	r2, #80	; 0x50
 80080a2:	4639      	mov	r1, r7
 80080a4:	f006 fde2 	bl	800ec6c <memset>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80080a8:	201a      	movs	r0, #26
 80080aa:	fb00 5606 	mla	r6, r0, r6, r5
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80080ae:	4628      	mov	r0, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80080b0:	f996 234e 	ldrsb.w	r2, [r6, #846]	; 0x34e
 80080b4:	f896 334e 	ldrb.w	r3, [r6, #846]	; 0x34e
 80080b8:	2a00      	cmp	r2, #0
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80080ba:	bfbc      	itt	lt
 80080bc:	7063      	strblt	r3, [r4, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80080be:	f8b6 3350 	ldrhlt.w	r3, [r6, #848]	; 0x350
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80080c2:	7861      	ldrb	r1, [r4, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80080c4:	bfb8      	it	lt
 80080c6:	8163      	strhlt	r3, [r4, #10]
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80080c8:	f000 ffcb 	bl	8009062 <USBH_AllocPipe>
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80080cc:	8963      	ldrh	r3, [r4, #10]
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80080ce:	4601      	mov	r1, r0
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80080d0:	7862      	ldrb	r2, [r4, #1]
 80080d2:	9302      	str	r3, [sp, #8]
 80080d4:	2303      	movs	r3, #3
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80080d6:	7020      	strb	r0, [r4, #0]
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80080d8:	4628      	mov	r0, r5
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80080e6:	f000 ffa8 	bl	800903a <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80080ea:	2200      	movs	r2, #0
 80080ec:	7821      	ldrb	r1, [r4, #0]
 80080ee:	4628      	mov	r0, r5
 80080f0:	f002 fc9b 	bl	800aa2a <USBH_LL_SetToggle>
  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80080f4:	2300      	movs	r3, #0
 80080f6:	210a      	movs	r1, #10
 80080f8:	4628      	mov	r0, r5
 80080fa:	461a      	mov	r2, r3
 80080fc:	f000 f9c4 	bl	8008488 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008100:	2801      	cmp	r0, #1
  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008102:	4603      	mov	r3, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008104:	d8b6      	bhi.n	8008074 <USBH_CDC_InterfaceInit+0x16>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008106:	201a      	movs	r0, #26
 8008108:	fb00 5203 	mla	r2, r0, r3, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800810c:	fb00 5303 	mla	r3, r0, r3, r5
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008110:	4628      	mov	r0, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008112:	f892 634e 	ldrb.w	r6, [r2, #846]	; 0x34e
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008116:	f8b2 1350 	ldrh.w	r1, [r2, #848]	; 0x350
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800811a:	f992 234e 	ldrsb.w	r2, [r2, #846]	; 0x34e
 800811e:	2a00      	cmp	r2, #0
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008120:	f8b3 2358 	ldrh.w	r2, [r3, #856]	; 0x358
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008124:	bfb4      	ite	lt
 8008126:	8361      	strhlt	r1, [r4, #26]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008128:	8321      	strhge	r1, [r4, #24]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800812a:	f893 1356 	ldrb.w	r1, [r3, #854]	; 0x356
 800812e:	f993 3356 	ldrsb.w	r3, [r3, #854]	; 0x356
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008132:	bfac      	ite	ge
 8008134:	73a6      	strbge	r6, [r4, #14]
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008136:	73e6      	strblt	r6, [r4, #15]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008138:	2b00      	cmp	r3, #0
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800813a:	f04f 0602 	mov.w	r6, #2
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800813e:	bfb4      	ite	lt
 8008140:	73e1      	strblt	r1, [r4, #15]
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008142:	73a1      	strbge	r1, [r4, #14]
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008144:	7ba1      	ldrb	r1, [r4, #14]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008146:	bfb4      	ite	lt
 8008148:	8362      	strhlt	r2, [r4, #26]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800814a:	8322      	strhge	r2, [r4, #24]
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800814c:	f000 ff89 	bl	8009062 <USBH_AllocPipe>
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008150:	7be1      	ldrb	r1, [r4, #15]
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008152:	7360      	strb	r0, [r4, #13]
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008154:	4628      	mov	r0, r5
 8008156:	f000 ff84 	bl	8009062 <USBH_AllocPipe>
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800815a:	8b23      	ldrh	r3, [r4, #24]
 800815c:	7ba2      	ldrb	r2, [r4, #14]
 800815e:	9302      	str	r3, [sp, #8]
 8008160:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 8008164:	7b61      	ldrb	r1, [r4, #13]
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008166:	7320      	strb	r0, [r4, #12]
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008168:	4628      	mov	r0, r5
 800816a:	9601      	str	r6, [sp, #4]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8008172:	f000 ff62 	bl	800903a <USBH_OpenPipe>
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008176:	8b63      	ldrh	r3, [r4, #26]
 8008178:	7be2      	ldrb	r2, [r4, #15]
 800817a:	4628      	mov	r0, r5
 800817c:	7b21      	ldrb	r1, [r4, #12]
 800817e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8008182:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
  CDC_Handle->state = CDC_IDLE_STATE;
 8008186:	2600      	movs	r6, #0
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800818e:	f000 ff54 	bl	800903a <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008192:	4632      	mov	r2, r6
 8008194:	7b61      	ldrb	r1, [r4, #13]
 8008196:	4628      	mov	r0, r5
  CDC_Handle->state = CDC_IDLE_STATE;
 8008198:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800819c:	f002 fc45 	bl	800aa2a <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80081a0:	4632      	mov	r2, r6
 80081a2:	7b21      	ldrb	r1, [r4, #12]
 80081a4:	4628      	mov	r0, r5
 80081a6:	f002 fc40 	bl	800aa2a <USBH_LL_SetToggle>
  return USBH_OK;
 80081aa:	e764      	b.n	8008076 <USBH_CDC_InterfaceInit+0x18>

080081ac <USBH_CDC_ClassRequest>:
{
 80081ac:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081ae:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 80081b2:	f242 12a1 	movw	r2, #8609	; 0x21a1
{
 80081b6:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081b8:	69d9      	ldr	r1, [r3, #28]
  phost->Control.setup.b.wIndex.w = 0U;
 80081ba:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80081be:	3140      	adds	r1, #64	; 0x40
  phost->Control.setup.b.wIndex.w = 0U;
 80081c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80081c4:	2207      	movs	r2, #7
 80081c6:	f000 fc07 	bl	80089d8 <USBH_CtlReq>
  if (status == USBH_OK)
 80081ca:	4605      	mov	r5, r0
 80081cc:	b920      	cbnz	r0, 80081d8 <USBH_CDC_ClassRequest+0x2c>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80081ce:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80081d2:	2102      	movs	r1, #2
 80081d4:	4620      	mov	r0, r4
 80081d6:	4798      	blx	r3
}
 80081d8:	4628      	mov	r0, r5
 80081da:	bd38      	pop	{r3, r4, r5, pc}

080081dc <USBH_CDC_TransmitCallback>:
 80081dc:	4770      	bx	lr

080081de <USBH_CDC_ReceiveCallback>:
 80081de:	4770      	bx	lr

080081e0 <USBH_CDC_LineCodingChanged>:
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80081e0:	4770      	bx	lr

080081e2 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081e2:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
{
 80081e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081e8:	69dc      	ldr	r4, [r3, #28]
{
 80081ea:	4605      	mov	r5, r0
  switch (CDC_Handle->state)
 80081ec:	f894 604c 	ldrb.w	r6, [r4, #76]	; 0x4c
 80081f0:	2e04      	cmp	r6, #4
 80081f2:	d818      	bhi.n	8008226 <USBH_CDC_Process+0x44>
 80081f4:	e8df f006 	tbb	[pc, r6]
 80081f8:	401b0312 	.word	0x401b0312
 80081fc:	bc          	.byte	0xbc
 80081fd:	00          	.byte	0x00
  phost->Control.setup.b.wIndex.w = 0U;
 80081fe:	f242 0021 	movw	r0, #8225	; 0x2021
 8008202:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008206:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008208:	2207      	movs	r2, #7
  phost->Control.setup.b.wIndex.w = 0U;
 800820a:	e9c5 0304 	strd	r0, r3, [r5, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800820e:	4628      	mov	r0, r5
 8008210:	f000 fbe2 	bl	80089d8 <USBH_CtlReq>
      if (req_status == USBH_OK)
 8008214:	b928      	cbnz	r0, 8008222 <USBH_CDC_Process+0x40>
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008216:	2302      	movs	r3, #2
          CDC_Handle->state = CDC_ERROR_STATE;
 8008218:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 800821c:	4630      	mov	r0, r6
 800821e:	b002      	add	sp, #8
 8008220:	bd70      	pop	{r4, r5, r6, pc}
        if (req_status != USBH_BUSY)
 8008222:	2801      	cmp	r0, #1
 8008224:	d101      	bne.n	800822a <USBH_CDC_Process+0x48>
  USBH_StatusTypeDef status = USBH_BUSY;
 8008226:	2601      	movs	r6, #1
 8008228:	e7f8      	b.n	800821c <USBH_CDC_Process+0x3a>
          CDC_Handle->state = CDC_ERROR_STATE;
 800822a:	2304      	movs	r3, #4
 800822c:	e7f4      	b.n	8008218 <USBH_CDC_Process+0x36>
  phost->Control.setup.b.wIndex.w = 0U;
 800822e:	f242 12a1 	movw	r2, #8609	; 0x21a1
 8008232:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008236:	f104 0140 	add.w	r1, r4, #64	; 0x40
  phost->Control.setup.b.wIndex.w = 0U;
 800823a:	e9c0 2304 	strd	r2, r3, [r0, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800823e:	2207      	movs	r2, #7
 8008240:	f000 fbca 	bl	80089d8 <USBH_CtlReq>
      if (req_status == USBH_OK)
 8008244:	b990      	cbnz	r0, 800826c <USBH_CDC_Process+0x8a>
        CDC_Handle->state = CDC_IDLE_STATE;
 8008246:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800824a:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
 800824e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008252:	684b      	ldr	r3, [r1, #4]
 8008254:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008258:	429a      	cmp	r2, r3
 800825a:	d1e4      	bne.n	8008226 <USBH_CDC_Process+0x44>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800825c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800825e:	680b      	ldr	r3, [r1, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	d1e0      	bne.n	8008226 <USBH_CDC_Process+0x44>
          USBH_CDC_LineCodingChanged(phost);
 8008264:	4628      	mov	r0, r5
 8008266:	f7ff ffbb 	bl	80081e0 <USBH_CDC_LineCodingChanged>
 800826a:	e7dc      	b.n	8008226 <USBH_CDC_Process+0x44>
        if (req_status != USBH_BUSY)
 800826c:	2801      	cmp	r0, #1
 800826e:	d0da      	beq.n	8008226 <USBH_CDC_Process+0x44>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008270:	2304      	movs	r3, #4
 8008272:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8008276:	e7d6      	b.n	8008226 <USBH_CDC_Process+0x44>
  switch (CDC_Handle->data_tx_state)
 8008278:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 800827c:	2801      	cmp	r0, #1
 800827e:	d02c      	beq.n	80082da <USBH_CDC_Process+0xf8>
 8008280:	2802      	cmp	r0, #2
 8008282:	d039      	beq.n	80082f8 <USBH_CDC_Process+0x116>
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008284:	f8d5 337c 	ldr.w	r3, [r5, #892]	; 0x37c
 8008288:	69dc      	ldr	r4, [r3, #28]
  switch (CDC_Handle->data_rx_state)
 800828a:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 800828e:	2b03      	cmp	r3, #3
 8008290:	d05d      	beq.n	800834e <USBH_CDC_Process+0x16c>
 8008292:	2b04      	cmp	r3, #4
 8008294:	d1c7      	bne.n	8008226 <USBH_CDC_Process+0x44>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008296:	7b21      	ldrb	r1, [r4, #12]
 8008298:	4628      	mov	r0, r5
 800829a:	f002 fbb5 	bl	800aa08 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800829e:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80082a0:	4606      	mov	r6, r0
      if (URB_Status == USBH_URB_DONE)
 80082a2:	d1c0      	bne.n	8008226 <USBH_CDC_Process+0x44>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80082a4:	7b21      	ldrb	r1, [r4, #12]
 80082a6:	4628      	mov	r0, r5
 80082a8:	f002 fbaa 	bl	800aa00 <USBH_LL_GetLastXferSize>
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80082ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80082ae:	4298      	cmp	r0, r3
 80082b0:	d057      	beq.n	8008362 <USBH_CDC_Process+0x180>
 80082b2:	8b62      	ldrh	r2, [r4, #26]
 80082b4:	4290      	cmp	r0, r2
 80082b6:	d954      	bls.n	8008362 <USBH_CDC_Process+0x180>
          CDC_Handle->RxDataLength -= length;
 80082b8:	1a1b      	subs	r3, r3, r0
 80082ba:	62a3      	str	r3, [r4, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80082bc:	6a23      	ldr	r3, [r4, #32]
 80082be:	4418      	add	r0, r3
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80082c0:	2303      	movs	r3, #3
          CDC_Handle->pRxData += length;
 80082c2:	6220      	str	r0, [r4, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80082c4:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80082c8:	2104      	movs	r1, #4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80082d0:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082d4:	f000 ff64 	bl	80091a0 <osMessagePut>
 80082d8:	e7a0      	b.n	800821c <USBH_CDC_Process+0x3a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80082da:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082dc:	8b22      	ldrh	r2, [r4, #24]
        (void)USBH_BulkSendData(phost,
 80082de:	7b63      	ldrb	r3, [r4, #13]
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80082e0:	4296      	cmp	r6, r2
        (void)USBH_BulkSendData(phost,
 80082e2:	69e1      	ldr	r1, [r4, #28]
 80082e4:	9000      	str	r0, [sp, #0]
        (void)USBH_BulkSendData(phost,
 80082e6:	4628      	mov	r0, r5
 80082e8:	bf98      	it	ls
 80082ea:	b2b2      	uxthls	r2, r6
 80082ec:	f000 fe7e 	bl	8008fec <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80082f0:	2302      	movs	r3, #2
 80082f2:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
      break;
 80082f6:	e7c5      	b.n	8008284 <USBH_CDC_Process+0xa2>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80082f8:	7b61      	ldrb	r1, [r4, #13]
 80082fa:	4628      	mov	r0, r5
 80082fc:	f002 fb84 	bl	800aa08 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008300:	2801      	cmp	r0, #1
 8008302:	d11e      	bne.n	8008342 <USBH_CDC_Process+0x160>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008306:	8b21      	ldrh	r1, [r4, #24]
 8008308:	428b      	cmp	r3, r1
 800830a:	d90c      	bls.n	8008326 <USBH_CDC_Process+0x144>
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800830c:	69e2      	ldr	r2, [r4, #28]
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800830e:	1a5b      	subs	r3, r3, r1
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008310:	440a      	add	r2, r1
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008312:	6263      	str	r3, [r4, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008314:	61e2      	str	r2, [r4, #28]
        if (CDC_Handle->TxDataLength > 0U)
 8008316:	b94b      	cbnz	r3, 800832c <USBH_CDC_Process+0x14a>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008318:	2300      	movs	r3, #0
          USBH_CDC_TransmitCallback(phost);
 800831a:	4628      	mov	r0, r5
          CDC_Handle->data_tx_state = CDC_IDLE;
 800831c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008320:	f7ff ff5c 	bl	80081dc <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008324:	e004      	b.n	8008330 <USBH_CDC_Process+0x14e>
          CDC_Handle->TxDataLength = 0U;
 8008326:	2300      	movs	r3, #0
 8008328:	6263      	str	r3, [r4, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800832a:	e7f5      	b.n	8008318 <USBH_CDC_Process+0x136>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800832c:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008330:	2104      	movs	r1, #4
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008332:	2200      	movs	r2, #0
 8008334:	f8d5 03d8 	ldr.w	r0, [r5, #984]	; 0x3d8
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008338:	f8c5 13e0 	str.w	r1, [r5, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800833c:	f000 ff30 	bl	80091a0 <osMessagePut>
 8008340:	e7a0      	b.n	8008284 <USBH_CDC_Process+0xa2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008342:	2802      	cmp	r0, #2
 8008344:	d19e      	bne.n	8008284 <USBH_CDC_Process+0xa2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008346:	2301      	movs	r3, #1
 8008348:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800834c:	e7f0      	b.n	8008330 <USBH_CDC_Process+0x14e>
      (void)USBH_BulkReceiveData(phost,
 800834e:	7b23      	ldrb	r3, [r4, #12]
 8008350:	4628      	mov	r0, r5
 8008352:	8b62      	ldrh	r2, [r4, #26]
 8008354:	6a21      	ldr	r1, [r4, #32]
 8008356:	f000 fe60 	bl	800901a <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800835a:	2304      	movs	r3, #4
 800835c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
      break;
 8008360:	e761      	b.n	8008226 <USBH_CDC_Process+0x44>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008362:	2300      	movs	r3, #0
          USBH_CDC_ReceiveCallback(phost);
 8008364:	4628      	mov	r0, r5
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008366:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800836a:	f7ff ff38 	bl	80081de <USBH_CDC_ReceiveCallback>
 800836e:	e7ab      	b.n	80082c8 <USBH_CDC_Process+0xe6>
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008370:	2100      	movs	r1, #0
 8008372:	f000 fdf7 	bl	8008f64 <USBH_ClrFeature>
      if (req_status == USBH_OK)
 8008376:	2800      	cmp	r0, #0
 8008378:	f47f af55 	bne.w	8008226 <USBH_CDC_Process+0x44>
        CDC_Handle->state = CDC_IDLE_STATE;
 800837c:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8008380:	e751      	b.n	8008226 <USBH_CDC_Process+0x44>

08008382 <DeInitStateMachine.isra.0>:
  * @brief  DeInitStateMachine
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 8008382:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8008384:	2640      	movs	r6, #64	; 0x40
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 8008386:	4604      	mov	r4, r0
    phost->Pipes[i] = 0U;
 8008388:	2100      	movs	r1, #0
 800838a:	f500 7061 	add.w	r0, r0, #900	; 0x384
 800838e:	4632      	mov	r2, r6
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
  }

  phost->gState = HOST_IDLE;
 8008390:	2500      	movs	r5, #0
    phost->Pipes[i] = 0U;
 8008392:	f006 fc6b 	bl	800ec6c <memset>
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8008396:	2301      	movs	r3, #1

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008398:	f44f 7280 	mov.w	r2, #256	; 0x100
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800839c:	4629      	mov	r1, r5
  phost->RequestState = CMD_SEND;
 800839e:	70a3      	strb	r3, [r4, #2]
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80083a0:	f104 001c 	add.w	r0, r4, #28
  phost->Control.state = CTRL_SETUP;
 80083a4:	8323      	strh	r3, [r4, #24]
  phost->gState = HOST_IDLE;
 80083a6:	7025      	strb	r5, [r4, #0]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80083a8:	f8c4 231c 	str.w	r2, [r4, #796]	; 0x31c
  phost->EnumState = ENUM_IDLE;
 80083ac:	7065      	strb	r5, [r4, #1]
  phost->Timer = 0U;
 80083ae:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80083b2:	71a6      	strb	r6, [r4, #6]
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80083b4:	f006 fc5a 	bl	800ec6c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80083b8:	4629      	mov	r1, r5
 80083ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083be:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 80083c2:	f006 fc53 	bl	800ec6c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80083c6:	4629      	mov	r1, r5
 80083c8:	2212      	movs	r2, #18
 80083ca:	f204 3026 	addw	r0, r4, #806	; 0x326
 80083ce:	f006 fc4d 	bl	800ec6c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80083d2:	4629      	mov	r1, r5
 80083d4:	f504 704e 	add.w	r0, r4, #824	; 0x338
 80083d8:	223e      	movs	r2, #62	; 0x3e

  return USBH_OK;
}
 80083da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80083de:	f006 bc45 	b.w	800ec6c <memset>
	...

080083e4 <USBH_Init>:
{
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	460e      	mov	r6, r1
 80083e8:	b08c      	sub	sp, #48	; 0x30
  if (phost == NULL)
 80083ea:	4604      	mov	r4, r0
 80083ec:	b388      	cbz	r0, 8008452 <USBH_Init+0x6e>
  phost->pActiveClass = NULL;
 80083ee:	2500      	movs	r5, #0
  phost->id = id;
 80083f0:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->ClassNumber = 0U;
 80083f4:	e9c0 55df 	strd	r5, r5, [r0, #892]	; 0x37c
  (void)DeInitStateMachine(phost);
 80083f8:	f7ff ffc3 	bl	8008382 <DeInitStateMachine.isra.0>
  phost->device.is_connected = 0U;
 80083fc:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008400:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_disconnected = 0U;
 8008404:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008408:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 800840c:	b10e      	cbz	r6, 8008412 <USBH_Init+0x2e>
    phost->pUser = pUsrFunc;
 800840e:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008412:	4d11      	ldr	r5, [pc, #68]	; (8008458 <USBH_Init+0x74>)
 8008414:	ae01      	add	r6, sp, #4
 8008416:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800841a:	3510      	adds	r5, #16
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800841c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008420:	2100      	movs	r1, #0
 8008422:	4630      	mov	r0, r6
 8008424:	f000 feaa 	bl	800917c <osMessageCreate>
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008428:	ae05      	add	r6, sp, #20
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800842a:	f8c4 03d8 	str.w	r0, [r4, #984]	; 0x3d8
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800842e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008430:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008432:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008436:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800843a:	4621      	mov	r1, r4
 800843c:	a805      	add	r0, sp, #20
 800843e:	f000 fe6d 	bl	800911c <osThreadCreate>
 8008442:	f8c4 03dc 	str.w	r0, [r4, #988]	; 0x3dc
  (void)USBH_LL_Init(phost);
 8008446:	4620      	mov	r0, r4
 8008448:	f002 faaa 	bl	800a9a0 <USBH_LL_Init>
  return USBH_OK;
 800844c:	2000      	movs	r0, #0
}
 800844e:	b00c      	add	sp, #48	; 0x30
 8008450:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8008452:	2002      	movs	r0, #2
 8008454:	e7fb      	b.n	800844e <USBH_Init+0x6a>
 8008456:	bf00      	nop
 8008458:	08011aec 	.word	0x08011aec

0800845c <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 800845c:	b149      	cbz	r1, 8008472 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800845e:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8008462:	b933      	cbnz	r3, 8008472 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008464:	2201      	movs	r2, #1
 8008466:	f8c0 1378 	str.w	r1, [r0, #888]	; 0x378
 800846a:	f8c0 2380 	str.w	r2, [r0, #896]	; 0x380
      status = USBH_OK;
 800846e:	4618      	mov	r0, r3
 8008470:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008472:	2002      	movs	r0, #2
  }

  return status;
}
 8008474:	4770      	bx	lr

08008476 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008476:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 800847a:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 800847c:	bf86      	itte	hi
 800847e:	f880 1324 	strbhi.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8008482:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008484:	2002      	movls	r0, #2
  }

  return status;
}
 8008486:	4770      	bx	lr

08008488 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800848c:	f890 6347 	ldrb.w	r6, [r0, #839]	; 0x347
 8008490:	b2e5      	uxtb	r5, r4
 8008492:	428e      	cmp	r6, r1
 8008494:	d001      	beq.n	800849a <USBH_FindInterface+0x12>
 8008496:	29ff      	cmp	r1, #255	; 0xff
 8008498:	d10b      	bne.n	80084b2 <USBH_FindInterface+0x2a>
 800849a:	f890 6348 	ldrb.w	r6, [r0, #840]	; 0x348
 800849e:	4296      	cmp	r6, r2
 80084a0:	d001      	beq.n	80084a6 <USBH_FindInterface+0x1e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80084a2:	2aff      	cmp	r2, #255	; 0xff
 80084a4:	d105      	bne.n	80084b2 <USBH_FindInterface+0x2a>
 80084a6:	f890 6349 	ldrb.w	r6, [r0, #841]	; 0x349
 80084aa:	429e      	cmp	r6, r3
 80084ac:	d004      	beq.n	80084b8 <USBH_FindInterface+0x30>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80084ae:	2bff      	cmp	r3, #255	; 0xff
 80084b0:	d002      	beq.n	80084b8 <USBH_FindInterface+0x30>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80084b2:	301a      	adds	r0, #26
 80084b4:	b114      	cbz	r4, 80084bc <USBH_FindInterface+0x34>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 80084b6:	25ff      	movs	r5, #255	; 0xff
}
 80084b8:	4628      	mov	r0, r5
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
 80084bc:	2401      	movs	r4, #1
 80084be:	e7e5      	b.n	800848c <USBH_FindInterface+0x4>

080084c0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80084c0:	b510      	push	{r4, lr}
 80084c2:	4604      	mov	r4, r0
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80084c4:	f002 faca 	bl	800aa5c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80084c8:	2101      	movs	r1, #1
 80084ca:	4620      	mov	r0, r4
 80084cc:	f002 faa0 	bl	800aa10 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 80084d0:	2000      	movs	r0, #0
 80084d2:	bd10      	pop	{r4, pc}

080084d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80084d4:	b570      	push	{r4, r5, r6, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80084d6:	2302      	movs	r3, #2
{
 80084d8:	b086      	sub	sp, #24
 80084da:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80084dc:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80084e0:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d101      	bne.n	80084ec <USBH_Process+0x18>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80084e8:	2303      	movs	r3, #3
 80084ea:	7003      	strb	r3, [r0, #0]
  }

  switch (phost->gState)
 80084ec:	7823      	ldrb	r3, [r4, #0]
 80084ee:	2b0b      	cmp	r3, #11
 80084f0:	f200 81e2 	bhi.w	80088b8 <USBH_Process+0x3e4>
 80084f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80084f8:	0026000c 	.word	0x0026000c
 80084fc:	01e30048 	.word	0x01e30048
 8008500:	007e01e0 	.word	0x007e01e0
 8008504:	017f01c7 	.word	0x017f01c7
 8008508:	01910187 	.word	0x01910187
 800850c:	01da01a6 	.word	0x01da01a6
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008510:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 81cf 	beq.w	80088b8 <USBH_Process+0x3e4>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800851a:	2501      	movs	r5, #1
        USBH_Delay(200U);
 800851c:	20c8      	movs	r0, #200	; 0xc8
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800851e:	7025      	strb	r5, [r4, #0]
        USBH_Delay(200U);
 8008520:	f002 fa92 	bl	800aa48 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008524:	4620      	mov	r0, r4
 8008526:	f002 faab 	bl	800aa80 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800852a:	2200      	movs	r2, #0
        phost->Timeout = 0U;

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800852c:	4629      	mov	r1, r5
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800852e:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008532:	f884 231c 	strb.w	r2, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 8008536:	f8c4 23c8 	str.w	r2, [r4, #968]	; 0x3c8
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800853a:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800853e:	f000 fe2f 	bl	80091a0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008542:	e1b9      	b.n	80088b8 <USBH_Process+0x3e4>
      if (phost->device.PortEnabled == 1U)
 8008544:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 8008548:	2b01      	cmp	r3, #1
 800854a:	d105      	bne.n	8008558 <USBH_Process+0x84>
        phost->device.RstCnt = 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008552:	2302      	movs	r3, #2
        phost->gState = HOST_CHECK_CLASS;
 8008554:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008556:	e015      	b.n	8008584 <USBH_Process+0xb0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008558:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800855c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008560:	d90a      	bls.n	8008578 <USBH_Process+0xa4>
          phost->device.RstCnt++;
 8008562:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 8008566:	3301      	adds	r3, #1
 8008568:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 800856a:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 800856c:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
            phost->gState = HOST_ABORT_STATE;
 8008570:	bf8c      	ite	hi
 8008572:	230d      	movhi	r3, #13
            phost->gState = HOST_IDLE;
 8008574:	2300      	movls	r3, #0
 8008576:	e7ed      	b.n	8008554 <USBH_Process+0x80>
          phost->Timeout += 10U;
 8008578:	330a      	adds	r3, #10
          USBH_Delay(10U);
 800857a:	200a      	movs	r0, #10
          phost->Timeout += 10U;
 800857c:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
          USBH_Delay(10U);
 8008580:	f002 fa62 	bl	800aa48 <USBH_Delay>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008584:	2101      	movs	r1, #1
 8008586:	e17a      	b.n	800887e <USBH_Process+0x3aa>
      if (phost->pUser != NULL)
 8008588:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 800858c:	b113      	cbz	r3, 8008594 <USBH_Process+0xc0>
        phost->pUser(phost, HOST_USER_CONNECTION);
 800858e:	2104      	movs	r1, #4
 8008590:	4620      	mov	r0, r4
 8008592:	4798      	blx	r3
      USBH_Delay(100U);
 8008594:	2064      	movs	r0, #100	; 0x64
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008596:	2500      	movs	r5, #0
      USBH_Delay(100U);
 8008598:	f002 fa56 	bl	800aa48 <USBH_Delay>
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800859c:	4620      	mov	r0, r4
 800859e:	f002 fa25 	bl	800a9ec <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 80085a2:	2305      	movs	r3, #5
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80085a4:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80085a8:	2100      	movs	r1, #0
      phost->gState = HOST_ENUMERATION;
 80085aa:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80085ac:	4620      	mov	r0, r4
 80085ae:	f000 fd58 	bl	8009062 <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80085b2:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80085b4:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80085b6:	4620      	mov	r0, r4
 80085b8:	f000 fd53 	bl	8009062 <USBH_AllocPipe>
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80085bc:	79a3      	ldrb	r3, [r4, #6]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80085be:	4601      	mov	r1, r0
 80085c0:	7120      	strb	r0, [r4, #4]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80085c2:	9302      	str	r3, [sp, #8]
 80085c4:	2280      	movs	r2, #128	; 0x80
 80085c6:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80085ca:	4620      	mov	r0, r4
 80085cc:	9501      	str	r5, [sp, #4]
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80085d4:	f000 fd31 	bl	800903a <USBH_OpenPipe>
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80085d8:	79a3      	ldrb	r3, [r4, #6]
 80085da:	462a      	mov	r2, r5
 80085dc:	7961      	ldrb	r1, [r4, #5]
 80085de:	4620      	mov	r0, r4
 80085e0:	e9cd 5301 	strd	r5, r3, [sp, #4]
 80085e4:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80085ee:	f000 fd24 	bl	800903a <USBH_OpenPipe>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80085f2:	e7c7      	b.n	8008584 <USBH_Process+0xb0>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 80085f4:	7865      	ldrb	r5, [r4, #1]
 80085f6:	2d07      	cmp	r5, #7
 80085f8:	d82c      	bhi.n	8008654 <USBH_Process+0x180>
 80085fa:	e8df f005 	tbb	[pc, r5]
 80085fe:	4204      	.short	0x4204
 8008600:	b4979073 	.word	0xb4979073
 8008604:	e8d5      	.short	0xe8d5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008606:	2108      	movs	r1, #8
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fb1e 	bl	8008c4a <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800860e:	4606      	mov	r6, r0
 8008610:	b9f0      	cbnz	r0, 8008650 <USBH_Process+0x17c>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008612:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008616:	2501      	movs	r5, #1
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008618:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800861a:	7065      	strb	r5, [r4, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800861c:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8008620:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800862a:	7921      	ldrb	r1, [r4, #4]
 800862c:	2280      	movs	r2, #128	; 0x80
 800862e:	4620      	mov	r0, r4
 8008630:	f000 fd03 	bl	800903a <USBH_OpenPipe>
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008634:	79a3      	ldrb	r3, [r4, #6]
 8008636:	4632      	mov	r2, r6
 8008638:	7961      	ldrb	r1, [r4, #5]
 800863a:	4620      	mov	r0, r4
 800863c:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8008640:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800864a:	f000 fcf6 	bl	800903a <USBH_OpenPipe>
 800864e:	e01f      	b.n	8008690 <USBH_Process+0x1bc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008650:	2803      	cmp	r0, #3
 8008652:	d001      	beq.n	8008658 <USBH_Process+0x184>
  switch (phost->EnumState)
 8008654:	2501      	movs	r5, #1
 8008656:	e01b      	b.n	8008690 <USBH_Process+0x1bc>
        phost->device.EnumCnt++;
 8008658:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800865c:	3301      	adds	r3, #1
 800865e:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8008660:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 8008662:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008666:	d901      	bls.n	800866c <USBH_Process+0x198>
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 8008668:	230d      	movs	r3, #13
 800866a:	e008      	b.n	800867e <USBH_Process+0x1aa>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800866c:	7961      	ldrb	r1, [r4, #5]
 800866e:	4620      	mov	r0, r4
 8008670:	f000 fd0f 	bl	8009092 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008674:	7921      	ldrb	r1, [r4, #4]
 8008676:	4620      	mov	r0, r4
 8008678:	f000 fd0b 	bl	8009092 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800867c:	2300      	movs	r3, #0
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
 800867e:	7023      	strb	r3, [r4, #0]
 8008680:	e7e8      	b.n	8008654 <USBH_Process+0x180>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008682:	2112      	movs	r1, #18
 8008684:	4620      	mov	r0, r4
 8008686:	f000 fae0 	bl	8008c4a <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800868a:	b998      	cbnz	r0, 80086b4 <USBH_Process+0x1e0>
        phost->EnumState = ENUM_SET_ADDR;
 800868c:	2302      	movs	r3, #2
 800868e:	7063      	strb	r3, [r4, #1]
      status = USBH_HandleEnum(phost);
 8008690:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
 8008694:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008698:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800869c:	2b00      	cmp	r3, #0
 800869e:	f040 810b 	bne.w	80088b8 <USBH_Process+0x3e4>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80086a2:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
        phost->device.current_interface = 0U;
 80086a6:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	f040 80a0 	bne.w	80087f0 <USBH_Process+0x31c>
        phost->gState = HOST_SET_CONFIGURATION;
 80086b0:	2308      	movs	r3, #8
 80086b2:	e09e      	b.n	80087f2 <USBH_Process+0x31e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086b4:	2803      	cmp	r0, #3
 80086b6:	d1cd      	bne.n	8008654 <USBH_Process+0x180>
        phost->device.EnumCnt++;
 80086b8:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80086bc:	3301      	adds	r3, #1
 80086be:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 80086c0:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 80086c2:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086c6:	d902      	bls.n	80086ce <USBH_Process+0x1fa>
          phost->gState = HOST_ABORT_STATE;
 80086c8:	230d      	movs	r3, #13
          phost->gState = HOST_IDLE;
 80086ca:	7023      	strb	r3, [r4, #0]
 80086cc:	e7e0      	b.n	8008690 <USBH_Process+0x1bc>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086ce:	7961      	ldrb	r1, [r4, #5]
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 fcde 	bl	8009092 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086d6:	7921      	ldrb	r1, [r4, #4]
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 fcda 	bl	8009092 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80086de:	2300      	movs	r3, #0
 80086e0:	7063      	strb	r3, [r4, #1]
 80086e2:	e7f2      	b.n	80086ca <USBH_Process+0x1f6>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80086e4:	2101      	movs	r1, #1
 80086e6:	4620      	mov	r0, r4
 80086e8:	f000 fc15 	bl	8008f16 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 80086ec:	4606      	mov	r6, r0
 80086ee:	b978      	cbnz	r0, 8008710 <USBH_Process+0x23c>
        USBH_Delay(2U);
 80086f0:	2002      	movs	r0, #2
        phost->device.address = USBH_DEVICE_ADDRESS;
 80086f2:	2501      	movs	r5, #1
        USBH_Delay(2U);
 80086f4:	f002 f9a8 	bl	800aa48 <USBH_Delay>
        phost->EnumState = ENUM_GET_CFG_DESC;
 80086f8:	2303      	movs	r3, #3
        phost->device.address = USBH_DEVICE_ADDRESS;
 80086fa:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 80086fe:	7063      	strb	r3, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008700:	79a3      	ldrb	r3, [r4, #6]
 8008702:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8008706:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	462b      	mov	r3, r5
 800870e:	e78c      	b.n	800862a <USBH_Process+0x156>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008710:	2803      	cmp	r0, #3
 8008712:	d19f      	bne.n	8008654 <USBH_Process+0x180>
        phost->gState = HOST_ABORT_STATE;
 8008714:	230d      	movs	r3, #13
 8008716:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8008718:	2300      	movs	r3, #0
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800871a:	7063      	strb	r3, [r4, #1]
 800871c:	e79a      	b.n	8008654 <USBH_Process+0x180>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800871e:	2109      	movs	r1, #9
 8008720:	4620      	mov	r0, r4
 8008722:	f000 faef 	bl	8008d04 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8008726:	b948      	cbnz	r0, 800873c <USBH_Process+0x268>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008728:	2304      	movs	r3, #4
 800872a:	e7f6      	b.n	800871a <USBH_Process+0x246>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800872c:	f8b4 133a 	ldrh.w	r1, [r4, #826]	; 0x33a
 8008730:	4620      	mov	r0, r4
 8008732:	f000 fae7 	bl	8008d04 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8008736:	b908      	cbnz	r0, 800873c <USBH_Process+0x268>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008738:	2305      	movs	r3, #5
 800873a:	e7ee      	b.n	800871a <USBH_Process+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800873c:	2803      	cmp	r0, #3
 800873e:	d189      	bne.n	8008654 <USBH_Process+0x180>
        phost->device.EnumCnt++;
 8008740:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8008744:	3301      	adds	r3, #1
 8008746:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8008748:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800874a:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800874e:	d88b      	bhi.n	8008668 <USBH_Process+0x194>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008750:	7961      	ldrb	r1, [r4, #5]
 8008752:	4620      	mov	r0, r4
 8008754:	f000 fc9d 	bl	8009092 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008758:	7921      	ldrb	r1, [r4, #4]
 800875a:	4620      	mov	r0, r4
 800875c:	f000 fc99 	bl	8009092 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008760:	2300      	movs	r3, #0
 8008762:	7063      	strb	r3, [r4, #1]
 8008764:	e78b      	b.n	800867e <USBH_Process+0x1aa>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008766:	f894 1334 	ldrb.w	r1, [r4, #820]	; 0x334
 800876a:	b1a9      	cbz	r1, 8008798 <USBH_Process+0x2c4>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800876c:	23ff      	movs	r3, #255	; 0xff
 800876e:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8008772:	4620      	mov	r0, r4
 8008774:	f000 fba8 	bl	8008ec8 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8008778:	b950      	cbnz	r0, 8008790 <USBH_Process+0x2bc>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800877a:	2306      	movs	r3, #6
        {
          USBH_UsrLog("Product : N/A");
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800877c:	2105      	movs	r1, #5
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800877e:	2200      	movs	r2, #0
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008780:	7063      	strb	r3, [r4, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008782:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008786:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 800878a:	f000 fd09 	bl	80091a0 <osMessagePut>
 800878e:	e761      	b.n	8008654 <USBH_Process+0x180>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008790:	2803      	cmp	r0, #3
 8008792:	f47f af5f 	bne.w	8008654 <USBH_Process+0x180>
 8008796:	e7f0      	b.n	800877a <USBH_Process+0x2a6>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008798:	2306      	movs	r3, #6
        }
      }
      else
      {
        USBH_UsrLog("Product : N/A");
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800879a:	7063      	strb	r3, [r4, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800879c:	2305      	movs	r3, #5
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800879e:	460a      	mov	r2, r1
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80087a0:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087a4:	4619      	mov	r1, r3
 80087a6:	e7ee      	b.n	8008786 <USBH_Process+0x2b2>
      if (phost->device.DevDesc.iProduct != 0U)
 80087a8:	f894 1335 	ldrb.w	r1, [r4, #821]	; 0x335
 80087ac:	b169      	cbz	r1, 80087ca <USBH_Process+0x2f6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80087ae:	23ff      	movs	r3, #255	; 0xff
 80087b0:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80087b4:	4620      	mov	r0, r4
 80087b6:	f000 fb87 	bl	8008ec8 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 80087ba:	b908      	cbnz	r0, 80087c0 <USBH_Process+0x2ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80087bc:	2307      	movs	r3, #7
 80087be:	e7ac      	b.n	800871a <USBH_Process+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087c0:	2803      	cmp	r0, #3
 80087c2:	f47f af47 	bne.w	8008654 <USBH_Process+0x180>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80087c6:	2307      	movs	r3, #7
 80087c8:	e7d8      	b.n	800877c <USBH_Process+0x2a8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80087ca:	2307      	movs	r3, #7
 80087cc:	e7e5      	b.n	800879a <USBH_Process+0x2c6>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80087ce:	f894 1336 	ldrb.w	r1, [r4, #822]	; 0x336
 80087d2:	b909      	cbnz	r1, 80087d8 <USBH_Process+0x304>
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
 80087d4:	2500      	movs	r5, #0
 80087d6:	e75b      	b.n	8008690 <USBH_Process+0x1bc>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80087d8:	23ff      	movs	r3, #255	; 0xff
 80087da:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80087de:	4620      	mov	r0, r4
 80087e0:	f000 fb72 	bl	8008ec8 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d0f5      	beq.n	80087d4 <USBH_Process+0x300>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80087e8:	1ec5      	subs	r5, r0, #3
 80087ea:	bf18      	it	ne
 80087ec:	2501      	movne	r5, #1
 80087ee:	e74f      	b.n	8008690 <USBH_Process+0x1bc>
          phost->gState = HOST_INPUT;
 80087f0:	2307      	movs	r3, #7
        phost->gState = HOST_ABORT_STATE;
 80087f2:	7023      	strb	r3, [r4, #0]
 80087f4:	e042      	b.n	800887c <USBH_Process+0x3a8>
      if (phost->pUser != NULL)
 80087f6:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d05c      	beq.n	80088b8 <USBH_Process+0x3e4>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80087fe:	2101      	movs	r1, #1
 8008800:	4620      	mov	r0, r4
 8008802:	4798      	blx	r3
 8008804:	e754      	b.n	80086b0 <USBH_Process+0x1dc>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008806:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
 800880a:	4620      	mov	r0, r4
 800880c:	f000 fb90 	bl	8008f30 <USBH_SetCfg>
 8008810:	2800      	cmp	r0, #0
 8008812:	f47f aeb7 	bne.w	8008584 <USBH_Process+0xb0>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008816:	2309      	movs	r3, #9
 8008818:	e69c      	b.n	8008554 <USBH_Process+0x80>
      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800881a:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
 800881e:	069b      	lsls	r3, r3, #26
 8008820:	d508      	bpl.n	8008834 <USBH_Process+0x360>
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008822:	2101      	movs	r1, #1
 8008824:	4620      	mov	r0, r4
 8008826:	f000 fb90 	bl	8008f4a <USBH_SetFeature>
 800882a:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800882e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008832:	b90b      	cbnz	r3, 8008838 <USBH_Process+0x364>
        phost->gState = HOST_CHECK_CLASS;
 8008834:	230a      	movs	r3, #10
 8008836:	e68d      	b.n	8008554 <USBH_Process+0x80>
        else if (status == USBH_NOT_SUPPORTED)
 8008838:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800883c:	2b03      	cmp	r3, #3
 800883e:	f47f aea1 	bne.w	8008584 <USBH_Process+0xb0>
 8008842:	e7f7      	b.n	8008834 <USBH_Process+0x360>
      if (phost->ClassNumber == 0U)
 8008844:	f8d4 3380 	ldr.w	r3, [r4, #896]	; 0x380
 8008848:	b1c3      	cbz	r3, 800887c <USBH_Process+0x3a8>
        phost->pActiveClass = NULL;
 800884a:	2300      	movs	r3, #0
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800884c:	f894 2347 	ldrb.w	r2, [r4, #839]	; 0x347
        phost->pActiveClass = NULL;
 8008850:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008854:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8008858:	7919      	ldrb	r1, [r3, #4]
            phost->pActiveClass = phost->pClass[idx];
 800885a:	4291      	cmp	r1, r2
 800885c:	bf18      	it	ne
 800885e:	2300      	movne	r3, #0
 8008860:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
        if (phost->pActiveClass != NULL)
 8008864:	b303      	cbz	r3, 80088a8 <USBH_Process+0x3d4>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	4620      	mov	r0, r4
 800886a:	4798      	blx	r3
 800886c:	b9e0      	cbnz	r0, 80088a8 <USBH_Process+0x3d4>
            phost->gState = HOST_CLASS_REQUEST;
 800886e:	2306      	movs	r3, #6
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008870:	2103      	movs	r1, #3
 8008872:	4620      	mov	r0, r4
            phost->gState = HOST_CLASS_REQUEST;
 8008874:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008876:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 800887a:	4798      	blx	r3
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800887c:	2105      	movs	r1, #5
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800887e:	2200      	movs	r2, #0
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008880:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008884:	e659      	b.n	800853a <USBH_Process+0x66>
      if (phost->pActiveClass != NULL)
 8008886:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800888a:	b16b      	cbz	r3, 80088a8 <USBH_Process+0x3d4>
        status = phost->pActiveClass->Requests(phost);
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	4620      	mov	r0, r4
 8008890:	4798      	blx	r3
 8008892:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8008896:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800889a:	b90b      	cbnz	r3, 80088a0 <USBH_Process+0x3cc>
          phost->gState = HOST_CLASS;
 800889c:	230b      	movs	r3, #11
 800889e:	e7a8      	b.n	80087f2 <USBH_Process+0x31e>
        else if (status == USBH_FAIL)
 80088a0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d1e9      	bne.n	800887c <USBH_Process+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80088a8:	230d      	movs	r3, #13
 80088aa:	e7a2      	b.n	80087f2 <USBH_Process+0x31e>
      if (phost->pActiveClass != NULL)
 80088ac:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80088b0:	b113      	cbz	r3, 80088b8 <USBH_Process+0x3e4>
        phost->pActiveClass->BgndProcess(phost);
 80088b2:	695b      	ldr	r3, [r3, #20]
 80088b4:	4620      	mov	r0, r4
 80088b6:	4798      	blx	r3
}
 80088b8:	2000      	movs	r0, #0
 80088ba:	b006      	add	sp, #24
 80088bc:	bd70      	pop	{r4, r5, r6, pc}
      phost->device.is_disconnected = 0U;
 80088be:	2500      	movs	r5, #0
      (void)DeInitStateMachine(phost);
 80088c0:	4620      	mov	r0, r4
      phost->device.is_disconnected = 0U;
 80088c2:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
      (void)DeInitStateMachine(phost);
 80088c6:	f7ff fd5c 	bl	8008382 <DeInitStateMachine.isra.0>
      if (phost->pActiveClass != NULL)
 80088ca:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80088ce:	b123      	cbz	r3, 80088da <USBH_Process+0x406>
        phost->pActiveClass->DeInit(phost);
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	4620      	mov	r0, r4
 80088d4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80088d6:	f8c4 537c 	str.w	r5, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 80088da:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80088de:	b113      	cbz	r3, 80088e6 <USBH_Process+0x412>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80088e0:	2105      	movs	r1, #5
 80088e2:	4620      	mov	r0, r4
 80088e4:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 80088e6:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d106      	bne.n	80088fc <USBH_Process+0x428>
        phost->device.is_ReEnumerated = 0U;
 80088ee:	2300      	movs	r3, #0
        (void)USBH_Start(phost);
 80088f0:	4620      	mov	r0, r4
        phost->device.is_ReEnumerated = 0U;
 80088f2:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        (void)USBH_Start(phost);
 80088f6:	f7ff fde3 	bl	80084c0 <USBH_Start>
 80088fa:	e643      	b.n	8008584 <USBH_Process+0xb0>
        (void)USBH_LL_Start(phost);
 80088fc:	4620      	mov	r0, r4
 80088fe:	f002 f8ad 	bl	800aa5c <USBH_LL_Start>
 8008902:	e63f      	b.n	8008584 <USBH_Process+0xb0>

08008904 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8008904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008906:	4604      	mov	r4, r0
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8008908:	f04f 32ff 	mov.w	r2, #4294967295
 800890c:	f8d4 13d8 	ldr.w	r1, [r4, #984]	; 0x3d8
 8008910:	a801      	add	r0, sp, #4
 8008912:	f000 fc6d 	bl	80091f0 <osMessageGet>
    if (event.status == osEventMessage)
 8008916:	9b01      	ldr	r3, [sp, #4]
 8008918:	2b10      	cmp	r3, #16
 800891a:	d1f5      	bne.n	8008908 <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800891c:	4620      	mov	r0, r4
 800891e:	f7ff fdd9 	bl	80084d4 <USBH_Process>
 8008922:	e7f1      	b.n	8008908 <USBH_Process_OS+0x4>

08008924 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8008924:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 8008928:	4770      	bx	lr

0800892a <USBH_LL_IncTimer>:
  phost->Timer++;
 800892a:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 800892e:	3201      	adds	r2, #1
 8008930:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008934:	7802      	ldrb	r2, [r0, #0]
 8008936:	2a0b      	cmp	r2, #11
 8008938:	d104      	bne.n	8008944 <USBH_LL_IncTimer+0x1a>
 800893a:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 800893e:	b10b      	cbz	r3, 8008944 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	4718      	bx	r3
}
 8008944:	4770      	bx	lr

08008946 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 8008946:	2101      	movs	r1, #1
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008948:	2200      	movs	r2, #0
  phost->device.PortEnabled = 1U;
 800894a:	f880 1323 	strb.w	r1, [r0, #803]	; 0x323
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800894e:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008952:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 8008956:	f000 bc23 	b.w	80091a0 <osMessagePut>

0800895a <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
}
 8008960:	4770      	bx	lr

08008962 <USBH_LL_Connect>:
{
 8008962:	b510      	push	{r4, lr}
  phost->device.is_connected = 1U;
 8008964:	2101      	movs	r1, #1
  phost->device.is_disconnected = 0U;
 8008966:	2400      	movs	r4, #0
  phost->device.is_connected = 1U;
 8008968:	f880 1320 	strb.w	r1, [r0, #800]	; 0x320
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800896c:	4622      	mov	r2, r4
  phost->device.is_disconnected = 0U;
 800896e:	f880 4321 	strb.w	r4, [r0, #801]	; 0x321
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008972:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
  phost->device.is_ReEnumerated = 0U;
 8008976:	f880 4322 	strb.w	r4, [r0, #802]	; 0x322
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800897a:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 800897e:	f000 fc0f 	bl	80091a0 <osMessagePut>
}
 8008982:	4620      	mov	r0, r4
 8008984:	bd10      	pop	{r4, pc}

08008986 <USBH_LL_Disconnect>:
{
 8008986:	b570      	push	{r4, r5, r6, lr}
  phost->device.is_connected = 0U;
 8008988:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 800898a:	2601      	movs	r6, #1
{
 800898c:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 800898e:	f880 6321 	strb.w	r6, [r0, #801]	; 0x321
  phost->device.PortEnabled = 0U;
 8008992:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008996:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  (void)USBH_LL_Stop(phost);
 800899a:	f002 f868 	bl	800aa6e <USBH_LL_Stop>
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800899e:	7921      	ldrb	r1, [r4, #4]
 80089a0:	4620      	mov	r0, r4
 80089a2:	f000 fb76 	bl	8009092 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089a6:	7961      	ldrb	r1, [r4, #5]
 80089a8:	4620      	mov	r0, r4
 80089aa:	f000 fb72 	bl	8009092 <USBH_FreePipe>
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089ae:	462a      	mov	r2, r5
 80089b0:	4631      	mov	r1, r6
 80089b2:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80089b6:	f8c4 63e0 	str.w	r6, [r4, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089ba:	f000 fbf1 	bl	80091a0 <osMessagePut>
}
 80089be:	4628      	mov	r0, r5
 80089c0:	bd70      	pop	{r4, r5, r6, pc}

080089c2 <USBH_LL_NotifyURBChange>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80089c2:	2101      	movs	r1, #1

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089c4:	2200      	movs	r2, #0
{
 80089c6:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80089c8:	f8c0 13e0 	str.w	r1, [r0, #992]	; 0x3e0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089cc:	f8d0 03d8 	ldr.w	r0, [r0, #984]	; 0x3d8
 80089d0:	f000 fbe6 	bl	80091a0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
}
 80089d4:	2000      	movs	r0, #0
 80089d6:	bd08      	pop	{r3, pc}

080089d8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80089d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 80089da:	7885      	ldrb	r5, [r0, #2]
{
 80089dc:	4604      	mov	r4, r0
  switch (phost->RequestState)
 80089de:	2d01      	cmp	r5, #1
 80089e0:	d005      	beq.n	80089ee <USBH_CtlReq+0x16>
 80089e2:	2d02      	cmp	r5, #2
 80089e4:	d011      	beq.n	8008a0a <USBH_CtlReq+0x32>
 80089e6:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 80089e8:	4628      	mov	r0, r5
 80089ea:	b003      	add	sp, #12
 80089ec:	bd30      	pop	{r4, r5, pc}
      phost->RequestState = CMD_WAIT;
 80089ee:	2302      	movs	r3, #2
      phost->Control.buff = buff;
 80089f0:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 80089f2:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 80089f4:	7605      	strb	r5, [r0, #24]
      phost->RequestState = CMD_WAIT;
 80089f6:	7083      	strb	r3, [r0, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089f8:	2103      	movs	r1, #3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a00:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a04:	f000 fbcc 	bl	80091a0 <osMessagePut>
  return status;
 8008a08:	e7ee      	b.n	80089e8 <USBH_CtlReq+0x10>
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8008a0a:	7e05      	ldrb	r5, [r0, #24]
 8008a0c:	1e6b      	subs	r3, r5, #1
 8008a0e:	2b0a      	cmp	r3, #10
 8008a10:	d851      	bhi.n	8008ab6 <USBH_CtlReq+0xde>
 8008a12:	e8df f003 	tbb	[pc, r3]
 8008a16:	0e06      	.short	0x0e06
 8008a18:	70644035 	.word	0x70644035
 8008a1c:	cec29c92 	.word	0xcec29c92
 8008a20:	e4          	.byte	0xe4
 8008a21:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008a22:	7942      	ldrb	r2, [r0, #5]
 8008a24:	f100 0110 	add.w	r1, r0, #16
 8008a28:	f000 faa9 	bl	8008f7e <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008a2c:	2302      	movs	r3, #2
        phost->Control.state = CTRL_IDLE;
 8008a2e:	7623      	strb	r3, [r4, #24]
 8008a30:	e7e2      	b.n	80089f8 <USBH_CtlReq+0x20>
      break;

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a32:	7941      	ldrb	r1, [r0, #5]
 8008a34:	f001 ffe8 	bl	800aa08 <USBH_LL_GetURBState>
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a38:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a3a:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8008a3c:	d115      	bne.n	8008a6a <USBH_CtlReq+0x92>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008a3e:	8ae2      	ldrh	r2, [r4, #22]
 8008a40:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8008a44:	b16a      	cbz	r2, 8008a62 <USBH_CtlReq+0x8a>
        {
          if (direction == USB_D2H)
 8008a46:	2b00      	cmp	r3, #0
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008a48:	bfb4      	ite	lt
 8008a4a:	2303      	movlt	r3, #3
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008a4c:	2305      	movge	r3, #5
            phost->Control.state = CTRL_STATUS_IN;
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a4e:	2103      	movs	r1, #3
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a50:	2200      	movs	r2, #0
 8008a52:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
            phost->Control.state = CTRL_STATUS_IN;
 8008a56:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a58:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a5c:	f000 fba0 	bl	80091a0 <osMessagePut>
      else if (status == USBH_FAIL)
 8008a60:	e7ca      	b.n	80089f8 <USBH_CtlReq+0x20>
          if (direction == USB_D2H)
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	da4d      	bge.n	8008b02 <USBH_CtlReq+0x12a>
            phost->Control.state = CTRL_STATUS_OUT;
 8008a66:	2309      	movs	r3, #9
 8008a68:	e7f1      	b.n	8008a4e <USBH_CtlReq+0x76>
#endif
#endif
      }
      else
      {
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008a6a:	2804      	cmp	r0, #4
 8008a6c:	d001      	beq.n	8008a72 <USBH_CtlReq+0x9a>
 8008a6e:	2802      	cmp	r0, #2
 8008a70:	d121      	bne.n	8008ab6 <USBH_CtlReq+0xde>
        {
          phost->Control.state = CTRL_ERROR;
 8008a72:	230b      	movs	r3, #11
      {
        /* Nack received from device */
        phost->Control.state = CTRL_DATA_OUT;

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a74:	2103      	movs	r1, #3
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a76:	2200      	movs	r2, #0
        phost->Control.state = CTRL_DATA_OUT;
 8008a78:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a7a:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a7e:	e016      	b.n	8008aae <USBH_CtlReq+0xd6>
      phost->Control.timer = (uint16_t)phost->Timer;
 8008a80:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008a84:	8982      	ldrh	r2, [r0, #12]
      phost->Control.timer = (uint16_t)phost->Timer;
 8008a86:	81c3      	strh	r3, [r0, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008a88:	6881      	ldr	r1, [r0, #8]
 8008a8a:	7903      	ldrb	r3, [r0, #4]
 8008a8c:	f000 fa9e 	bl	8008fcc <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008a90:	2304      	movs	r3, #4
    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a92:	7623      	strb	r3, [r4, #24]
      else if (status == USBH_FAIL)
 8008a94:	e00f      	b.n	8008ab6 <USBH_CtlReq+0xde>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a96:	7901      	ldrb	r1, [r0, #4]
 8008a98:	2503      	movs	r5, #3
 8008a9a:	f001 ffb5 	bl	800aa08 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008a9e:	2801      	cmp	r0, #1
 8008aa0:	d10b      	bne.n	8008aba <USBH_CtlReq+0xe2>
        phost->Control.state = CTRL_STATUS_OUT;
 8008aa2:	2309      	movs	r3, #9
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4629      	mov	r1, r5
          phost->Control.state = CTRL_ERROR;
 8008aa8:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008aaa:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008aae:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8008ab2:	f000 fb75 	bl	80091a0 <osMessagePut>
  switch (phost->Control.state)
 8008ab6:	2501      	movs	r5, #1
 8008ab8:	e79e      	b.n	80089f8 <USBH_CtlReq+0x20>
      if (URB_Status == USBH_URB_STALL)
 8008aba:	2805      	cmp	r0, #5
 8008abc:	d10b      	bne.n	8008ad6 <USBH_CtlReq+0xfe>
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008abe:	2200      	movs	r2, #0
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ac6:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
          status = USBH_NOT_SUPPORTED;

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008aca:	f000 fb69 	bl	80091a0 <osMessagePut>
        phost->RequestState = CMD_SEND;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e7ab      	b.n	8008a2e <USBH_CtlReq+0x56>
        if (URB_Status == USBH_URB_ERROR)
 8008ad6:	2804      	cmp	r0, #4
 8008ad8:	d1ed      	bne.n	8008ab6 <USBH_CtlReq+0xde>
          phost->Control.state = CTRL_ERROR;
 8008ada:	230b      	movs	r3, #11
 8008adc:	e7e2      	b.n	8008aa4 <USBH_CtlReq+0xcc>
      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008ade:	2501      	movs	r5, #1
 8008ae0:	9500      	str	r5, [sp, #0]
 8008ae2:	7943      	ldrb	r3, [r0, #5]
 8008ae4:	8982      	ldrh	r2, [r0, #12]
 8008ae6:	6881      	ldr	r1, [r0, #8]
 8008ae8:	f000 fa59 	bl	8008f9e <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8008aec:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8008af0:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008af2:	2306      	movs	r3, #6
 8008af4:	e79b      	b.n	8008a2e <USBH_CtlReq+0x56>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008af6:	7941      	ldrb	r1, [r0, #5]
 8008af8:	f001 ff86 	bl	800aa08 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008afc:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008afe:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8008b00:	d101      	bne.n	8008b06 <USBH_CtlReq+0x12e>
            phost->Control.state = CTRL_STATUS_IN;
 8008b02:	2307      	movs	r3, #7
 8008b04:	e7a3      	b.n	8008a4e <USBH_CtlReq+0x76>
      else if (URB_Status == USBH_URB_STALL)
 8008b06:	2805      	cmp	r0, #5
 8008b08:	d103      	bne.n	8008b12 <USBH_CtlReq+0x13a>
        phost->Control.state = CTRL_STALLED;
 8008b0a:	230c      	movs	r3, #12
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b0c:	2503      	movs	r5, #3
        phost->Control.state = CTRL_STALLED;
 8008b0e:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b10:	e7d5      	b.n	8008abe <USBH_CtlReq+0xe6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b12:	2802      	cmp	r0, #2
 8008b14:	d101      	bne.n	8008b1a <USBH_CtlReq+0x142>
        phost->Control.state = CTRL_DATA_OUT;
 8008b16:	2305      	movs	r3, #5
 8008b18:	e7ac      	b.n	8008a74 <USBH_CtlReq+0x9c>
        if (URB_Status == USBH_URB_ERROR)
 8008b1a:	2804      	cmp	r0, #4
 8008b1c:	d1cb      	bne.n	8008ab6 <USBH_CtlReq+0xde>
          phost->Control.state = CTRL_ERROR;
 8008b1e:	230b      	movs	r3, #11
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b20:	2103      	movs	r1, #3
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
          phost->Control.state = CTRL_ERROR;
 8008b28:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b2a:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b2e:	f000 fb37 	bl	80091a0 <osMessagePut>
        phost->RequestState = CMD_SEND;
 8008b32:	2301      	movs	r3, #1
 8008b34:	2502      	movs	r5, #2
 8008b36:	70a3      	strb	r3, [r4, #2]
 8008b38:	e75e      	b.n	80089f8 <USBH_CtlReq+0x20>
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	7903      	ldrb	r3, [r0, #4]
 8008b3e:	4611      	mov	r1, r2
 8008b40:	f000 fa44 	bl	8008fcc <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8008b44:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8008b48:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008b4a:	2308      	movs	r3, #8
 8008b4c:	e7a1      	b.n	8008a92 <USBH_CtlReq+0xba>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b4e:	7901      	ldrb	r1, [r0, #4]
 8008b50:	f001 ff5a 	bl	800aa08 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008b54:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b56:	4603      	mov	r3, r0
      if (URB_Status == USBH_URB_DONE)
 8008b58:	d10b      	bne.n	8008b72 <USBH_CtlReq+0x19a>
    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
      if (URB_Status == USBH_URB_DONE)
      {
        status = USBH_OK;
        phost->Control.state = CTRL_COMPLETE;
 8008b5a:	230d      	movs	r3, #13

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b5c:	2103      	movs	r1, #3
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
        phost->Control.state = CTRL_COMPLETE;
 8008b64:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 8008b66:	2500      	movs	r5, #0
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b68:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b6c:	f000 fb18 	bl	80091a0 <osMessagePut>
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008b70:	e7ad      	b.n	8008ace <USBH_CtlReq+0xf6>
      else if (URB_Status == USBH_URB_ERROR)
 8008b72:	2b04      	cmp	r3, #4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b74:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
 8008b78:	f04f 0503 	mov.w	r5, #3
      else if (URB_Status == USBH_URB_ERROR)
 8008b7c:	d106      	bne.n	8008b8c <USBH_CtlReq+0x1b4>
        phost->Control.state = CTRL_ERROR;
 8008b7e:	230b      	movs	r3, #11
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b80:	2200      	movs	r2, #0
 8008b82:	4629      	mov	r1, r5
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b84:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
        phost->Control.state = CTRL_ERROR;
 8008b88:	7623      	strb	r3, [r4, #24]
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b8a:	e792      	b.n	8008ab2 <USBH_CtlReq+0xda>
        if (URB_Status == USBH_URB_STALL)
 8008b8c:	2b05      	cmp	r3, #5
 8008b8e:	d192      	bne.n	8008ab6 <USBH_CtlReq+0xde>
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b90:	2200      	movs	r2, #0
 8008b92:	4629      	mov	r1, r5
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b94:	f8c4 53e0 	str.w	r5, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b98:	e797      	b.n	8008aca <USBH_CtlReq+0xf2>
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2501      	movs	r5, #1
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	9500      	str	r5, [sp, #0]
 8008ba2:	7943      	ldrb	r3, [r0, #5]
 8008ba4:	f000 f9fb 	bl	8008f9e <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ba8:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8008bac:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008bae:	230a      	movs	r3, #10
 8008bb0:	e73d      	b.n	8008a2e <USBH_CtlReq+0x56>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008bb2:	7941      	ldrb	r1, [r0, #5]
 8008bb4:	f001 ff28 	bl	800aa08 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008bb8:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008bba:	4603      	mov	r3, r0
      if (URB_Status == USBH_URB_DONE)
 8008bbc:	d0cd      	beq.n	8008b5a <USBH_CtlReq+0x182>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      else if (URB_Status == USBH_URB_NOTREADY)
 8008bbe:	2b02      	cmp	r3, #2
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bc0:	f8d4 03d8 	ldr.w	r0, [r4, #984]	; 0x3d8
      else if (URB_Status == USBH_URB_NOTREADY)
 8008bc4:	d106      	bne.n	8008bd4 <USBH_CtlReq+0x1fc>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008bc6:	2309      	movs	r3, #9
        if (URB_Status == USBH_URB_ERROR)
        {
          phost->Control.state = CTRL_ERROR;

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bc8:	2103      	movs	r1, #3
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bca:	2200      	movs	r2, #0
          phost->Control.state = CTRL_ERROR;
 8008bcc:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008bce:	f8c4 13e0 	str.w	r1, [r4, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bd2:	e76e      	b.n	8008ab2 <USBH_CtlReq+0xda>
        if (URB_Status == USBH_URB_ERROR)
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	f47f af6e 	bne.w	8008ab6 <USBH_CtlReq+0xde>
          phost->Control.state = CTRL_ERROR;
 8008bda:	230b      	movs	r3, #11
 8008bdc:	e7f4      	b.n	8008bc8 <USBH_CtlReq+0x1f0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008bde:	7e43      	ldrb	r3, [r0, #25]
 8008be0:	3301      	adds	r3, #1
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	7643      	strb	r3, [r0, #25]
 8008be8:	d803      	bhi.n	8008bf2 <USBH_CtlReq+0x21a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008bea:	2501      	movs	r5, #1
 8008bec:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 8008bee:	7085      	strb	r5, [r0, #2]
      else if (status == USBH_FAIL)
 8008bf0:	e702      	b.n	80089f8 <USBH_CtlReq+0x20>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
 8008bf2:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008bf4:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 8008bf8:	2106      	movs	r1, #6
 8008bfa:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bfc:	7961      	ldrb	r1, [r4, #5]
 8008bfe:	4620      	mov	r0, r4
        phost->Control.errorcount = 0U;
 8008c00:	7665      	strb	r5, [r4, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c02:	f000 fa46 	bl	8009092 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c06:	7921      	ldrb	r1, [r4, #4]
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f000 fa42 	bl	8009092 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 8008c0e:	7025      	strb	r5, [r4, #0]
      else if (status == USBH_FAIL)
 8008c10:	e78f      	b.n	8008b32 <USBH_CtlReq+0x15a>

08008c12 <USBH_GetDescriptor>:
{
 8008c12:	b430      	push	{r4, r5}
 8008c14:	460c      	mov	r4, r1
 8008c16:	4619      	mov	r1, r3
  if (phost->RequestState == CMD_SEND)
 8008c18:	7883      	ldrb	r3, [r0, #2]
{
 8008c1a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d10f      	bne.n	8008c42 <USBH_GetDescriptor+0x30>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008c22:	f064 047f 	orn	r4, r4, #127	; 0x7f
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008c26:	2306      	movs	r3, #6
    phost->Control.setup.b.wValue.w = value_idx;
 8008c28:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008c2a:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008c2c:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008c30:	7443      	strb	r3, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8008c32:	f240 4309 	movw	r3, #1033	; 0x409
 8008c36:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wLength.w = length;
 8008c3a:	82c5      	strh	r5, [r0, #22]
      phost->Control.setup.b.wIndex.w = 0U;
 8008c3c:	bf18      	it	ne
 8008c3e:	2300      	movne	r3, #0
 8008c40:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 8008c42:	462a      	mov	r2, r5
}
 8008c44:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8008c46:	f7ff bec7 	b.w	80089d8 <USBH_CtlReq>

08008c4a <USBH_Get_DevDesc>:
{
 8008c4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = USBH_GetDescriptor(phost,
 8008c4c:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8008c50:	460d      	mov	r5, r1
 8008c52:	9100      	str	r1, [sp, #0]
 8008c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c58:	2100      	movs	r1, #0
{
 8008c5a:	4604      	mov	r4, r0
  status = USBH_GetDescriptor(phost,
 8008c5c:	f7ff ffd9 	bl	8008c12 <USBH_GetDescriptor>
  if (status == USBH_OK)
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d147      	bne.n	8008cf4 <USBH_Get_DevDesc+0xaa>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008c64:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008c68:	f894 2123 	ldrb.w	r2, [r4, #291]	; 0x123
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008c6c:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008c70:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
  switch (dev_desc->bMaxPacketSize)
 8008c74:	2a20      	cmp	r2, #32
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008c76:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008c7a:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8008c7e:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008c82:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8008c86:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008c8a:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8008c8e:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008c92:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8008c96:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
  switch (dev_desc->bMaxPacketSize)
 8008c9a:	d82d      	bhi.n	8008cf8 <USBH_Get_DevDesc+0xae>
 8008c9c:	2a07      	cmp	r2, #7
 8008c9e:	d92d      	bls.n	8008cfc <USBH_Get_DevDesc+0xb2>
 8008ca0:	f1a2 0308 	sub.w	r3, r2, #8
 8008ca4:	b2d9      	uxtb	r1, r3
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	408b      	lsls	r3, r1
 8008caa:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cb2:	b31b      	cbz	r3, 8008cfc <USBH_Get_DevDesc+0xb2>
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008cb4:	f884 232d 	strb.w	r2, [r4, #813]	; 0x32d
  if (length > 8U)
 8008cb8:	2d08      	cmp	r5, #8
 8008cba:	d91b      	bls.n	8008cf4 <USBH_Get_DevDesc+0xaa>
    dev_desc->idVendor           = LE16(buf +  8);
 8008cbc:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8008cc0:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->idProduct          = LE16(buf + 10);
 8008cc4:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8008cc8:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008ccc:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8008cd0:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008cd4:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8008cd8:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008cdc:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8008ce0:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008ce4:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8008ce8:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008cec:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8008cf0:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
}
 8008cf4:	b003      	add	sp, #12
 8008cf6:	bd30      	pop	{r4, r5, pc}
  switch (dev_desc->bMaxPacketSize)
 8008cf8:	2a40      	cmp	r2, #64	; 0x40
 8008cfa:	d0db      	beq.n	8008cb4 <USBH_Get_DevDesc+0x6a>
      dev_desc->bMaxPacketSize = 64U;
 8008cfc:	2340      	movs	r3, #64	; 0x40
 8008cfe:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
      break;
 8008d02:	e7d9      	b.n	8008cb8 <USBH_Get_DevDesc+0x6e>

08008d04 <USBH_Get_CfgDesc>:
{
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008d08:	f100 041c 	add.w	r4, r0, #28
{
 8008d0c:	b087      	sub	sp, #28
 8008d0e:	460e      	mov	r6, r1
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d14:	9100      	str	r1, [sp, #0]
 8008d16:	4623      	mov	r3, r4
 8008d18:	2100      	movs	r1, #0
{
 8008d1a:	4605      	mov	r5, r0
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008d1c:	f7ff ff79 	bl	8008c12 <USBH_GetDescriptor>
  if (status == USBH_OK)
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d173      	bne.n	8008e0c <USBH_Get_CfgDesc+0x108>
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008d24:	f8b5 801e 	ldrh.w	r8, [r5, #30]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008d28:	7f6a      	ldrb	r2, [r5, #29]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008d2a:	7f2b      	ldrb	r3, [r5, #28]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008d2c:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008d30:	f885 2339 	strb.w	r2, [r5, #825]	; 0x339
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008d34:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008d38:	bf28      	it	cs
 8008d3a:	f44f 7880 	movcs.w	r8, #256	; 0x100
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008d3e:	2b09      	cmp	r3, #9
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008d40:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008d44:	f885 233d 	strb.w	r2, [r5, #829]	; 0x33d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008d48:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008d4c:	bf18      	it	ne
 8008d4e:	2309      	movne	r3, #9
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008d50:	f895 b020 	ldrb.w	fp, [r5, #32]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008d54:	f885 233e 	strb.w	r2, [r5, #830]	; 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008d58:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008d5c:	bf18      	it	ne
 8008d5e:	f885 3338 	strbne.w	r3, [r5, #824]	; 0x338
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008d62:	2e09      	cmp	r6, #9
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008d64:	f885 233f 	strb.w	r2, [r5, #831]	; 0x33f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008d68:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008d6c:	f8a5 833a 	strh.w	r8, [r5, #826]	; 0x33a
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008d70:	f885 b33c 	strb.w	fp, [r5, #828]	; 0x33c
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008d74:	f885 2340 	strb.w	r2, [r5, #832]	; 0x340
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008d78:	f240 80a0 	bls.w	8008ebc <USBH_Get_CfgDesc+0x1b8>
  USBH_StatusTypeDef           status = USBH_OK;
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	462b      	mov	r3, r5
    ptr = USB_LEN_CFG_DESC;
 8008d80:	2209      	movs	r2, #9
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008d82:	4686      	mov	lr, r0
 8008d84:	fa5f f68e 	uxtb.w	r6, lr
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d88:	f1be 0f02 	cmp.w	lr, #2
 8008d8c:	d03e      	beq.n	8008e0c <USBH_Get_CfgDesc+0x108>
 8008d8e:	4590      	cmp	r8, r2
 8008d90:	d806      	bhi.n	8008da0 <USBH_Get_CfgDesc+0x9c>
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008d92:	465b      	mov	r3, fp
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	bf28      	it	cs
 8008d98:	2302      	movcs	r3, #2
 8008d9a:	42b3      	cmp	r3, r6
 8008d9c:	d936      	bls.n	8008e0c <USBH_Get_CfgDesc+0x108>
 8008d9e:	e034      	b.n	8008e0a <USBH_Get_CfgDesc+0x106>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008da0:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008da2:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008da4:	440a      	add	r2, r1
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008da6:	7861      	ldrb	r1, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008da8:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008daa:	2904      	cmp	r1, #4
 8008dac:	d1ec      	bne.n	8008d88 <USBH_Get_CfgDesc+0x84>
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008dae:	7821      	ldrb	r1, [r4, #0]
        ep_ix = 0U;
 8008db0:	2700      	movs	r7, #0
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008db2:	2909      	cmp	r1, #9
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008db4:	bf1c      	itt	ne
 8008db6:	2109      	movne	r1, #9
 8008db8:	7021      	strbne	r1, [r4, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008dba:	7821      	ldrb	r1, [r4, #0]
 8008dbc:	f883 1342 	strb.w	r1, [r3, #834]	; 0x342
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008dc0:	7861      	ldrb	r1, [r4, #1]
 8008dc2:	f883 1343 	strb.w	r1, [r3, #835]	; 0x343
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008dc6:	78a1      	ldrb	r1, [r4, #2]
 8008dc8:	f883 1344 	strb.w	r1, [r3, #836]	; 0x344
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008dcc:	78e1      	ldrb	r1, [r4, #3]
 8008dce:	f883 1345 	strb.w	r1, [r3, #837]	; 0x345
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008dd2:	7921      	ldrb	r1, [r4, #4]
 8008dd4:	f883 1346 	strb.w	r1, [r3, #838]	; 0x346
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008dd8:	f894 9005 	ldrb.w	r9, [r4, #5]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008ddc:	9103      	str	r1, [sp, #12]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008dde:	f883 9347 	strb.w	r9, [r3, #839]	; 0x347
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008de2:	f894 a006 	ldrb.w	sl, [r4, #6]
 8008de6:	f883 a348 	strb.w	sl, [r3, #840]	; 0x348
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008dea:	79e1      	ldrb	r1, [r4, #7]
 8008dec:	9104      	str	r1, [sp, #16]
 8008dee:	f883 1349 	strb.w	r1, [r3, #841]	; 0x349
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008df2:	7a21      	ldrb	r1, [r4, #8]
 8008df4:	f883 134a 	strb.w	r1, [r3, #842]	; 0x34a
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008df8:	211a      	movs	r1, #26
 8008dfa:	fb01 f10e 	mul.w	r1, r1, lr
 8008dfe:	9105      	str	r1, [sp, #20]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e00:	9903      	ldr	r1, [sp, #12]
 8008e02:	428f      	cmp	r7, r1
 8008e04:	d25c      	bcs.n	8008ec0 <USBH_Get_CfgDesc+0x1bc>
 8008e06:	4590      	cmp	r8, r2
 8008e08:	d803      	bhi.n	8008e12 <USBH_Get_CfgDesc+0x10e>
          return USBH_NOT_SUPPORTED;
 8008e0a:	2003      	movs	r0, #3
}
 8008e0c:	b007      	add	sp, #28
 8008e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e12:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e14:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e16:	440a      	add	r2, r1
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008e18:	7861      	ldrb	r1, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e1a:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008e1c:	2905      	cmp	r1, #5
 8008e1e:	d1ef      	bne.n	8008e00 <USBH_Get_CfgDesc+0xfc>
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008e20:	f1b9 0f01 	cmp.w	r9, #1
 8008e24:	d139      	bne.n	8008e9a <USBH_Get_CfgDesc+0x196>
 8008e26:	f1ba 0f02 	cmp.w	sl, #2
 8008e2a:	d136      	bne.n	8008e9a <USBH_Get_CfgDesc+0x196>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e2c:	9904      	ldr	r1, [sp, #16]
 8008e2e:	b929      	cbnz	r1, 8008e3c <USBH_Get_CfgDesc+0x138>
 8008e30:	7821      	ldrb	r1, [r4, #0]
 8008e32:	2909      	cmp	r1, #9
 8008e34:	d002      	beq.n	8008e3c <USBH_Get_CfgDesc+0x138>
                pdesc->bLength = 0x09U;
 8008e36:	f04f 0109 	mov.w	r1, #9
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008e3a:	7021      	strb	r1, [r4, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008e3c:	9e05      	ldr	r6, [sp, #20]
 8008e3e:	1c79      	adds	r1, r7, #1
 8008e40:	7820      	ldrb	r0, [r4, #0]
 8008e42:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8008e46:	4429      	add	r1, r5
 8008e48:	f881 0344 	strb.w	r0, [r1, #836]	; 0x344
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008e4c:	7860      	ldrb	r0, [r4, #1]
 8008e4e:	f881 0345 	strb.w	r0, [r1, #837]	; 0x345
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008e52:	78a0      	ldrb	r0, [r4, #2]
 8008e54:	f881 0346 	strb.w	r0, [r1, #838]	; 0x346
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008e58:	f894 c003 	ldrb.w	ip, [r4, #3]
 8008e5c:	f881 c347 	strb.w	ip, [r1, #839]	; 0x347
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008e60:	88a0      	ldrh	r0, [r4, #4]
 8008e62:	f8a1 0348 	strh.w	r0, [r1, #840]	; 0x348
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008e66:	79a6      	ldrb	r6, [r4, #6]
 8008e68:	f881 634a 	strb.w	r6, [r1, #842]	; 0x34a
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008e6c:	b1c0      	cbz	r0, 8008ea0 <USBH_Get_CfgDesc+0x19c>
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008e6e:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8008e72:	f020 0007 	bic.w	r0, r0, #7
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 8008e76:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8008e7a:	f8a1 0348 	strh.w	r0, [r1, #840]	; 0x348
  USBH_StatusTypeDef status = USBH_OK;
 8008e7e:	2000      	movs	r0, #0
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008e80:	f895 131d 	ldrb.w	r1, [r5, #797]	; 0x31d
 8008e84:	b971      	cbnz	r1, 8008ea4 <USBH_Get_CfgDesc+0x1a0>
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008e86:	f01c 0f01 	tst.w	ip, #1
 8008e8a:	d003      	beq.n	8008e94 <USBH_Get_CfgDesc+0x190>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008e8c:	3e01      	subs	r6, #1
        status = USBH_NOT_SUPPORTED;
 8008e8e:	2e0f      	cmp	r6, #15
 8008e90:	bf88      	it	hi
 8008e92:	2003      	movhi	r0, #3
            ep_ix++;
 8008e94:	3701      	adds	r7, #1
 8008e96:	b2ff      	uxtb	r7, r7
 8008e98:	e7b2      	b.n	8008e00 <USBH_Get_CfgDesc+0xfc>
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008e9a:	f04f 0107 	mov.w	r1, #7
 8008e9e:	e7cc      	b.n	8008e3a <USBH_Get_CfgDesc+0x136>
    status = USBH_NOT_SUPPORTED;
 8008ea0:	2003      	movs	r0, #3
 8008ea2:	e7ed      	b.n	8008e80 <USBH_Get_CfgDesc+0x17c>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008ea4:	f00c 0c03 	and.w	ip, ip, #3
 8008ea8:	f1bc 0f01 	cmp.w	ip, #1
 8008eac:	d0ee      	beq.n	8008e8c <USBH_Get_CfgDesc+0x188>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008eae:	f1bc 0f03 	cmp.w	ip, #3
 8008eb2:	d1ef      	bne.n	8008e94 <USBH_Get_CfgDesc+0x190>
        status = USBH_NOT_SUPPORTED;
 8008eb4:	2e00      	cmp	r6, #0
 8008eb6:	bf08      	it	eq
 8008eb8:	2003      	moveq	r0, #3
 8008eba:	e7eb      	b.n	8008e94 <USBH_Get_CfgDesc+0x190>
  USBH_StatusTypeDef           status = USBH_OK;
 8008ebc:	2000      	movs	r0, #0
  return status;
 8008ebe:	e7a5      	b.n	8008e0c <USBH_Get_CfgDesc+0x108>
        if_ix++;
 8008ec0:	f10e 0e01 	add.w	lr, lr, #1
 8008ec4:	331a      	adds	r3, #26
 8008ec6:	e75d      	b.n	8008d84 <USBH_Get_CfgDesc+0x80>

08008ec8 <USBH_Get_StringDesc>:
{
 8008ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                              phost->device.Data, length);
 8008eca:	f500 768e 	add.w	r6, r0, #284	; 0x11c
{
 8008ece:	4615      	mov	r5, r2
 8008ed0:	461f      	mov	r7, r3
  status = USBH_GetDescriptor(phost,
 8008ed2:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	2100      	movs	r1, #0
 8008eda:	4633      	mov	r3, r6
{
 8008edc:	4604      	mov	r4, r0
  status = USBH_GetDescriptor(phost,
 8008ede:	f7ff fe98 	bl	8008c12 <USBH_GetDescriptor>
  if (status == USBH_OK)
 8008ee2:	b978      	cbnz	r0, 8008f04 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008ee4:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d10b      	bne.n	8008f04 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008eec:	f894 411c 	ldrb.w	r4, [r4, #284]	; 0x11c
 8008ef0:	1ea1      	subs	r1, r4, #2
    for (idx = 0U; idx < strlength; idx += 2U)
 8008ef2:	4604      	mov	r4, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008ef4:	42b9      	cmp	r1, r7
 8008ef6:	bf28      	it	cs
 8008ef8:	4639      	movcs	r1, r7
 8008efa:	b289      	uxth	r1, r1
    for (idx = 0U; idx < strlength; idx += 2U)
 8008efc:	42a1      	cmp	r1, r4
 8008efe:	d803      	bhi.n	8008f08 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8008f00:	2300      	movs	r3, #0
 8008f02:	702b      	strb	r3, [r5, #0]
}
 8008f04:	b003      	add	sp, #12
 8008f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8008f08:	1933      	adds	r3, r6, r4
    for (idx = 0U; idx < strlength; idx += 2U)
 8008f0a:	3402      	adds	r4, #2
      *pdest =  psrc[idx];
 8008f0c:	789b      	ldrb	r3, [r3, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008f0e:	b2a4      	uxth	r4, r4
      *pdest =  psrc[idx];
 8008f10:	f805 3b01 	strb.w	r3, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8008f14:	e7f2      	b.n	8008efc <USBH_Get_StringDesc+0x34>

08008f16 <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 8008f16:	7883      	ldrb	r3, [r0, #2]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d105      	bne.n	8008f28 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008f1c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008f20:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008f22:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	f7ff bd54 	b.w	80089d8 <USBH_CtlReq>

08008f30 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 8008f30:	7883      	ldrb	r3, [r0, #2]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d105      	bne.n	8008f42 <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f36:	f44f 6310 	mov.w	r3, #2304	; 0x900
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008f3a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f3c:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 8008f42:	2200      	movs	r2, #0
 8008f44:	4611      	mov	r1, r2
 8008f46:	f7ff bd47 	b.w	80089d8 <USBH_CtlReq>

08008f4a <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 8008f4a:	7883      	ldrb	r3, [r0, #2]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d105      	bne.n	8008f5c <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f50:	f44f 7340 	mov.w	r3, #768	; 0x300
    phost->Control.setup.b.wValue.w = wValue;
 8008f54:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f56:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	4611      	mov	r1, r2
 8008f60:	f7ff bd3a 	b.w	80089d8 <USBH_CtlReq>

08008f64 <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 8008f64:	7883      	ldrb	r3, [r0, #2]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d105      	bne.n	8008f76 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008f6a:	f44f 7381 	mov.w	r3, #258	; 0x102
    phost->Control.setup.b.wIndex.w = ep_num;
 8008f6e:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008f70:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, NULL, 0U);
 8008f76:	2200      	movs	r2, #0
 8008f78:	4611      	mov	r1, r2
 8008f7a:	f7ff bd2d 	b.w	80089d8 <USBH_CtlReq>

08008f7e <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008f7e:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f80:	2400      	movs	r4, #0
{
 8008f82:	460b      	mov	r3, r1
 8008f84:	4611      	mov	r1, r2
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f86:	2208      	movs	r2, #8
 8008f88:	e9cd 4300 	strd	r4, r3, [sp]
 8008f8c:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8008f90:	4623      	mov	r3, r4
 8008f92:	4622      	mov	r2, r4
 8008f94:	f001 fd99 	bl	800aaca <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8008f98:	4620      	mov	r0, r4
 8008f9a:	b004      	add	sp, #16
 8008f9c:	bd10      	pop	{r4, pc}

08008f9e <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008f9e:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fa0:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8008fa4:	b085      	sub	sp, #20
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	4619      	mov	r1, r3
  {
    do_ping = 0U;
 8008faa:	2d00      	cmp	r5, #0
{
 8008fac:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fb0:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 8008fb2:	bf18      	it	ne
 8008fb4:	2300      	movne	r3, #0
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fba:	2301      	movs	r3, #1
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	f001 fd82 	bl	800aaca <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	b005      	add	sp, #20
 8008fca:	bd30      	pop	{r4, r5, pc}

08008fcc <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008fcc:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fce:	2400      	movs	r4, #0
{
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	460d      	mov	r5, r1
 8008fd4:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fd6:	4623      	mov	r3, r4
 8008fd8:	9501      	str	r5, [sp, #4]
 8008fda:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	9200      	str	r2, [sp, #0]
 8008fe2:	f001 fd72 	bl	800aaca <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	b005      	add	sp, #20
 8008fea:	bd30      	pop	{r4, r5, pc}

08008fec <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008fec:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fee:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	4619      	mov	r1, r3
  {
    do_ping = 0U;
 8008ff8:	2d00      	cmp	r5, #0
{
 8008ffa:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ffe:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 8009000:	bf18      	it	ne
 8009002:	2300      	movne	r3, #0
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009004:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009008:	2301      	movs	r3, #1
 800900a:	2200      	movs	r2, #0
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	2302      	movs	r3, #2
 8009010:	f001 fd5b 	bl	800aaca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8009014:	2000      	movs	r0, #0
 8009016:	b005      	add	sp, #20
 8009018:	bd30      	pop	{r4, r5, pc}

0800901a <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800901a:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800901c:	2400      	movs	r4, #0
{
 800901e:	b085      	sub	sp, #20
 8009020:	460d      	mov	r5, r1
 8009022:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009024:	2302      	movs	r3, #2
 8009026:	9501      	str	r5, [sp, #4]
 8009028:	e9cd 2402 	strd	r2, r4, [sp, #8]
 800902c:	2201      	movs	r2, #1
 800902e:	9200      	str	r2, [sp, #0]
 8009030:	f001 fd4b 	bl	800aaca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8009034:	4620      	mov	r0, r4
 8009036:	b005      	add	sp, #20
 8009038:	bd30      	pop	{r4, r5, pc}

0800903a <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800903a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800903c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8009040:	9402      	str	r4, [sp, #8]
 8009042:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8009046:	9401      	str	r4, [sp, #4]
 8009048:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800904c:	9400      	str	r4, [sp, #0]
 800904e:	f001 fd20 	bl	800aa92 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 8009052:	2000      	movs	r0, #0
 8009054:	b004      	add	sp, #16
 8009056:	bd10      	pop	{r4, pc}

08009058 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009058:	b508      	push	{r3, lr}
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800905a:	f001 fd2d 	bl	800aab8 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 800905e:	2000      	movs	r0, #0
 8009060:	bd08      	pop	{r3, pc}

08009062 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009062:	b530      	push	{r4, r5, lr}
 8009064:	2300      	movs	r3, #0
 8009066:	f500 7461 	add.w	r4, r0, #900	; 0x384
{
  uint8_t idx = 0U;

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800906a:	f854 5b04 	ldr.w	r5, [r4], #4
 800906e:	b2da      	uxtb	r2, r3
 8009070:	042d      	lsls	r5, r5, #16
 8009072:	d408      	bmi.n	8009086 <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009074:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009078:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
 800907c:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800907e:	f8c0 1384 	str.w	r1, [r0, #900]	; 0x384
}
 8009082:	b2d0      	uxtb	r0, r2
 8009084:	bd30      	pop	{r4, r5, pc}
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009086:	3301      	adds	r3, #1
 8009088:	2b10      	cmp	r3, #16
 800908a:	d1ee      	bne.n	800906a <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
 800908c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009090:	e7f7      	b.n	8009082 <USBH_AllocPipe+0x20>

08009092 <USBH_FreePipe>:
  if (idx < USBH_MAX_PIPES_NBR)
 8009092:	290f      	cmp	r1, #15
    phost->Pipes[idx] &= 0x7FFFU;
 8009094:	bf98      	it	ls
 8009096:	eb00 0181 	addls.w	r1, r0, r1, lsl #2
}
 800909a:	f04f 0000 	mov.w	r0, #0
    phost->Pipes[idx] &= 0x7FFFU;
 800909e:	bf9e      	ittt	ls
 80090a0:	f8d1 3384 	ldrls.w	r3, [r1, #900]	; 0x384
 80090a4:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 80090a8:	f8c1 3384 	strls.w	r3, [r1, #900]	; 0x384
}
 80090ac:	4770      	bx	lr
	...

080090b0 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80090b0:	4b0e      	ldr	r3, [pc, #56]	; (80090ec <FATFS_LinkDriverEx+0x3c>)
{
 80090b2:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 80090b4:	7a5c      	ldrb	r4, [r3, #9]
{
 80090b6:	4605      	mov	r5, r0
  if(disk.nbr < _VOLUMES)
 80090b8:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 80090bc:	b9a4      	cbnz	r4, 80090e8 <FATFS_LinkDriverEx+0x38>
  {
    disk.is_initialized[disk.nbr] = 0;
 80090be:	7a5c      	ldrb	r4, [r3, #9]
 80090c0:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 80090c2:	7a5c      	ldrb	r4, [r3, #9]
 80090c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090c8:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;
 80090ca:	7a5c      	ldrb	r4, [r3, #9]
 80090cc:	441c      	add	r4, r3
 80090ce:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 80090d0:	7a5a      	ldrb	r2, [r3, #9]
 80090d2:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 80090d4:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 80090d6:	b2e4      	uxtb	r4, r4
 80090d8:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 80090da:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 80090dc:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80090de:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80090e0:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 80090e2:	70c8      	strb	r0, [r1, #3]
    path[2] = '/';
 80090e4:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 80090e6:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80090e8:	2001      	movs	r0, #1
 80090ea:	e7fc      	b.n	80090e6 <FATFS_LinkDriverEx+0x36>
 80090ec:	20001714 	.word	0x20001714

080090f0 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80090f0:	2200      	movs	r2, #0
 80090f2:	f7ff bfdd 	b.w	80090b0 <FATFS_LinkDriverEx>

080090f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80090f6:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80090f8:	f000 fe3a 	bl	8009d70 <vTaskStartScheduler>
  
  return osOK;
}
 80090fc:	2000      	movs	r0, #0
 80090fe:	bd08      	pop	{r3, pc}

08009100 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8009100:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8009102:	f001 f8c7 	bl	800a294 <xTaskGetSchedulerState>
  else
    return 1;
#else
	return (-1);
#endif	
}
 8009106:	3801      	subs	r0, #1
 8009108:	bf18      	it	ne
 800910a:	2001      	movne	r0, #1
 800910c:	bd08      	pop	{r3, pc}

0800910e <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800910e:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8009112:	b10b      	cbz	r3, 8009118 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8009114:	f000 be74 	b.w	8009e00 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8009118:	f000 be6c 	b.w	8009df4 <xTaskGetTickCount>

0800911c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009120:	6946      	ldr	r6, [r0, #20]
{
 8009122:	460b      	mov	r3, r1
 8009124:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009126:	692a      	ldr	r2, [r5, #16]
 8009128:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 800912c:	e9d0 1000 	ldrd	r1, r0, [r0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009130:	b176      	cbz	r6, 8009150 <osThreadCreate+0x34>
 8009132:	69ad      	ldr	r5, [r5, #24]
 8009134:	b165      	cbz	r5, 8009150 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8009136:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8009138:	bf14      	ite	ne
 800913a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800913c:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800913e:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8009142:	9400      	str	r4, [sp, #0]
 8009144:	f000 fda9 	bl	8009c9a <xTaskCreateStatic>
 8009148:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800914a:	9805      	ldr	r0, [sp, #20]
}
 800914c:	b006      	add	sp, #24
 800914e:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8009150:	2c84      	cmp	r4, #132	; 0x84
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009152:	ad05      	add	r5, sp, #20
 8009154:	b292      	uxth	r2, r2
    fpriority += (priority - osPriorityIdle);
 8009156:	bf14      	ite	ne
 8009158:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800915a:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800915c:	e9cd 4500 	strd	r4, r5, [sp]
 8009160:	f000 fdd9 	bl	8009d16 <xTaskCreate>
 8009164:	2801      	cmp	r0, #1
 8009166:	d0f0      	beq.n	800914a <osThreadCreate+0x2e>
      return NULL;
 8009168:	2000      	movs	r0, #0
 800916a:	e7ef      	b.n	800914c <osThreadCreate+0x30>

0800916c <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800916c:	2801      	cmp	r0, #1
{
 800916e:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009170:	bf38      	it	cc
 8009172:	2001      	movcc	r0, #1
 8009174:	f000 ff5e 	bl	800a034 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009178:	2000      	movs	r0, #0
 800917a:	bd08      	pop	{r3, pc}

0800917c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800917c:	4603      	mov	r3, r0
 800917e:	b513      	push	{r0, r1, r4, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009180:	c807      	ldmia	r0, {r0, r1, r2}
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009182:	b10a      	cbz	r2, 8009188 <osMessageCreate+0xc>
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	b92b      	cbnz	r3, 8009194 <osMessageCreate+0x18>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009188:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800918a:	b002      	add	sp, #8
 800918c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009190:	f000 b9cb 	b.w	800952a <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009194:	2400      	movs	r4, #0
 8009196:	9400      	str	r4, [sp, #0]
 8009198:	f000 f9b9 	bl	800950e <xQueueGenericCreateStatic>
}
 800919c:	b002      	add	sp, #8
 800919e:	bd10      	pop	{r4, pc}

080091a0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80091a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80091a2:	2400      	movs	r4, #0
{
 80091a4:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80091a6:	9403      	str	r4, [sp, #12]
 80091a8:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 80091ac:	b1b3      	cbz	r3, 80091dc <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80091ae:	4623      	mov	r3, r4
 80091b0:	aa03      	add	r2, sp, #12
 80091b2:	a901      	add	r1, sp, #4
 80091b4:	f000 fa9a 	bl	80096ec <xQueueGenericSendFromISR>
 80091b8:	2801      	cmp	r0, #1
 80091ba:	d117      	bne.n	80091ec <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80091bc:	9b03      	ldr	r3, [sp, #12]
 80091be:	b913      	cbnz	r3, 80091c6 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80091c0:	2000      	movs	r0, #0
}
 80091c2:	b004      	add	sp, #16
 80091c4:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80091c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80091ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	e7f1      	b.n	80091c0 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80091dc:	2a01      	cmp	r2, #1
 80091de:	a901      	add	r1, sp, #4
 80091e0:	bf38      	it	cc
 80091e2:	2201      	movcc	r2, #1
 80091e4:	f000 f9c7 	bl	8009576 <xQueueGenericSend>
 80091e8:	2801      	cmp	r0, #1
 80091ea:	d0e9      	beq.n	80091c0 <osMessagePut+0x20>
      return osErrorOS;
 80091ec:	20ff      	movs	r0, #255	; 0xff
 80091ee:	e7e8      	b.n	80091c2 <osMessagePut+0x22>

080091f0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80091f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80091f2:	2300      	movs	r3, #0
{
 80091f4:	4604      	mov	r4, r0
 80091f6:	4616      	mov	r6, r2
 80091f8:	4608      	mov	r0, r1
 80091fa:	ad01      	add	r5, sp, #4
  event.def.message_id = queue_id;
 80091fc:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80091fe:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8009200:	b911      	cbnz	r1, 8009208 <osMessageGet+0x18>
    event.status = osErrorParameter;
 8009202:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	e018      	b.n	800923a <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 800920e:	b1db      	cbz	r3, 8009248 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009210:	466a      	mov	r2, sp
 8009212:	a902      	add	r1, sp, #8
 8009214:	f000 fb78 	bl	8009908 <xQueueReceiveFromISR>
      event.status = osOK;
 8009218:	2801      	cmp	r0, #1
 800921a:	bf0c      	ite	eq
 800921c:	2310      	moveq	r3, #16
 800921e:	2300      	movne	r3, #0
 8009220:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8009222:	9b00      	ldr	r3, [sp, #0]
 8009224:	b14b      	cbz	r3, 800923a <osMessageGet+0x4a>
 8009226:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800922a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800922e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 800923a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800923e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009242:	4620      	mov	r0, r4
 8009244:	b004      	add	sp, #16
 8009246:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009248:	a902      	add	r1, sp, #8
 800924a:	f000 fab8 	bl	80097be <xQueueReceive>
 800924e:	2801      	cmp	r0, #1
 8009250:	d101      	bne.n	8009256 <osMessageGet+0x66>
      event.status = osEventMessage;
 8009252:	2310      	movs	r3, #16
 8009254:	e7d6      	b.n	8009204 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009256:	2e00      	cmp	r6, #0
 8009258:	bf18      	it	ne
 800925a:	2640      	movne	r6, #64	; 0x40
 800925c:	9601      	str	r6, [sp, #4]
 800925e:	e7ec      	b.n	800923a <osMessageGet+0x4a>

08009260 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009260:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009264:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009268:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800926a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800926c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009274:	4770      	bx	lr

08009276 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009276:	2300      	movs	r3, #0
 8009278:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800927a:	4770      	bx	lr

0800927c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800927c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800927e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8009280:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009282:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009284:	689a      	ldr	r2, [r3, #8]
 8009286:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009288:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800928a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800928c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800928e:	3301      	adds	r3, #1
 8009290:	6003      	str	r3, [r0, #0]
}
 8009292:	4770      	bx	lr

08009294 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009294:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009296:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009298:	1c63      	adds	r3, r4, #1
 800929a:	d10a      	bne.n	80092b2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800929c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092a2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80092a4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80092a6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80092a8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80092aa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80092ac:	3301      	adds	r3, #1
 80092ae:	6003      	str	r3, [r0, #0]
}
 80092b0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092b2:	f100 0208 	add.w	r2, r0, #8
 80092b6:	4613      	mov	r3, r2
 80092b8:	6852      	ldr	r2, [r2, #4]
 80092ba:	6815      	ldr	r5, [r2, #0]
 80092bc:	42a5      	cmp	r5, r4
 80092be:	d9fa      	bls.n	80092b6 <vListInsert+0x22>
 80092c0:	e7ed      	b.n	800929e <vListInsert+0xa>

080092c2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092c2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092c4:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80092c8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092ca:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092cc:	6859      	ldr	r1, [r3, #4]
 80092ce:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092d0:	bf08      	it	eq
 80092d2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092d4:	2200      	movs	r2, #0
 80092d6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	3a01      	subs	r2, #1
 80092dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092de:	6818      	ldr	r0, [r3, #0]
}
 80092e0:	4770      	bx	lr

080092e2 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092e2:	b510      	push	{r4, lr}
 80092e4:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092e6:	f001 f8a5 	bl	800a434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092ea:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80092ec:	f001 f8c6 	bl	800a47c <vPortExitCritical>

	return xReturn;
}
 80092f0:	fab4 f084 	clz	r0, r4
 80092f4:	0940      	lsrs	r0, r0, #5
 80092f6:	bd10      	pop	{r4, pc}

080092f8 <prvCopyDataToQueue>:
{
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80092fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80092fe:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009300:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009302:	b952      	cbnz	r2, 800931a <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009304:	6807      	ldr	r7, [r0, #0]
 8009306:	bb47      	cbnz	r7, 800935a <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009308:	6880      	ldr	r0, [r0, #8]
 800930a:	f000 ffd3 	bl	800a2b4 <xTaskPriorityDisinherit>
 800930e:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009310:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009312:	3601      	adds	r6, #1
}
 8009314:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009316:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8009318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800931a:	b965      	cbnz	r5, 8009336 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800931c:	6840      	ldr	r0, [r0, #4]
 800931e:	f005 fc97 	bl	800ec50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009322:	6863      	ldr	r3, [r4, #4]
 8009324:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009326:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009328:	68a2      	ldr	r2, [r4, #8]
 800932a:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800932c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800932e:	d3f0      	bcc.n	8009312 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	6063      	str	r3, [r4, #4]
 8009334:	e7ed      	b.n	8009312 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009336:	68c0      	ldr	r0, [r0, #12]
 8009338:	f005 fc8a 	bl	800ec50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800933c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800933e:	68e3      	ldr	r3, [r4, #12]
 8009340:	4251      	negs	r1, r2
 8009342:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009344:	6822      	ldr	r2, [r4, #0]
 8009346:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009348:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800934a:	bf3e      	ittt	cc
 800934c:	68a3      	ldrcc	r3, [r4, #8]
 800934e:	185b      	addcc	r3, r3, r1
 8009350:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009352:	2d02      	cmp	r5, #2
 8009354:	d101      	bne.n	800935a <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009356:	b116      	cbz	r6, 800935e <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8009358:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800935a:	2500      	movs	r5, #0
 800935c:	e7d9      	b.n	8009312 <prvCopyDataToQueue+0x1a>
 800935e:	4635      	mov	r5, r6
 8009360:	e7d7      	b.n	8009312 <prvCopyDataToQueue+0x1a>

08009362 <prvCopyDataFromQueue>:
{
 8009362:	4603      	mov	r3, r0
 8009364:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8009368:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800936a:	b162      	cbz	r2, 8009386 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800936c:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800936e:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009370:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009372:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009374:	60dc      	str	r4, [r3, #12]
}
 8009376:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800937a:	bf24      	itt	cs
 800937c:	6819      	ldrcs	r1, [r3, #0]
 800937e:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009380:	68d9      	ldr	r1, [r3, #12]
 8009382:	f005 bc65 	b.w	800ec50 <memcpy>
}
 8009386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800938a:	4770      	bx	lr

0800938c <prvUnlockQueue>:
{
 800938c:	b570      	push	{r4, r5, r6, lr}
 800938e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009390:	f001 f850 	bl	800a434 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009394:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009398:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800939c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800939e:	2d00      	cmp	r5, #0
 80093a0:	dc14      	bgt.n	80093cc <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80093a2:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093a4:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80093a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80093ac:	f001 f866 	bl	800a47c <vPortExitCritical>
	taskENTER_CRITICAL();
 80093b0:	f001 f840 	bl	800a434 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80093b4:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80093b8:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093ba:	2d00      	cmp	r5, #0
 80093bc:	dc12      	bgt.n	80093e4 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80093be:	23ff      	movs	r3, #255	; 0xff
 80093c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80093c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80093c8:	f001 b858 	b.w	800a47c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0e7      	beq.n	80093a2 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093d2:	4630      	mov	r0, r6
 80093d4:	f000 fec4 	bl	800a160 <xTaskRemoveFromEventList>
 80093d8:	b108      	cbz	r0, 80093de <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80093da:	f000 ff55 	bl	800a288 <vTaskMissedYield>
			--cTxLock;
 80093de:	3d01      	subs	r5, #1
 80093e0:	b26d      	sxtb	r5, r5
 80093e2:	e7dc      	b.n	800939e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093e4:	6923      	ldr	r3, [r4, #16]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d0e9      	beq.n	80093be <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093ea:	4630      	mov	r0, r6
 80093ec:	f000 feb8 	bl	800a160 <xTaskRemoveFromEventList>
 80093f0:	b108      	cbz	r0, 80093f6 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80093f2:	f000 ff49 	bl	800a288 <vTaskMissedYield>
				--cRxLock;
 80093f6:	3d01      	subs	r5, #1
 80093f8:	b26d      	sxtb	r5, r5
 80093fa:	e7de      	b.n	80093ba <prvUnlockQueue+0x2e>

080093fc <xQueueGenericReset>:
{
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8009400:	4604      	mov	r4, r0
 8009402:	b950      	cbnz	r0, 800941a <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009408:	b672      	cpsid	i
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	b662      	cpsie	i
 8009418:	e7fe      	b.n	8009418 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800941a:	f001 f80b 	bl	800a434 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800941e:	6822      	ldr	r2, [r4, #0]
 8009420:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009424:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009426:	434b      	muls	r3, r1
 8009428:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800942a:	1a5b      	subs	r3, r3, r1
 800942c:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800942e:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009430:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009432:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009434:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009436:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8009438:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800943c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8009440:	b9a5      	cbnz	r5, 800946c <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009442:	6923      	ldr	r3, [r4, #16]
 8009444:	b173      	cbz	r3, 8009464 <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009446:	f104 0010 	add.w	r0, r4, #16
 800944a:	f000 fe89 	bl	800a160 <xTaskRemoveFromEventList>
 800944e:	b148      	cbz	r0, 8009464 <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8009450:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009458:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8009464:	f001 f80a 	bl	800a47c <vPortExitCritical>
}
 8009468:	2001      	movs	r0, #1
 800946a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800946c:	f104 0010 	add.w	r0, r4, #16
 8009470:	f7ff fef6 	bl	8009260 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009474:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009478:	f7ff fef2 	bl	8009260 <vListInitialise>
 800947c:	e7f2      	b.n	8009464 <xQueueGenericReset+0x68>

0800947e <xQueueGenericCreateStatic.part.0.isra.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 800947e:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 8009480:	461c      	mov	r4, r3
 8009482:	b953      	cbnz	r3, 800949a <xQueueGenericCreateStatic.part.0.isra.0+0x1c>
 8009484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009488:	b672      	cpsid	i
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	b662      	cpsie	i
 8009498:	e7fe      	b.n	8009498 <xQueueGenericCreateStatic.part.0.isra.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800949a:	b15a      	cbz	r2, 80094b4 <xQueueGenericCreateStatic.part.0.isra.0+0x36>
 800949c:	b9b1      	cbnz	r1, 80094cc <xQueueGenericCreateStatic.part.0.isra.0+0x4e>
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	b672      	cpsid	i
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	b662      	cpsie	i
 80094b2:	e7fe      	b.n	80094b2 <xQueueGenericCreateStatic.part.0.isra.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80094b4:	b151      	cbz	r1, 80094cc <xQueueGenericCreateStatic.part.0.isra.0+0x4e>
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	b672      	cpsid	i
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	b662      	cpsie	i
 80094ca:	e7fe      	b.n	80094ca <xQueueGenericCreateStatic.part.0.isra.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80094cc:	2348      	movs	r3, #72	; 0x48
 80094ce:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094d0:	9b01      	ldr	r3, [sp, #4]
 80094d2:	2b48      	cmp	r3, #72	; 0x48
 80094d4:	d00a      	beq.n	80094ec <xQueueGenericCreateStatic.part.0.isra.0+0x6e>
 80094d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094da:	b672      	cpsid	i
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	b662      	cpsie	i
 80094ea:	e7fe      	b.n	80094ea <xQueueGenericCreateStatic.part.0.isra.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80094ec:	2900      	cmp	r1, #0
 80094ee:	bf08      	it	eq
 80094f0:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80094f2:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80094f4:	2301      	movs	r3, #1
 80094f6:	6022      	str	r2, [r4, #0]
 80094f8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80094fc:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009500:	4619      	mov	r1, r3
 8009502:	4620      	mov	r0, r4
 8009504:	f7ff ff7a 	bl	80093fc <xQueueGenericReset>
	}
 8009508:	4620      	mov	r0, r4
 800950a:	b002      	add	sp, #8
 800950c:	bd10      	pop	{r4, pc}

0800950e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800950e:	b950      	cbnz	r0, 8009526 <xQueueGenericCreateStatic+0x18>
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	b672      	cpsid	i
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	b662      	cpsie	i
 8009524:	e7fe      	b.n	8009524 <xQueueGenericCreateStatic+0x16>
 8009526:	f7ff bfaa 	b.w	800947e <xQueueGenericCreateStatic.part.0.isra.0>

0800952a <xQueueGenericCreate>:
	{
 800952a:	b570      	push	{r4, r5, r6, lr}
 800952c:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800952e:	4606      	mov	r6, r0
 8009530:	b950      	cbnz	r0, 8009548 <xQueueGenericCreate+0x1e>
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	b672      	cpsid	i
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	b662      	cpsie	i
 8009546:	e7fe      	b.n	8009546 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009548:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800954a:	3048      	adds	r0, #72	; 0x48
 800954c:	f001 f8c8 	bl	800a6e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009550:	4604      	mov	r4, r0
 8009552:	b160      	cbz	r0, 800956e <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009554:	2300      	movs	r3, #0
 8009556:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800955a:	b155      	cbz	r5, 8009572 <xQueueGenericCreate+0x48>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800955c:	f100 0348 	add.w	r3, r0, #72	; 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009560:	2101      	movs	r1, #1
 8009562:	4620      	mov	r0, r4
 8009564:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8009566:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800956a:	f7ff ff47 	bl	80093fc <xQueueGenericReset>
	}
 800956e:	4620      	mov	r0, r4
 8009570:	bd70      	pop	{r4, r5, r6, pc}
 8009572:	4603      	mov	r3, r0
 8009574:	e7f4      	b.n	8009560 <xQueueGenericCreate+0x36>

08009576 <xQueueGenericSend>:
{
 8009576:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800957a:	b085      	sub	sp, #20
 800957c:	4688      	mov	r8, r1
 800957e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8009580:	4604      	mov	r4, r0
{
 8009582:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009584:	b950      	cbnz	r0, 800959c <xQueueGenericSend+0x26>
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	b672      	cpsid	i
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	b662      	cpsie	i
 800959a:	e7fe      	b.n	800959a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800959c:	b961      	cbnz	r1, 80095b8 <xQueueGenericSend+0x42>
 800959e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80095a0:	b153      	cbz	r3, 80095b8 <xQueueGenericSend+0x42>
 80095a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a6:	b672      	cpsid	i
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	b662      	cpsie	i
 80095b6:	e7fe      	b.n	80095b6 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095b8:	2f02      	cmp	r7, #2
 80095ba:	d10d      	bne.n	80095d8 <xQueueGenericSend+0x62>
 80095bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d00a      	beq.n	80095d8 <xQueueGenericSend+0x62>
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	b672      	cpsid	i
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	b662      	cpsie	i
 80095d6:	e7fe      	b.n	80095d6 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095d8:	f000 fe5c 	bl	800a294 <xTaskGetSchedulerState>
 80095dc:	4606      	mov	r6, r0
 80095de:	b960      	cbnz	r0, 80095fa <xQueueGenericSend+0x84>
 80095e0:	9b01      	ldr	r3, [sp, #4]
 80095e2:	b15b      	cbz	r3, 80095fc <xQueueGenericSend+0x86>
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	b672      	cpsid	i
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	b662      	cpsie	i
 80095f8:	e7fe      	b.n	80095f8 <xQueueGenericSend+0x82>
 80095fa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80095fc:	f04f 0900 	mov.w	r9, #0
 8009600:	e037      	b.n	8009672 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009602:	9d01      	ldr	r5, [sp, #4]
 8009604:	b91d      	cbnz	r5, 800960e <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8009606:	f000 ff39 	bl	800a47c <vPortExitCritical>
			return errQUEUE_FULL;
 800960a:	2000      	movs	r0, #0
 800960c:	e052      	b.n	80096b4 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800960e:	b916      	cbnz	r6, 8009616 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009610:	a802      	add	r0, sp, #8
 8009612:	f000 fded 	bl	800a1f0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8009616:	f000 ff31 	bl	800a47c <vPortExitCritical>
		vTaskSuspendAll();
 800961a:	f000 fbe3 	bl	8009de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800961e:	f000 ff09 	bl	800a434 <vPortEnterCritical>
 8009622:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009626:	2bff      	cmp	r3, #255	; 0xff
 8009628:	d101      	bne.n	800962e <xQueueGenericSend+0xb8>
 800962a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800962e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009632:	2bff      	cmp	r3, #255	; 0xff
 8009634:	d101      	bne.n	800963a <xQueueGenericSend+0xc4>
 8009636:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800963a:	f000 ff1f 	bl	800a47c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800963e:	a901      	add	r1, sp, #4
 8009640:	a802      	add	r0, sp, #8
 8009642:	f000 fde1 	bl	800a208 <xTaskCheckForTimeOut>
 8009646:	2800      	cmp	r0, #0
 8009648:	d14a      	bne.n	80096e0 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800964a:	f000 fef3 	bl	800a434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800964e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009650:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009652:	429a      	cmp	r2, r3
 8009654:	d131      	bne.n	80096ba <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009656:	f000 ff11 	bl	800a47c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800965a:	9901      	ldr	r1, [sp, #4]
 800965c:	f104 0010 	add.w	r0, r4, #16
 8009660:	f000 fd62 	bl	800a128 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009664:	4620      	mov	r0, r4
 8009666:	f7ff fe91 	bl	800938c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800966a:	f000 fc69 	bl	8009f40 <xTaskResumeAll>
 800966e:	b360      	cbz	r0, 80096ca <xQueueGenericSend+0x154>
 8009670:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8009672:	f000 fedf 	bl	800a434 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009676:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009678:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800967a:	429a      	cmp	r2, r3
 800967c:	d301      	bcc.n	8009682 <xQueueGenericSend+0x10c>
 800967e:	2f02      	cmp	r7, #2
 8009680:	d1bf      	bne.n	8009602 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009682:	463a      	mov	r2, r7
 8009684:	4641      	mov	r1, r8
 8009686:	4620      	mov	r0, r4
 8009688:	f7ff fe36 	bl	80092f8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800968c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800968e:	b11b      	cbz	r3, 8009698 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009690:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009694:	f000 fd64 	bl	800a160 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8009698:	b148      	cbz	r0, 80096ae <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800969a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800969e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80096ae:	f000 fee5 	bl	800a47c <vPortExitCritical>
				return pdPASS;
 80096b2:	2001      	movs	r0, #1
}
 80096b4:	b005      	add	sp, #20
 80096b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 80096ba:	f000 fedf 	bl	800a47c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80096be:	4620      	mov	r0, r4
 80096c0:	f7ff fe64 	bl	800938c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096c4:	f000 fc3c 	bl	8009f40 <xTaskResumeAll>
 80096c8:	e7d2      	b.n	8009670 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 80096ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80096ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	e7c7      	b.n	8009670 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 80096e0:	4620      	mov	r0, r4
 80096e2:	f7ff fe53 	bl	800938c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096e6:	f000 fc2b 	bl	8009f40 <xTaskResumeAll>
 80096ea:	e78e      	b.n	800960a <xQueueGenericSend+0x94>

080096ec <xQueueGenericSendFromISR>:
{
 80096ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f0:	4689      	mov	r9, r1
 80096f2:	4690      	mov	r8, r2
 80096f4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80096f6:	4604      	mov	r4, r0
 80096f8:	b950      	cbnz	r0, 8009710 <xQueueGenericSendFromISR+0x24>
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	b672      	cpsid	i
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	b662      	cpsie	i
 800970e:	e7fe      	b.n	800970e <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009710:	b961      	cbnz	r1, 800972c <xQueueGenericSendFromISR+0x40>
 8009712:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009714:	b153      	cbz	r3, 800972c <xQueueGenericSendFromISR+0x40>
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	b672      	cpsid	i
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	b662      	cpsie	i
 800972a:	e7fe      	b.n	800972a <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800972c:	2f02      	cmp	r7, #2
 800972e:	d10d      	bne.n	800974c <xQueueGenericSendFromISR+0x60>
 8009730:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009732:	2b01      	cmp	r3, #1
 8009734:	d00a      	beq.n	800974c <xQueueGenericSendFromISR+0x60>
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	b672      	cpsid	i
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	b662      	cpsie	i
 800974a:	e7fe      	b.n	800974a <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800974c:	f000 ff72 	bl	800a634 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009750:	f3ef 8611 	mrs	r6, BASEPRI
 8009754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009758:	b672      	cpsid	i
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009768:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800976a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800976c:	429a      	cmp	r2, r3
 800976e:	d301      	bcc.n	8009774 <xQueueGenericSendFromISR+0x88>
 8009770:	2f02      	cmp	r7, #2
 8009772:	d122      	bne.n	80097ba <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009774:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009778:	463a      	mov	r2, r7
 800977a:	4649      	mov	r1, r9
 800977c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800977e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009780:	f7ff fdba 	bl	80092f8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009784:	1c6b      	adds	r3, r5, #1
 8009786:	d113      	bne.n	80097b0 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800978a:	b90b      	cbnz	r3, 8009790 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800978c:	2001      	movs	r0, #1
 800978e:	e00b      	b.n	80097a8 <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009790:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009794:	f000 fce4 	bl	800a160 <xTaskRemoveFromEventList>
 8009798:	2800      	cmp	r0, #0
 800979a:	d0f7      	beq.n	800978c <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800979c:	f1b8 0f00 	cmp.w	r8, #0
 80097a0:	d0f4      	beq.n	800978c <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097a2:	2001      	movs	r0, #1
 80097a4:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097a8:	f386 8811 	msr	BASEPRI, r6
}
 80097ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097b0:	3501      	adds	r5, #1
 80097b2:	b26d      	sxtb	r5, r5
 80097b4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80097b8:	e7e8      	b.n	800978c <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 80097ba:	2000      	movs	r0, #0
 80097bc:	e7f4      	b.n	80097a8 <xQueueGenericSendFromISR+0xbc>

080097be <xQueueReceive>:
{
 80097be:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80097c2:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 80097c4:	4604      	mov	r4, r0
{
 80097c6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80097c8:	b950      	cbnz	r0, 80097e0 <xQueueReceive+0x22>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	b672      	cpsid	i
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	b662      	cpsie	i
 80097de:	e7fe      	b.n	80097de <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097e0:	b961      	cbnz	r1, 80097fc <xQueueReceive+0x3e>
 80097e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80097e4:	b153      	cbz	r3, 80097fc <xQueueReceive+0x3e>
 80097e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ea:	b672      	cpsid	i
 80097ec:	f383 8811 	msr	BASEPRI, r3
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	f3bf 8f4f 	dsb	sy
 80097f8:	b662      	cpsie	i
 80097fa:	e7fe      	b.n	80097fa <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097fc:	f000 fd4a 	bl	800a294 <xTaskGetSchedulerState>
 8009800:	4606      	mov	r6, r0
 8009802:	b960      	cbnz	r0, 800981e <xQueueReceive+0x60>
 8009804:	9b01      	ldr	r3, [sp, #4]
 8009806:	b15b      	cbz	r3, 8009820 <xQueueReceive+0x62>
 8009808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980c:	b672      	cpsid	i
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	b662      	cpsie	i
 800981c:	e7fe      	b.n	800981c <xQueueReceive+0x5e>
 800981e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8009820:	f04f 0800 	mov.w	r8, #0
 8009824:	e03d      	b.n	80098a2 <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009826:	9d01      	ldr	r5, [sp, #4]
 8009828:	b91d      	cbnz	r5, 8009832 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 800982a:	f000 fe27 	bl	800a47c <vPortExitCritical>
				return errQUEUE_EMPTY;
 800982e:	2000      	movs	r0, #0
 8009830:	e056      	b.n	80098e0 <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 8009832:	b916      	cbnz	r6, 800983a <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009834:	a802      	add	r0, sp, #8
 8009836:	f000 fcdb 	bl	800a1f0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800983a:	f000 fe1f 	bl	800a47c <vPortExitCritical>
		vTaskSuspendAll();
 800983e:	f000 fad1 	bl	8009de4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009842:	f000 fdf7 	bl	800a434 <vPortEnterCritical>
 8009846:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800984a:	2bff      	cmp	r3, #255	; 0xff
 800984c:	d101      	bne.n	8009852 <xQueueReceive+0x94>
 800984e:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8009852:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009856:	2bff      	cmp	r3, #255	; 0xff
 8009858:	d101      	bne.n	800985e <xQueueReceive+0xa0>
 800985a:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800985e:	f000 fe0d 	bl	800a47c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009862:	a901      	add	r1, sp, #4
 8009864:	a802      	add	r0, sp, #8
 8009866:	f000 fccf 	bl	800a208 <xTaskCheckForTimeOut>
 800986a:	2800      	cmp	r0, #0
 800986c:	d141      	bne.n	80098f2 <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800986e:	4620      	mov	r0, r4
 8009870:	f7ff fd37 	bl	80092e2 <prvIsQueueEmpty>
 8009874:	b3b8      	cbz	r0, 80098e6 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009876:	9901      	ldr	r1, [sp, #4]
 8009878:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800987c:	f000 fc54 	bl	800a128 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009880:	4620      	mov	r0, r4
 8009882:	f7ff fd83 	bl	800938c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009886:	f000 fb5b 	bl	8009f40 <xTaskResumeAll>
 800988a:	b948      	cbnz	r0, 80098a0 <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 800988c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009894:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80098a2:	f000 fdc7 	bl	800a434 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098a6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098a8:	2d00      	cmp	r5, #0
 80098aa:	d0bc      	beq.n	8009826 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098ac:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098ae:	4639      	mov	r1, r7
 80098b0:	4620      	mov	r0, r4
 80098b2:	f7ff fd56 	bl	8009362 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098b6:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098b8:	6923      	ldr	r3, [r4, #16]
 80098ba:	b173      	cbz	r3, 80098da <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098bc:	f104 0010 	add.w	r0, r4, #16
 80098c0:	f000 fc4e 	bl	800a160 <xTaskRemoveFromEventList>
 80098c4:	b148      	cbz	r0, 80098da <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 80098c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80098ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80098da:	f000 fdcf 	bl	800a47c <vPortExitCritical>
				return pdPASS;
 80098de:	2001      	movs	r0, #1
}
 80098e0:	b004      	add	sp, #16
 80098e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 80098e6:	4620      	mov	r0, r4
 80098e8:	f7ff fd50 	bl	800938c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098ec:	f000 fb28 	bl	8009f40 <xTaskResumeAll>
 80098f0:	e7d6      	b.n	80098a0 <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7ff fd4a 	bl	800938c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098f8:	f000 fb22 	bl	8009f40 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098fc:	4620      	mov	r0, r4
 80098fe:	f7ff fcf0 	bl	80092e2 <prvIsQueueEmpty>
 8009902:	2800      	cmp	r0, #0
 8009904:	d0cc      	beq.n	80098a0 <xQueueReceive+0xe2>
 8009906:	e792      	b.n	800982e <xQueueReceive+0x70>

08009908 <xQueueReceiveFromISR>:
{
 8009908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800990c:	4689      	mov	r9, r1
 800990e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8009910:	4605      	mov	r5, r0
 8009912:	b950      	cbnz	r0, 800992a <xQueueReceiveFromISR+0x22>
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	b672      	cpsid	i
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	b662      	cpsie	i
 8009928:	e7fe      	b.n	8009928 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800992a:	b961      	cbnz	r1, 8009946 <xQueueReceiveFromISR+0x3e>
 800992c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800992e:	b153      	cbz	r3, 8009946 <xQueueReceiveFromISR+0x3e>
 8009930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009934:	b672      	cpsid	i
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	b662      	cpsie	i
 8009944:	e7fe      	b.n	8009944 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009946:	f000 fe75 	bl	800a634 <vPortValidateInterruptPriority>
	__asm volatile
 800994a:	f3ef 8711 	mrs	r7, BASEPRI
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	b672      	cpsid	i
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009962:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009964:	b31c      	cbz	r4, 80099ae <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8009966:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800996a:	4649      	mov	r1, r9
 800996c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800996e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8009970:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009972:	f7ff fcf6 	bl	8009362 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009976:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8009978:	1c73      	adds	r3, r6, #1
 800997a:	d113      	bne.n	80099a4 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800997c:	692b      	ldr	r3, [r5, #16]
 800997e:	b90b      	cbnz	r3, 8009984 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8009980:	2001      	movs	r0, #1
 8009982:	e00b      	b.n	800999c <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009984:	f105 0010 	add.w	r0, r5, #16
 8009988:	f000 fbea 	bl	800a160 <xTaskRemoveFromEventList>
 800998c:	2800      	cmp	r0, #0
 800998e:	d0f7      	beq.n	8009980 <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8009990:	f1b8 0f00 	cmp.w	r8, #0
 8009994:	d0f4      	beq.n	8009980 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009996:	2001      	movs	r0, #1
 8009998:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800999c:	f387 8811 	msr	BASEPRI, r7
}
 80099a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80099a4:	3601      	adds	r6, #1
 80099a6:	b276      	sxtb	r6, r6
 80099a8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80099ac:	e7e8      	b.n	8009980 <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 80099ae:	4620      	mov	r0, r4
 80099b0:	e7f4      	b.n	800999c <xQueueReceiveFromISR+0x94>
	...

080099b4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099ba:	f000 fd3b 	bl	800a434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099be:	4b2f      	ldr	r3, [pc, #188]	; (8009a7c <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 80099c0:	4e2f      	ldr	r6, [pc, #188]	; (8009a80 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	4f2f      	ldr	r7, [pc, #188]	; (8009a84 <prvAddNewTaskToReadyList+0xd0>)
 80099c6:	3201      	adds	r2, #1
 80099c8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80099ca:	6835      	ldr	r5, [r6, #0]
 80099cc:	2d00      	cmp	r5, #0
 80099ce:	d14a      	bne.n	8009a66 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099d0:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d11f      	bne.n	8009a18 <prvAddNewTaskToReadyList+0x64>
 80099d8:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099da:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099dc:	4640      	mov	r0, r8
 80099de:	f7ff fc3f 	bl	8009260 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099e2:	f108 0814 	add.w	r8, r8, #20
 80099e6:	2d07      	cmp	r5, #7
 80099e8:	d1f7      	bne.n	80099da <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099ea:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8009aac <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80099ee:	4d26      	ldr	r5, [pc, #152]	; (8009a88 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80099f0:	4640      	mov	r0, r8
 80099f2:	f7ff fc35 	bl	8009260 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099f6:	4628      	mov	r0, r5
 80099f8:	f7ff fc32 	bl	8009260 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099fc:	4823      	ldr	r0, [pc, #140]	; (8009a8c <prvAddNewTaskToReadyList+0xd8>)
 80099fe:	f7ff fc2f 	bl	8009260 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a02:	4823      	ldr	r0, [pc, #140]	; (8009a90 <prvAddNewTaskToReadyList+0xdc>)
 8009a04:	f7ff fc2c 	bl	8009260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a08:	4822      	ldr	r0, [pc, #136]	; (8009a94 <prvAddNewTaskToReadyList+0xe0>)
 8009a0a:	f7ff fc29 	bl	8009260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a0e:	4b22      	ldr	r3, [pc, #136]	; (8009a98 <prvAddNewTaskToReadyList+0xe4>)
 8009a10:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a14:	4b21      	ldr	r3, [pc, #132]	; (8009a9c <prvAddNewTaskToReadyList+0xe8>)
 8009a16:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8009a18:	4a21      	ldr	r2, [pc, #132]	; (8009aa0 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8009a1a:	4922      	ldr	r1, [pc, #136]	; (8009aa4 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8009a1c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009a1e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8009a20:	3301      	adds	r3, #1
 8009a22:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009a24:	2301      	movs	r3, #1
 8009a26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009a28:	4093      	lsls	r3, r2
 8009a2a:	4303      	orrs	r3, r0
 8009a2c:	2014      	movs	r0, #20
 8009a2e:	600b      	str	r3, [r1, #0]
 8009a30:	1d21      	adds	r1, r4, #4
 8009a32:	fb00 7002 	mla	r0, r0, r2, r7
 8009a36:	f7ff fc21 	bl	800927c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009a3a:	f000 fd1f 	bl	800a47c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009a3e:	4b1a      	ldr	r3, [pc, #104]	; (8009aa8 <prvAddNewTaskToReadyList+0xf4>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	b173      	cbz	r3, 8009a62 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a44:	6833      	ldr	r3, [r6, #0]
 8009a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d209      	bcs.n	8009a62 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8009a4e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a56:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	f3bf 8f6f 	isb	sy
}
 8009a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8009a66:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <prvAddNewTaskToReadyList+0xf4>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1d4      	bne.n	8009a18 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a6e:	6833      	ldr	r3, [r6, #0]
 8009a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d8cf      	bhi.n	8009a18 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8009a78:	6034      	str	r4, [r6, #0]
 8009a7a:	e7cd      	b.n	8009a18 <prvAddNewTaskToReadyList+0x64>
 8009a7c:	200017b8 	.word	0x200017b8
 8009a80:	20001720 	.word	0x20001720
 8009a84:	2000172c 	.word	0x2000172c
 8009a88:	200017e4 	.word	0x200017e4
 8009a8c:	20001800 	.word	0x20001800
 8009a90:	2000182c 	.word	0x2000182c
 8009a94:	20001818 	.word	0x20001818
 8009a98:	20001724 	.word	0x20001724
 8009a9c:	20001728 	.word	0x20001728
 8009aa0:	200017c8 	.word	0x200017c8
 8009aa4:	200017cc 	.word	0x200017cc
 8009aa8:	20001814 	.word	0x20001814
 8009aac:	200017d0 	.word	0x200017d0

08009ab0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ab2:	4b1a      	ldr	r3, [pc, #104]	; (8009b1c <prvAddCurrentTaskToDelayedList+0x6c>)
{
 8009ab4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ab6:	4e1a      	ldr	r6, [pc, #104]	; (8009b20 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8009ab8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8009aba:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009abc:	6830      	ldr	r0, [r6, #0]
 8009abe:	3004      	adds	r0, #4
 8009ac0:	f7ff fbff 	bl	80092c2 <uxListRemove>
 8009ac4:	b940      	cbnz	r0, 8009ad8 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009ac6:	6832      	ldr	r2, [r6, #0]
 8009ac8:	4916      	ldr	r1, [pc, #88]	; (8009b24 <prvAddCurrentTaskToDelayedList+0x74>)
 8009aca:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8009acc:	2201      	movs	r2, #1
 8009ace:	680b      	ldr	r3, [r1, #0]
 8009ad0:	4082      	lsls	r2, r0
 8009ad2:	ea23 0302 	bic.w	r3, r3, r2
 8009ad6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ad8:	1c63      	adds	r3, r4, #1
 8009ada:	d107      	bne.n	8009aec <prvAddCurrentTaskToDelayedList+0x3c>
 8009adc:	b137      	cbz	r7, 8009aec <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ade:	6831      	ldr	r1, [r6, #0]
 8009ae0:	4811      	ldr	r0, [pc, #68]	; (8009b28 <prvAddCurrentTaskToDelayedList+0x78>)
 8009ae2:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ae8:	f7ff bbc8 	b.w	800927c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009aec:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009aee:	6833      	ldr	r3, [r6, #0]
 8009af0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009af2:	d307      	bcc.n	8009b04 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009af4:	4b0d      	ldr	r3, [pc, #52]	; (8009b2c <prvAddCurrentTaskToDelayedList+0x7c>)
 8009af6:	6818      	ldr	r0, [r3, #0]
 8009af8:	6831      	ldr	r1, [r6, #0]
}
 8009afa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009afe:	3104      	adds	r1, #4
 8009b00:	f7ff bbc8 	b.w	8009294 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b04:	4b0a      	ldr	r3, [pc, #40]	; (8009b30 <prvAddCurrentTaskToDelayedList+0x80>)
 8009b06:	6818      	ldr	r0, [r3, #0]
 8009b08:	6831      	ldr	r1, [r6, #0]
 8009b0a:	3104      	adds	r1, #4
 8009b0c:	f7ff fbc2 	bl	8009294 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b10:	4b08      	ldr	r3, [pc, #32]	; (8009b34 <prvAddCurrentTaskToDelayedList+0x84>)
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	42a2      	cmp	r2, r4
 8009b16:	d900      	bls.n	8009b1a <prvAddCurrentTaskToDelayedList+0x6a>
					xNextTaskUnblockTime = xTimeToWake;
 8009b18:	601c      	str	r4, [r3, #0]
}
 8009b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b1c:	20001840 	.word	0x20001840
 8009b20:	20001720 	.word	0x20001720
 8009b24:	200017cc 	.word	0x200017cc
 8009b28:	20001818 	.word	0x20001818
 8009b2c:	20001728 	.word	0x20001728
 8009b30:	20001724 	.word	0x20001724
 8009b34:	200017f8 	.word	0x200017f8

08009b38 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b38:	4a06      	ldr	r2, [pc, #24]	; (8009b54 <prvResetNextTaskUnblockTime+0x1c>)
 8009b3a:	6813      	ldr	r3, [r2, #0]
 8009b3c:	6819      	ldr	r1, [r3, #0]
 8009b3e:	4b06      	ldr	r3, [pc, #24]	; (8009b58 <prvResetNextTaskUnblockTime+0x20>)
 8009b40:	b919      	cbnz	r1, 8009b4a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b42:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b46:	601a      	str	r2, [r3, #0]
}
 8009b48:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b4a:	6812      	ldr	r2, [r2, #0]
 8009b4c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b4e:	68d2      	ldr	r2, [r2, #12]
 8009b50:	6852      	ldr	r2, [r2, #4]
 8009b52:	e7f8      	b.n	8009b46 <prvResetNextTaskUnblockTime+0xe>
 8009b54:	20001724 	.word	0x20001724
 8009b58:	200017f8 	.word	0x200017f8

08009b5c <prvDeleteTCB>:
	{
 8009b5c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b5e:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
	{
 8009b62:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b64:	b93b      	cbnz	r3, 8009b76 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8009b66:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8009b68:	f000 fe50 	bl	800a80c <vPortFree>
				vPortFree( pxTCB );
 8009b6c:	4620      	mov	r0, r4
	}
 8009b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8009b72:	f000 be4b 	b.w	800a80c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d0f9      	beq.n	8009b6e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d00a      	beq.n	8009b94 <prvDeleteTCB+0x38>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	b672      	cpsid	i
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	b662      	cpsie	i
 8009b92:	e7fe      	b.n	8009b92 <prvDeleteTCB+0x36>
	}
 8009b94:	bd10      	pop	{r4, pc}
	...

08009b98 <prvIdleTask>:
{
 8009b98:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b9a:	4c14      	ldr	r4, [pc, #80]	; (8009bec <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b9c:	4f14      	ldr	r7, [pc, #80]	; (8009bf0 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8009b9e:	4d15      	ldr	r5, [pc, #84]	; (8009bf4 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	b983      	cbnz	r3, 8009bc6 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ba4:	4b14      	ldr	r3, [pc, #80]	; (8009bf8 <prvIdleTask+0x60>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d909      	bls.n	8009bc0 <prvIdleTask+0x28>
				taskYIELD();
 8009bac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8009bc0:	f7f7 f994 	bl	8000eec <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009bc4:	e7eb      	b.n	8009b9e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8009bc6:	f000 fc35 	bl	800a434 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bce:	1d30      	adds	r0, r6, #4
 8009bd0:	f7ff fb77 	bl	80092c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8009be0:	f000 fc4c 	bl	800a47c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009be4:	4630      	mov	r0, r6
 8009be6:	f7ff ffb9 	bl	8009b5c <prvDeleteTCB>
 8009bea:	e7d9      	b.n	8009ba0 <prvIdleTask+0x8>
 8009bec:	200017bc 	.word	0x200017bc
 8009bf0:	2000182c 	.word	0x2000182c
 8009bf4:	200017b8 	.word	0x200017b8
 8009bf8:	2000172c 	.word	0x2000172c

08009bfc <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c00:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009c04:	4606      	mov	r6, r0
 8009c06:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c08:	21a5      	movs	r1, #165	; 0xa5
 8009c0a:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009c0c:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c0e:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009c12:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c16:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009c18:	f005 f828 	bl	800ec6c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009c1e:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c20:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8009c24:	b3b5      	cbz	r5, 8009c94 <prvInitialiseNewTask.constprop.0+0x98>
 8009c26:	1e6b      	subs	r3, r5, #1
 8009c28:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8009c2c:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c2e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8009c32:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8009c36:	b108      	cbz	r0, 8009c3c <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c38:	42ab      	cmp	r3, r5
 8009c3a:	d1f8      	bne.n	8009c2e <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c42:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8009c44:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c48:	1d20      	adds	r0, r4, #4
 8009c4a:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8009c4c:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 8009c50:	bf28      	it	cs
 8009c52:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8009c54:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009c56:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c58:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c5c:	f7ff fb0b 	bl	8009276 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c60:	f104 0018 	add.w	r0, r4, #24
 8009c64:	f7ff fb07 	bl	8009276 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8009c68:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c6c:	463a      	mov	r2, r7
 8009c6e:	4631      	mov	r1, r6
 8009c70:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c72:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c74:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c76:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8009c78:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c7c:	f884 a054 	strb.w	sl, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c80:	f000 fbb0 	bl	800a3e4 <pxPortInitialiseStack>
 8009c84:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009c86:	f1b8 0f00 	cmp.w	r8, #0
 8009c8a:	d001      	beq.n	8009c90 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c8c:	f8c8 4000 	str.w	r4, [r8]
}
 8009c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c94:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8009c98:	e7d3      	b.n	8009c42 <prvInitialiseNewTask.constprop.0+0x46>

08009c9a <xTaskCreateStatic>:
	{
 8009c9a:	b570      	push	{r4, r5, r6, lr}
 8009c9c:	b086      	sub	sp, #24
 8009c9e:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8009ca2:	b955      	cbnz	r5, 8009cba <xTaskCreateStatic+0x20>
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	b672      	cpsid	i
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	b662      	cpsie	i
 8009cb8:	e7fe      	b.n	8009cb8 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8009cba:	b954      	cbnz	r4, 8009cd2 <xTaskCreateStatic+0x38>
 8009cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc0:	b672      	cpsid	i
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	b662      	cpsie	i
 8009cd0:	e7fe      	b.n	8009cd0 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cd2:	2658      	movs	r6, #88	; 0x58
 8009cd4:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cd6:	9e05      	ldr	r6, [sp, #20]
 8009cd8:	2e58      	cmp	r6, #88	; 0x58
 8009cda:	d00a      	beq.n	8009cf2 <xTaskCreateStatic+0x58>
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	b672      	cpsid	i
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	b662      	cpsie	i
 8009cf0:	e7fe      	b.n	8009cf0 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cf2:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cf4:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cf6:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cf8:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cfc:	ad04      	add	r5, sp, #16
 8009cfe:	9402      	str	r4, [sp, #8]
 8009d00:	9501      	str	r5, [sp, #4]
 8009d02:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009d04:	9500      	str	r5, [sp, #0]
 8009d06:	f7ff ff79 	bl	8009bfc <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f7ff fe52 	bl	80099b4 <prvAddNewTaskToReadyList>
	}
 8009d10:	9804      	ldr	r0, [sp, #16]
 8009d12:	b006      	add	sp, #24
 8009d14:	bd70      	pop	{r4, r5, r6, pc}

08009d16 <xTaskCreate>:
	{
 8009d16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d1a:	4607      	mov	r7, r0
 8009d1c:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d1e:	0090      	lsls	r0, r2, #2
	{
 8009d20:	4688      	mov	r8, r1
 8009d22:	4616      	mov	r6, r2
 8009d24:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d26:	f000 fcdb 	bl	800a6e0 <pvPortMalloc>
			if( pxStack != NULL )
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	b1e8      	cbz	r0, 8009d6a <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d2e:	2058      	movs	r0, #88	; 0x58
 8009d30:	f000 fcd6 	bl	800a6e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009d34:	4604      	mov	r4, r0
 8009d36:	b1a8      	cbz	r0, 8009d64 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d38:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8009d3a:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d3c:	4632      	mov	r2, r6
 8009d3e:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d40:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d46:	9002      	str	r0, [sp, #8]
 8009d48:	4638      	mov	r0, r7
 8009d4a:	9301      	str	r3, [sp, #4]
 8009d4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	464b      	mov	r3, r9
 8009d52:	f7ff ff53 	bl	8009bfc <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d56:	4620      	mov	r0, r4
 8009d58:	f7ff fe2c 	bl	80099b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d5c:	2001      	movs	r0, #1
	}
 8009d5e:	b005      	add	sp, #20
 8009d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8009d64:	4628      	mov	r0, r5
 8009d66:	f000 fd51 	bl	800a80c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d6a:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8009d6e:	e7f6      	b.n	8009d5e <xTaskCreate+0x48>

08009d70 <vTaskStartScheduler>:
{
 8009d70:	b510      	push	{r4, lr}
 8009d72:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d74:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d76:	aa07      	add	r2, sp, #28
 8009d78:	a906      	add	r1, sp, #24
 8009d7a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d7c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d80:	f7f7 f8b8 	bl	8000ef4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d84:	9b05      	ldr	r3, [sp, #20]
 8009d86:	9a07      	ldr	r2, [sp, #28]
 8009d88:	9302      	str	r3, [sp, #8]
 8009d8a:	9b06      	ldr	r3, [sp, #24]
 8009d8c:	4910      	ldr	r1, [pc, #64]	; (8009dd0 <vTaskStartScheduler+0x60>)
 8009d8e:	4811      	ldr	r0, [pc, #68]	; (8009dd4 <vTaskStartScheduler+0x64>)
 8009d90:	e9cd 4300 	strd	r4, r3, [sp]
 8009d94:	4623      	mov	r3, r4
 8009d96:	f7ff ff80 	bl	8009c9a <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8009d9a:	b1b8      	cbz	r0, 8009dcc <vTaskStartScheduler+0x5c>
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	b672      	cpsid	i
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8009db0:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <vTaskStartScheduler+0x68>)
 8009db2:	f04f 32ff 	mov.w	r2, #4294967295
 8009db6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009db8:	2201      	movs	r2, #1
 8009dba:	4b08      	ldr	r3, [pc, #32]	; (8009ddc <vTaskStartScheduler+0x6c>)
 8009dbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009dbe:	4b08      	ldr	r3, [pc, #32]	; (8009de0 <vTaskStartScheduler+0x70>)
 8009dc0:	601c      	str	r4, [r3, #0]
}
 8009dc2:	b008      	add	sp, #32
 8009dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8009dc8:	f000 bbce 	b.w	800a568 <xPortStartScheduler>
}
 8009dcc:	b008      	add	sp, #32
 8009dce:	bd10      	pop	{r4, pc}
 8009dd0:	08011be0 	.word	0x08011be0
 8009dd4:	08009b99 	.word	0x08009b99
 8009dd8:	200017f8 	.word	0x200017f8
 8009ddc:	20001814 	.word	0x20001814
 8009de0:	20001840 	.word	0x20001840

08009de4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009de4:	4a02      	ldr	r2, [pc, #8]	; (8009df0 <vTaskSuspendAll+0xc>)
 8009de6:	6813      	ldr	r3, [r2, #0]
 8009de8:	3301      	adds	r3, #1
 8009dea:	6013      	str	r3, [r2, #0]
}
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	200017c4 	.word	0x200017c4

08009df4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009df4:	4b01      	ldr	r3, [pc, #4]	; (8009dfc <xTaskGetTickCount+0x8>)
 8009df6:	6818      	ldr	r0, [r3, #0]
}
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	20001840 	.word	0x20001840

08009e00 <xTaskGetTickCountFromISR>:
{
 8009e00:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e02:	f000 fc17 	bl	800a634 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8009e06:	4b01      	ldr	r3, [pc, #4]	; (8009e0c <xTaskGetTickCountFromISR+0xc>)
 8009e08:	6818      	ldr	r0, [r3, #0]
}
 8009e0a:	bd08      	pop	{r3, pc}
 8009e0c:	20001840 	.word	0x20001840

08009e10 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e10:	4b40      	ldr	r3, [pc, #256]	; (8009f14 <xTaskIncrementTick+0x104>)
 8009e12:	681b      	ldr	r3, [r3, #0]
{
 8009e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d175      	bne.n	8009f08 <xTaskIncrementTick+0xf8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e1c:	4b3e      	ldr	r3, [pc, #248]	; (8009f18 <xTaskIncrementTick+0x108>)
 8009e1e:	681d      	ldr	r5, [r3, #0]
 8009e20:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009e22:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e24:	b9cd      	cbnz	r5, 8009e5a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8009e26:	4b3d      	ldr	r3, [pc, #244]	; (8009f1c <xTaskIncrementTick+0x10c>)
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	6812      	ldr	r2, [r2, #0]
 8009e2c:	b152      	cbz	r2, 8009e44 <xTaskIncrementTick+0x34>
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	b672      	cpsid	i
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	b662      	cpsie	i
 8009e42:	e7fe      	b.n	8009e42 <xTaskIncrementTick+0x32>
 8009e44:	4a36      	ldr	r2, [pc, #216]	; (8009f20 <xTaskIncrementTick+0x110>)
 8009e46:	6819      	ldr	r1, [r3, #0]
 8009e48:	6810      	ldr	r0, [r2, #0]
 8009e4a:	6018      	str	r0, [r3, #0]
 8009e4c:	6011      	str	r1, [r2, #0]
 8009e4e:	4a35      	ldr	r2, [pc, #212]	; (8009f24 <xTaskIncrementTick+0x114>)
 8009e50:	6813      	ldr	r3, [r2, #0]
 8009e52:	3301      	adds	r3, #1
 8009e54:	6013      	str	r3, [r2, #0]
 8009e56:	f7ff fe6f 	bl	8009b38 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e5a:	4e33      	ldr	r6, [pc, #204]	; (8009f28 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8009e5c:	2400      	movs	r4, #0
 8009e5e:	4f33      	ldr	r7, [pc, #204]	; (8009f2c <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e60:	6833      	ldr	r3, [r6, #0]
 8009e62:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8009f38 <xTaskIncrementTick+0x128>
 8009e66:	42ab      	cmp	r3, r5
 8009e68:	d911      	bls.n	8009e8e <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8009e6e:	2214      	movs	r2, #20
 8009e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e72:	4353      	muls	r3, r2
 8009e74:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	bf28      	it	cs
 8009e7a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8009e7c:	4b2c      	ldr	r3, [pc, #176]	; (8009f30 <xTaskIncrementTick+0x120>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8009e80:	2b00      	cmp	r3, #0
}
 8009e82:	bf0c      	ite	eq
 8009e84:	4620      	moveq	r0, r4
 8009e86:	2001      	movne	r0, #1
 8009e88:	b003      	add	sp, #12
 8009e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e8e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8009f1c <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8009e92:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8009f3c <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e96:	f8da 3000 	ldr.w	r3, [sl]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	b91b      	cbnz	r3, 8009ea6 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea2:	6033      	str	r3, [r6, #0]
					break;
 8009ea4:	e7e1      	b.n	8009e6a <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea6:	f8da 3000 	ldr.w	r3, [sl]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009eb0:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8009eb4:	4295      	cmp	r5, r2
 8009eb6:	d201      	bcs.n	8009ebc <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8009eb8:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009eba:	e7d6      	b.n	8009e6a <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ebc:	f10b 0104 	add.w	r1, fp, #4
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	9101      	str	r1, [sp, #4]
 8009ec4:	f7ff f9fd 	bl	80092c2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ec8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8009ecc:	9901      	ldr	r1, [sp, #4]
 8009ece:	b122      	cbz	r2, 8009eda <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ed0:	f10b 0018 	add.w	r0, fp, #24
 8009ed4:	f7ff f9f5 	bl	80092c2 <uxListRemove>
 8009ed8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8009eda:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f8d9 3000 	ldr.w	r3, [r9]
 8009ee4:	4082      	lsls	r2, r0
 8009ee6:	431a      	orrs	r2, r3
 8009ee8:	f8c9 2000 	str.w	r2, [r9]
 8009eec:	2214      	movs	r2, #20
 8009eee:	fb02 7000 	mla	r0, r2, r0, r7
 8009ef2:	f7ff f9c3 	bl	800927c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ef6:	f8d8 1000 	ldr.w	r1, [r8]
 8009efa:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8009efe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8009f00:	429a      	cmp	r2, r3
 8009f02:	bf28      	it	cs
 8009f04:	2401      	movcs	r4, #1
 8009f06:	e7c6      	b.n	8009e96 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8009f08:	4a0a      	ldr	r2, [pc, #40]	; (8009f34 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8009f0a:	2400      	movs	r4, #0
		++uxPendedTicks;
 8009f0c:	6813      	ldr	r3, [r2, #0]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	6013      	str	r3, [r2, #0]
 8009f12:	e7b3      	b.n	8009e7c <xTaskIncrementTick+0x6c>
 8009f14:	200017c4 	.word	0x200017c4
 8009f18:	20001840 	.word	0x20001840
 8009f1c:	20001724 	.word	0x20001724
 8009f20:	20001728 	.word	0x20001728
 8009f24:	200017fc 	.word	0x200017fc
 8009f28:	200017f8 	.word	0x200017f8
 8009f2c:	2000172c 	.word	0x2000172c
 8009f30:	20001844 	.word	0x20001844
 8009f34:	200017c0 	.word	0x200017c0
 8009f38:	20001720 	.word	0x20001720
 8009f3c:	200017cc 	.word	0x200017cc

08009f40 <xTaskResumeAll>:
{
 8009f40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8009f44:	4c33      	ldr	r4, [pc, #204]	; (800a014 <xTaskResumeAll+0xd4>)
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	b953      	cbnz	r3, 8009f60 <xTaskResumeAll+0x20>
 8009f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4e:	b672      	cpsid	i
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	b662      	cpsie	i
 8009f5e:	e7fe      	b.n	8009f5e <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8009f60:	f000 fa68 	bl	800a434 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f6a:	6824      	ldr	r4, [r4, #0]
 8009f6c:	b134      	cbz	r4, 8009f7c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8009f6e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009f70:	f000 fa84 	bl	800a47c <vPortExitCritical>
}
 8009f74:	4620      	mov	r0, r4
 8009f76:	b002      	add	sp, #8
 8009f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f7c:	4b26      	ldr	r3, [pc, #152]	; (800a018 <xTaskResumeAll+0xd8>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d0f4      	beq.n	8009f6e <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f84:	4d25      	ldr	r5, [pc, #148]	; (800a01c <xTaskResumeAll+0xdc>)
					prvAddTaskToReadyList( pxTCB );
 8009f86:	4e26      	ldr	r6, [pc, #152]	; (800a020 <xTaskResumeAll+0xe0>)
 8009f88:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800a030 <xTaskResumeAll+0xf0>
 8009f8c:	e01f      	b.n	8009fce <xTaskResumeAll+0x8e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f8e:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8009f90:	2701      	movs	r7, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f92:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f94:	f104 0018 	add.w	r0, r4, #24
 8009f98:	f7ff f993 	bl	80092c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f9c:	1d21      	adds	r1, r4, #4
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	9101      	str	r1, [sp, #4]
 8009fa2:	f7ff f98e 	bl	80092c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009fa6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009fa8:	6830      	ldr	r0, [r6, #0]
 8009faa:	fa07 f302 	lsl.w	r3, r7, r2
 8009fae:	9901      	ldr	r1, [sp, #4]
 8009fb0:	4303      	orrs	r3, r0
 8009fb2:	2014      	movs	r0, #20
 8009fb4:	fb00 8002 	mla	r0, r0, r2, r8
 8009fb8:	6033      	str	r3, [r6, #0]
 8009fba:	f7ff f95f 	bl	800927c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009fbe:	4b19      	ldr	r3, [pc, #100]	; (800a024 <xTaskResumeAll+0xe4>)
 8009fc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d301      	bcc.n	8009fce <xTaskResumeAll+0x8e>
						xYieldPending = pdTRUE;
 8009fca:	4b17      	ldr	r3, [pc, #92]	; (800a028 <xTaskResumeAll+0xe8>)
 8009fcc:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fce:	682b      	ldr	r3, [r5, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1dc      	bne.n	8009f8e <xTaskResumeAll+0x4e>
				if( pxTCB != NULL )
 8009fd4:	b10c      	cbz	r4, 8009fda <xTaskResumeAll+0x9a>
					prvResetNextTaskUnblockTime();
 8009fd6:	f7ff fdaf 	bl	8009b38 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009fda:	4d14      	ldr	r5, [pc, #80]	; (800a02c <xTaskResumeAll+0xec>)
 8009fdc:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009fde:	b144      	cbz	r4, 8009ff2 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8009fe0:	4e11      	ldr	r6, [pc, #68]	; (800a028 <xTaskResumeAll+0xe8>)
 8009fe2:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8009fe4:	f7ff ff14 	bl	8009e10 <xTaskIncrementTick>
 8009fe8:	b100      	cbz	r0, 8009fec <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8009fea:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009fec:	3c01      	subs	r4, #1
 8009fee:	d1f9      	bne.n	8009fe4 <xTaskResumeAll+0xa4>
						uxPendedTicks = 0;
 8009ff0:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8009ff2:	4b0d      	ldr	r3, [pc, #52]	; (800a028 <xTaskResumeAll+0xe8>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d0b9      	beq.n	8009f6e <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8009ffa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a002:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a00e:	2401      	movs	r4, #1
 800a010:	e7ae      	b.n	8009f70 <xTaskResumeAll+0x30>
 800a012:	bf00      	nop
 800a014:	200017c4 	.word	0x200017c4
 800a018:	200017b8 	.word	0x200017b8
 800a01c:	20001800 	.word	0x20001800
 800a020:	200017cc 	.word	0x200017cc
 800a024:	20001720 	.word	0x20001720
 800a028:	20001844 	.word	0x20001844
 800a02c:	200017c0 	.word	0x200017c0
 800a030:	2000172c 	.word	0x2000172c

0800a034 <vTaskDelay>:
	{
 800a034:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a036:	b950      	cbnz	r0, 800a04e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800a038:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a03c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a040:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	f3bf 8f6f 	isb	sy
	}
 800a04c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800a04e:	4b0b      	ldr	r3, [pc, #44]	; (800a07c <vTaskDelay+0x48>)
 800a050:	6819      	ldr	r1, [r3, #0]
 800a052:	b151      	cbz	r1, 800a06a <vTaskDelay+0x36>
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	b672      	cpsid	i
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	b662      	cpsie	i
 800a068:	e7fe      	b.n	800a068 <vTaskDelay+0x34>
			vTaskSuspendAll();
 800a06a:	f7ff febb 	bl	8009de4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a06e:	f7ff fd1f 	bl	8009ab0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a072:	f7ff ff65 	bl	8009f40 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a076:	2800      	cmp	r0, #0
 800a078:	d0de      	beq.n	800a038 <vTaskDelay+0x4>
 800a07a:	e7e7      	b.n	800a04c <vTaskDelay+0x18>
 800a07c:	200017c4 	.word	0x200017c4

0800a080 <vTaskSwitchContext>:
{
 800a080:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a082:	4b24      	ldr	r3, [pc, #144]	; (800a114 <vTaskSwitchContext+0x94>)
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	4b24      	ldr	r3, [pc, #144]	; (800a118 <vTaskSwitchContext+0x98>)
 800a088:	b112      	cbz	r2, 800a090 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800a08a:	2201      	movs	r2, #1
 800a08c:	601a      	str	r2, [r3, #0]
}
 800a08e:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 800a090:	4c22      	ldr	r4, [pc, #136]	; (800a11c <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 800a092:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800a09e:	d10b      	bne.n	800a0b8 <vTaskSwitchContext+0x38>
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800a0a6:	d107      	bne.n	800a0b8 <vTaskSwitchContext+0x38>
 800a0a8:	689a      	ldr	r2, [r3, #8]
 800a0aa:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800a0ae:	d103      	bne.n	800a0b8 <vTaskSwitchContext+0x38>
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800a0b6:	d004      	beq.n	800a0c2 <vTaskSwitchContext+0x42>
 800a0b8:	6820      	ldr	r0, [r4, #0]
 800a0ba:	6821      	ldr	r1, [r4, #0]
 800a0bc:	3134      	adds	r1, #52	; 0x34
 800a0be:	f7f6 ff16 	bl	8000eee <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0c2:	4b17      	ldr	r3, [pc, #92]	; (800a120 <vTaskSwitchContext+0xa0>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a0c6:	fab2 f282 	clz	r2, r2
 800a0ca:	b2d2      	uxtb	r2, r2
 800a0cc:	2314      	movs	r3, #20
 800a0ce:	4915      	ldr	r1, [pc, #84]	; (800a124 <vTaskSwitchContext+0xa4>)
 800a0d0:	f1c2 021f 	rsb	r2, r2, #31
 800a0d4:	4353      	muls	r3, r2
 800a0d6:	58cd      	ldr	r5, [r1, r3]
 800a0d8:	18c8      	adds	r0, r1, r3
 800a0da:	b955      	cbnz	r5, 800a0f2 <vTaskSwitchContext+0x72>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	b672      	cpsid	i
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	b662      	cpsie	i
 800a0f0:	e7fe      	b.n	800a0f0 <vTaskSwitchContext+0x70>
 800a0f2:	6845      	ldr	r5, [r0, #4]
 800a0f4:	3308      	adds	r3, #8
 800a0f6:	686d      	ldr	r5, [r5, #4]
 800a0f8:	440b      	add	r3, r1
 800a0fa:	429d      	cmp	r5, r3
 800a0fc:	6045      	str	r5, [r0, #4]
 800a0fe:	bf04      	itt	eq
 800a100:	686b      	ldreq	r3, [r5, #4]
 800a102:	6043      	streq	r3, [r0, #4]
 800a104:	2314      	movs	r3, #20
 800a106:	fb03 1202 	mla	r2, r3, r2, r1
 800a10a:	6853      	ldr	r3, [r2, #4]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	6023      	str	r3, [r4, #0]
}
 800a110:	e7bd      	b.n	800a08e <vTaskSwitchContext+0xe>
 800a112:	bf00      	nop
 800a114:	200017c4 	.word	0x200017c4
 800a118:	20001844 	.word	0x20001844
 800a11c:	20001720 	.word	0x20001720
 800a120:	200017cc 	.word	0x200017cc
 800a124:	2000172c 	.word	0x2000172c

0800a128 <vTaskPlaceOnEventList>:
{
 800a128:	b510      	push	{r4, lr}
 800a12a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800a12c:	b950      	cbnz	r0, 800a144 <vTaskPlaceOnEventList+0x1c>
 800a12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a132:	b672      	cpsid	i
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	b662      	cpsie	i
 800a142:	e7fe      	b.n	800a142 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a144:	4b05      	ldr	r3, [pc, #20]	; (800a15c <vTaskPlaceOnEventList+0x34>)
 800a146:	6819      	ldr	r1, [r3, #0]
 800a148:	3118      	adds	r1, #24
 800a14a:	f7ff f8a3 	bl	8009294 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a14e:	4620      	mov	r0, r4
 800a150:	2101      	movs	r1, #1
}
 800a152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a156:	f7ff bcab 	b.w	8009ab0 <prvAddCurrentTaskToDelayedList>
 800a15a:	bf00      	nop
 800a15c:	20001720 	.word	0x20001720

0800a160 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a160:	68c3      	ldr	r3, [r0, #12]
{
 800a162:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a164:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a166:	b954      	cbnz	r4, 800a17e <xTaskRemoveFromEventList+0x1e>
 800a168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16c:	b672      	cpsid	i
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	b662      	cpsie	i
 800a17c:	e7fe      	b.n	800a17c <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a17e:	f104 0118 	add.w	r1, r4, #24
 800a182:	4608      	mov	r0, r1
 800a184:	9101      	str	r1, [sp, #4]
 800a186:	f7ff f89c 	bl	80092c2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a18a:	4b13      	ldr	r3, [pc, #76]	; (800a1d8 <xTaskRemoveFromEventList+0x78>)
 800a18c:	9901      	ldr	r1, [sp, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	b9eb      	cbnz	r3, 800a1ce <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a192:	1d21      	adds	r1, r4, #4
 800a194:	4608      	mov	r0, r1
 800a196:	9101      	str	r1, [sp, #4]
 800a198:	f7ff f893 	bl	80092c2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a19c:	480f      	ldr	r0, [pc, #60]	; (800a1dc <xTaskRemoveFromEventList+0x7c>)
 800a19e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	6805      	ldr	r5, [r0, #0]
 800a1a4:	4093      	lsls	r3, r2
 800a1a6:	9901      	ldr	r1, [sp, #4]
 800a1a8:	432b      	orrs	r3, r5
 800a1aa:	6003      	str	r3, [r0, #0]
 800a1ac:	2014      	movs	r0, #20
 800a1ae:	4b0c      	ldr	r3, [pc, #48]	; (800a1e0 <xTaskRemoveFromEventList+0x80>)
 800a1b0:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a1b4:	f7ff f862 	bl	800927c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1b8:	4b0a      	ldr	r3, [pc, #40]	; (800a1e4 <xTaskRemoveFromEventList+0x84>)
 800a1ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d906      	bls.n	800a1d2 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 800a1c4:	2001      	movs	r0, #1
 800a1c6:	4b08      	ldr	r3, [pc, #32]	; (800a1e8 <xTaskRemoveFromEventList+0x88>)
 800a1c8:	6018      	str	r0, [r3, #0]
}
 800a1ca:	b003      	add	sp, #12
 800a1cc:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a1ce:	4807      	ldr	r0, [pc, #28]	; (800a1ec <xTaskRemoveFromEventList+0x8c>)
 800a1d0:	e7f0      	b.n	800a1b4 <xTaskRemoveFromEventList+0x54>
		xReturn = pdFALSE;
 800a1d2:	2000      	movs	r0, #0
	return xReturn;
 800a1d4:	e7f9      	b.n	800a1ca <xTaskRemoveFromEventList+0x6a>
 800a1d6:	bf00      	nop
 800a1d8:	200017c4 	.word	0x200017c4
 800a1dc:	200017cc 	.word	0x200017cc
 800a1e0:	2000172c 	.word	0x2000172c
 800a1e4:	20001720 	.word	0x20001720
 800a1e8:	20001844 	.word	0x20001844
 800a1ec:	20001800 	.word	0x20001800

0800a1f0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1f0:	4b03      	ldr	r3, [pc, #12]	; (800a200 <vTaskInternalSetTimeOutState+0x10>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1f6:	4b03      	ldr	r3, [pc, #12]	; (800a204 <vTaskInternalSetTimeOutState+0x14>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	6043      	str	r3, [r0, #4]
}
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	200017fc 	.word	0x200017fc
 800a204:	20001840 	.word	0x20001840

0800a208 <xTaskCheckForTimeOut>:
{
 800a208:	b570      	push	{r4, r5, r6, lr}
 800a20a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800a20c:	4605      	mov	r5, r0
 800a20e:	b950      	cbnz	r0, 800a226 <xTaskCheckForTimeOut+0x1e>
 800a210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a214:	b672      	cpsid	i
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	b662      	cpsie	i
 800a224:	e7fe      	b.n	800a224 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800a226:	b951      	cbnz	r1, 800a23e <xTaskCheckForTimeOut+0x36>
 800a228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22c:	b672      	cpsid	i
 800a22e:	f383 8811 	msr	BASEPRI, r3
 800a232:	f3bf 8f6f 	isb	sy
 800a236:	f3bf 8f4f 	dsb	sy
 800a23a:	b662      	cpsie	i
 800a23c:	e7fe      	b.n	800a23c <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800a23e:	f000 f8f9 	bl	800a434 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a242:	4b0f      	ldr	r3, [pc, #60]	; (800a280 <xTaskCheckForTimeOut+0x78>)
 800a244:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	d010      	beq.n	800a26e <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a24c:	480d      	ldr	r0, [pc, #52]	; (800a284 <xTaskCheckForTimeOut+0x7c>)
 800a24e:	682e      	ldr	r6, [r5, #0]
 800a250:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a252:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a254:	4286      	cmp	r6, r0
 800a256:	d001      	beq.n	800a25c <xTaskCheckForTimeOut+0x54>
 800a258:	428a      	cmp	r2, r1
 800a25a:	d90f      	bls.n	800a27c <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a25c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a25e:	4283      	cmp	r3, r0
 800a260:	d90a      	bls.n	800a278 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800a262:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a264:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800a266:	4413      	add	r3, r2
 800a268:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a26a:	f7ff ffc1 	bl	800a1f0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800a26e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a270:	f000 f904 	bl	800a47c <vPortExitCritical>
}
 800a274:	4620      	mov	r0, r4
 800a276:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a27c:	2401      	movs	r4, #1
 800a27e:	e7f7      	b.n	800a270 <xTaskCheckForTimeOut+0x68>
 800a280:	20001840 	.word	0x20001840
 800a284:	200017fc 	.word	0x200017fc

0800a288 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a288:	4b01      	ldr	r3, [pc, #4]	; (800a290 <vTaskMissedYield+0x8>)
 800a28a:	2201      	movs	r2, #1
 800a28c:	601a      	str	r2, [r3, #0]
}
 800a28e:	4770      	bx	lr
 800a290:	20001844 	.word	0x20001844

0800a294 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a294:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <xTaskGetSchedulerState+0x18>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	b133      	cbz	r3, 800a2a8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a29a:	4b05      	ldr	r3, [pc, #20]	; (800a2b0 <xTaskGetSchedulerState+0x1c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	bf0c      	ite	eq
 800a2a2:	2002      	moveq	r0, #2
 800a2a4:	2000      	movne	r0, #0
 800a2a6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a2a8:	2001      	movs	r0, #1
	}
 800a2aa:	4770      	bx	lr
 800a2ac:	20001814 	.word	0x20001814
 800a2b0:	200017c4 	.word	0x200017c4

0800a2b4 <xTaskPriorityDisinherit>:
	{
 800a2b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	b910      	cbnz	r0, 800a2c0 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 800a2ba:	2000      	movs	r0, #0
	}
 800a2bc:	b003      	add	sp, #12
 800a2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800a2c0:	4b24      	ldr	r3, [pc, #144]	; (800a354 <xTaskPriorityDisinherit+0xa0>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4283      	cmp	r3, r0
 800a2c6:	d00a      	beq.n	800a2de <xTaskPriorityDisinherit+0x2a>
 800a2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2cc:	b672      	cpsid	i
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	b662      	cpsie	i
 800a2dc:	e7fe      	b.n	800a2dc <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2e0:	b953      	cbnz	r3, 800a2f8 <xTaskPriorityDisinherit+0x44>
 800a2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e6:	b672      	cpsid	i
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	b662      	cpsie	i
 800a2f6:	e7fe      	b.n	800a2f6 <xTaskPriorityDisinherit+0x42>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2f8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800a2fa:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800a2fe:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a300:	4291      	cmp	r1, r2
 800a302:	d0da      	beq.n	800a2ba <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1d8      	bne.n	800a2ba <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a308:	1d01      	adds	r1, r0, #4
 800a30a:	4f13      	ldr	r7, [pc, #76]	; (800a358 <xTaskPriorityDisinherit+0xa4>)
 800a30c:	4608      	mov	r0, r1
 800a30e:	9101      	str	r1, [sp, #4]
 800a310:	f7fe ffd7 	bl	80092c2 <uxListRemove>
 800a314:	4a11      	ldr	r2, [pc, #68]	; (800a35c <xTaskPriorityDisinherit+0xa8>)
 800a316:	9901      	ldr	r1, [sp, #4]
 800a318:	b950      	cbnz	r0, 800a330 <xTaskPriorityDisinherit+0x7c>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a31a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a31c:	2614      	movs	r6, #20
 800a31e:	4346      	muls	r6, r0
 800a320:	59bb      	ldr	r3, [r7, r6]
 800a322:	b92b      	cbnz	r3, 800a330 <xTaskPriorityDisinherit+0x7c>
 800a324:	2501      	movs	r5, #1
 800a326:	6813      	ldr	r3, [r2, #0]
 800a328:	4085      	lsls	r5, r0
 800a32a:	ea23 0305 	bic.w	r3, r3, r5
 800a32e:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a330:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a332:	f1c3 0007 	rsb	r0, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a336:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a338:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a33a:	2401      	movs	r4, #1
 800a33c:	6810      	ldr	r0, [r2, #0]
 800a33e:	fa04 f503 	lsl.w	r5, r4, r3
 800a342:	4305      	orrs	r5, r0
 800a344:	2014      	movs	r0, #20
 800a346:	fb00 7003 	mla	r0, r0, r3, r7
 800a34a:	6015      	str	r5, [r2, #0]
 800a34c:	f7fe ff96 	bl	800927c <vListInsertEnd>
					xReturn = pdTRUE;
 800a350:	4620      	mov	r0, r4
		return xReturn;
 800a352:	e7b3      	b.n	800a2bc <xTaskPriorityDisinherit+0x8>
 800a354:	20001720 	.word	0x20001720
 800a358:	2000172c 	.word	0x2000172c
 800a35c:	200017cc 	.word	0x200017cc

0800a360 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a360:	4808      	ldr	r0, [pc, #32]	; (800a384 <prvPortStartFirstTask+0x24>)
 800a362:	6800      	ldr	r0, [r0, #0]
 800a364:	6800      	ldr	r0, [r0, #0]
 800a366:	f380 8808 	msr	MSP, r0
 800a36a:	f04f 0000 	mov.w	r0, #0
 800a36e:	f380 8814 	msr	CONTROL, r0
 800a372:	b662      	cpsie	i
 800a374:	b661      	cpsie	f
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	df00      	svc	0
 800a380:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a382:	0000      	.short	0x0000
 800a384:	e000ed08 	.word	0xe000ed08

0800a388 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a388:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a398 <vPortEnableVFP+0x10>
 800a38c:	6801      	ldr	r1, [r0, #0]
 800a38e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a392:	6001      	str	r1, [r0, #0]
 800a394:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a396:	0000      	.short	0x0000
 800a398:	e000ed88 	.word	0xe000ed88

0800a39c <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800a39c:	2300      	movs	r3, #0
{
 800a39e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a3a0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800a3a2:	4b0f      	ldr	r3, [pc, #60]	; (800a3e0 <prvTaskExitError+0x44>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	d00a      	beq.n	800a3c0 <prvTaskExitError+0x24>
 800a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ae:	b672      	cpsid	i
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	b662      	cpsie	i
 800a3be:	e7fe      	b.n	800a3be <prvTaskExitError+0x22>
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	b672      	cpsid	i
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	b662      	cpsie	i
	while( ulDummy == 0 )
 800a3d4:	9b01      	ldr	r3, [sp, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d0fc      	beq.n	800a3d4 <prvTaskExitError+0x38>
}
 800a3da:	b002      	add	sp, #8
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	20000030 	.word	0x20000030

0800a3e4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a3e8:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a3ec:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800a3f0:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3f2:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a3f4:	4b03      	ldr	r3, [pc, #12]	; (800a404 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a3f6:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a3f8:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a3fa:	f06f 0302 	mvn.w	r3, #2
 800a3fe:	6203      	str	r3, [r0, #32]
}
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	0800a39d 	.word	0x0800a39d
	...

0800a410 <SVC_Handler>:
	__asm volatile (
 800a410:	4b07      	ldr	r3, [pc, #28]	; (800a430 <pxCurrentTCBConst2>)
 800a412:	6819      	ldr	r1, [r3, #0]
 800a414:	6808      	ldr	r0, [r1, #0]
 800a416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41a:	f380 8809 	msr	PSP, r0
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f04f 0000 	mov.w	r0, #0
 800a426:	f380 8811 	msr	BASEPRI, r0
 800a42a:	4770      	bx	lr
 800a42c:	f3af 8000 	nop.w

0800a430 <pxCurrentTCBConst2>:
 800a430:	20001720 	.word	0x20001720

0800a434 <vPortEnterCritical>:
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	b672      	cpsid	i
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	b662      	cpsie	i
	uxCriticalNesting++;
 800a448:	4a0b      	ldr	r2, [pc, #44]	; (800a478 <vPortEnterCritical+0x44>)
 800a44a:	6813      	ldr	r3, [r2, #0]
 800a44c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800a44e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800a450:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a452:	d110      	bne.n	800a476 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a454:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a458:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	b153      	cbz	r3, 800a476 <vPortEnterCritical+0x42>
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	b672      	cpsid	i
 800a466:	f383 8811 	msr	BASEPRI, r3
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	f3bf 8f4f 	dsb	sy
 800a472:	b662      	cpsie	i
 800a474:	e7fe      	b.n	800a474 <vPortEnterCritical+0x40>
}
 800a476:	4770      	bx	lr
 800a478:	20000030 	.word	0x20000030

0800a47c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a47c:	4a09      	ldr	r2, [pc, #36]	; (800a4a4 <vPortExitCritical+0x28>)
 800a47e:	6813      	ldr	r3, [r2, #0]
 800a480:	b953      	cbnz	r3, 800a498 <vPortExitCritical+0x1c>
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	b672      	cpsid	i
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	b662      	cpsie	i
 800a496:	e7fe      	b.n	800a496 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800a498:	3b01      	subs	r3, #1
 800a49a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a49c:	b90b      	cbnz	r3, 800a4a2 <vPortExitCritical+0x26>
	__asm volatile
 800a49e:	f383 8811 	msr	BASEPRI, r3
}
 800a4a2:	4770      	bx	lr
 800a4a4:	20000030 	.word	0x20000030
	...

0800a4b0 <PendSV_Handler>:
	__asm volatile
 800a4b0:	f3ef 8009 	mrs	r0, PSP
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	4b15      	ldr	r3, [pc, #84]	; (800a510 <pxCurrentTCBConst>)
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	f01e 0f10 	tst.w	lr, #16
 800a4c0:	bf08      	it	eq
 800a4c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ca:	6010      	str	r0, [r2, #0]
 800a4cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4d4:	b672      	cpsid	i
 800a4d6:	f380 8811 	msr	BASEPRI, r0
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	b662      	cpsie	i
 800a4e4:	f7ff fdcc 	bl	800a080 <vTaskSwitchContext>
 800a4e8:	f04f 0000 	mov.w	r0, #0
 800a4ec:	f380 8811 	msr	BASEPRI, r0
 800a4f0:	bc09      	pop	{r0, r3}
 800a4f2:	6819      	ldr	r1, [r3, #0]
 800a4f4:	6808      	ldr	r0, [r1, #0]
 800a4f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fa:	f01e 0f10 	tst.w	lr, #16
 800a4fe:	bf08      	it	eq
 800a500:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a504:	f380 8809 	msr	PSP, r0
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop

0800a510 <pxCurrentTCBConst>:
 800a510:	20001720 	.word	0x20001720

0800a514 <SysTick_Handler>:
{
 800a514:	b508      	push	{r3, lr}
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51a:	b672      	cpsid	i
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800a52a:	f7ff fc71 	bl	8009e10 <xTaskIncrementTick>
 800a52e:	b128      	cbz	r0, 800a53c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a530:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a538:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800a53c:	2300      	movs	r3, #0
 800a53e:	f383 8811 	msr	BASEPRI, r3
}
 800a542:	bd08      	pop	{r3, pc}

0800a544 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a544:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800a548:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a54a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a54e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a550:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a552:	4b04      	ldr	r3, [pc, #16]	; (800a564 <vPortSetupTimerInterrupt+0x20>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	fbb3 f3f1 	udiv	r3, r3, r1
 800a55a:	3b01      	subs	r3, #1
 800a55c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a55e:	2307      	movs	r3, #7
 800a560:	6113      	str	r3, [r2, #16]
}
 800a562:	4770      	bx	lr
 800a564:	20000000 	.word	0x20000000

0800a568 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a568:	4b2e      	ldr	r3, [pc, #184]	; (800a624 <xPortStartScheduler+0xbc>)
{
 800a56a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a56c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a56e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a570:	b2d2      	uxtb	r2, r2
 800a572:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a574:	22ff      	movs	r2, #255	; 0xff
 800a576:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a578:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a57a:	4a2b      	ldr	r2, [pc, #172]	; (800a628 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a582:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a586:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a58a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a58c:	2307      	movs	r3, #7
 800a58e:	4a27      	ldr	r2, [pc, #156]	; (800a62c <xPortStartScheduler+0xc4>)
 800a590:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a592:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800a596:	1e5c      	subs	r4, r3, #1
 800a598:	0600      	lsls	r0, r0, #24
 800a59a:	d40e      	bmi.n	800a5ba <xPortStartScheduler+0x52>
 800a59c:	b111      	cbz	r1, 800a5a4 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a59e:	2b03      	cmp	r3, #3
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	d013      	beq.n	800a5cc <xPortStartScheduler+0x64>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	b672      	cpsid	i
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	b662      	cpsie	i
 800a5b8:	e7fe      	b.n	800a5b8 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a5be:	2101      	movs	r1, #1
 800a5c0:	005b      	lsls	r3, r3, #1
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	f88d 3003 	strb.w	r3, [sp, #3]
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	e7e2      	b.n	800a592 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5cc:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5d0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800a5d4:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5d6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5d8:	9b01      	ldr	r3, [sp, #4]
 800a5da:	4a12      	ldr	r2, [pc, #72]	; (800a624 <xPortStartScheduler+0xbc>)
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5e0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800a5e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5e8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5ec:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800a5f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a5f4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800a5f8:	f7ff ffa4 	bl	800a544 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a5fc:	4b0c      	ldr	r3, [pc, #48]	; (800a630 <xPortStartScheduler+0xc8>)
 800a5fe:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800a600:	f7ff fec2 	bl	800a388 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a604:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800a608:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a60c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800a610:	f7ff fea6 	bl	800a360 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a614:	f7ff fd34 	bl	800a080 <vTaskSwitchContext>
}
 800a618:	4628      	mov	r0, r5
	prvTaskExitError();
 800a61a:	f7ff febf 	bl	800a39c <prvTaskExitError>
}
 800a61e:	b003      	add	sp, #12
 800a620:	bd30      	pop	{r4, r5, pc}
 800a622:	bf00      	nop
 800a624:	e000e400 	.word	0xe000e400
 800a628:	20001848 	.word	0x20001848
 800a62c:	2000184c 	.word	0x2000184c
 800a630:	20000030 	.word	0x20000030

0800a634 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a634:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a638:	2b0f      	cmp	r3, #15
 800a63a:	d910      	bls.n	800a65e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a63c:	4a13      	ldr	r2, [pc, #76]	; (800a68c <vPortValidateInterruptPriority+0x58>)
 800a63e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a640:	4a13      	ldr	r2, [pc, #76]	; (800a690 <vPortValidateInterruptPriority+0x5c>)
 800a642:	7812      	ldrb	r2, [r2, #0]
 800a644:	429a      	cmp	r2, r3
 800a646:	d90a      	bls.n	800a65e <vPortValidateInterruptPriority+0x2a>
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	b672      	cpsid	i
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	b662      	cpsie	i
 800a65c:	e7fe      	b.n	800a65c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a65e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a662:	4a0c      	ldr	r2, [pc, #48]	; (800a694 <vPortValidateInterruptPriority+0x60>)
 800a664:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800a668:	6812      	ldr	r2, [r2, #0]
 800a66a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a66e:	4293      	cmp	r3, r2
 800a670:	d90a      	bls.n	800a688 <vPortValidateInterruptPriority+0x54>
 800a672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a676:	b672      	cpsid	i
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	b662      	cpsie	i
 800a686:	e7fe      	b.n	800a686 <vPortValidateInterruptPriority+0x52>
	}
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	e000e3f0 	.word	0xe000e3f0
 800a690:	20001848 	.word	0x20001848
 800a694:	2000184c 	.word	0x2000184c

0800a698 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a698:	4b0f      	ldr	r3, [pc, #60]	; (800a6d8 <prvInsertBlockIntoFreeList+0x40>)
{
 800a69a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a69c:	461a      	mov	r2, r3
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4283      	cmp	r3, r0
 800a6a2:	d3fb      	bcc.n	800a69c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6a4:	6854      	ldr	r4, [r2, #4]
 800a6a6:	1911      	adds	r1, r2, r4
 800a6a8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6aa:	bf01      	itttt	eq
 800a6ac:	6841      	ldreq	r1, [r0, #4]
 800a6ae:	4610      	moveq	r0, r2
 800a6b0:	1909      	addeq	r1, r1, r4
 800a6b2:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6b4:	6844      	ldr	r4, [r0, #4]
 800a6b6:	1901      	adds	r1, r0, r4
 800a6b8:	428b      	cmp	r3, r1
 800a6ba:	d107      	bne.n	800a6cc <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6bc:	4907      	ldr	r1, [pc, #28]	; (800a6dc <prvInsertBlockIntoFreeList+0x44>)
 800a6be:	6809      	ldr	r1, [r1, #0]
 800a6c0:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6c2:	bf1f      	itttt	ne
 800a6c4:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6c6:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6c8:	1909      	addne	r1, r1, r4
 800a6ca:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6cc:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6ce:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6d0:	bf18      	it	ne
 800a6d2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6d4:	bd10      	pop	{r4, pc}
 800a6d6:	bf00      	nop
 800a6d8:	20009860 	.word	0x20009860
 800a6dc:	20001850 	.word	0x20001850

0800a6e0 <pvPortMalloc>:
{
 800a6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a6e6:	f7ff fb7d 	bl	8009de4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a6ea:	4942      	ldr	r1, [pc, #264]	; (800a7f4 <pvPortMalloc+0x114>)
 800a6ec:	4d42      	ldr	r5, [pc, #264]	; (800a7f8 <pvPortMalloc+0x118>)
 800a6ee:	680b      	ldr	r3, [r1, #0]
 800a6f0:	bb0b      	cbnz	r3, 800a736 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800a6f2:	4a42      	ldr	r2, [pc, #264]	; (800a7fc <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6f4:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6f6:	4e42      	ldr	r6, [pc, #264]	; (800a800 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6f8:	bf1b      	ittet	ne
 800a6fa:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6fc:	f502 4300 	addne.w	r3, r2, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a700:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a704:	f020 0007 	bicne.w	r0, r0, #7
 800a708:	bf1c      	itt	ne
 800a70a:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a70c:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800a70e:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a710:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a712:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a714:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 800a716:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a718:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800a71c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a720:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800a722:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a724:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a728:	4b36      	ldr	r3, [pc, #216]	; (800a804 <pvPortMalloc+0x124>)
 800a72a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a72c:	4b36      	ldr	r3, [pc, #216]	; (800a808 <pvPortMalloc+0x128>)
 800a72e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a730:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a734:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a736:	682f      	ldr	r7, [r5, #0]
 800a738:	4227      	tst	r7, r4
 800a73a:	d007      	beq.n	800a74c <pvPortMalloc+0x6c>
			vApplicationMallocFailedHook();
 800a73c:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800a73e:	f7ff fbff 	bl	8009f40 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800a742:	f7f6 fbd5 	bl	8000ef0 <vApplicationMallocFailedHook>
}
 800a746:	4630      	mov	r0, r6
 800a748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xWantedSize > 0 )
 800a74c:	2c00      	cmp	r4, #0
 800a74e:	d0f5      	beq.n	800a73c <pvPortMalloc+0x5c>
				xWantedSize += xHeapStructSize;
 800a750:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a754:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a756:	bf1c      	itt	ne
 800a758:	f023 0307 	bicne.w	r3, r3, #7
 800a75c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d0ec      	beq.n	800a73c <pvPortMalloc+0x5c>
 800a762:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800a808 <pvPortMalloc+0x128>
 800a766:	f8d8 5000 	ldr.w	r5, [r8]
 800a76a:	429d      	cmp	r5, r3
 800a76c:	d3e6      	bcc.n	800a73c <pvPortMalloc+0x5c>
				pxBlock = xStart.pxNextFreeBlock;
 800a76e:	4a24      	ldr	r2, [pc, #144]	; (800a800 <pvPortMalloc+0x120>)
 800a770:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a772:	6860      	ldr	r0, [r4, #4]
 800a774:	4298      	cmp	r0, r3
 800a776:	d201      	bcs.n	800a77c <pvPortMalloc+0x9c>
 800a778:	6826      	ldr	r6, [r4, #0]
 800a77a:	b9be      	cbnz	r6, 800a7ac <pvPortMalloc+0xcc>
				if( pxBlock != pxEnd )
 800a77c:	6809      	ldr	r1, [r1, #0]
 800a77e:	42a1      	cmp	r1, r4
 800a780:	d0dc      	beq.n	800a73c <pvPortMalloc+0x5c>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a782:	6821      	ldr	r1, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a784:	6816      	ldr	r6, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a786:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a788:	1ac2      	subs	r2, r0, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a78a:	3608      	adds	r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a78c:	2a10      	cmp	r2, #16
 800a78e:	d914      	bls.n	800a7ba <pvPortMalloc+0xda>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a790:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a792:	0741      	lsls	r1, r0, #29
 800a794:	d00d      	beq.n	800a7b2 <pvPortMalloc+0xd2>
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	b672      	cpsid	i
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	b662      	cpsie	i
 800a7aa:	e7fe      	b.n	800a7aa <pvPortMalloc+0xca>
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4634      	mov	r4, r6
 800a7b0:	e7df      	b.n	800a772 <pvPortMalloc+0x92>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7b2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7b4:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7b6:	f7ff ff6f 	bl	800a698 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7ba:	6862      	ldr	r2, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7bc:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7be:	4911      	ldr	r1, [pc, #68]	; (800a804 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7c0:	1aad      	subs	r5, r5, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7c2:	4317      	orrs	r7, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7c4:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800a7c6:	6023      	str	r3, [r4, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7c8:	4285      	cmp	r5, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7ca:	6067      	str	r7, [r4, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7cc:	f8c8 5000 	str.w	r5, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7d0:	bf38      	it	cc
 800a7d2:	600d      	strcc	r5, [r1, #0]
	( void ) xTaskResumeAll();
 800a7d4:	f7ff fbb4 	bl	8009f40 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7d8:	0773      	lsls	r3, r6, #29
 800a7da:	d0b4      	beq.n	800a746 <pvPortMalloc+0x66>
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	b672      	cpsid	i
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	b662      	cpsie	i
 800a7f0:	e7fe      	b.n	800a7f0 <pvPortMalloc+0x110>
 800a7f2:	bf00      	nop
 800a7f4:	20001850 	.word	0x20001850
 800a7f8:	20009854 	.word	0x20009854
 800a7fc:	20001854 	.word	0x20001854
 800a800:	20009860 	.word	0x20009860
 800a804:	2000985c 	.word	0x2000985c
 800a808:	20009858 	.word	0x20009858

0800a80c <vPortFree>:
{
 800a80c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800a80e:	4604      	mov	r4, r0
 800a810:	2800      	cmp	r0, #0
 800a812:	d032      	beq.n	800a87a <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a814:	4a19      	ldr	r2, [pc, #100]	; (800a87c <vPortFree+0x70>)
 800a816:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a81a:	6812      	ldr	r2, [r2, #0]
 800a81c:	4213      	tst	r3, r2
 800a81e:	d10a      	bne.n	800a836 <vPortFree+0x2a>
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	b672      	cpsid	i
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	b662      	cpsie	i
 800a834:	e7fe      	b.n	800a834 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a836:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a83a:	b151      	cbz	r1, 800a852 <vPortFree+0x46>
 800a83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a840:	b672      	cpsid	i
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	b662      	cpsie	i
 800a850:	e7fe      	b.n	800a850 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a852:	ea23 0302 	bic.w	r3, r3, r2
 800a856:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a85a:	f7ff fac3 	bl	8009de4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a85e:	4a08      	ldr	r2, [pc, #32]	; (800a880 <vPortFree+0x74>)
 800a860:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a864:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a868:	6811      	ldr	r1, [r2, #0]
 800a86a:	440b      	add	r3, r1
 800a86c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a86e:	f7ff ff13 	bl	800a698 <prvInsertBlockIntoFreeList>
}
 800a872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800a876:	f7ff bb63 	b.w	8009f40 <xTaskResumeAll>
}
 800a87a:	bd10      	pop	{r4, pc}
 800a87c:	20009854 	.word	0x20009854
 800a880:	20009858 	.word	0x20009858

0800a884 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a884:	2904      	cmp	r1, #4
 800a886:	d00a      	beq.n	800a89e <USBH_UserProcess+0x1a>
 800a888:	2905      	cmp	r1, #5
 800a88a:	d004      	beq.n	800a896 <USBH_UserProcess+0x12>
 800a88c:	2902      	cmp	r1, #2
 800a88e:	d105      	bne.n	800a89c <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a890:	4b04      	ldr	r3, [pc, #16]	; (800a8a4 <USBH_UserProcess+0x20>)
 800a892:	7019      	strb	r1, [r3, #0]
  break;
 800a894:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800a896:	4b03      	ldr	r3, [pc, #12]	; (800a8a4 <USBH_UserProcess+0x20>)
 800a898:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a89a:	701a      	strb	r2, [r3, #0]

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a89c:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 800a89e:	4b01      	ldr	r3, [pc, #4]	; (800a8a4 <USBH_UserProcess+0x20>)
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	e7fa      	b.n	800a89a <USBH_UserProcess+0x16>
 800a8a4:	20009868 	.word	0x20009868

0800a8a8 <MX_USB_HOST_Init>:
{
 800a8a8:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	490b      	ldr	r1, [pc, #44]	; (800a8dc <MX_USB_HOST_Init+0x34>)
 800a8ae:	480c      	ldr	r0, [pc, #48]	; (800a8e0 <MX_USB_HOST_Init+0x38>)
 800a8b0:	f7fd fd98 	bl	80083e4 <USBH_Init>
 800a8b4:	b108      	cbz	r0, 800a8ba <MX_USB_HOST_Init+0x12>
    Error_Handler();
 800a8b6:	f7f7 fb47 	bl	8001f48 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a8ba:	490a      	ldr	r1, [pc, #40]	; (800a8e4 <MX_USB_HOST_Init+0x3c>)
 800a8bc:	4808      	ldr	r0, [pc, #32]	; (800a8e0 <MX_USB_HOST_Init+0x38>)
 800a8be:	f7fd fdcd 	bl	800845c <USBH_RegisterClass>
 800a8c2:	b108      	cbz	r0, 800a8c8 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 800a8c4:	f7f7 fb40 	bl	8001f48 <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a8c8:	4805      	ldr	r0, [pc, #20]	; (800a8e0 <MX_USB_HOST_Init+0x38>)
 800a8ca:	f7fd fdf9 	bl	80084c0 <USBH_Start>
 800a8ce:	b118      	cbz	r0, 800a8d8 <MX_USB_HOST_Init+0x30>
}
 800a8d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800a8d4:	f7f7 bb38 	b.w	8001f48 <Error_Handler>
}
 800a8d8:	bd08      	pop	{r3, pc}
 800a8da:	bf00      	nop
 800a8dc:	0800a885 	.word	0x0800a885
 800a8e0:	2000986c 	.word	0x2000986c
 800a8e4:	20000010 	.word	0x20000010

0800a8e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a8e8:	b510      	push	{r4, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8ee:	2214      	movs	r2, #20
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	a803      	add	r0, sp, #12
 800a8f4:	f004 f9ba 	bl	800ec6c <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800a8f8:	6823      	ldr	r3, [r4, #0]
 800a8fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8fe:	d130      	bne.n	800a962 <HAL_HCD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a900:	4c19      	ldr	r4, [pc, #100]	; (800a968 <HAL_HCD_MspInit+0x80>)
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a902:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a906:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a908:	4818      	ldr	r0, [pc, #96]	; (800a96c <HAL_HCD_MspInit+0x84>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a90a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a90c:	f043 0301 	orr.w	r3, r3, #1
 800a910:	6323      	str	r3, [r4, #48]	; 0x30
 800a912:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a914:	f003 0301 	and.w	r3, r3, #1
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a91c:	2302      	movs	r3, #2
 800a91e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a922:	230a      	movs	r3, #10
 800a924:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a928:	a903      	add	r1, sp, #12
 800a92a:	f7f8 fe25 	bl	8003578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a92e:	6b63      	ldr	r3, [r4, #52]	; 0x34

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a930:	2043      	movs	r0, #67	; 0x43
 800a932:	2200      	movs	r2, #0
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a938:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a93a:	6363      	str	r3, [r4, #52]	; 0x34
 800a93c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a942:	9301      	str	r3, [sp, #4]
 800a944:	9b01      	ldr	r3, [sp, #4]
 800a946:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a94c:	6463      	str	r3, [r4, #68]	; 0x44
 800a94e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a954:	9302      	str	r3, [sp, #8]
 800a956:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a958:	f7f8 fa6c 	bl	8002e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a95c:	2043      	movs	r0, #67	; 0x43
 800a95e:	f7f8 fa9b 	bl	8002e98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a962:	b008      	add	sp, #32
 800a964:	bd10      	pop	{r4, pc}
 800a966:	bf00      	nop
 800a968:	40023800 	.word	0x40023800
 800a96c:	40020000 	.word	0x40020000

0800a970 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 800a970:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800a974:	f7fd bfd9 	b.w	800892a <USBH_LL_IncTimer>

0800a978 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800a978:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800a97c:	f7fd bff1 	b.w	8008962 <USBH_LL_Connect>

0800a980 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800a980:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800a984:	f7fd bfff 	b.w	8008986 <USBH_LL_Disconnect>

0800a988 <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a988:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800a98c:	f7fe b819 	b.w	80089c2 <USBH_LL_NotifyURBChange>

0800a990 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 800a990:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800a994:	f7fd bfd7 	b.w	8008946 <USBH_LL_PortEnabled>

0800a998 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800a998:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800a99c:	f7fd bfdd 	b.w	800895a <USBH_LL_PortDisabled>

0800a9a0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a9a0:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a9a2:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
{
 800a9a6:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d11b      	bne.n	800a9e4 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a9ac:	480e      	ldr	r0, [pc, #56]	; (800a9e8 <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a9ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a9b2:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a9b4:	2208      	movs	r2, #8
  phost->pData = &hhcd_USB_OTG_FS;
 800a9b6:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_FS.pData = phost;
 800a9ba:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a9be:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a9c2:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a9c4:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a9c6:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a9c8:	e9c0 2306 	strd	r2, r3, [r0, #24]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a9cc:	f7f8 ff0b 	bl	80037e6 <HAL_HCD_Init>
 800a9d0:	b108      	cbz	r0, 800a9d6 <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 800a9d2:	f7f7 fab9 	bl	8001f48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a9d6:	4804      	ldr	r0, [pc, #16]	; (800a9e8 <USBH_LL_Init+0x48>)
 800a9d8:	f7f9 fbaa 	bl	8004130 <HAL_HCD_GetCurrentFrame>
 800a9dc:	4601      	mov	r1, r0
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f7fd ffa0 	bl	8008924 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	bd10      	pop	{r4, pc}
 800a9e8:	20009c50 	.word	0x20009c50

0800a9ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a9ec:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a9ee:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800a9f2:	f7f9 fba0 	bl	8004136 <HAL_HCD_GetCurrentSpeed>
 800a9f6:	2803      	cmp	r0, #3
 800a9f8:	bf28      	it	cs
 800a9fa:	2001      	movcs	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 800a9fc:	b2c0      	uxtb	r0, r0
 800a9fe:	bd08      	pop	{r3, pc}

0800aa00 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800aa00:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800aa04:	f7f9 bb8f 	b.w	8004126 <HAL_HCD_HC_GetXferCount>

0800aa08 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aa08:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800aa0c:	f7f9 bb85 	b.w	800411a <HAL_HCD_HC_GetURBState>

0800aa10 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aa10:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800aa12:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d102      	bne.n	800aa20 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 800aa1a:	4608      	mov	r0, r1
 800aa1c:	f000 f86a 	bl	800aaf4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aa20:	20c8      	movs	r0, #200	; 0xc8
 800aa22:	f7f8 f88f 	bl	8002b44 <HAL_Delay>
  return USBH_OK;
}
 800aa26:	2000      	movs	r0, #0
 800aa28:	bd08      	pop	{r3, pc}

0800aa2a <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aa2a:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 800aa2e:	202c      	movs	r0, #44	; 0x2c
 800aa30:	fb00 3101 	mla	r1, r0, r1, r3
 800aa34:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800aa38:	b11b      	cbz	r3, 800aa42 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aa3a:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800aa3e:	2000      	movs	r0, #0
 800aa40:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800aa42:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
 800aa46:	e7fa      	b.n	800aa3e <USBH_LL_SetToggle+0x14>

0800aa48 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800aa48:	f7f8 b87c 	b.w	8002b44 <HAL_Delay>

0800aa4c <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 800aa4c:	2803      	cmp	r0, #3
 800aa4e:	bf9a      	itte	ls
 800aa50:	4b01      	ldrls	r3, [pc, #4]	; (800aa58 <USBH_Get_USB_Status+0xc>)
 800aa52:	5c18      	ldrbls	r0, [r3, r0]
{
 800aa54:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800aa56:	4770      	bx	lr
 800aa58:	08011be5 	.word	0x08011be5

0800aa5c <USBH_LL_Start>:
{
 800aa5c:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 800aa5e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800aa62:	f7f9 fb30 	bl	80040c6 <HAL_HCD_Start>
}
 800aa66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 800aa6a:	f7ff bfef 	b.w	800aa4c <USBH_Get_USB_Status>

0800aa6e <USBH_LL_Stop>:
{
 800aa6e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 800aa70:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800aa74:	f7f9 fb3c 	bl	80040f0 <HAL_HCD_Stop>
}
 800aa78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 800aa7c:	f7ff bfe6 	b.w	800aa4c <USBH_Get_USB_Status>

0800aa80 <USBH_LL_ResetPort>:
{
 800aa80:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 800aa82:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800aa86:	f7f9 fb45 	bl	8004114 <HAL_HCD_ResetPort>
}
 800aa8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 800aa8e:	f7ff bfdd 	b.w	800aa4c <USBH_Get_USB_Status>

0800aa92 <USBH_LL_OpenPipe>:
{
 800aa92:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800aa94:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800aa98:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
 800aa9c:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800aaa0:	9400      	str	r4, [sp, #0]
 800aaa2:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800aaa6:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800aaaa:	f7f8 fe54 	bl	8003756 <HAL_HCD_HC_Init>
}
 800aaae:	b004      	add	sp, #16
 800aab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 800aab4:	f7ff bfca 	b.w	800aa4c <USBH_Get_USB_Status>

0800aab8 <USBH_LL_ClosePipe>:
{
 800aab8:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aaba:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800aabe:	f7f8 fe80 	bl	80037c2 <HAL_HCD_HC_Halt>
}
 800aac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 800aac6:	f7ff bfc1 	b.w	800aa4c <USBH_Get_USB_Status>

0800aaca <USBH_LL_SubmitURB>:
{
 800aaca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800aacc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 800aad0:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 800aad4:	f89d 4020 	ldrb.w	r4, [sp, #32]
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aad8:	e9cd 5602 	strd	r5, r6, [sp, #8]
 800aadc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aade:	e9cd 4500 	strd	r4, r5, [sp]
 800aae2:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 800aae6:	f7f8 fecb 	bl	8003880 <HAL_HCD_HC_SubmitRequest>
}
 800aaea:	b004      	add	sp, #16
 800aaec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aaf0:	f7ff bfac 	b.w	800aa4c <USBH_Get_USB_Status>

0800aaf4 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 800aaf4:	1e02      	subs	r2, r0, #0
 800aaf6:	f04f 0120 	mov.w	r1, #32
 800aafa:	4802      	ldr	r0, [pc, #8]	; (800ab04 <MX_DriverVbusFS+0x10>)
 800aafc:	bf18      	it	ne
 800aafe:	2201      	movne	r2, #1
 800ab00:	f7f8 be24 	b.w	800374c <HAL_GPIO_WritePin>
 800ab04:	40020c00 	.word	0x40020c00

0800ab08 <ai_network_1_create>:
}

AI_API_ENTRY
ai_error ai_network_1_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ab08:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800ab0a:	2305      	movs	r3, #5
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	e9cd 3200 	strd	r3, r2, [sp]
 800ab12:	2301      	movs	r3, #1
 800ab14:	4a02      	ldr	r2, [pc, #8]	; (800ab20 <ai_network_1_create+0x18>)
 800ab16:	f000 fd25 	bl	800b564 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ab1a:	b003      	add	sp, #12
 800ab1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab20:	200008a0 	.word	0x200008a0

0800ab24 <ai_network_1_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_1_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 800ab24:	b910      	cbnz	r0, 800ab2c <ai_network_1_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ab26:	4802      	ldr	r0, [pc, #8]	; (800ab30 <ai_network_1_inputs_get+0xc>)
 800ab28:	4b02      	ldr	r3, [pc, #8]	; (800ab34 <ai_network_1_inputs_get+0x10>)
 800ab2a:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800ab2c:	f000 ba06 	b.w	800af3c <ai_platform_inputs_get>
 800ab30:	200008a0 	.word	0x200008a0
 800ab34:	a1c00100 	.word	0xa1c00100

0800ab38 <ai_network_1_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_1_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 800ab38:	b910      	cbnz	r0, 800ab40 <ai_network_1_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ab3a:	4802      	ldr	r0, [pc, #8]	; (800ab44 <ai_network_1_outputs_get+0xc>)
 800ab3c:	4b02      	ldr	r3, [pc, #8]	; (800ab48 <ai_network_1_outputs_get+0x10>)
 800ab3e:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800ab40:	f000 bb88 	b.w	800b254 <ai_platform_outputs_get>
 800ab44:	200008a0 	.word	0x200008a0
 800ab48:	a1c00100 	.word	0xa1c00100

0800ab4c <ai_network_1_init>:
}

AI_API_ENTRY
ai_bool ai_network_1_init(
  ai_handle network, const ai_network_params* params)
{
 800ab4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab50:	4607      	mov	r7, r0
 800ab52:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800ab54:	f000 fee0 	bl	800b918 <ai_platform_network_init>
  if (!net_ctx) return false;
 800ab58:	4604      	mov	r4, r0
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	f000 8093 	beq.w	800ac86 <ai_network_1_init+0x13a>
  if (ai_platform_get_weights_map(g_network_1_weights_map, 1, params)) {
 800ab60:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800ace8 <ai_network_1_init+0x19c>
 800ab64:	4632      	mov	r2, r6
 800ab66:	2101      	movs	r1, #1
 800ab68:	4640      	mov	r0, r8
 800ab6a:	f000 f931 	bl	800add0 <ai_platform_get_weights_map>
 800ab6e:	4605      	mov	r5, r0
 800ab70:	2800      	cmp	r0, #0
 800ab72:	f000 808a 	beq.w	800ac8a <ai_network_1_init+0x13e>
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800ab76:	4a4b      	ldr	r2, [pc, #300]	; (800aca4 <ai_network_1_init+0x158>)
 800ab78:	6813      	ldr	r3, [r2, #0]
 800ab7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab7e:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 0);
 800ab80:	f8d8 3000 	ldr.w	r3, [r8]
    dense_3_dense_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 0);
 800ab84:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab88:	4a47      	ldr	r2, [pc, #284]	; (800aca8 <ai_network_1_init+0x15c>)
 800ab8a:	6811      	ldr	r1, [r2, #0]
 800ab8c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800ab90:	6011      	str	r1, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 3072);
 800ab92:	f503 6140 	add.w	r1, r3, #3072	; 0xc00
    dense_3_dense_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 3072);
 800ab96:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800ab9a:	4a44      	ldr	r2, [pc, #272]	; (800acac <ai_network_1_init+0x160>)
 800ab9c:	6811      	ldr	r1, [r2, #0]
 800ab9e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800aba2:	6011      	str	r1, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 3096);
 800aba4:	f603 4118 	addw	r1, r3, #3096	; 0xc18
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 3096);
 800aba8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800abac:	4a40      	ldr	r2, [pc, #256]	; (800acb0 <ai_network_1_init+0x164>)
 800abae:	6811      	ldr	r1, [r2, #0]
 800abb0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800abb4:	6011      	str	r1, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 5144);
 800abb6:	f503 51a0 	add.w	r1, r3, #5120	; 0x1400
 800abba:	3118      	adds	r1, #24
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 5144);
 800abbc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800abc0:	4a3c      	ldr	r2, [pc, #240]	; (800acb4 <ai_network_1_init+0x168>)
 800abc2:	6811      	ldr	r1, [r2, #0]
 800abc4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800abc8:	6011      	str	r1, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 5720);
 800abca:	f503 51b2 	add.w	r1, r3, #5696	; 0x1640
 800abce:	3118      	adds	r1, #24
 800abd0:	6091      	str	r1, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 5656);
 800abd2:	f503 51b0 	add.w	r1, r3, #5632	; 0x1600
 800abd6:	3118      	adds	r1, #24
 800abd8:	60d1      	str	r1, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800abda:	4a37      	ldr	r2, [pc, #220]	; (800acb8 <ai_network_1_init+0x16c>)
 800abdc:	6811      	ldr	r1, [r2, #0]
 800abde:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800abe2:	6011      	str	r1, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 366168);
 800abe4:	f503 21b2 	add.w	r1, r3, #364544	; 0x59000
 800abe8:	f501 61cb 	add.w	r1, r1, #1624	; 0x658
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 366168);
 800abec:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800abf0:	4a32      	ldr	r2, [pc, #200]	; (800acbc <ai_network_1_init+0x170>)
 800abf2:	6811      	ldr	r1, [r2, #0]
 800abf4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800abf8:	6011      	str	r1, [r2, #0]
    dense_2_dense_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 366744);
 800abfa:	f503 21b3 	add.w	r1, r3, #366592	; 0x59800
    dense_2_dense_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 374936);
 800abfe:	f503 23b7 	add.w	r3, r3, #374784	; 0x5b800
    dense_2_dense_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 366744);
 800ac02:	f101 0098 	add.w	r0, r1, #152	; 0x98
    dense_2_dense_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 366680);
 800ac06:	3158      	adds	r1, #88	; 0x58
    dense_2_dense_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 374936);
 800ac08:	3398      	adds	r3, #152	; 0x98
    dense_2_dense_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 366680);
 800ac0a:	60d1      	str	r1, [r2, #12]
    dense_2_dense_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 366744);
 800ac0c:	6090      	str	r0, [r2, #8]
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800ac0e:	4a2c      	ldr	r2, [pc, #176]	; (800acc0 <ai_network_1_init+0x174>)
 800ac10:	6811      	ldr	r1, [r2, #0]
 800ac12:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800ac16:	6011      	str	r1, [r2, #0]
    dense_2_dense_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 374936);
 800ac18:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_network_1_activations_map, 1, params)) {
 800ac1c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800acec <ai_network_1_init+0x1a0>
 800ac20:	4632      	mov	r2, r6
 800ac22:	2101      	movs	r1, #1
 800ac24:	4640      	mov	r0, r8
 800ac26:	f000 f92b 	bl	800ae80 <ai_platform_get_activations_map>
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	b398      	cbz	r0, 800ac96 <ai_network_1_init+0x14a>
    input_0_output_array.data = AI_PTR(g_network_1_activations_map[0] + 22472);
 800ac2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac32:	4924      	ldr	r1, [pc, #144]	; (800acc4 <ai_network_1_init+0x178>)
 800ac34:	f503 42af 	add.w	r2, r3, #22400	; 0x5780
 800ac38:	3248      	adds	r2, #72	; 0x48
    input_0_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 22472);
 800ac3a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_conv2d_scratch0_array.data = AI_PTR(g_network_1_activations_map[0] + 23552);
 800ac3e:	f503 41b8 	add.w	r1, r3, #23552	; 0x5c00
 800ac42:	4a21      	ldr	r2, [pc, #132]	; (800acc8 <ai_network_1_init+0x17c>)
    conv2d_1_conv2d_scratch0_array.data_start = AI_PTR(g_network_1_activations_map[0] + 23552);
 800ac44:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 800ac48:	4a20      	ldr	r2, [pc, #128]	; (800accc <ai_network_1_init+0x180>)
    dense_1_dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 22528);
 800ac4a:	f503 41b0 	add.w	r1, r3, #22528	; 0x5800
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 800ac4e:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 22528);
 800ac52:	4a1f      	ldr	r2, [pc, #124]	; (800acd0 <ai_network_1_init+0x184>)
    dense_1_dense_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 22528);
 800ac54:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 800ac58:	4a1e      	ldr	r2, [pc, #120]	; (800acd4 <ai_network_1_init+0x188>)
    dense_2_dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 512);
 800ac5a:	491f      	ldr	r1, [pc, #124]	; (800acd8 <ai_network_1_init+0x18c>)
    dense_1_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 800ac5c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_2_dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 512);
 800ac60:	f503 7200 	add.w	r2, r3, #512	; 0x200
    dense_2_dense_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 512);
 800ac64:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_2_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 800ac68:	491c      	ldr	r1, [pc, #112]	; (800acdc <ai_network_1_init+0x190>)
    dense_2_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 800ac6a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_3_dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 512);
 800ac6e:	491c      	ldr	r1, [pc, #112]	; (800ace0 <ai_network_1_init+0x194>)
    dense_3_dense_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 512);
 800ac70:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_3_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 800ac74:	4a1b      	ldr	r2, [pc, #108]	; (800ace4 <ai_network_1_init+0x198>)
    dense_3_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 800ac76:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_1_configure_weights(net_ctx, params);
  ok &= network_1_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	f000 ffe8 	bl	800bc50 <ai_platform_network_post_init>
 800ac80:	4030      	ands	r0, r6
 800ac82:	4028      	ands	r0, r5
 800ac84:	b2c0      	uxtb	r0, r0

  return ok;
}
 800ac86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800ac8a:	2212      	movs	r2, #18
 800ac8c:	2130      	movs	r1, #48	; 0x30
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f000 f94e 	bl	800af30 <ai_platform_network_set_error>
  return false;
 800ac94:	e7c2      	b.n	800ac1c <ai_network_1_init+0xd0>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800ac96:	2213      	movs	r2, #19
 800ac98:	2130      	movs	r1, #48	; 0x30
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f000 f948 	bl	800af30 <ai_platform_network_set_error>
  return false;
 800aca0:	e7eb      	b.n	800ac7a <ai_network_1_init+0x12e>
 800aca2:	bf00      	nop
 800aca4:	20000844 	.word	0x20000844
 800aca8:	200007d0 	.word	0x200007d0
 800acac:	200005cc 	.word	0x200005cc
 800acb0:	200004d0 	.word	0x200004d0
 800acb4:	2000066c 	.word	0x2000066c
 800acb8:	200005f8 	.word	0x200005f8
 800acbc:	20000758 	.word	0x20000758
 800acc0:	200006e4 	.word	0x200006e4
 800acc4:	20000908 	.word	0x20000908
 800acc8:	200005a0 	.word	0x200005a0
 800accc:	20000574 	.word	0x20000574
 800acd0:	20000640 	.word	0x20000640
 800acd4:	200006b8 	.word	0x200006b8
 800acd8:	2000072c 	.word	0x2000072c
 800acdc:	200007a4 	.word	0x200007a4
 800ace0:	20000818 	.word	0x20000818
 800ace4:	20000890 	.word	0x20000890
 800ace8:	2000a004 	.word	0x2000a004
 800acec:	2000a000 	.word	0x2000a000

0800acf0 <ai_network_1_run>:

AI_API_ENTRY
ai_i32 ai_network_1_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800acf0:	f001 b8d8 	b.w	800bea4 <ai_platform_network_process>

0800acf4 <ai_network_1_data_activations_buffer_get>:
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_1_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_1_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_1_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800acf4:	4a08      	ldr	r2, [pc, #32]	; (800ad18 <ai_network_1_data_activations_buffer_get+0x24>)
{
 800acf6:	b084      	sub	sp, #16
  return buf;
 800acf8:	e9c0 2100 	strd	r2, r1, [r0]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 800ad02:	f8c0 d018 	str.w	sp, [r0, #24]
 800ad06:	e9c0 2202 	strd	r2, r2, [r0, #8]
 800ad0a:	f240 4201 	movw	r2, #1025	; 0x401
 800ad0e:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 800ad12:	b004      	add	sp, #16
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	00040440 	.word	0x00040440

0800ad1c <ai_network_1_data_weights_buffer_get>:
  ai_buffer buf = AI_BUFFER_INIT(
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_1_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_1_DATA_WEIGHTS_COUNT),
    AI_NETWORK_1_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800ad1c:	4a07      	ldr	r2, [pc, #28]	; (800ad3c <ai_network_1_data_weights_buffer_get+0x20>)
{
 800ad1e:	b084      	sub	sp, #16
  return buf;
 800ad20:	e9c0 2100 	strd	r2, r1, [r0]
 800ad24:	2200      	movs	r2, #0
 800ad26:	4906      	ldr	r1, [pc, #24]	; (800ad40 <ai_network_1_data_weights_buffer_get+0x24>)
 800ad28:	f8c0 d018 	str.w	sp, [r0, #24]
 800ad2c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 800ad30:	f240 4201 	movw	r2, #1025	; 0x401
 800ad34:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 800ad38:	b004      	add	sp, #16
 800ad3a:	4770      	bx	lr
 800ad3c:	40040440 	.word	0x40040440
 800ad40:	0005ba98 	.word	0x0005ba98

0800ad44 <ai_network_1_data_weights_get>:
AI_API_ENTRY
ai_handle ai_network_1_data_weights_get(void)
{
  return AI_HANDLE_PTR(g_network_1_weights_table);

}
 800ad44:	4800      	ldr	r0, [pc, #0]	; (800ad48 <ai_network_1_data_weights_get+0x4>)
 800ad46:	4770      	bx	lr
 800ad48:	20000918 	.word	0x20000918

0800ad4c <ai_buffer_get_size>:
 800ad4c:	b368      	cbz	r0, 800adaa <ai_buffer_get_size+0x5e>
 800ad4e:	4b17      	ldr	r3, [pc, #92]	; (800adac <ai_buffer_get_size+0x60>)
 800ad50:	4a17      	ldr	r2, [pc, #92]	; (800adb0 <ai_buffer_get_size+0x64>)
 800ad52:	b410      	push	{r4}
 800ad54:	6804      	ldr	r4, [r0, #0]
 800ad56:	4023      	ands	r3, r4
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d123      	bne.n	800ada4 <ai_buffer_get_size+0x58>
 800ad5c:	b311      	cbz	r1, 800ada4 <ai_buffer_get_size+0x58>
 800ad5e:	6984      	ldr	r4, [r0, #24]
 800ad60:	6862      	ldr	r2, [r4, #4]
 800ad62:	321f      	adds	r2, #31
 800ad64:	f022 021f 	bic.w	r2, r2, #31
 800ad68:	7d03      	ldrb	r3, [r0, #20]
 800ad6a:	6941      	ldr	r1, [r0, #20]
 800ad6c:	f1a3 0301 	sub.w	r3, r3, #1
 800ad70:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800ad74:	fab3 f383 	clz	r3, r3
 800ad78:	095b      	lsrs	r3, r3, #5
 800ad7a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800ad7e:	da0c      	bge.n	800ad9a <ai_buffer_get_size+0x4e>
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d103      	bne.n	800ad8c <ai_buffer_get_size+0x40>
 800ad84:	2802      	cmp	r0, #2
 800ad86:	f04f 0302 	mov.w	r3, #2
 800ad8a:	d006      	beq.n	800ad9a <ai_buffer_get_size+0x4e>
 800ad8c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800ad90:	3301      	adds	r3, #1
 800ad92:	4298      	cmp	r0, r3
 800ad94:	fb01 f202 	mul.w	r2, r1, r2
 800ad98:	d1f2      	bne.n	800ad80 <ai_buffer_get_size+0x34>
 800ad9a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800ad9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	6984      	ldr	r4, [r0, #24]
 800ada6:	6862      	ldr	r2, [r4, #4]
 800ada8:	e7de      	b.n	800ad68 <ai_buffer_get_size+0x1c>
 800adaa:	4770      	bx	lr
 800adac:	017fffff 	.word	0x017fffff
 800adb0:	000400c0 	.word	0x000400c0

0800adb4 <ai_buffer_array_sane>:
 800adb4:	b138      	cbz	r0, 800adc6 <ai_buffer_array_sane+0x12>
 800adb6:	6843      	ldr	r3, [r0, #4]
 800adb8:	b123      	cbz	r3, 800adc4 <ai_buffer_array_sane+0x10>
 800adba:	8840      	ldrh	r0, [r0, #2]
 800adbc:	3800      	subs	r0, #0
 800adbe:	bf18      	it	ne
 800adc0:	2001      	movne	r0, #1
 800adc2:	4770      	bx	lr
 800adc4:	4618      	mov	r0, r3
 800adc6:	4770      	bx	lr

0800adc8 <_ai_platform_acquire_crc>:
 800adc8:	2001      	movs	r0, #1
 800adca:	4770      	bx	lr

0800adcc <_ai_platform_release_crc>:
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop

0800add0 <ai_platform_get_weights_map>:
 800add0:	2900      	cmp	r1, #0
 800add2:	bf18      	it	ne
 800add4:	2800      	cmpne	r0, #0
 800add6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add8:	bf0c      	ite	eq
 800adda:	2401      	moveq	r4, #1
 800addc:	2400      	movne	r4, #0
 800adde:	2a00      	cmp	r2, #0
 800ade0:	bf08      	it	eq
 800ade2:	f044 0401 	orreq.w	r4, r4, #1
 800ade6:	b114      	cbz	r4, 800adee <ai_platform_get_weights_map+0x1e>
 800ade8:	2400      	movs	r4, #0
 800adea:	4620      	mov	r0, r4
 800adec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adee:	4616      	mov	r6, r2
 800adf0:	4b22      	ldr	r3, [pc, #136]	; (800ae7c <ai_platform_get_weights_map+0xac>)
 800adf2:	6812      	ldr	r2, [r2, #0]
 800adf4:	4605      	mov	r5, r0
 800adf6:	460f      	mov	r7, r1
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d022      	beq.n	800ae42 <ai_platform_get_weights_map+0x72>
 800adfc:	6870      	ldr	r0, [r6, #4]
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d0f2      	beq.n	800ade8 <ai_platform_get_weights_map+0x18>
 800ae02:	6806      	ldr	r6, [r0, #0]
 800ae04:	429e      	cmp	r6, r3
 800ae06:	d006      	beq.n	800ae16 <ai_platform_get_weights_map+0x46>
 800ae08:	f1a1 0401 	sub.w	r4, r1, #1
 800ae0c:	6028      	str	r0, [r5, #0]
 800ae0e:	fab4 f484 	clz	r4, r4
 800ae12:	0964      	lsrs	r4, r4, #5
 800ae14:	e7e9      	b.n	800adea <ai_platform_get_weights_map+0x1a>
 800ae16:	3d04      	subs	r5, #4
 800ae18:	4602      	mov	r2, r0
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	e000      	b.n	800ae20 <ai_platform_get_weights_map+0x50>
 800ae1e:	4619      	mov	r1, r3
 800ae20:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800ae24:	42b3      	cmp	r3, r6
 800ae26:	d025      	beq.n	800ae74 <ai_platform_get_weights_map+0xa4>
 800ae28:	f845 3f04 	str.w	r3, [r5, #4]!
 800ae2c:	1c4b      	adds	r3, r1, #1
 800ae2e:	429f      	cmp	r7, r3
 800ae30:	d8f5      	bhi.n	800ae1e <ai_platform_get_weights_map+0x4e>
 800ae32:	d1da      	bne.n	800adea <ai_platform_get_weights_map+0x1a>
 800ae34:	3102      	adds	r1, #2
 800ae36:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800ae3a:	42b3      	cmp	r3, r6
 800ae3c:	d1d5      	bne.n	800adea <ai_platform_get_weights_map+0x1a>
 800ae3e:	2401      	movs	r4, #1
 800ae40:	e7d3      	b.n	800adea <ai_platform_get_weights_map+0x1a>
 800ae42:	1d30      	adds	r0, r6, #4
 800ae44:	f7ff ffb6 	bl	800adb4 <ai_buffer_array_sane>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d0cd      	beq.n	800ade8 <ai_platform_get_weights_map+0x18>
 800ae4c:	88f3      	ldrh	r3, [r6, #6]
 800ae4e:	429f      	cmp	r7, r3
 800ae50:	d1ca      	bne.n	800ade8 <ai_platform_get_weights_map+0x18>
 800ae52:	3d04      	subs	r5, #4
 800ae54:	4622      	mov	r2, r4
 800ae56:	68b3      	ldr	r3, [r6, #8]
 800ae58:	4423      	add	r3, r4
 800ae5a:	341c      	adds	r4, #28
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	b123      	cbz	r3, 800ae6a <ai_platform_get_weights_map+0x9a>
 800ae60:	3201      	adds	r2, #1
 800ae62:	f845 3f04 	str.w	r3, [r5, #4]!
 800ae66:	4297      	cmp	r7, r2
 800ae68:	d8f5      	bhi.n	800ae56 <ai_platform_get_weights_map+0x86>
 800ae6a:	1abc      	subs	r4, r7, r2
 800ae6c:	fab4 f484 	clz	r4, r4
 800ae70:	0964      	lsrs	r4, r4, #5
 800ae72:	e7ba      	b.n	800adea <ai_platform_get_weights_map+0x1a>
 800ae74:	428f      	cmp	r7, r1
 800ae76:	d1b8      	bne.n	800adea <ai_platform_get_weights_map+0x1a>
 800ae78:	e7e1      	b.n	800ae3e <ai_platform_get_weights_map+0x6e>
 800ae7a:	bf00      	nop
 800ae7c:	a1facade 	.word	0xa1facade

0800ae80 <ai_platform_get_activations_map>:
 800ae80:	2900      	cmp	r1, #0
 800ae82:	bf18      	it	ne
 800ae84:	2800      	cmpne	r0, #0
 800ae86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae88:	bf0c      	ite	eq
 800ae8a:	2401      	moveq	r4, #1
 800ae8c:	2400      	movne	r4, #0
 800ae8e:	2a00      	cmp	r2, #0
 800ae90:	bf08      	it	eq
 800ae92:	f044 0401 	orreq.w	r4, r4, #1
 800ae96:	b114      	cbz	r4, 800ae9e <ai_platform_get_activations_map+0x1e>
 800ae98:	2400      	movs	r4, #0
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae9e:	4616      	mov	r6, r2
 800aea0:	4b22      	ldr	r3, [pc, #136]	; (800af2c <ai_platform_get_activations_map+0xac>)
 800aea2:	6812      	ldr	r2, [r2, #0]
 800aea4:	4605      	mov	r5, r0
 800aea6:	460f      	mov	r7, r1
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d022      	beq.n	800aef2 <ai_platform_get_activations_map+0x72>
 800aeac:	6a30      	ldr	r0, [r6, #32]
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d0f2      	beq.n	800ae98 <ai_platform_get_activations_map+0x18>
 800aeb2:	6806      	ldr	r6, [r0, #0]
 800aeb4:	429e      	cmp	r6, r3
 800aeb6:	d006      	beq.n	800aec6 <ai_platform_get_activations_map+0x46>
 800aeb8:	f1a1 0401 	sub.w	r4, r1, #1
 800aebc:	6028      	str	r0, [r5, #0]
 800aebe:	fab4 f484 	clz	r4, r4
 800aec2:	0964      	lsrs	r4, r4, #5
 800aec4:	e7e9      	b.n	800ae9a <ai_platform_get_activations_map+0x1a>
 800aec6:	3d04      	subs	r5, #4
 800aec8:	4602      	mov	r2, r0
 800aeca:	4621      	mov	r1, r4
 800aecc:	e000      	b.n	800aed0 <ai_platform_get_activations_map+0x50>
 800aece:	4619      	mov	r1, r3
 800aed0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800aed4:	42b3      	cmp	r3, r6
 800aed6:	d026      	beq.n	800af26 <ai_platform_get_activations_map+0xa6>
 800aed8:	f845 3f04 	str.w	r3, [r5, #4]!
 800aedc:	1c4b      	adds	r3, r1, #1
 800aede:	429f      	cmp	r7, r3
 800aee0:	d8f5      	bhi.n	800aece <ai_platform_get_activations_map+0x4e>
 800aee2:	d1da      	bne.n	800ae9a <ai_platform_get_activations_map+0x1a>
 800aee4:	3102      	adds	r1, #2
 800aee6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800aeea:	42b3      	cmp	r3, r6
 800aeec:	d1d5      	bne.n	800ae9a <ai_platform_get_activations_map+0x1a>
 800aeee:	2401      	movs	r4, #1
 800aef0:	e7d3      	b.n	800ae9a <ai_platform_get_activations_map+0x1a>
 800aef2:	f106 000c 	add.w	r0, r6, #12
 800aef6:	f7ff ff5d 	bl	800adb4 <ai_buffer_array_sane>
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d0cc      	beq.n	800ae98 <ai_platform_get_activations_map+0x18>
 800aefe:	89f3      	ldrh	r3, [r6, #14]
 800af00:	429f      	cmp	r7, r3
 800af02:	d1c9      	bne.n	800ae98 <ai_platform_get_activations_map+0x18>
 800af04:	3d04      	subs	r5, #4
 800af06:	4622      	mov	r2, r4
 800af08:	6933      	ldr	r3, [r6, #16]
 800af0a:	4423      	add	r3, r4
 800af0c:	341c      	adds	r4, #28
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	b123      	cbz	r3, 800af1c <ai_platform_get_activations_map+0x9c>
 800af12:	3201      	adds	r2, #1
 800af14:	f845 3f04 	str.w	r3, [r5, #4]!
 800af18:	4297      	cmp	r7, r2
 800af1a:	d8f5      	bhi.n	800af08 <ai_platform_get_activations_map+0x88>
 800af1c:	1abc      	subs	r4, r7, r2
 800af1e:	fab4 f484 	clz	r4, r4
 800af22:	0964      	lsrs	r4, r4, #5
 800af24:	e7b9      	b.n	800ae9a <ai_platform_get_activations_map+0x1a>
 800af26:	428f      	cmp	r7, r1
 800af28:	d1b7      	bne.n	800ae9a <ai_platform_get_activations_map+0x1a>
 800af2a:	e7e0      	b.n	800aeee <ai_platform_get_activations_map+0x6e>
 800af2c:	a1facade 	.word	0xa1facade

0800af30 <ai_platform_network_set_error>:
 800af30:	b110      	cbz	r0, 800af38 <ai_platform_network_set_error+0x8>
 800af32:	3010      	adds	r0, #16
 800af34:	f001 ba96 	b.w	800c464 <core_set_error>
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop

0800af3c <ai_platform_inputs_get>:
 800af3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af40:	b085      	sub	sp, #20
 800af42:	9102      	str	r1, [sp, #8]
 800af44:	2800      	cmp	r0, #0
 800af46:	f000 8093 	beq.w	800b070 <ai_platform_inputs_get+0x134>
 800af4a:	4baa      	ldr	r3, [pc, #680]	; (800b1f4 <ai_platform_inputs_get+0x2b8>)
 800af4c:	4681      	mov	r9, r0
 800af4e:	6802      	ldr	r2, [r0, #0]
 800af50:	429a      	cmp	r2, r3
 800af52:	f040 808d 	bne.w	800b070 <ai_platform_inputs_get+0x134>
 800af56:	f7ff ff37 	bl	800adc8 <_ai_platform_acquire_crc>
 800af5a:	4ba7      	ldr	r3, [pc, #668]	; (800b1f8 <ai_platform_inputs_get+0x2bc>)
 800af5c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af66:	189a      	adds	r2, r3, r2
 800af68:	2a01      	cmp	r2, #1
 800af6a:	f240 80da 	bls.w	800b122 <ai_platform_inputs_get+0x1e6>
 800af6e:	f240 4249 	movw	r2, #1097	; 0x449
 800af72:	4293      	cmp	r3, r2
 800af74:	f000 80d5 	beq.w	800b122 <ai_platform_inputs_get+0x1e6>
 800af78:	4aa0      	ldr	r2, [pc, #640]	; (800b1fc <ai_platform_inputs_get+0x2c0>)
 800af7a:	6813      	ldr	r3, [r2, #0]
 800af7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af80:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800af84:	f000 80dc 	beq.w	800b140 <ai_platform_inputs_get+0x204>
 800af88:	6813      	ldr	r3, [r2, #0]
 800af8a:	f240 4183 	movw	r1, #1155	; 0x483
 800af8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af92:	428b      	cmp	r3, r1
 800af94:	f000 810e 	beq.w	800b1b4 <ai_platform_inputs_get+0x278>
 800af98:	6813      	ldr	r3, [r2, #0]
 800af9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af9e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800afa2:	f000 8143 	beq.w	800b22c <ai_platform_inputs_get+0x2f0>
 800afa6:	6813      	ldr	r3, [r2, #0]
 800afa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 8113 	beq.w	800b1d8 <ai_platform_inputs_get+0x29c>
 800afb2:	f7ff ff0b 	bl	800adcc <_ai_platform_release_crc>
 800afb6:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 80d2 	beq.w	800b164 <ai_platform_inputs_get+0x228>
 800afc0:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800afc4:	f1ba 0f00 	cmp.w	sl, #0
 800afc8:	f000 80cc 	beq.w	800b164 <ai_platform_inputs_get+0x228>
 800afcc:	2100      	movs	r1, #0
 800afce:	f8cd 900c 	str.w	r9, [sp, #12]
 800afd2:	460d      	mov	r5, r1
 800afd4:	4689      	mov	r9, r1
 800afd6:	e016      	b.n	800b006 <ai_platform_inputs_get+0xca>
 800afd8:	9a01      	ldr	r2, [sp, #4]
 800afda:	2301      	movs	r3, #1
 800afdc:	f848 3002 	str.w	r3, [r8, r2]
 800afe0:	69b2      	ldr	r2, [r6, #24]
 800afe2:	f04f 0301 	mov.w	r3, #1
 800afe6:	6856      	ldr	r6, [r2, #4]
 800afe8:	3501      	adds	r5, #1
 800afea:	f109 091c 	add.w	r9, r9, #28
 800afee:	7523      	strb	r3, [r4, #20]
 800aff0:	2300      	movs	r3, #0
 800aff2:	6962      	ldr	r2, [r4, #20]
 800aff4:	60a7      	str	r7, [r4, #8]
 800aff6:	f36b 221f 	bfi	r2, fp, #8, #24
 800affa:	6126      	str	r6, [r4, #16]
 800affc:	61a1      	str	r1, [r4, #24]
 800affe:	60e3      	str	r3, [r4, #12]
 800b000:	6162      	str	r2, [r4, #20]
 800b002:	e9c4 0c00 	strd	r0, ip, [r4]
 800b006:	f8ba 3000 	ldrh.w	r3, [sl]
 800b00a:	b2ac      	uxth	r4, r5
 800b00c:	42ab      	cmp	r3, r5
 800b00e:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800b012:	9301      	str	r3, [sp, #4]
 800b014:	f240 80b5 	bls.w	800b182 <ai_platform_inputs_get+0x246>
 800b018:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 80b0 	beq.w	800b182 <ai_platform_inputs_get+0x246>
 800b022:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b026:	2e00      	cmp	r6, #0
 800b028:	f000 80ab 	beq.w	800b182 <ai_platform_inputs_get+0x246>
 800b02c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b030:	69b2      	ldr	r2, [r6, #24]
 800b032:	68f1      	ldr	r1, [r6, #12]
 800b034:	6810      	ldr	r0, [r2, #0]
 800b036:	9100      	str	r1, [sp, #0]
 800b038:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800b03c:	68b3      	ldr	r3, [r6, #8]
 800b03e:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800b042:	444c      	add	r4, r9
 800b044:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800b048:	f003 fbf0 	bl	800e82c <ai_array_to_buffer_fmt>
 800b04c:	69b2      	ldr	r2, [r6, #24]
 800b04e:	9900      	ldr	r1, [sp, #0]
 800b050:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b054:	2f00      	cmp	r7, #0
 800b056:	d0c4      	beq.n	800afe2 <ai_platform_inputs_get+0xa6>
 800b058:	2200      	movs	r2, #0
 800b05a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800b05e:	6832      	ldr	r2, [r6, #0]
 800b060:	607a      	str	r2, [r7, #4]
 800b062:	b112      	cbz	r2, 800b06a <ai_platform_inputs_get+0x12e>
 800b064:	8852      	ldrh	r2, [r2, #2]
 800b066:	2a00      	cmp	r2, #0
 800b068:	d1b6      	bne.n	800afd8 <ai_platform_inputs_get+0x9c>
 800b06a:	69b2      	ldr	r2, [r6, #24]
 800b06c:	2700      	movs	r7, #0
 800b06e:	e7b8      	b.n	800afe2 <ai_platform_inputs_get+0xa6>
 800b070:	f7ff feaa 	bl	800adc8 <_ai_platform_acquire_crc>
 800b074:	4b60      	ldr	r3, [pc, #384]	; (800b1f8 <ai_platform_inputs_get+0x2bc>)
 800b076:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b080:	185a      	adds	r2, r3, r1
 800b082:	2a01      	cmp	r2, #1
 800b084:	d92a      	bls.n	800b0dc <ai_platform_inputs_get+0x1a0>
 800b086:	f240 4249 	movw	r2, #1097	; 0x449
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d026      	beq.n	800b0dc <ai_platform_inputs_get+0x1a0>
 800b08e:	4a5b      	ldr	r2, [pc, #364]	; (800b1fc <ai_platform_inputs_get+0x2c0>)
 800b090:	6813      	ldr	r3, [r2, #0]
 800b092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b096:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b09a:	d02c      	beq.n	800b0f6 <ai_platform_inputs_get+0x1ba>
 800b09c:	6813      	ldr	r3, [r2, #0]
 800b09e:	f240 4183 	movw	r1, #1155	; 0x483
 800b0a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0a6:	428b      	cmp	r3, r1
 800b0a8:	d073      	beq.n	800b192 <ai_platform_inputs_get+0x256>
 800b0aa:	6813      	ldr	r3, [r2, #0]
 800b0ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0b0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b0b4:	f000 80ac 	beq.w	800b210 <ai_platform_inputs_get+0x2d4>
 800b0b8:	6813      	ldr	r3, [r2, #0]
 800b0ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d129      	bne.n	800b116 <ai_platform_inputs_get+0x1da>
 800b0c2:	4a4f      	ldr	r2, [pc, #316]	; (800b200 <ai_platform_inputs_get+0x2c4>)
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	6093      	str	r3, [r2, #8]
 800b0c8:	6893      	ldr	r3, [r2, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1fc      	bne.n	800b0c8 <ai_platform_inputs_get+0x18c>
 800b0ce:	494d      	ldr	r1, [pc, #308]	; (800b204 <ai_platform_inputs_get+0x2c8>)
 800b0d0:	4b4d      	ldr	r3, [pc, #308]	; (800b208 <ai_platform_inputs_get+0x2cc>)
 800b0d2:	6011      	str	r1, [r2, #0]
 800b0d4:	6812      	ldr	r2, [r2, #0]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d01d      	beq.n	800b116 <ai_platform_inputs_get+0x1da>
 800b0da:	e7fe      	b.n	800b0da <ai_platform_inputs_get+0x19e>
 800b0dc:	4a48      	ldr	r2, [pc, #288]	; (800b200 <ai_platform_inputs_get+0x2c4>)
 800b0de:	2301      	movs	r3, #1
 800b0e0:	6093      	str	r3, [r2, #8]
 800b0e2:	6893      	ldr	r3, [r2, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1fc      	bne.n	800b0e2 <ai_platform_inputs_get+0x1a6>
 800b0e8:	4946      	ldr	r1, [pc, #280]	; (800b204 <ai_platform_inputs_get+0x2c8>)
 800b0ea:	4b47      	ldr	r3, [pc, #284]	; (800b208 <ai_platform_inputs_get+0x2cc>)
 800b0ec:	6011      	str	r1, [r2, #0]
 800b0ee:	6812      	ldr	r2, [r2, #0]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d010      	beq.n	800b116 <ai_platform_inputs_get+0x1da>
 800b0f4:	e7fe      	b.n	800b0f4 <ai_platform_inputs_get+0x1b8>
 800b0f6:	4a45      	ldr	r2, [pc, #276]	; (800b20c <ai_platform_inputs_get+0x2d0>)
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b0fe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1fb      	bne.n	800b0fe <ai_platform_inputs_get+0x1c2>
 800b106:	493f      	ldr	r1, [pc, #252]	; (800b204 <ai_platform_inputs_get+0x2c8>)
 800b108:	4b3f      	ldr	r3, [pc, #252]	; (800b208 <ai_platform_inputs_get+0x2cc>)
 800b10a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b10e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b112:	429a      	cmp	r2, r3
 800b114:	d113      	bne.n	800b13e <ai_platform_inputs_get+0x202>
 800b116:	f7ff fe59 	bl	800adcc <_ai_platform_release_crc>
 800b11a:	2000      	movs	r0, #0
 800b11c:	b005      	add	sp, #20
 800b11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b122:	4a37      	ldr	r2, [pc, #220]	; (800b200 <ai_platform_inputs_get+0x2c4>)
 800b124:	2301      	movs	r3, #1
 800b126:	6093      	str	r3, [r2, #8]
 800b128:	6893      	ldr	r3, [r2, #8]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1fc      	bne.n	800b128 <ai_platform_inputs_get+0x1ec>
 800b12e:	4b35      	ldr	r3, [pc, #212]	; (800b204 <ai_platform_inputs_get+0x2c8>)
 800b130:	6013      	str	r3, [r2, #0]
 800b132:	4b35      	ldr	r3, [pc, #212]	; (800b208 <ai_platform_inputs_get+0x2cc>)
 800b134:	6812      	ldr	r2, [r2, #0]
 800b136:	429a      	cmp	r2, r3
 800b138:	f43f af3b 	beq.w	800afb2 <ai_platform_inputs_get+0x76>
 800b13c:	e7fe      	b.n	800b13c <ai_platform_inputs_get+0x200>
 800b13e:	e7fe      	b.n	800b13e <ai_platform_inputs_get+0x202>
 800b140:	4a32      	ldr	r2, [pc, #200]	; (800b20c <ai_platform_inputs_get+0x2d0>)
 800b142:	2301      	movs	r3, #1
 800b144:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b148:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1fb      	bne.n	800b148 <ai_platform_inputs_get+0x20c>
 800b150:	4b2c      	ldr	r3, [pc, #176]	; (800b204 <ai_platform_inputs_get+0x2c8>)
 800b152:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b156:	4b2c      	ldr	r3, [pc, #176]	; (800b208 <ai_platform_inputs_get+0x2cc>)
 800b158:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b15c:	429a      	cmp	r2, r3
 800b15e:	f43f af28 	beq.w	800afb2 <ai_platform_inputs_get+0x76>
 800b162:	e7fe      	b.n	800b162 <ai_platform_inputs_get+0x226>
 800b164:	2400      	movs	r4, #0
 800b166:	2218      	movs	r2, #24
 800b168:	2111      	movs	r1, #17
 800b16a:	f109 0010 	add.w	r0, r9, #16
 800b16e:	f001 f979 	bl	800c464 <core_set_error>
 800b172:	4620      	mov	r0, r4
 800b174:	9b02      	ldr	r3, [sp, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d0d0      	beq.n	800b11c <ai_platform_inputs_get+0x1e0>
 800b17a:	801c      	strh	r4, [r3, #0]
 800b17c:	b005      	add	sp, #20
 800b17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b182:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b186:	2c00      	cmp	r4, #0
 800b188:	d0ec      	beq.n	800b164 <ai_platform_inputs_get+0x228>
 800b18a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b18e:	6858      	ldr	r0, [r3, #4]
 800b190:	e7f0      	b.n	800b174 <ai_platform_inputs_get+0x238>
 800b192:	4a1e      	ldr	r2, [pc, #120]	; (800b20c <ai_platform_inputs_get+0x2d0>)
 800b194:	2301      	movs	r3, #1
 800b196:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b19a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1fb      	bne.n	800b19a <ai_platform_inputs_get+0x25e>
 800b1a2:	4918      	ldr	r1, [pc, #96]	; (800b204 <ai_platform_inputs_get+0x2c8>)
 800b1a4:	4b18      	ldr	r3, [pc, #96]	; (800b208 <ai_platform_inputs_get+0x2cc>)
 800b1a6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b1aa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d0b1      	beq.n	800b116 <ai_platform_inputs_get+0x1da>
 800b1b2:	e7fe      	b.n	800b1b2 <ai_platform_inputs_get+0x276>
 800b1b4:	4a15      	ldr	r2, [pc, #84]	; (800b20c <ai_platform_inputs_get+0x2d0>)
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b1bc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1fb      	bne.n	800b1bc <ai_platform_inputs_get+0x280>
 800b1c4:	4b0f      	ldr	r3, [pc, #60]	; (800b204 <ai_platform_inputs_get+0x2c8>)
 800b1c6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b1ca:	4b0f      	ldr	r3, [pc, #60]	; (800b208 <ai_platform_inputs_get+0x2cc>)
 800b1cc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	f43f aeee 	beq.w	800afb2 <ai_platform_inputs_get+0x76>
 800b1d6:	e7fe      	b.n	800b1d6 <ai_platform_inputs_get+0x29a>
 800b1d8:	4a09      	ldr	r2, [pc, #36]	; (800b200 <ai_platform_inputs_get+0x2c4>)
 800b1da:	2301      	movs	r3, #1
 800b1dc:	6093      	str	r3, [r2, #8]
 800b1de:	6893      	ldr	r3, [r2, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1fc      	bne.n	800b1de <ai_platform_inputs_get+0x2a2>
 800b1e4:	4b07      	ldr	r3, [pc, #28]	; (800b204 <ai_platform_inputs_get+0x2c8>)
 800b1e6:	6013      	str	r3, [r2, #0]
 800b1e8:	4b07      	ldr	r3, [pc, #28]	; (800b208 <ai_platform_inputs_get+0x2cc>)
 800b1ea:	6812      	ldr	r2, [r2, #0]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	f43f aee0 	beq.w	800afb2 <ai_platform_inputs_get+0x76>
 800b1f2:	e7fe      	b.n	800b1f2 <ai_platform_inputs_get+0x2b6>
 800b1f4:	a1c00100 	.word	0xa1c00100
 800b1f8:	e0042000 	.word	0xe0042000
 800b1fc:	5c001000 	.word	0x5c001000
 800b200:	40023000 	.word	0x40023000
 800b204:	f407a5c2 	.word	0xf407a5c2
 800b208:	b5e8b5cd 	.word	0xb5e8b5cd
 800b20c:	58024000 	.word	0x58024000
 800b210:	4a0d      	ldr	r2, [pc, #52]	; (800b248 <ai_platform_inputs_get+0x30c>)
 800b212:	2301      	movs	r3, #1
 800b214:	6093      	str	r3, [r2, #8]
 800b216:	6893      	ldr	r3, [r2, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1fc      	bne.n	800b216 <ai_platform_inputs_get+0x2da>
 800b21c:	490b      	ldr	r1, [pc, #44]	; (800b24c <ai_platform_inputs_get+0x310>)
 800b21e:	4b0c      	ldr	r3, [pc, #48]	; (800b250 <ai_platform_inputs_get+0x314>)
 800b220:	6011      	str	r1, [r2, #0]
 800b222:	6812      	ldr	r2, [r2, #0]
 800b224:	429a      	cmp	r2, r3
 800b226:	f43f af76 	beq.w	800b116 <ai_platform_inputs_get+0x1da>
 800b22a:	e7fe      	b.n	800b22a <ai_platform_inputs_get+0x2ee>
 800b22c:	4a06      	ldr	r2, [pc, #24]	; (800b248 <ai_platform_inputs_get+0x30c>)
 800b22e:	2301      	movs	r3, #1
 800b230:	6093      	str	r3, [r2, #8]
 800b232:	6893      	ldr	r3, [r2, #8]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1fc      	bne.n	800b232 <ai_platform_inputs_get+0x2f6>
 800b238:	4b04      	ldr	r3, [pc, #16]	; (800b24c <ai_platform_inputs_get+0x310>)
 800b23a:	6013      	str	r3, [r2, #0]
 800b23c:	4b04      	ldr	r3, [pc, #16]	; (800b250 <ai_platform_inputs_get+0x314>)
 800b23e:	6812      	ldr	r2, [r2, #0]
 800b240:	429a      	cmp	r2, r3
 800b242:	f43f aeb6 	beq.w	800afb2 <ai_platform_inputs_get+0x76>
 800b246:	e7fe      	b.n	800b246 <ai_platform_inputs_get+0x30a>
 800b248:	40023000 	.word	0x40023000
 800b24c:	f407a5c2 	.word	0xf407a5c2
 800b250:	b5e8b5cd 	.word	0xb5e8b5cd

0800b254 <ai_platform_outputs_get>:
 800b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b258:	b085      	sub	sp, #20
 800b25a:	9102      	str	r1, [sp, #8]
 800b25c:	2800      	cmp	r0, #0
 800b25e:	f000 808f 	beq.w	800b380 <ai_platform_outputs_get+0x12c>
 800b262:	4ba8      	ldr	r3, [pc, #672]	; (800b504 <ai_platform_outputs_get+0x2b0>)
 800b264:	4681      	mov	r9, r0
 800b266:	6802      	ldr	r2, [r0, #0]
 800b268:	429a      	cmp	r2, r3
 800b26a:	f040 8089 	bne.w	800b380 <ai_platform_outputs_get+0x12c>
 800b26e:	f7ff fdab 	bl	800adc8 <_ai_platform_acquire_crc>
 800b272:	4ba5      	ldr	r3, [pc, #660]	; (800b508 <ai_platform_outputs_get+0x2b4>)
 800b274:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b27e:	189a      	adds	r2, r3, r2
 800b280:	2a01      	cmp	r2, #1
 800b282:	f240 80d6 	bls.w	800b432 <ai_platform_outputs_get+0x1de>
 800b286:	f240 4249 	movw	r2, #1097	; 0x449
 800b28a:	4293      	cmp	r3, r2
 800b28c:	f000 80d1 	beq.w	800b432 <ai_platform_outputs_get+0x1de>
 800b290:	4a9e      	ldr	r2, [pc, #632]	; (800b50c <ai_platform_outputs_get+0x2b8>)
 800b292:	6813      	ldr	r3, [r2, #0]
 800b294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b298:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b29c:	f000 80d8 	beq.w	800b450 <ai_platform_outputs_get+0x1fc>
 800b2a0:	6813      	ldr	r3, [r2, #0]
 800b2a2:	f240 4183 	movw	r1, #1155	; 0x483
 800b2a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2aa:	428b      	cmp	r3, r1
 800b2ac:	f000 8109 	beq.w	800b4c2 <ai_platform_outputs_get+0x26e>
 800b2b0:	6813      	ldr	r3, [r2, #0]
 800b2b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2b6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b2ba:	f000 813f 	beq.w	800b53c <ai_platform_outputs_get+0x2e8>
 800b2be:	6813      	ldr	r3, [r2, #0]
 800b2c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f000 810e 	beq.w	800b4e6 <ai_platform_outputs_get+0x292>
 800b2ca:	f7ff fd7f 	bl	800adcc <_ai_platform_release_crc>
 800b2ce:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	f240 80db 	bls.w	800b48e <ai_platform_outputs_get+0x23a>
 800b2d8:	2100      	movs	r1, #0
 800b2da:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800b2de:	f8cd 900c 	str.w	r9, [sp, #12]
 800b2e2:	460d      	mov	r5, r1
 800b2e4:	4689      	mov	r9, r1
 800b2e6:	e016      	b.n	800b316 <ai_platform_outputs_get+0xc2>
 800b2e8:	9a01      	ldr	r2, [sp, #4]
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	f848 3002 	str.w	r3, [r8, r2]
 800b2f0:	69b2      	ldr	r2, [r6, #24]
 800b2f2:	f04f 0301 	mov.w	r3, #1
 800b2f6:	6856      	ldr	r6, [r2, #4]
 800b2f8:	3501      	adds	r5, #1
 800b2fa:	f109 091c 	add.w	r9, r9, #28
 800b2fe:	7523      	strb	r3, [r4, #20]
 800b300:	2300      	movs	r3, #0
 800b302:	6962      	ldr	r2, [r4, #20]
 800b304:	60a7      	str	r7, [r4, #8]
 800b306:	f36b 221f 	bfi	r2, fp, #8, #24
 800b30a:	6126      	str	r6, [r4, #16]
 800b30c:	61a1      	str	r1, [r4, #24]
 800b30e:	60e3      	str	r3, [r4, #12]
 800b310:	6162      	str	r2, [r4, #20]
 800b312:	e9c4 0c00 	strd	r0, ip, [r4]
 800b316:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800b31a:	b2ac      	uxth	r4, r5
 800b31c:	42ab      	cmp	r3, r5
 800b31e:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800b322:	9301      	str	r3, [sp, #4]
 800b324:	f240 80a6 	bls.w	800b474 <ai_platform_outputs_get+0x220>
 800b328:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f000 80a1 	beq.w	800b474 <ai_platform_outputs_get+0x220>
 800b332:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b336:	2e00      	cmp	r6, #0
 800b338:	f000 809c 	beq.w	800b474 <ai_platform_outputs_get+0x220>
 800b33c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b340:	69b2      	ldr	r2, [r6, #24]
 800b342:	68f1      	ldr	r1, [r6, #12]
 800b344:	6810      	ldr	r0, [r2, #0]
 800b346:	9100      	str	r1, [sp, #0]
 800b348:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800b34c:	68b3      	ldr	r3, [r6, #8]
 800b34e:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800b352:	444c      	add	r4, r9
 800b354:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800b358:	f003 fa68 	bl	800e82c <ai_array_to_buffer_fmt>
 800b35c:	69b2      	ldr	r2, [r6, #24]
 800b35e:	9900      	ldr	r1, [sp, #0]
 800b360:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b364:	2f00      	cmp	r7, #0
 800b366:	d0c4      	beq.n	800b2f2 <ai_platform_outputs_get+0x9e>
 800b368:	2200      	movs	r2, #0
 800b36a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800b36e:	6832      	ldr	r2, [r6, #0]
 800b370:	607a      	str	r2, [r7, #4]
 800b372:	b112      	cbz	r2, 800b37a <ai_platform_outputs_get+0x126>
 800b374:	8852      	ldrh	r2, [r2, #2]
 800b376:	2a00      	cmp	r2, #0
 800b378:	d1b6      	bne.n	800b2e8 <ai_platform_outputs_get+0x94>
 800b37a:	69b2      	ldr	r2, [r6, #24]
 800b37c:	2700      	movs	r7, #0
 800b37e:	e7b8      	b.n	800b2f2 <ai_platform_outputs_get+0x9e>
 800b380:	f7ff fd22 	bl	800adc8 <_ai_platform_acquire_crc>
 800b384:	4b60      	ldr	r3, [pc, #384]	; (800b508 <ai_platform_outputs_get+0x2b4>)
 800b386:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b390:	185a      	adds	r2, r3, r1
 800b392:	2a01      	cmp	r2, #1
 800b394:	d92a      	bls.n	800b3ec <ai_platform_outputs_get+0x198>
 800b396:	f240 4249 	movw	r2, #1097	; 0x449
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d026      	beq.n	800b3ec <ai_platform_outputs_get+0x198>
 800b39e:	4a5b      	ldr	r2, [pc, #364]	; (800b50c <ai_platform_outputs_get+0x2b8>)
 800b3a0:	6813      	ldr	r3, [r2, #0]
 800b3a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b3a6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b3aa:	d02c      	beq.n	800b406 <ai_platform_outputs_get+0x1b2>
 800b3ac:	6813      	ldr	r3, [r2, #0]
 800b3ae:	f240 4183 	movw	r1, #1155	; 0x483
 800b3b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b3b6:	428b      	cmp	r3, r1
 800b3b8:	d072      	beq.n	800b4a0 <ai_platform_outputs_get+0x24c>
 800b3ba:	6813      	ldr	r3, [r2, #0]
 800b3bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b3c0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b3c4:	f000 80ac 	beq.w	800b520 <ai_platform_outputs_get+0x2cc>
 800b3c8:	6813      	ldr	r3, [r2, #0]
 800b3ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d129      	bne.n	800b426 <ai_platform_outputs_get+0x1d2>
 800b3d2:	4a4f      	ldr	r2, [pc, #316]	; (800b510 <ai_platform_outputs_get+0x2bc>)
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	6093      	str	r3, [r2, #8]
 800b3d8:	6893      	ldr	r3, [r2, #8]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1fc      	bne.n	800b3d8 <ai_platform_outputs_get+0x184>
 800b3de:	494d      	ldr	r1, [pc, #308]	; (800b514 <ai_platform_outputs_get+0x2c0>)
 800b3e0:	4b4d      	ldr	r3, [pc, #308]	; (800b518 <ai_platform_outputs_get+0x2c4>)
 800b3e2:	6011      	str	r1, [r2, #0]
 800b3e4:	6812      	ldr	r2, [r2, #0]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d01d      	beq.n	800b426 <ai_platform_outputs_get+0x1d2>
 800b3ea:	e7fe      	b.n	800b3ea <ai_platform_outputs_get+0x196>
 800b3ec:	4a48      	ldr	r2, [pc, #288]	; (800b510 <ai_platform_outputs_get+0x2bc>)
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	6093      	str	r3, [r2, #8]
 800b3f2:	6893      	ldr	r3, [r2, #8]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d1fc      	bne.n	800b3f2 <ai_platform_outputs_get+0x19e>
 800b3f8:	4946      	ldr	r1, [pc, #280]	; (800b514 <ai_platform_outputs_get+0x2c0>)
 800b3fa:	4b47      	ldr	r3, [pc, #284]	; (800b518 <ai_platform_outputs_get+0x2c4>)
 800b3fc:	6011      	str	r1, [r2, #0]
 800b3fe:	6812      	ldr	r2, [r2, #0]
 800b400:	429a      	cmp	r2, r3
 800b402:	d010      	beq.n	800b426 <ai_platform_outputs_get+0x1d2>
 800b404:	e7fe      	b.n	800b404 <ai_platform_outputs_get+0x1b0>
 800b406:	4a45      	ldr	r2, [pc, #276]	; (800b51c <ai_platform_outputs_get+0x2c8>)
 800b408:	2301      	movs	r3, #1
 800b40a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b40e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1fb      	bne.n	800b40e <ai_platform_outputs_get+0x1ba>
 800b416:	493f      	ldr	r1, [pc, #252]	; (800b514 <ai_platform_outputs_get+0x2c0>)
 800b418:	4b3f      	ldr	r3, [pc, #252]	; (800b518 <ai_platform_outputs_get+0x2c4>)
 800b41a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b41e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b422:	429a      	cmp	r2, r3
 800b424:	d113      	bne.n	800b44e <ai_platform_outputs_get+0x1fa>
 800b426:	f7ff fcd1 	bl	800adcc <_ai_platform_release_crc>
 800b42a:	2000      	movs	r0, #0
 800b42c:	b005      	add	sp, #20
 800b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b432:	4a37      	ldr	r2, [pc, #220]	; (800b510 <ai_platform_outputs_get+0x2bc>)
 800b434:	2301      	movs	r3, #1
 800b436:	6093      	str	r3, [r2, #8]
 800b438:	6893      	ldr	r3, [r2, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1fc      	bne.n	800b438 <ai_platform_outputs_get+0x1e4>
 800b43e:	4b35      	ldr	r3, [pc, #212]	; (800b514 <ai_platform_outputs_get+0x2c0>)
 800b440:	6013      	str	r3, [r2, #0]
 800b442:	4b35      	ldr	r3, [pc, #212]	; (800b518 <ai_platform_outputs_get+0x2c4>)
 800b444:	6812      	ldr	r2, [r2, #0]
 800b446:	429a      	cmp	r2, r3
 800b448:	f43f af3f 	beq.w	800b2ca <ai_platform_outputs_get+0x76>
 800b44c:	e7fe      	b.n	800b44c <ai_platform_outputs_get+0x1f8>
 800b44e:	e7fe      	b.n	800b44e <ai_platform_outputs_get+0x1fa>
 800b450:	4a32      	ldr	r2, [pc, #200]	; (800b51c <ai_platform_outputs_get+0x2c8>)
 800b452:	2301      	movs	r3, #1
 800b454:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b458:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1fb      	bne.n	800b458 <ai_platform_outputs_get+0x204>
 800b460:	4b2c      	ldr	r3, [pc, #176]	; (800b514 <ai_platform_outputs_get+0x2c0>)
 800b462:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b466:	4b2c      	ldr	r3, [pc, #176]	; (800b518 <ai_platform_outputs_get+0x2c4>)
 800b468:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b46c:	429a      	cmp	r2, r3
 800b46e:	f43f af2c 	beq.w	800b2ca <ai_platform_outputs_get+0x76>
 800b472:	e7fe      	b.n	800b472 <ai_platform_outputs_get+0x21e>
 800b474:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b478:	b14c      	cbz	r4, 800b48e <ai_platform_outputs_get+0x23a>
 800b47a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b47e:	6858      	ldr	r0, [r3, #4]
 800b480:	9b02      	ldr	r3, [sp, #8]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d0d2      	beq.n	800b42c <ai_platform_outputs_get+0x1d8>
 800b486:	801c      	strh	r4, [r3, #0]
 800b488:	b005      	add	sp, #20
 800b48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48e:	2400      	movs	r4, #0
 800b490:	2218      	movs	r2, #24
 800b492:	2111      	movs	r1, #17
 800b494:	f109 0010 	add.w	r0, r9, #16
 800b498:	f000 ffe4 	bl	800c464 <core_set_error>
 800b49c:	4620      	mov	r0, r4
 800b49e:	e7ef      	b.n	800b480 <ai_platform_outputs_get+0x22c>
 800b4a0:	4a1e      	ldr	r2, [pc, #120]	; (800b51c <ai_platform_outputs_get+0x2c8>)
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b4a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d1fb      	bne.n	800b4a8 <ai_platform_outputs_get+0x254>
 800b4b0:	4918      	ldr	r1, [pc, #96]	; (800b514 <ai_platform_outputs_get+0x2c0>)
 800b4b2:	4b19      	ldr	r3, [pc, #100]	; (800b518 <ai_platform_outputs_get+0x2c4>)
 800b4b4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b4b8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d0b2      	beq.n	800b426 <ai_platform_outputs_get+0x1d2>
 800b4c0:	e7fe      	b.n	800b4c0 <ai_platform_outputs_get+0x26c>
 800b4c2:	4a16      	ldr	r2, [pc, #88]	; (800b51c <ai_platform_outputs_get+0x2c8>)
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b4ca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1fb      	bne.n	800b4ca <ai_platform_outputs_get+0x276>
 800b4d2:	4b10      	ldr	r3, [pc, #64]	; (800b514 <ai_platform_outputs_get+0x2c0>)
 800b4d4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b4d8:	4b0f      	ldr	r3, [pc, #60]	; (800b518 <ai_platform_outputs_get+0x2c4>)
 800b4da:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	f43f aef3 	beq.w	800b2ca <ai_platform_outputs_get+0x76>
 800b4e4:	e7fe      	b.n	800b4e4 <ai_platform_outputs_get+0x290>
 800b4e6:	4a0a      	ldr	r2, [pc, #40]	; (800b510 <ai_platform_outputs_get+0x2bc>)
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	6093      	str	r3, [r2, #8]
 800b4ec:	6893      	ldr	r3, [r2, #8]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1fc      	bne.n	800b4ec <ai_platform_outputs_get+0x298>
 800b4f2:	4b08      	ldr	r3, [pc, #32]	; (800b514 <ai_platform_outputs_get+0x2c0>)
 800b4f4:	6013      	str	r3, [r2, #0]
 800b4f6:	4b08      	ldr	r3, [pc, #32]	; (800b518 <ai_platform_outputs_get+0x2c4>)
 800b4f8:	6812      	ldr	r2, [r2, #0]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	f43f aee5 	beq.w	800b2ca <ai_platform_outputs_get+0x76>
 800b500:	e7fe      	b.n	800b500 <ai_platform_outputs_get+0x2ac>
 800b502:	bf00      	nop
 800b504:	a1c00100 	.word	0xa1c00100
 800b508:	e0042000 	.word	0xe0042000
 800b50c:	5c001000 	.word	0x5c001000
 800b510:	40023000 	.word	0x40023000
 800b514:	f407a5c2 	.word	0xf407a5c2
 800b518:	b5e8b5cd 	.word	0xb5e8b5cd
 800b51c:	58024000 	.word	0x58024000
 800b520:	4a0d      	ldr	r2, [pc, #52]	; (800b558 <ai_platform_outputs_get+0x304>)
 800b522:	2301      	movs	r3, #1
 800b524:	6093      	str	r3, [r2, #8]
 800b526:	6893      	ldr	r3, [r2, #8]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1fc      	bne.n	800b526 <ai_platform_outputs_get+0x2d2>
 800b52c:	490b      	ldr	r1, [pc, #44]	; (800b55c <ai_platform_outputs_get+0x308>)
 800b52e:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <ai_platform_outputs_get+0x30c>)
 800b530:	6011      	str	r1, [r2, #0]
 800b532:	6812      	ldr	r2, [r2, #0]
 800b534:	429a      	cmp	r2, r3
 800b536:	f43f af76 	beq.w	800b426 <ai_platform_outputs_get+0x1d2>
 800b53a:	e7fe      	b.n	800b53a <ai_platform_outputs_get+0x2e6>
 800b53c:	4a06      	ldr	r2, [pc, #24]	; (800b558 <ai_platform_outputs_get+0x304>)
 800b53e:	2301      	movs	r3, #1
 800b540:	6093      	str	r3, [r2, #8]
 800b542:	6893      	ldr	r3, [r2, #8]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1fc      	bne.n	800b542 <ai_platform_outputs_get+0x2ee>
 800b548:	4b04      	ldr	r3, [pc, #16]	; (800b55c <ai_platform_outputs_get+0x308>)
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	4b04      	ldr	r3, [pc, #16]	; (800b560 <ai_platform_outputs_get+0x30c>)
 800b54e:	6812      	ldr	r2, [r2, #0]
 800b550:	429a      	cmp	r2, r3
 800b552:	f43f aeba 	beq.w	800b2ca <ai_platform_outputs_get+0x76>
 800b556:	e7fe      	b.n	800b556 <ai_platform_outputs_get+0x302>
 800b558:	40023000 	.word	0x40023000
 800b55c:	f407a5c2 	.word	0xf407a5c2
 800b560:	b5e8b5cd 	.word	0xb5e8b5cd

0800b564 <ai_platform_network_create>:
 800b564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b568:	b083      	sub	sp, #12
 800b56a:	4604      	mov	r4, r0
 800b56c:	4615      	mov	r5, r2
 800b56e:	461e      	mov	r6, r3
 800b570:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800b574:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800b578:	f7ff fc26 	bl	800adc8 <_ai_platform_acquire_crc>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	f000 80bd 	beq.w	800b6fc <ai_platform_network_create+0x198>
 800b582:	4ba5      	ldr	r3, [pc, #660]	; (800b818 <ai_platform_network_create+0x2b4>)
 800b584:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800b588:	4601      	mov	r1, r0
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b590:	eb03 020c 	add.w	r2, r3, ip
 800b594:	2a01      	cmp	r2, #1
 800b596:	f240 80a8 	bls.w	800b6ea <ai_platform_network_create+0x186>
 800b59a:	f240 4249 	movw	r2, #1097	; 0x449
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	f000 80a3 	beq.w	800b6ea <ai_platform_network_create+0x186>
 800b5a4:	4a9d      	ldr	r2, [pc, #628]	; (800b81c <ai_platform_network_create+0x2b8>)
 800b5a6:	6813      	ldr	r3, [r2, #0]
 800b5a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5ac:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b5b0:	f000 80b9 	beq.w	800b726 <ai_platform_network_create+0x1c2>
 800b5b4:	6813      	ldr	r3, [r2, #0]
 800b5b6:	f240 4c83 	movw	ip, #1155	; 0x483
 800b5ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5be:	4563      	cmp	r3, ip
 800b5c0:	f000 80a1 	beq.w	800b706 <ai_platform_network_create+0x1a2>
 800b5c4:	6813      	ldr	r3, [r2, #0]
 800b5c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5ca:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b5ce:	f000 8153 	beq.w	800b878 <ai_platform_network_create+0x314>
 800b5d2:	6813      	ldr	r3, [r2, #0]
 800b5d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f040 808d 	bne.w	800b6f8 <ai_platform_network_create+0x194>
 800b5de:	4a90      	ldr	r2, [pc, #576]	; (800b820 <ai_platform_network_create+0x2bc>)
 800b5e0:	2318      	movs	r3, #24
 800b5e2:	6093      	str	r3, [r2, #8]
 800b5e4:	6893      	ldr	r3, [r2, #8]
 800b5e6:	2b18      	cmp	r3, #24
 800b5e8:	f040 8086 	bne.w	800b6f8 <ai_platform_network_create+0x194>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	6093      	str	r3, [r2, #8]
 800b5f0:	6893      	ldr	r3, [r2, #8]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1fc      	bne.n	800b5f0 <ai_platform_network_create+0x8c>
 800b5f6:	4608      	mov	r0, r1
 800b5f8:	f7ff fbe8 	bl	800adcc <_ai_platform_release_crc>
 800b5fc:	f7ff fbe4 	bl	800adc8 <_ai_platform_acquire_crc>
 800b600:	4b85      	ldr	r3, [pc, #532]	; (800b818 <ai_platform_network_create+0x2b4>)
 800b602:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b60c:	189a      	adds	r2, r3, r2
 800b60e:	2a01      	cmp	r2, #1
 800b610:	f240 809f 	bls.w	800b752 <ai_platform_network_create+0x1ee>
 800b614:	f240 4249 	movw	r2, #1097	; 0x449
 800b618:	4293      	cmp	r3, r2
 800b61a:	f000 809a 	beq.w	800b752 <ai_platform_network_create+0x1ee>
 800b61e:	4a7f      	ldr	r2, [pc, #508]	; (800b81c <ai_platform_network_create+0x2b8>)
 800b620:	6813      	ldr	r3, [r2, #0]
 800b622:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b626:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b62a:	f000 80a0 	beq.w	800b76e <ai_platform_network_create+0x20a>
 800b62e:	6813      	ldr	r3, [r2, #0]
 800b630:	f240 4183 	movw	r1, #1155	; 0x483
 800b634:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b638:	428b      	cmp	r3, r1
 800b63a:	f000 80bf 	beq.w	800b7bc <ai_platform_network_create+0x258>
 800b63e:	6813      	ldr	r3, [r2, #0]
 800b640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b644:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b648:	f000 8123 	beq.w	800b892 <ai_platform_network_create+0x32e>
 800b64c:	6813      	ldr	r3, [r2, #0]
 800b64e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b652:	2b00      	cmp	r3, #0
 800b654:	f000 80c4 	beq.w	800b7e0 <ai_platform_network_create+0x27c>
 800b658:	f7ff fbb8 	bl	800adcc <_ai_platform_release_crc>
 800b65c:	2c00      	cmp	r4, #0
 800b65e:	f000 80aa 	beq.w	800b7b6 <ai_platform_network_create+0x252>
 800b662:	4b70      	ldr	r3, [pc, #448]	; (800b824 <ai_platform_network_create+0x2c0>)
 800b664:	602b      	str	r3, [r5, #0]
 800b666:	6025      	str	r5, [r4, #0]
 800b668:	f000 fefa 	bl	800c460 <core_init>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	f000 8090 	beq.w	800b792 <ai_platform_network_create+0x22e>
 800b672:	f7ff fba9 	bl	800adc8 <_ai_platform_acquire_crc>
 800b676:	4b68      	ldr	r3, [pc, #416]	; (800b818 <ai_platform_network_create+0x2b4>)
 800b678:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b682:	185a      	adds	r2, r3, r1
 800b684:	2a01      	cmp	r2, #1
 800b686:	f240 80b9 	bls.w	800b7fc <ai_platform_network_create+0x298>
 800b68a:	f240 4249 	movw	r2, #1097	; 0x449
 800b68e:	4293      	cmp	r3, r2
 800b690:	f000 80b4 	beq.w	800b7fc <ai_platform_network_create+0x298>
 800b694:	4a61      	ldr	r2, [pc, #388]	; (800b81c <ai_platform_network_create+0x2b8>)
 800b696:	6813      	ldr	r3, [r2, #0]
 800b698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b69c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b6a0:	f000 80c8 	beq.w	800b834 <ai_platform_network_create+0x2d0>
 800b6a4:	6813      	ldr	r3, [r2, #0]
 800b6a6:	f240 4183 	movw	r1, #1155	; 0x483
 800b6aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6ae:	428b      	cmp	r3, r1
 800b6b0:	f000 8107 	beq.w	800b8c2 <ai_platform_network_create+0x35e>
 800b6b4:	6813      	ldr	r3, [r2, #0]
 800b6b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6ba:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b6be:	f000 8111 	beq.w	800b8e4 <ai_platform_network_create+0x380>
 800b6c2:	6813      	ldr	r3, [r2, #0]
 800b6c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f040 80c3 	bne.w	800b854 <ai_platform_network_create+0x2f0>
 800b6ce:	4b54      	ldr	r3, [pc, #336]	; (800b820 <ai_platform_network_create+0x2bc>)
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	609a      	str	r2, [r3, #8]
 800b6d4:	689a      	ldr	r2, [r3, #8]
 800b6d6:	2a00      	cmp	r2, #0
 800b6d8:	d1fc      	bne.n	800b6d4 <ai_platform_network_create+0x170>
 800b6da:	4a53      	ldr	r2, [pc, #332]	; (800b828 <ai_platform_network_create+0x2c4>)
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	4b52      	ldr	r3, [pc, #328]	; (800b82c <ai_platform_network_create+0x2c8>)
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	f000 80b6 	beq.w	800b854 <ai_platform_network_create+0x2f0>
 800b6e8:	e7fe      	b.n	800b6e8 <ai_platform_network_create+0x184>
 800b6ea:	4b4d      	ldr	r3, [pc, #308]	; (800b820 <ai_platform_network_create+0x2bc>)
 800b6ec:	2218      	movs	r2, #24
 800b6ee:	609a      	str	r2, [r3, #8]
 800b6f0:	689a      	ldr	r2, [r3, #8]
 800b6f2:	2a18      	cmp	r2, #24
 800b6f4:	d027      	beq.n	800b746 <ai_platform_network_create+0x1e2>
 800b6f6:	4608      	mov	r0, r1
 800b6f8:	f7ff fb68 	bl	800adcc <_ai_platform_release_crc>
 800b6fc:	f244 1033 	movw	r0, #16691	; 0x4133
 800b700:	b003      	add	sp, #12
 800b702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b706:	4a4a      	ldr	r2, [pc, #296]	; (800b830 <ai_platform_network_create+0x2cc>)
 800b708:	2318      	movs	r3, #24
 800b70a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b70e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b712:	2b18      	cmp	r3, #24
 800b714:	d1f0      	bne.n	800b6f8 <ai_platform_network_create+0x194>
 800b716:	2301      	movs	r3, #1
 800b718:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b71c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1fb      	bne.n	800b71c <ai_platform_network_create+0x1b8>
 800b724:	e767      	b.n	800b5f6 <ai_platform_network_create+0x92>
 800b726:	4a42      	ldr	r2, [pc, #264]	; (800b830 <ai_platform_network_create+0x2cc>)
 800b728:	2318      	movs	r3, #24
 800b72a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b72e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b732:	2b18      	cmp	r3, #24
 800b734:	d1e0      	bne.n	800b6f8 <ai_platform_network_create+0x194>
 800b736:	2301      	movs	r3, #1
 800b738:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b73c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1fb      	bne.n	800b73c <ai_platform_network_create+0x1d8>
 800b744:	e757      	b.n	800b5f6 <ai_platform_network_create+0x92>
 800b746:	2201      	movs	r2, #1
 800b748:	609a      	str	r2, [r3, #8]
 800b74a:	689a      	ldr	r2, [r3, #8]
 800b74c:	2a00      	cmp	r2, #0
 800b74e:	d1fc      	bne.n	800b74a <ai_platform_network_create+0x1e6>
 800b750:	e751      	b.n	800b5f6 <ai_platform_network_create+0x92>
 800b752:	4a33      	ldr	r2, [pc, #204]	; (800b820 <ai_platform_network_create+0x2bc>)
 800b754:	2301      	movs	r3, #1
 800b756:	6093      	str	r3, [r2, #8]
 800b758:	6891      	ldr	r1, [r2, #8]
 800b75a:	2900      	cmp	r1, #0
 800b75c:	d1fc      	bne.n	800b758 <ai_platform_network_create+0x1f4>
 800b75e:	4b32      	ldr	r3, [pc, #200]	; (800b828 <ai_platform_network_create+0x2c4>)
 800b760:	6013      	str	r3, [r2, #0]
 800b762:	4b32      	ldr	r3, [pc, #200]	; (800b82c <ai_platform_network_create+0x2c8>)
 800b764:	6812      	ldr	r2, [r2, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	f43f af76 	beq.w	800b658 <ai_platform_network_create+0xf4>
 800b76c:	e7fe      	b.n	800b76c <ai_platform_network_create+0x208>
 800b76e:	4a30      	ldr	r2, [pc, #192]	; (800b830 <ai_platform_network_create+0x2cc>)
 800b770:	2301      	movs	r3, #1
 800b772:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b776:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1fb      	bne.n	800b776 <ai_platform_network_create+0x212>
 800b77e:	4b2a      	ldr	r3, [pc, #168]	; (800b828 <ai_platform_network_create+0x2c4>)
 800b780:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b784:	4b29      	ldr	r3, [pc, #164]	; (800b82c <ai_platform_network_create+0x2c8>)
 800b786:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b78a:	429a      	cmp	r2, r3
 800b78c:	f43f af64 	beq.w	800b658 <ai_platform_network_create+0xf4>
 800b790:	e7fe      	b.n	800b790 <ai_platform_network_create+0x22c>
 800b792:	f04f 0930 	mov.w	r9, #48	; 0x30
 800b796:	2300      	movs	r3, #0
 800b798:	6023      	str	r3, [r4, #0]
 800b79a:	2410      	movs	r4, #16
 800b79c:	4642      	mov	r2, r8
 800b79e:	4639      	mov	r1, r7
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f003 f827 	bl	800e7f4 <ai_version_get>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	64ab      	str	r3, [r5, #72]	; 0x48
 800b7ac:	f369 0007 	bfi	r0, r9, #0, #8
 800b7b0:	f364 201f 	bfi	r0, r4, #8, #24
 800b7b4:	e7a4      	b.n	800b700 <ai_platform_network_create+0x19c>
 800b7b6:	f241 0010 	movw	r0, #4112	; 0x1010
 800b7ba:	e7a1      	b.n	800b700 <ai_platform_network_create+0x19c>
 800b7bc:	4a1c      	ldr	r2, [pc, #112]	; (800b830 <ai_platform_network_create+0x2cc>)
 800b7be:	2301      	movs	r3, #1
 800b7c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b7c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1fb      	bne.n	800b7c4 <ai_platform_network_create+0x260>
 800b7cc:	4b16      	ldr	r3, [pc, #88]	; (800b828 <ai_platform_network_create+0x2c4>)
 800b7ce:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b7d2:	4b16      	ldr	r3, [pc, #88]	; (800b82c <ai_platform_network_create+0x2c8>)
 800b7d4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	f43f af3d 	beq.w	800b658 <ai_platform_network_create+0xf4>
 800b7de:	e7fe      	b.n	800b7de <ai_platform_network_create+0x27a>
 800b7e0:	4a0f      	ldr	r2, [pc, #60]	; (800b820 <ai_platform_network_create+0x2bc>)
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	6093      	str	r3, [r2, #8]
 800b7e6:	6893      	ldr	r3, [r2, #8]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1fc      	bne.n	800b7e6 <ai_platform_network_create+0x282>
 800b7ec:	4b0e      	ldr	r3, [pc, #56]	; (800b828 <ai_platform_network_create+0x2c4>)
 800b7ee:	6013      	str	r3, [r2, #0]
 800b7f0:	4b0e      	ldr	r3, [pc, #56]	; (800b82c <ai_platform_network_create+0x2c8>)
 800b7f2:	6812      	ldr	r2, [r2, #0]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	f43f af2f 	beq.w	800b658 <ai_platform_network_create+0xf4>
 800b7fa:	e7fe      	b.n	800b7fa <ai_platform_network_create+0x296>
 800b7fc:	4a08      	ldr	r2, [pc, #32]	; (800b820 <ai_platform_network_create+0x2bc>)
 800b7fe:	2301      	movs	r3, #1
 800b800:	6093      	str	r3, [r2, #8]
 800b802:	6893      	ldr	r3, [r2, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1fc      	bne.n	800b802 <ai_platform_network_create+0x29e>
 800b808:	4b07      	ldr	r3, [pc, #28]	; (800b828 <ai_platform_network_create+0x2c4>)
 800b80a:	6013      	str	r3, [r2, #0]
 800b80c:	4b07      	ldr	r3, [pc, #28]	; (800b82c <ai_platform_network_create+0x2c8>)
 800b80e:	6812      	ldr	r2, [r2, #0]
 800b810:	429a      	cmp	r2, r3
 800b812:	d01f      	beq.n	800b854 <ai_platform_network_create+0x2f0>
 800b814:	e7fe      	b.n	800b814 <ai_platform_network_create+0x2b0>
 800b816:	bf00      	nop
 800b818:	e0042000 	.word	0xe0042000
 800b81c:	5c001000 	.word	0x5c001000
 800b820:	40023000 	.word	0x40023000
 800b824:	a1c00100 	.word	0xa1c00100
 800b828:	f407a5c2 	.word	0xf407a5c2
 800b82c:	b5e8b5cd 	.word	0xb5e8b5cd
 800b830:	58024000 	.word	0x58024000
 800b834:	4a33      	ldr	r2, [pc, #204]	; (800b904 <ai_platform_network_create+0x3a0>)
 800b836:	2301      	movs	r3, #1
 800b838:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b83c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1fb      	bne.n	800b83c <ai_platform_network_create+0x2d8>
 800b844:	4b30      	ldr	r3, [pc, #192]	; (800b908 <ai_platform_network_create+0x3a4>)
 800b846:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b84a:	4b30      	ldr	r3, [pc, #192]	; (800b90c <ai_platform_network_create+0x3a8>)
 800b84c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b850:	429a      	cmp	r2, r3
 800b852:	d12c      	bne.n	800b8ae <ai_platform_network_create+0x34a>
 800b854:	f7ff faba 	bl	800adcc <_ai_platform_release_crc>
 800b858:	2200      	movs	r2, #0
 800b85a:	4639      	mov	r1, r7
 800b85c:	4630      	mov	r0, r6
 800b85e:	f002 ffc9 	bl	800e7f4 <ai_version_get>
 800b862:	4681      	mov	r9, r0
 800b864:	2200      	movs	r2, #0
 800b866:	2105      	movs	r1, #5
 800b868:	2001      	movs	r0, #1
 800b86a:	f002 ffc3 	bl	800e7f4 <ai_version_get>
 800b86e:	4581      	cmp	r9, r0
 800b870:	d01e      	beq.n	800b8b0 <ai_platform_network_create+0x34c>
 800b872:	f04f 0901 	mov.w	r9, #1
 800b876:	e78e      	b.n	800b796 <ai_platform_network_create+0x232>
 800b878:	4b25      	ldr	r3, [pc, #148]	; (800b910 <ai_platform_network_create+0x3ac>)
 800b87a:	2218      	movs	r2, #24
 800b87c:	609a      	str	r2, [r3, #8]
 800b87e:	689a      	ldr	r2, [r3, #8]
 800b880:	2a18      	cmp	r2, #24
 800b882:	f47f af39 	bne.w	800b6f8 <ai_platform_network_create+0x194>
 800b886:	2201      	movs	r2, #1
 800b888:	609a      	str	r2, [r3, #8]
 800b88a:	689a      	ldr	r2, [r3, #8]
 800b88c:	2a00      	cmp	r2, #0
 800b88e:	d1fc      	bne.n	800b88a <ai_platform_network_create+0x326>
 800b890:	e6b1      	b.n	800b5f6 <ai_platform_network_create+0x92>
 800b892:	4a1f      	ldr	r2, [pc, #124]	; (800b910 <ai_platform_network_create+0x3ac>)
 800b894:	2301      	movs	r3, #1
 800b896:	6093      	str	r3, [r2, #8]
 800b898:	6893      	ldr	r3, [r2, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1fc      	bne.n	800b898 <ai_platform_network_create+0x334>
 800b89e:	4b1a      	ldr	r3, [pc, #104]	; (800b908 <ai_platform_network_create+0x3a4>)
 800b8a0:	6013      	str	r3, [r2, #0]
 800b8a2:	4b1a      	ldr	r3, [pc, #104]	; (800b90c <ai_platform_network_create+0x3a8>)
 800b8a4:	6812      	ldr	r2, [r2, #0]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	f43f aed6 	beq.w	800b658 <ai_platform_network_create+0xf4>
 800b8ac:	e7fe      	b.n	800b8ac <ai_platform_network_create+0x348>
 800b8ae:	e7fe      	b.n	800b8ae <ai_platform_network_create+0x34a>
 800b8b0:	4b18      	ldr	r3, [pc, #96]	; (800b914 <ai_platform_network_create+0x3b0>)
 800b8b2:	a801      	add	r0, sp, #4
 800b8b4:	9301      	str	r3, [sp, #4]
 800b8b6:	f002 fde3 	bl	800e480 <ai_check_custom_types>
 800b8ba:	b300      	cbz	r0, 800b8fe <ai_platform_network_create+0x39a>
 800b8bc:	2400      	movs	r4, #0
 800b8be:	46a1      	mov	r9, r4
 800b8c0:	e76c      	b.n	800b79c <ai_platform_network_create+0x238>
 800b8c2:	4b10      	ldr	r3, [pc, #64]	; (800b904 <ai_platform_network_create+0x3a0>)
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800b8ca:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800b8ce:	2a00      	cmp	r2, #0
 800b8d0:	d1fb      	bne.n	800b8ca <ai_platform_network_create+0x366>
 800b8d2:	4a0d      	ldr	r2, [pc, #52]	; (800b908 <ai_platform_network_create+0x3a4>)
 800b8d4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800b8d8:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800b8dc:	4b0b      	ldr	r3, [pc, #44]	; (800b90c <ai_platform_network_create+0x3a8>)
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d0b8      	beq.n	800b854 <ai_platform_network_create+0x2f0>
 800b8e2:	e7fe      	b.n	800b8e2 <ai_platform_network_create+0x37e>
 800b8e4:	4b0a      	ldr	r3, [pc, #40]	; (800b910 <ai_platform_network_create+0x3ac>)
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	609a      	str	r2, [r3, #8]
 800b8ea:	689a      	ldr	r2, [r3, #8]
 800b8ec:	2a00      	cmp	r2, #0
 800b8ee:	d1fc      	bne.n	800b8ea <ai_platform_network_create+0x386>
 800b8f0:	4a05      	ldr	r2, [pc, #20]	; (800b908 <ai_platform_network_create+0x3a4>)
 800b8f2:	601a      	str	r2, [r3, #0]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	4b05      	ldr	r3, [pc, #20]	; (800b90c <ai_platform_network_create+0x3a8>)
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d0ab      	beq.n	800b854 <ai_platform_network_create+0x2f0>
 800b8fc:	e7fe      	b.n	800b8fc <ai_platform_network_create+0x398>
 800b8fe:	f04f 0902 	mov.w	r9, #2
 800b902:	e748      	b.n	800b796 <ai_platform_network_create+0x232>
 800b904:	58024000 	.word	0x58024000
 800b908:	f407a5c2 	.word	0xf407a5c2
 800b90c:	b5e8b5cd 	.word	0xb5e8b5cd
 800b910:	40023000 	.word	0x40023000
 800b914:	84048403 	.word	0x84048403

0800b918 <ai_platform_network_init>:
 800b918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d052      	beq.n	800b9c6 <ai_platform_network_init+0xae>
 800b920:	4bab      	ldr	r3, [pc, #684]	; (800bbd0 <ai_platform_network_init+0x2b8>)
 800b922:	4604      	mov	r4, r0
 800b924:	6802      	ldr	r2, [r0, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	d14d      	bne.n	800b9c6 <ai_platform_network_init+0xae>
 800b92a:	460d      	mov	r5, r1
 800b92c:	f7ff fa4c 	bl	800adc8 <_ai_platform_acquire_crc>
 800b930:	4ba8      	ldr	r3, [pc, #672]	; (800bbd4 <ai_platform_network_init+0x2bc>)
 800b932:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b93c:	189a      	adds	r2, r3, r2
 800b93e:	2a01      	cmp	r2, #1
 800b940:	f240 809b 	bls.w	800ba7a <ai_platform_network_init+0x162>
 800b944:	f240 4249 	movw	r2, #1097	; 0x449
 800b948:	4293      	cmp	r3, r2
 800b94a:	f000 8096 	beq.w	800ba7a <ai_platform_network_init+0x162>
 800b94e:	4aa2      	ldr	r2, [pc, #648]	; (800bbd8 <ai_platform_network_init+0x2c0>)
 800b950:	6813      	ldr	r3, [r2, #0]
 800b952:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b956:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b95a:	f000 809d 	beq.w	800ba98 <ai_platform_network_init+0x180>
 800b95e:	6813      	ldr	r3, [r2, #0]
 800b960:	f240 4183 	movw	r1, #1155	; 0x483
 800b964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b968:	428b      	cmp	r3, r1
 800b96a:	f000 80e4 	beq.w	800bb36 <ai_platform_network_init+0x21e>
 800b96e:	6813      	ldr	r3, [r2, #0]
 800b970:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b974:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b978:	f000 811b 	beq.w	800bbb2 <ai_platform_network_init+0x29a>
 800b97c:	6813      	ldr	r3, [r2, #0]
 800b97e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b982:	2b00      	cmp	r3, #0
 800b984:	f000 80f9 	beq.w	800bb7a <ai_platform_network_init+0x262>
 800b988:	f7ff fa20 	bl	800adcc <_ai_platform_release_crc>
 800b98c:	2d00      	cmp	r5, #0
 800b98e:	f000 8147 	beq.w	800bc20 <ai_platform_network_init+0x308>
 800b992:	4b92      	ldr	r3, [pc, #584]	; (800bbdc <ai_platform_network_init+0x2c4>)
 800b994:	682a      	ldr	r2, [r5, #0]
 800b996:	429a      	cmp	r2, r3
 800b998:	f040 8090 	bne.w	800babc <ai_platform_network_init+0x1a4>
 800b99c:	692b      	ldr	r3, [r5, #16]
 800b99e:	89ae      	ldrh	r6, [r5, #12]
 800b9a0:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800b9a4:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800b9a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b9aa:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	84a6      	strh	r6, [r4, #36]	; 0x24
 800b9b2:	4626      	mov	r6, r4
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800b9ba:	60e3      	str	r3, [r4, #12]
 800b9bc:	f002 fd88 	bl	800e4d0 <ai_layers_init_all>
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9c6:	f7ff f9ff 	bl	800adc8 <_ai_platform_acquire_crc>
 800b9ca:	4b82      	ldr	r3, [pc, #520]	; (800bbd4 <ai_platform_network_init+0x2bc>)
 800b9cc:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b9d6:	185a      	adds	r2, r3, r1
 800b9d8:	2a01      	cmp	r2, #1
 800b9da:	d92b      	bls.n	800ba34 <ai_platform_network_init+0x11c>
 800b9dc:	f240 4249 	movw	r2, #1097	; 0x449
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d027      	beq.n	800ba34 <ai_platform_network_init+0x11c>
 800b9e4:	4a7c      	ldr	r2, [pc, #496]	; (800bbd8 <ai_platform_network_init+0x2c0>)
 800b9e6:	6813      	ldr	r3, [r2, #0]
 800b9e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b9ec:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b9f0:	d02d      	beq.n	800ba4e <ai_platform_network_init+0x136>
 800b9f2:	6813      	ldr	r3, [r2, #0]
 800b9f4:	f240 4183 	movw	r1, #1155	; 0x483
 800b9f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b9fc:	428b      	cmp	r3, r1
 800b9fe:	f000 8089 	beq.w	800bb14 <ai_platform_network_init+0x1fc>
 800ba02:	6813      	ldr	r3, [r2, #0]
 800ba04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba08:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ba0c:	f000 80c3 	beq.w	800bb96 <ai_platform_network_init+0x27e>
 800ba10:	6813      	ldr	r3, [r2, #0]
 800ba12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d129      	bne.n	800ba6e <ai_platform_network_init+0x156>
 800ba1a:	4a71      	ldr	r2, [pc, #452]	; (800bbe0 <ai_platform_network_init+0x2c8>)
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	6093      	str	r3, [r2, #8]
 800ba20:	6893      	ldr	r3, [r2, #8]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1fc      	bne.n	800ba20 <ai_platform_network_init+0x108>
 800ba26:	496f      	ldr	r1, [pc, #444]	; (800bbe4 <ai_platform_network_init+0x2cc>)
 800ba28:	4b6f      	ldr	r3, [pc, #444]	; (800bbe8 <ai_platform_network_init+0x2d0>)
 800ba2a:	6011      	str	r1, [r2, #0]
 800ba2c:	6812      	ldr	r2, [r2, #0]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d01d      	beq.n	800ba6e <ai_platform_network_init+0x156>
 800ba32:	e7fe      	b.n	800ba32 <ai_platform_network_init+0x11a>
 800ba34:	4a6a      	ldr	r2, [pc, #424]	; (800bbe0 <ai_platform_network_init+0x2c8>)
 800ba36:	2301      	movs	r3, #1
 800ba38:	6093      	str	r3, [r2, #8]
 800ba3a:	6893      	ldr	r3, [r2, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1fc      	bne.n	800ba3a <ai_platform_network_init+0x122>
 800ba40:	4968      	ldr	r1, [pc, #416]	; (800bbe4 <ai_platform_network_init+0x2cc>)
 800ba42:	4b69      	ldr	r3, [pc, #420]	; (800bbe8 <ai_platform_network_init+0x2d0>)
 800ba44:	6011      	str	r1, [r2, #0]
 800ba46:	6812      	ldr	r2, [r2, #0]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d010      	beq.n	800ba6e <ai_platform_network_init+0x156>
 800ba4c:	e7fe      	b.n	800ba4c <ai_platform_network_init+0x134>
 800ba4e:	4a67      	ldr	r2, [pc, #412]	; (800bbec <ai_platform_network_init+0x2d4>)
 800ba50:	2301      	movs	r3, #1
 800ba52:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ba56:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1fb      	bne.n	800ba56 <ai_platform_network_init+0x13e>
 800ba5e:	4961      	ldr	r1, [pc, #388]	; (800bbe4 <ai_platform_network_init+0x2cc>)
 800ba60:	4b61      	ldr	r3, [pc, #388]	; (800bbe8 <ai_platform_network_init+0x2d0>)
 800ba62:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ba66:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d113      	bne.n	800ba96 <ai_platform_network_init+0x17e>
 800ba6e:	2600      	movs	r6, #0
 800ba70:	f7ff f9ac 	bl	800adcc <_ai_platform_release_crc>
 800ba74:	4630      	mov	r0, r6
 800ba76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba7a:	4a59      	ldr	r2, [pc, #356]	; (800bbe0 <ai_platform_network_init+0x2c8>)
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	6093      	str	r3, [r2, #8]
 800ba80:	6893      	ldr	r3, [r2, #8]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1fc      	bne.n	800ba80 <ai_platform_network_init+0x168>
 800ba86:	4b57      	ldr	r3, [pc, #348]	; (800bbe4 <ai_platform_network_init+0x2cc>)
 800ba88:	6013      	str	r3, [r2, #0]
 800ba8a:	4b57      	ldr	r3, [pc, #348]	; (800bbe8 <ai_platform_network_init+0x2d0>)
 800ba8c:	6812      	ldr	r2, [r2, #0]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	f43f af7a 	beq.w	800b988 <ai_platform_network_init+0x70>
 800ba94:	e7fe      	b.n	800ba94 <ai_platform_network_init+0x17c>
 800ba96:	e7fe      	b.n	800ba96 <ai_platform_network_init+0x17e>
 800ba98:	4a54      	ldr	r2, [pc, #336]	; (800bbec <ai_platform_network_init+0x2d4>)
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800baa0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1fb      	bne.n	800baa0 <ai_platform_network_init+0x188>
 800baa8:	4b4e      	ldr	r3, [pc, #312]	; (800bbe4 <ai_platform_network_init+0x2cc>)
 800baaa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800baae:	4b4e      	ldr	r3, [pc, #312]	; (800bbe8 <ai_platform_network_init+0x2d0>)
 800bab0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bab4:	429a      	cmp	r2, r3
 800bab6:	f43f af67 	beq.w	800b988 <ai_platform_network_init+0x70>
 800baba:	e7fe      	b.n	800baba <ai_platform_network_init+0x1a2>
 800babc:	2101      	movs	r1, #1
 800babe:	4628      	mov	r0, r5
 800bac0:	f105 081c 	add.w	r8, r5, #28
 800bac4:	686e      	ldr	r6, [r5, #4]
 800bac6:	f7ff f941 	bl	800ad4c <ai_buffer_get_size>
 800baca:	4607      	mov	r7, r0
 800bacc:	2101      	movs	r1, #1
 800bace:	4640      	mov	r0, r8
 800bad0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800bad4:	f7ff f93a 	bl	800ad4c <ai_buffer_get_size>
 800bad8:	2f00      	cmp	r7, #0
 800bada:	d13e      	bne.n	800bb5a <ai_platform_network_init+0x242>
 800badc:	2800      	cmp	r0, #0
 800bade:	f000 808e 	beq.w	800bbfe <ai_platform_network_init+0x2e6>
 800bae2:	f1b9 0f00 	cmp.w	r9, #0
 800bae6:	f000 8094 	beq.w	800bc12 <ai_platform_network_init+0x2fa>
 800baea:	f04f 0c01 	mov.w	ip, #1
 800baee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800baf0:	2600      	movs	r6, #0
 800baf2:	83e7      	strh	r7, [r4, #30]
 800baf4:	4563      	cmp	r3, ip
 800baf6:	83a6      	strh	r6, [r4, #28]
 800baf8:	d37a      	bcc.n	800bbf0 <ai_platform_network_init+0x2d8>
 800bafa:	f1bc 0f00 	cmp.w	ip, #0
 800bafe:	f000 809c 	beq.w	800bc3a <ai_platform_network_init+0x322>
 800bb02:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800bb04:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800bb08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb0a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800bb0e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800bb12:	e74c      	b.n	800b9ae <ai_platform_network_init+0x96>
 800bb14:	4a35      	ldr	r2, [pc, #212]	; (800bbec <ai_platform_network_init+0x2d4>)
 800bb16:	2301      	movs	r3, #1
 800bb18:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bb1c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1fb      	bne.n	800bb1c <ai_platform_network_init+0x204>
 800bb24:	492f      	ldr	r1, [pc, #188]	; (800bbe4 <ai_platform_network_init+0x2cc>)
 800bb26:	4b30      	ldr	r3, [pc, #192]	; (800bbe8 <ai_platform_network_init+0x2d0>)
 800bb28:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800bb2c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d09c      	beq.n	800ba6e <ai_platform_network_init+0x156>
 800bb34:	e7fe      	b.n	800bb34 <ai_platform_network_init+0x21c>
 800bb36:	4a2d      	ldr	r2, [pc, #180]	; (800bbec <ai_platform_network_init+0x2d4>)
 800bb38:	2301      	movs	r3, #1
 800bb3a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bb3e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1fb      	bne.n	800bb3e <ai_platform_network_init+0x226>
 800bb46:	4b27      	ldr	r3, [pc, #156]	; (800bbe4 <ai_platform_network_init+0x2cc>)
 800bb48:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800bb4c:	4b26      	ldr	r3, [pc, #152]	; (800bbe8 <ai_platform_network_init+0x2d0>)
 800bb4e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bb52:	429a      	cmp	r2, r3
 800bb54:	f43f af18 	beq.w	800b988 <ai_platform_network_init+0x70>
 800bb58:	e7fe      	b.n	800bb58 <ai_platform_network_init+0x240>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d153      	bne.n	800bc06 <ai_platform_network_init+0x2ee>
 800bb5e:	4680      	mov	r8, r0
 800bb60:	4684      	mov	ip, r0
 800bb62:	2e00      	cmp	r6, #0
 800bb64:	d063      	beq.n	800bc2e <ai_platform_network_init+0x316>
 800bb66:	8be6      	ldrh	r6, [r4, #30]
 800bb68:	2e00      	cmp	r6, #0
 800bb6a:	d168      	bne.n	800bc3e <ai_platform_network_init+0x326>
 800bb6c:	2212      	movs	r2, #18
 800bb6e:	2116      	movs	r1, #22
 800bb70:	f104 0010 	add.w	r0, r4, #16
 800bb74:	f000 fc76 	bl	800c464 <core_set_error>
 800bb78:	e77c      	b.n	800ba74 <ai_platform_network_init+0x15c>
 800bb7a:	4a19      	ldr	r2, [pc, #100]	; (800bbe0 <ai_platform_network_init+0x2c8>)
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	6093      	str	r3, [r2, #8]
 800bb80:	6893      	ldr	r3, [r2, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1fc      	bne.n	800bb80 <ai_platform_network_init+0x268>
 800bb86:	4b17      	ldr	r3, [pc, #92]	; (800bbe4 <ai_platform_network_init+0x2cc>)
 800bb88:	6013      	str	r3, [r2, #0]
 800bb8a:	4b17      	ldr	r3, [pc, #92]	; (800bbe8 <ai_platform_network_init+0x2d0>)
 800bb8c:	6812      	ldr	r2, [r2, #0]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	f43f aefa 	beq.w	800b988 <ai_platform_network_init+0x70>
 800bb94:	e7fe      	b.n	800bb94 <ai_platform_network_init+0x27c>
 800bb96:	4a12      	ldr	r2, [pc, #72]	; (800bbe0 <ai_platform_network_init+0x2c8>)
 800bb98:	2301      	movs	r3, #1
 800bb9a:	6093      	str	r3, [r2, #8]
 800bb9c:	6893      	ldr	r3, [r2, #8]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d1fc      	bne.n	800bb9c <ai_platform_network_init+0x284>
 800bba2:	4910      	ldr	r1, [pc, #64]	; (800bbe4 <ai_platform_network_init+0x2cc>)
 800bba4:	4b10      	ldr	r3, [pc, #64]	; (800bbe8 <ai_platform_network_init+0x2d0>)
 800bba6:	6011      	str	r1, [r2, #0]
 800bba8:	6812      	ldr	r2, [r2, #0]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	f43f af5f 	beq.w	800ba6e <ai_platform_network_init+0x156>
 800bbb0:	e7fe      	b.n	800bbb0 <ai_platform_network_init+0x298>
 800bbb2:	4a0b      	ldr	r2, [pc, #44]	; (800bbe0 <ai_platform_network_init+0x2c8>)
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	6093      	str	r3, [r2, #8]
 800bbb8:	6893      	ldr	r3, [r2, #8]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1fc      	bne.n	800bbb8 <ai_platform_network_init+0x2a0>
 800bbbe:	4b09      	ldr	r3, [pc, #36]	; (800bbe4 <ai_platform_network_init+0x2cc>)
 800bbc0:	6013      	str	r3, [r2, #0]
 800bbc2:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <ai_platform_network_init+0x2d0>)
 800bbc4:	6812      	ldr	r2, [r2, #0]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	f43f aede 	beq.w	800b988 <ai_platform_network_init+0x70>
 800bbcc:	e7fe      	b.n	800bbcc <ai_platform_network_init+0x2b4>
 800bbce:	bf00      	nop
 800bbd0:	a1c00100 	.word	0xa1c00100
 800bbd4:	e0042000 	.word	0xe0042000
 800bbd8:	5c001000 	.word	0x5c001000
 800bbdc:	a1facade 	.word	0xa1facade
 800bbe0:	40023000 	.word	0x40023000
 800bbe4:	f407a5c2 	.word	0xf407a5c2
 800bbe8:	b5e8b5cd 	.word	0xb5e8b5cd
 800bbec:	58024000 	.word	0x58024000
 800bbf0:	2213      	movs	r2, #19
 800bbf2:	2116      	movs	r1, #22
 800bbf4:	f104 0010 	add.w	r0, r4, #16
 800bbf8:	f000 fc34 	bl	800c464 <core_set_error>
 800bbfc:	e73a      	b.n	800ba74 <ai_platform_network_init+0x15c>
 800bbfe:	4607      	mov	r7, r0
 800bc00:	4680      	mov	r8, r0
 800bc02:	4684      	mov	ip, r0
 800bc04:	e773      	b.n	800baee <ai_platform_network_init+0x1d6>
 800bc06:	f1b9 0f00 	cmp.w	r9, #0
 800bc0a:	d002      	beq.n	800bc12 <ai_platform_network_init+0x2fa>
 800bc0c:	f04f 0c01 	mov.w	ip, #1
 800bc10:	e7a7      	b.n	800bb62 <ai_platform_network_init+0x24a>
 800bc12:	2110      	movs	r1, #16
 800bc14:	2213      	movs	r2, #19
 800bc16:	2600      	movs	r6, #0
 800bc18:	1860      	adds	r0, r4, r1
 800bc1a:	f000 fc23 	bl	800c464 <core_set_error>
 800bc1e:	e729      	b.n	800ba74 <ai_platform_network_init+0x15c>
 800bc20:	2110      	movs	r1, #16
 800bc22:	2211      	movs	r2, #17
 800bc24:	462e      	mov	r6, r5
 800bc26:	1860      	adds	r0, r4, r1
 800bc28:	f000 fc1c 	bl	800c464 <core_set_error>
 800bc2c:	e722      	b.n	800ba74 <ai_platform_network_init+0x15c>
 800bc2e:	2110      	movs	r1, #16
 800bc30:	2212      	movs	r2, #18
 800bc32:	1860      	adds	r0, r4, r1
 800bc34:	f000 fc16 	bl	800c464 <core_set_error>
 800bc38:	e71c      	b.n	800ba74 <ai_platform_network_init+0x15c>
 800bc3a:	4666      	mov	r6, ip
 800bc3c:	e6b7      	b.n	800b9ae <ai_platform_network_init+0x96>
 800bc3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc40:	6a26      	ldr	r6, [r4, #32]
 800bc42:	2701      	movs	r7, #1
 800bc44:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bc46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc4a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800bc4e:	e74e      	b.n	800baee <ai_platform_network_init+0x1d6>

0800bc50 <ai_platform_network_post_init>:
 800bc50:	b538      	push	{r3, r4, r5, lr}
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d04e      	beq.n	800bcf4 <ai_platform_network_post_init+0xa4>
 800bc56:	4b8c      	ldr	r3, [pc, #560]	; (800be88 <ai_platform_network_post_init+0x238>)
 800bc58:	4604      	mov	r4, r0
 800bc5a:	6802      	ldr	r2, [r0, #0]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d149      	bne.n	800bcf4 <ai_platform_network_post_init+0xa4>
 800bc60:	f7ff f8b2 	bl	800adc8 <_ai_platform_acquire_crc>
 800bc64:	4b89      	ldr	r3, [pc, #548]	; (800be8c <ai_platform_network_post_init+0x23c>)
 800bc66:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc70:	189a      	adds	r2, r3, r2
 800bc72:	2a01      	cmp	r2, #1
 800bc74:	f240 8095 	bls.w	800bda2 <ai_platform_network_post_init+0x152>
 800bc78:	f240 4249 	movw	r2, #1097	; 0x449
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	f000 8090 	beq.w	800bda2 <ai_platform_network_post_init+0x152>
 800bc82:	4a83      	ldr	r2, [pc, #524]	; (800be90 <ai_platform_network_post_init+0x240>)
 800bc84:	6813      	ldr	r3, [r2, #0]
 800bc86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc8a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bc8e:	f000 8096 	beq.w	800bdbe <ai_platform_network_post_init+0x16e>
 800bc92:	6813      	ldr	r3, [r2, #0]
 800bc94:	f240 4183 	movw	r1, #1155	; 0x483
 800bc98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc9c:	428b      	cmp	r3, r1
 800bc9e:	f000 80b8 	beq.w	800be12 <ai_platform_network_post_init+0x1c2>
 800bca2:	6813      	ldr	r3, [r2, #0]
 800bca4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bca8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bcac:	f000 80de 	beq.w	800be6c <ai_platform_network_post_init+0x21c>
 800bcb0:	6813      	ldr	r3, [r2, #0]
 800bcb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f000 80bd 	beq.w	800be36 <ai_platform_network_post_init+0x1e6>
 800bcbc:	f7ff f886 	bl	800adcc <_ai_platform_release_crc>
 800bcc0:	68e3      	ldr	r3, [r4, #12]
 800bcc2:	f013 0502 	ands.w	r5, r3, #2
 800bcc6:	f000 808c 	beq.w	800bde2 <ai_platform_network_post_init+0x192>
 800bcca:	4620      	mov	r0, r4
 800bccc:	f002 fc0e 	bl	800e4ec <ai_layers_post_init_all>
 800bcd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bcd2:	b16b      	cbz	r3, 800bcf0 <ai_platform_network_post_init+0xa0>
 800bcd4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800bcd6:	e007      	b.n	800bce8 <ai_platform_network_post_init+0x98>
 800bcd8:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800bcdc:	4798      	blx	r3
 800bcde:	692b      	ldr	r3, [r5, #16]
 800bce0:	b133      	cbz	r3, 800bcf0 <ai_platform_network_post_init+0xa0>
 800bce2:	42ab      	cmp	r3, r5
 800bce4:	461d      	mov	r5, r3
 800bce6:	d003      	beq.n	800bcf0 <ai_platform_network_post_init+0xa0>
 800bce8:	4629      	mov	r1, r5
 800bcea:	2000      	movs	r0, #0
 800bcec:	2d00      	cmp	r5, #0
 800bcee:	d1f3      	bne.n	800bcd8 <ai_platform_network_post_init+0x88>
 800bcf0:	2001      	movs	r0, #1
 800bcf2:	bd38      	pop	{r3, r4, r5, pc}
 800bcf4:	f7ff f868 	bl	800adc8 <_ai_platform_acquire_crc>
 800bcf8:	4b64      	ldr	r3, [pc, #400]	; (800be8c <ai_platform_network_post_init+0x23c>)
 800bcfa:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd04:	185a      	adds	r2, r3, r1
 800bd06:	2a01      	cmp	r2, #1
 800bd08:	d92a      	bls.n	800bd60 <ai_platform_network_post_init+0x110>
 800bd0a:	f240 4249 	movw	r2, #1097	; 0x449
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d026      	beq.n	800bd60 <ai_platform_network_post_init+0x110>
 800bd12:	4a5f      	ldr	r2, [pc, #380]	; (800be90 <ai_platform_network_post_init+0x240>)
 800bd14:	6813      	ldr	r3, [r2, #0]
 800bd16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd1a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bd1e:	d02c      	beq.n	800bd7a <ai_platform_network_post_init+0x12a>
 800bd20:	6813      	ldr	r3, [r2, #0]
 800bd22:	f240 4183 	movw	r1, #1155	; 0x483
 800bd26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd2a:	428b      	cmp	r3, r1
 800bd2c:	d060      	beq.n	800bdf0 <ai_platform_network_post_init+0x1a0>
 800bd2e:	6813      	ldr	r3, [r2, #0]
 800bd30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd34:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bd38:	f000 808b 	beq.w	800be52 <ai_platform_network_post_init+0x202>
 800bd3c:	6813      	ldr	r3, [r2, #0]
 800bd3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d129      	bne.n	800bd9a <ai_platform_network_post_init+0x14a>
 800bd46:	4a53      	ldr	r2, [pc, #332]	; (800be94 <ai_platform_network_post_init+0x244>)
 800bd48:	2301      	movs	r3, #1
 800bd4a:	6093      	str	r3, [r2, #8]
 800bd4c:	6893      	ldr	r3, [r2, #8]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d1fc      	bne.n	800bd4c <ai_platform_network_post_init+0xfc>
 800bd52:	4951      	ldr	r1, [pc, #324]	; (800be98 <ai_platform_network_post_init+0x248>)
 800bd54:	4b51      	ldr	r3, [pc, #324]	; (800be9c <ai_platform_network_post_init+0x24c>)
 800bd56:	6011      	str	r1, [r2, #0]
 800bd58:	6812      	ldr	r2, [r2, #0]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d01d      	beq.n	800bd9a <ai_platform_network_post_init+0x14a>
 800bd5e:	e7fe      	b.n	800bd5e <ai_platform_network_post_init+0x10e>
 800bd60:	4a4c      	ldr	r2, [pc, #304]	; (800be94 <ai_platform_network_post_init+0x244>)
 800bd62:	2301      	movs	r3, #1
 800bd64:	6093      	str	r3, [r2, #8]
 800bd66:	6893      	ldr	r3, [r2, #8]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1fc      	bne.n	800bd66 <ai_platform_network_post_init+0x116>
 800bd6c:	494a      	ldr	r1, [pc, #296]	; (800be98 <ai_platform_network_post_init+0x248>)
 800bd6e:	4b4b      	ldr	r3, [pc, #300]	; (800be9c <ai_platform_network_post_init+0x24c>)
 800bd70:	6011      	str	r1, [r2, #0]
 800bd72:	6812      	ldr	r2, [r2, #0]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d010      	beq.n	800bd9a <ai_platform_network_post_init+0x14a>
 800bd78:	e7fe      	b.n	800bd78 <ai_platform_network_post_init+0x128>
 800bd7a:	4a49      	ldr	r2, [pc, #292]	; (800bea0 <ai_platform_network_post_init+0x250>)
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bd82:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1fb      	bne.n	800bd82 <ai_platform_network_post_init+0x132>
 800bd8a:	4943      	ldr	r1, [pc, #268]	; (800be98 <ai_platform_network_post_init+0x248>)
 800bd8c:	4b43      	ldr	r3, [pc, #268]	; (800be9c <ai_platform_network_post_init+0x24c>)
 800bd8e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800bd92:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d110      	bne.n	800bdbc <ai_platform_network_post_init+0x16c>
 800bd9a:	f7ff f817 	bl	800adcc <_ai_platform_release_crc>
 800bd9e:	2000      	movs	r0, #0
 800bda0:	bd38      	pop	{r3, r4, r5, pc}
 800bda2:	4a3c      	ldr	r2, [pc, #240]	; (800be94 <ai_platform_network_post_init+0x244>)
 800bda4:	2301      	movs	r3, #1
 800bda6:	6093      	str	r3, [r2, #8]
 800bda8:	6893      	ldr	r3, [r2, #8]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d1fc      	bne.n	800bda8 <ai_platform_network_post_init+0x158>
 800bdae:	493a      	ldr	r1, [pc, #232]	; (800be98 <ai_platform_network_post_init+0x248>)
 800bdb0:	4b3a      	ldr	r3, [pc, #232]	; (800be9c <ai_platform_network_post_init+0x24c>)
 800bdb2:	6011      	str	r1, [r2, #0]
 800bdb4:	6812      	ldr	r2, [r2, #0]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d080      	beq.n	800bcbc <ai_platform_network_post_init+0x6c>
 800bdba:	e7fe      	b.n	800bdba <ai_platform_network_post_init+0x16a>
 800bdbc:	e7fe      	b.n	800bdbc <ai_platform_network_post_init+0x16c>
 800bdbe:	4a38      	ldr	r2, [pc, #224]	; (800bea0 <ai_platform_network_post_init+0x250>)
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bdc6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1fb      	bne.n	800bdc6 <ai_platform_network_post_init+0x176>
 800bdce:	4932      	ldr	r1, [pc, #200]	; (800be98 <ai_platform_network_post_init+0x248>)
 800bdd0:	4b32      	ldr	r3, [pc, #200]	; (800be9c <ai_platform_network_post_init+0x24c>)
 800bdd2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800bdd6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bdda:	429a      	cmp	r2, r3
 800bddc:	f43f af6e 	beq.w	800bcbc <ai_platform_network_post_init+0x6c>
 800bde0:	e7fe      	b.n	800bde0 <ai_platform_network_post_init+0x190>
 800bde2:	2210      	movs	r2, #16
 800bde4:	2111      	movs	r1, #17
 800bde6:	18a0      	adds	r0, r4, r2
 800bde8:	f000 fb3c 	bl	800c464 <core_set_error>
 800bdec:	4628      	mov	r0, r5
 800bdee:	bd38      	pop	{r3, r4, r5, pc}
 800bdf0:	4a2b      	ldr	r2, [pc, #172]	; (800bea0 <ai_platform_network_post_init+0x250>)
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bdf8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1fb      	bne.n	800bdf8 <ai_platform_network_post_init+0x1a8>
 800be00:	4925      	ldr	r1, [pc, #148]	; (800be98 <ai_platform_network_post_init+0x248>)
 800be02:	4b26      	ldr	r3, [pc, #152]	; (800be9c <ai_platform_network_post_init+0x24c>)
 800be04:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800be08:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d0c4      	beq.n	800bd9a <ai_platform_network_post_init+0x14a>
 800be10:	e7fe      	b.n	800be10 <ai_platform_network_post_init+0x1c0>
 800be12:	4a23      	ldr	r2, [pc, #140]	; (800bea0 <ai_platform_network_post_init+0x250>)
 800be14:	2301      	movs	r3, #1
 800be16:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800be1a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d1fb      	bne.n	800be1a <ai_platform_network_post_init+0x1ca>
 800be22:	491d      	ldr	r1, [pc, #116]	; (800be98 <ai_platform_network_post_init+0x248>)
 800be24:	4b1d      	ldr	r3, [pc, #116]	; (800be9c <ai_platform_network_post_init+0x24c>)
 800be26:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800be2a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800be2e:	429a      	cmp	r2, r3
 800be30:	f43f af44 	beq.w	800bcbc <ai_platform_network_post_init+0x6c>
 800be34:	e7fe      	b.n	800be34 <ai_platform_network_post_init+0x1e4>
 800be36:	4a17      	ldr	r2, [pc, #92]	; (800be94 <ai_platform_network_post_init+0x244>)
 800be38:	2301      	movs	r3, #1
 800be3a:	6093      	str	r3, [r2, #8]
 800be3c:	6893      	ldr	r3, [r2, #8]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1fc      	bne.n	800be3c <ai_platform_network_post_init+0x1ec>
 800be42:	4915      	ldr	r1, [pc, #84]	; (800be98 <ai_platform_network_post_init+0x248>)
 800be44:	4b15      	ldr	r3, [pc, #84]	; (800be9c <ai_platform_network_post_init+0x24c>)
 800be46:	6011      	str	r1, [r2, #0]
 800be48:	6812      	ldr	r2, [r2, #0]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	f43f af36 	beq.w	800bcbc <ai_platform_network_post_init+0x6c>
 800be50:	e7fe      	b.n	800be50 <ai_platform_network_post_init+0x200>
 800be52:	4a10      	ldr	r2, [pc, #64]	; (800be94 <ai_platform_network_post_init+0x244>)
 800be54:	2301      	movs	r3, #1
 800be56:	6093      	str	r3, [r2, #8]
 800be58:	6893      	ldr	r3, [r2, #8]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1fc      	bne.n	800be58 <ai_platform_network_post_init+0x208>
 800be5e:	490e      	ldr	r1, [pc, #56]	; (800be98 <ai_platform_network_post_init+0x248>)
 800be60:	4b0e      	ldr	r3, [pc, #56]	; (800be9c <ai_platform_network_post_init+0x24c>)
 800be62:	6011      	str	r1, [r2, #0]
 800be64:	6812      	ldr	r2, [r2, #0]
 800be66:	429a      	cmp	r2, r3
 800be68:	d097      	beq.n	800bd9a <ai_platform_network_post_init+0x14a>
 800be6a:	e7fe      	b.n	800be6a <ai_platform_network_post_init+0x21a>
 800be6c:	4a09      	ldr	r2, [pc, #36]	; (800be94 <ai_platform_network_post_init+0x244>)
 800be6e:	2301      	movs	r3, #1
 800be70:	6093      	str	r3, [r2, #8]
 800be72:	6893      	ldr	r3, [r2, #8]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1fc      	bne.n	800be72 <ai_platform_network_post_init+0x222>
 800be78:	4907      	ldr	r1, [pc, #28]	; (800be98 <ai_platform_network_post_init+0x248>)
 800be7a:	4b08      	ldr	r3, [pc, #32]	; (800be9c <ai_platform_network_post_init+0x24c>)
 800be7c:	6011      	str	r1, [r2, #0]
 800be7e:	6812      	ldr	r2, [r2, #0]
 800be80:	429a      	cmp	r2, r3
 800be82:	f43f af1b 	beq.w	800bcbc <ai_platform_network_post_init+0x6c>
 800be86:	e7fe      	b.n	800be86 <ai_platform_network_post_init+0x236>
 800be88:	a1c00100 	.word	0xa1c00100
 800be8c:	e0042000 	.word	0xe0042000
 800be90:	5c001000 	.word	0x5c001000
 800be94:	40023000 	.word	0x40023000
 800be98:	f407a5c2 	.word	0xf407a5c2
 800be9c:	b5e8b5cd 	.word	0xb5e8b5cd
 800bea0:	58024000 	.word	0x58024000

0800bea4 <ai_platform_network_process>:
 800bea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea8:	b085      	sub	sp, #20
 800beaa:	460e      	mov	r6, r1
 800beac:	4605      	mov	r5, r0
 800beae:	9201      	str	r2, [sp, #4]
 800beb0:	b120      	cbz	r0, 800bebc <ai_platform_network_process+0x18>
 800beb2:	4b24      	ldr	r3, [pc, #144]	; (800bf44 <ai_platform_network_process+0xa0>)
 800beb4:	6802      	ldr	r2, [r0, #0]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	bf18      	it	ne
 800beba:	2500      	movne	r5, #0
 800bebc:	f7fe ff84 	bl	800adc8 <_ai_platform_acquire_crc>
 800bec0:	4b21      	ldr	r3, [pc, #132]	; (800bf48 <ai_platform_network_process+0xa4>)
 800bec2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800becc:	185a      	adds	r2, r3, r1
 800bece:	2a01      	cmp	r2, #1
 800bed0:	d92b      	bls.n	800bf2a <ai_platform_network_process+0x86>
 800bed2:	f240 4249 	movw	r2, #1097	; 0x449
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d027      	beq.n	800bf2a <ai_platform_network_process+0x86>
 800beda:	4a1c      	ldr	r2, [pc, #112]	; (800bf4c <ai_platform_network_process+0xa8>)
 800bedc:	6813      	ldr	r3, [r2, #0]
 800bede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bee2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bee6:	d039      	beq.n	800bf5c <ai_platform_network_process+0xb8>
 800bee8:	6813      	ldr	r3, [r2, #0]
 800beea:	f240 4183 	movw	r1, #1155	; 0x483
 800beee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bef2:	428b      	cmp	r3, r1
 800bef4:	f000 819c 	beq.w	800c230 <ai_platform_network_process+0x38c>
 800bef8:	6813      	ldr	r3, [r2, #0]
 800befa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800befe:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bf02:	f000 8179 	beq.w	800c1f8 <ai_platform_network_process+0x354>
 800bf06:	6813      	ldr	r3, [r2, #0]
 800bf08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d136      	bne.n	800bf7e <ai_platform_network_process+0xda>
 800bf10:	4a0f      	ldr	r2, [pc, #60]	; (800bf50 <ai_platform_network_process+0xac>)
 800bf12:	2301      	movs	r3, #1
 800bf14:	6093      	str	r3, [r2, #8]
 800bf16:	6893      	ldr	r3, [r2, #8]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1fc      	bne.n	800bf16 <ai_platform_network_process+0x72>
 800bf1c:	4b0d      	ldr	r3, [pc, #52]	; (800bf54 <ai_platform_network_process+0xb0>)
 800bf1e:	6013      	str	r3, [r2, #0]
 800bf20:	4b0d      	ldr	r3, [pc, #52]	; (800bf58 <ai_platform_network_process+0xb4>)
 800bf22:	6812      	ldr	r2, [r2, #0]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d02a      	beq.n	800bf7e <ai_platform_network_process+0xda>
 800bf28:	e7fe      	b.n	800bf28 <ai_platform_network_process+0x84>
 800bf2a:	4a09      	ldr	r2, [pc, #36]	; (800bf50 <ai_platform_network_process+0xac>)
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	6093      	str	r3, [r2, #8]
 800bf30:	6893      	ldr	r3, [r2, #8]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d1fc      	bne.n	800bf30 <ai_platform_network_process+0x8c>
 800bf36:	4b07      	ldr	r3, [pc, #28]	; (800bf54 <ai_platform_network_process+0xb0>)
 800bf38:	6013      	str	r3, [r2, #0]
 800bf3a:	4b07      	ldr	r3, [pc, #28]	; (800bf58 <ai_platform_network_process+0xb4>)
 800bf3c:	6812      	ldr	r2, [r2, #0]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d01d      	beq.n	800bf7e <ai_platform_network_process+0xda>
 800bf42:	e7fe      	b.n	800bf42 <ai_platform_network_process+0x9e>
 800bf44:	a1c00100 	.word	0xa1c00100
 800bf48:	e0042000 	.word	0xe0042000
 800bf4c:	5c001000 	.word	0x5c001000
 800bf50:	40023000 	.word	0x40023000
 800bf54:	f407a5c2 	.word	0xf407a5c2
 800bf58:	b5e8b5cd 	.word	0xb5e8b5cd
 800bf5c:	4ab0      	ldr	r2, [pc, #704]	; (800c220 <ai_platform_network_process+0x37c>)
 800bf5e:	2301      	movs	r3, #1
 800bf60:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bf64:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1fb      	bne.n	800bf64 <ai_platform_network_process+0xc0>
 800bf6c:	4bad      	ldr	r3, [pc, #692]	; (800c224 <ai_platform_network_process+0x380>)
 800bf6e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800bf72:	4bad      	ldr	r3, [pc, #692]	; (800c228 <ai_platform_network_process+0x384>)
 800bf74:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	f040 812b 	bne.w	800c1d4 <ai_platform_network_process+0x330>
 800bf7e:	f7fe ff25 	bl	800adcc <_ai_platform_release_crc>
 800bf82:	2d00      	cmp	r5, #0
 800bf84:	f000 8172 	beq.w	800c26c <ai_platform_network_process+0x3c8>
 800bf88:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 8123 	beq.w	800c1d6 <ai_platform_network_process+0x332>
 800bf90:	68eb      	ldr	r3, [r5, #12]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800bf98:	f003 0303 	and.w	r3, r3, #3
 800bf9c:	616a      	str	r2, [r5, #20]
 800bf9e:	2b03      	cmp	r3, #3
 800bfa0:	f040 811f 	bne.w	800c1e2 <ai_platform_network_process+0x33e>
 800bfa4:	2e00      	cmp	r6, #0
 800bfa6:	f000 8156 	beq.w	800c256 <ai_platform_network_process+0x3b2>
 800bfaa:	fab8 f788 	clz	r7, r8
 800bfae:	097f      	lsrs	r7, r7, #5
 800bfb0:	f1b8 0f00 	cmp.w	r8, #0
 800bfb4:	f000 814f 	beq.w	800c256 <ai_platform_network_process+0x3b2>
 800bfb8:	f8b8 3000 	ldrh.w	r3, [r8]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f000 814a 	beq.w	800c256 <ai_platform_network_process+0x3b2>
 800bfc2:	69b3      	ldr	r3, [r6, #24]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800bfca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d072      	beq.n	800c0b8 <ai_platform_network_process+0x214>
 800bfd2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800bfd6:	2c00      	cmp	r4, #0
 800bfd8:	d06e      	beq.n	800c0b8 <ai_platform_network_process+0x214>
 800bfda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfde:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800bfe2:	f8d3 a000 	ldr.w	sl, [r3]
 800bfe6:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800bfea:	f000 8133 	beq.w	800c254 <ai_platform_network_process+0x3b0>
 800bfee:	69a3      	ldr	r3, [r4, #24]
 800bff0:	2101      	movs	r1, #1
 800bff2:	4630      	mov	r0, r6
 800bff4:	685d      	ldr	r5, [r3, #4]
 800bff6:	f7fe fea9 	bl	800ad4c <ai_buffer_get_size>
 800bffa:	4285      	cmp	r5, r0
 800bffc:	f0c0 8138 	bcc.w	800c270 <ai_platform_network_process+0x3cc>
 800c000:	68e0      	ldr	r0, [r4, #12]
 800c002:	69b1      	ldr	r1, [r6, #24]
 800c004:	68c2      	ldr	r2, [r0, #12]
 800c006:	68cb      	ldr	r3, [r1, #12]
 800c008:	429a      	cmp	r2, r3
 800c00a:	f040 8131 	bne.w	800c270 <ai_platform_network_process+0x3cc>
 800c00e:	6882      	ldr	r2, [r0, #8]
 800c010:	688b      	ldr	r3, [r1, #8]
 800c012:	429a      	cmp	r2, r3
 800c014:	f040 812c 	bne.w	800c270 <ai_platform_network_process+0x3cc>
 800c018:	6842      	ldr	r2, [r0, #4]
 800c01a:	684b      	ldr	r3, [r1, #4]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	f040 8127 	bne.w	800c270 <ai_platform_network_process+0x3cc>
 800c022:	69a3      	ldr	r3, [r4, #24]
 800c024:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c028:	f002 fc94 	bl	800e954 <ai_array_get_data_byte_size>
 800c02c:	4605      	mov	r5, r0
 800c02e:	4620      	mov	r0, r4
 800c030:	f002 fbe6 	bl	800e800 <get_tensor_byte_size>
 800c034:	4285      	cmp	r5, r0
 800c036:	f0c0 811b 	bcc.w	800c270 <ai_platform_network_process+0x3cc>
 800c03a:	69a3      	ldr	r3, [r4, #24]
 800c03c:	6818      	ldr	r0, [r3, #0]
 800c03e:	f002 fbf5 	bl	800e82c <ai_array_to_buffer_fmt>
 800c042:	6833      	ldr	r3, [r6, #0]
 800c044:	4058      	eors	r0, r3
 800c046:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800c04a:	f040 81ca 	bne.w	800c3e2 <ai_platform_network_process+0x53e>
 800c04e:	6873      	ldr	r3, [r6, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	f000 81bd 	beq.w	800c3d0 <ai_platform_network_process+0x52c>
 800c056:	69b3      	ldr	r3, [r6, #24]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f000 81ca 	beq.w	800c3f4 <ai_platform_network_process+0x550>
 800c060:	9a02      	ldr	r2, [sp, #8]
 800c062:	4620      	mov	r0, r4
 800c064:	3701      	adds	r7, #1
 800c066:	361c      	adds	r6, #28
 800c068:	429a      	cmp	r2, r3
 800c06a:	bf38      	it	cc
 800c06c:	461a      	movcc	r2, r3
 800c06e:	9202      	str	r2, [sp, #8]
 800c070:	f002 fbc6 	bl	800e800 <get_tensor_byte_size>
 800c074:	f8c9 0008 	str.w	r0, [r9, #8]
 800c078:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	fb00 f303 	mul.w	r3, r0, r3
 800c082:	f8c9 300c 	str.w	r3, [r9, #12]
 800c086:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800c08a:	440b      	add	r3, r1
 800c08c:	f8c9 1004 	str.w	r1, [r9, #4]
 800c090:	f84a 300b 	str.w	r3, [sl, fp]
 800c094:	69a0      	ldr	r0, [r4, #24]
 800c096:	6803      	ldr	r3, [r0, #0]
 800c098:	009a      	lsls	r2, r3, #2
 800c09a:	f100 80bb 	bmi.w	800c214 <ai_platform_network_process+0x370>
 800c09e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800c0a2:	1a9b      	subs	r3, r3, r2
 800c0a4:	4419      	add	r1, r3
 800c0a6:	6081      	str	r1, [r0, #8]
 800c0a8:	69a3      	ldr	r3, [r4, #24]
 800c0aa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c0ae:	60da      	str	r2, [r3, #12]
 800c0b0:	f8b8 3000 	ldrh.w	r3, [r8]
 800c0b4:	42bb      	cmp	r3, r7
 800c0b6:	d888      	bhi.n	800bfca <ai_platform_network_process+0x126>
 800c0b8:	9d03      	ldr	r5, [sp, #12]
 800c0ba:	9b01      	ldr	r3, [sp, #4]
 800c0bc:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f000 81a1 	beq.w	800c406 <ai_platform_network_process+0x562>
 800c0c4:	2a01      	cmp	r2, #1
 800c0c6:	f240 817b 	bls.w	800c3c0 <ai_platform_network_process+0x51c>
 800c0ca:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800c0ce:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	f000 8174 	beq.w	800c3c0 <ai_platform_network_process+0x51c>
 800c0d8:	9e01      	ldr	r6, [sp, #4]
 800c0da:	2700      	movs	r7, #0
 800c0dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f000 80d3 	beq.w	800c28c <ai_platform_network_process+0x3e8>
 800c0e6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800c0ea:	2c00      	cmp	r4, #0
 800c0ec:	f000 80ce 	beq.w	800c28c <ai_platform_network_process+0x3e8>
 800c0f0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c0f4:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800c0f8:	f8d3 8000 	ldr.w	r8, [r3]
 800c0fc:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800c100:	f000 819f 	beq.w	800c442 <ai_platform_network_process+0x59e>
 800c104:	69a3      	ldr	r3, [r4, #24]
 800c106:	2101      	movs	r1, #1
 800c108:	4630      	mov	r0, r6
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	9301      	str	r3, [sp, #4]
 800c10e:	f7fe fe1d 	bl	800ad4c <ai_buffer_get_size>
 800c112:	9b01      	ldr	r3, [sp, #4]
 800c114:	4283      	cmp	r3, r0
 800c116:	f0c0 8153 	bcc.w	800c3c0 <ai_platform_network_process+0x51c>
 800c11a:	68e0      	ldr	r0, [r4, #12]
 800c11c:	69b1      	ldr	r1, [r6, #24]
 800c11e:	68c2      	ldr	r2, [r0, #12]
 800c120:	68cb      	ldr	r3, [r1, #12]
 800c122:	429a      	cmp	r2, r3
 800c124:	f040 814c 	bne.w	800c3c0 <ai_platform_network_process+0x51c>
 800c128:	6882      	ldr	r2, [r0, #8]
 800c12a:	688b      	ldr	r3, [r1, #8]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	f040 8147 	bne.w	800c3c0 <ai_platform_network_process+0x51c>
 800c132:	6842      	ldr	r2, [r0, #4]
 800c134:	684b      	ldr	r3, [r1, #4]
 800c136:	429a      	cmp	r2, r3
 800c138:	f040 8142 	bne.w	800c3c0 <ai_platform_network_process+0x51c>
 800c13c:	69a3      	ldr	r3, [r4, #24]
 800c13e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c142:	f002 fc07 	bl	800e954 <ai_array_get_data_byte_size>
 800c146:	9001      	str	r0, [sp, #4]
 800c148:	4620      	mov	r0, r4
 800c14a:	f002 fb59 	bl	800e800 <get_tensor_byte_size>
 800c14e:	9b01      	ldr	r3, [sp, #4]
 800c150:	4283      	cmp	r3, r0
 800c152:	f0c0 8135 	bcc.w	800c3c0 <ai_platform_network_process+0x51c>
 800c156:	69a3      	ldr	r3, [r4, #24]
 800c158:	6818      	ldr	r0, [r3, #0]
 800c15a:	f002 fb67 	bl	800e82c <ai_array_to_buffer_fmt>
 800c15e:	6833      	ldr	r3, [r6, #0]
 800c160:	4058      	eors	r0, r3
 800c162:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800c166:	f040 815c 	bne.w	800c422 <ai_platform_network_process+0x57e>
 800c16a:	6873      	ldr	r3, [r6, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f000 8150 	beq.w	800c412 <ai_platform_network_process+0x56e>
 800c172:	69b3      	ldr	r3, [r6, #24]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	f000 815b 	beq.w	800c432 <ai_platform_network_process+0x58e>
 800c17c:	9a02      	ldr	r2, [sp, #8]
 800c17e:	4620      	mov	r0, r4
 800c180:	3701      	adds	r7, #1
 800c182:	361c      	adds	r6, #28
 800c184:	429a      	cmp	r2, r3
 800c186:	bf38      	it	cc
 800c188:	461a      	movcc	r2, r3
 800c18a:	9202      	str	r2, [sp, #8]
 800c18c:	f002 fb38 	bl	800e800 <get_tensor_byte_size>
 800c190:	f8ca 0008 	str.w	r0, [sl, #8]
 800c194:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	fb00 f303 	mul.w	r3, r0, r3
 800c19e:	f8ca 300c 	str.w	r3, [sl, #12]
 800c1a2:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800c1a6:	440b      	add	r3, r1
 800c1a8:	f8ca 1004 	str.w	r1, [sl, #4]
 800c1ac:	f848 300b 	str.w	r3, [r8, fp]
 800c1b0:	69a0      	ldr	r0, [r4, #24]
 800c1b2:	6803      	ldr	r3, [r0, #0]
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	d464      	bmi.n	800c282 <ai_platform_network_process+0x3de>
 800c1b8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800c1bc:	1a9b      	subs	r3, r3, r2
 800c1be:	4419      	add	r1, r3
 800c1c0:	6081      	str	r1, [r0, #8]
 800c1c2:	69a3      	ldr	r3, [r4, #24]
 800c1c4:	f8da 2004 	ldr.w	r2, [sl, #4]
 800c1c8:	60da      	str	r2, [r3, #12]
 800c1ca:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c1ce:	429f      	cmp	r7, r3
 800c1d0:	d384      	bcc.n	800c0dc <ai_platform_network_process+0x238>
 800c1d2:	e05b      	b.n	800c28c <ai_platform_network_process+0x3e8>
 800c1d4:	e7fe      	b.n	800c1d4 <ai_platform_network_process+0x330>
 800c1d6:	68ea      	ldr	r2, [r5, #12]
 800c1d8:	616b      	str	r3, [r5, #20]
 800c1da:	f002 0203 	and.w	r2, r2, #3
 800c1de:	2a03      	cmp	r2, #3
 800c1e0:	d039      	beq.n	800c256 <ai_platform_network_process+0x3b2>
 800c1e2:	2230      	movs	r2, #48	; 0x30
 800c1e4:	2111      	movs	r1, #17
 800c1e6:	f105 0010 	add.w	r0, r5, #16
 800c1ea:	2400      	movs	r4, #0
 800c1ec:	f000 f93a 	bl	800c464 <core_set_error>
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	b005      	add	sp, #20
 800c1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f8:	4a0c      	ldr	r2, [pc, #48]	; (800c22c <ai_platform_network_process+0x388>)
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	6093      	str	r3, [r2, #8]
 800c1fe:	6893      	ldr	r3, [r2, #8]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1fc      	bne.n	800c1fe <ai_platform_network_process+0x35a>
 800c204:	4b07      	ldr	r3, [pc, #28]	; (800c224 <ai_platform_network_process+0x380>)
 800c206:	6013      	str	r3, [r2, #0]
 800c208:	4b07      	ldr	r3, [pc, #28]	; (800c228 <ai_platform_network_process+0x384>)
 800c20a:	6812      	ldr	r2, [r2, #0]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	f43f aeb6 	beq.w	800bf7e <ai_platform_network_process+0xda>
 800c212:	e7fe      	b.n	800c212 <ai_platform_network_process+0x36e>
 800c214:	f8b8 3000 	ldrh.w	r3, [r8]
 800c218:	429f      	cmp	r7, r3
 800c21a:	f4ff aed6 	bcc.w	800bfca <ai_platform_network_process+0x126>
 800c21e:	e74b      	b.n	800c0b8 <ai_platform_network_process+0x214>
 800c220:	58024000 	.word	0x58024000
 800c224:	f407a5c2 	.word	0xf407a5c2
 800c228:	b5e8b5cd 	.word	0xb5e8b5cd
 800c22c:	40023000 	.word	0x40023000
 800c230:	4a88      	ldr	r2, [pc, #544]	; (800c454 <ai_platform_network_process+0x5b0>)
 800c232:	2301      	movs	r3, #1
 800c234:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c238:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1fb      	bne.n	800c238 <ai_platform_network_process+0x394>
 800c240:	4b85      	ldr	r3, [pc, #532]	; (800c458 <ai_platform_network_process+0x5b4>)
 800c242:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c246:	4b85      	ldr	r3, [pc, #532]	; (800c45c <ai_platform_network_process+0x5b8>)
 800c248:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c24c:	429a      	cmp	r2, r3
 800c24e:	f43f ae96 	beq.w	800bf7e <ai_platform_network_process+0xda>
 800c252:	e7fe      	b.n	800c252 <ai_platform_network_process+0x3ae>
 800c254:	9d03      	ldr	r5, [sp, #12]
 800c256:	2400      	movs	r4, #0
 800c258:	2217      	movs	r2, #23
 800c25a:	2112      	movs	r1, #18
 800c25c:	f105 0010 	add.w	r0, r5, #16
 800c260:	f000 f900 	bl	800c464 <core_set_error>
 800c264:	4620      	mov	r0, r4
 800c266:	b005      	add	sp, #20
 800c268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c26c:	462c      	mov	r4, r5
 800c26e:	e7bf      	b.n	800c1f0 <ai_platform_network_process+0x34c>
 800c270:	9d03      	ldr	r5, [sp, #12]
 800c272:	2218      	movs	r2, #24
 800c274:	2112      	movs	r1, #18
 800c276:	2400      	movs	r4, #0
 800c278:	f105 0010 	add.w	r0, r5, #16
 800c27c:	f000 f8f2 	bl	800c464 <core_set_error>
 800c280:	e7b6      	b.n	800c1f0 <ai_platform_network_process+0x34c>
 800c282:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c286:	429f      	cmp	r7, r3
 800c288:	f4ff af28 	bcc.w	800c0dc <ai_platform_network_process+0x238>
 800c28c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800c290:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800c292:	82ab      	strh	r3, [r5, #20]
 800c294:	2a00      	cmp	r2, #0
 800c296:	f040 808d 	bne.w	800c3b4 <ai_platform_network_process+0x510>
 800c29a:	4616      	mov	r6, r2
 800c29c:	4617      	mov	r7, r2
 800c29e:	8aec      	ldrh	r4, [r5, #22]
 800c2a0:	429c      	cmp	r4, r3
 800c2a2:	d2a5      	bcs.n	800c1f0 <ai_platform_network_process+0x34c>
 800c2a4:	46ab      	mov	fp, r5
 800c2a6:	2e00      	cmp	r6, #0
 800c2a8:	d030      	beq.n	800c30c <ai_platform_network_process+0x468>
 800c2aa:	f04f 0800 	mov.w	r8, #0
 800c2ae:	e014      	b.n	800c2da <ai_platform_network_process+0x436>
 800c2b0:	6882      	ldr	r2, [r0, #8]
 800c2b2:	68c5      	ldr	r5, [r0, #12]
 800c2b4:	6863      	ldr	r3, [r4, #4]
 800c2b6:	1b52      	subs	r2, r2, r5
 800c2b8:	4413      	add	r3, r2
 800c2ba:	6083      	str	r3, [r0, #8]
 800c2bc:	698b      	ldr	r3, [r1, #24]
 800c2be:	6862      	ldr	r2, [r4, #4]
 800c2c0:	60da      	str	r2, [r3, #12]
 800c2c2:	f859 200a 	ldr.w	r2, [r9, sl]
 800c2c6:	f108 0801 	add.w	r8, r8, #1
 800c2ca:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800c2ce:	440b      	add	r3, r1
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d301      	bcc.n	800c2d8 <ai_platform_network_process+0x434>
 800c2d4:	68e3      	ldr	r3, [r4, #12]
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	6063      	str	r3, [r4, #4]
 800c2da:	8833      	ldrh	r3, [r6, #0]
 800c2dc:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800c2e0:	4543      	cmp	r3, r8
 800c2e2:	d913      	bls.n	800c30c <ai_platform_network_process+0x468>
 800c2e4:	6873      	ldr	r3, [r6, #4]
 800c2e6:	b18b      	cbz	r3, 800c30c <ai_platform_network_process+0x468>
 800c2e8:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800c2ec:	b171      	cbz	r1, 800c30c <ai_platform_network_process+0x468>
 800c2ee:	6988      	ldr	r0, [r1, #24]
 800c2f0:	68b2      	ldr	r2, [r6, #8]
 800c2f2:	6803      	ldr	r3, [r0, #0]
 800c2f4:	f8d2 9000 	ldr.w	r9, [r2]
 800c2f8:	009d      	lsls	r5, r3, #2
 800c2fa:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800c2fe:	d5d7      	bpl.n	800c2b0 <ai_platform_network_process+0x40c>
 800c300:	6880      	ldr	r0, [r0, #8]
 800c302:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800c306:	f002 fca3 	bl	800ec50 <memcpy>
 800c30a:	e7da      	b.n	800c2c2 <ai_platform_network_process+0x41e>
 800c30c:	4658      	mov	r0, fp
 800c30e:	f002 f901 	bl	800e514 <ai_layers_forward_all>
 800c312:	2f00      	cmp	r7, #0
 800c314:	d03f      	beq.n	800c396 <ai_platform_network_process+0x4f2>
 800c316:	2400      	movs	r4, #0
 800c318:	e016      	b.n	800c348 <ai_platform_network_process+0x4a4>
 800c31a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800c31e:	f859 100a 	ldr.w	r1, [r9, sl]
 800c322:	4413      	add	r3, r2
 800c324:	428b      	cmp	r3, r1
 800c326:	d302      	bcc.n	800c32e <ai_platform_network_process+0x48a>
 800c328:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c32c:	1acb      	subs	r3, r1, r3
 800c32e:	f8c8 3004 	str.w	r3, [r8, #4]
 800c332:	6981      	ldr	r1, [r0, #24]
 800c334:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800c338:	1b52      	subs	r2, r2, r5
 800c33a:	4413      	add	r3, r2
 800c33c:	608b      	str	r3, [r1, #8]
 800c33e:	6983      	ldr	r3, [r0, #24]
 800c340:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c344:	60da      	str	r2, [r3, #12]
 800c346:	3401      	adds	r4, #1
 800c348:	883b      	ldrh	r3, [r7, #0]
 800c34a:	42a3      	cmp	r3, r4
 800c34c:	d923      	bls.n	800c396 <ai_platform_network_process+0x4f2>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	b30b      	cbz	r3, 800c396 <ai_platform_network_process+0x4f2>
 800c352:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c356:	b1f0      	cbz	r0, 800c396 <ai_platform_network_process+0x4f2>
 800c358:	68ba      	ldr	r2, [r7, #8]
 800c35a:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800c35e:	6983      	ldr	r3, [r0, #24]
 800c360:	f8d2 9000 	ldr.w	r9, [r2]
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800c36a:	0092      	lsls	r2, r2, #2
 800c36c:	d5d5      	bpl.n	800c31a <ai_platform_network_process+0x476>
 800c36e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800c372:	6899      	ldr	r1, [r3, #8]
 800c374:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c378:	f002 fc6a 	bl	800ec50 <memcpy>
 800c37c:	f859 200a 	ldr.w	r2, [r9, sl]
 800c380:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800c384:	440b      	add	r3, r1
 800c386:	4293      	cmp	r3, r2
 800c388:	d302      	bcc.n	800c390 <ai_platform_network_process+0x4ec>
 800c38a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	f8c8 3004 	str.w	r3, [r8, #4]
 800c394:	e7d7      	b.n	800c346 <ai_platform_network_process+0x4a2>
 800c396:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800c39a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800c39e:	3401      	adds	r4, #1
 800c3a0:	b2a4      	uxth	r4, r4
 800c3a2:	42a3      	cmp	r3, r4
 800c3a4:	f8ab 4016 	strh.w	r4, [fp, #22]
 800c3a8:	f63f af7d 	bhi.w	800c2a6 <ai_platform_network_process+0x402>
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	b005      	add	sp, #20
 800c3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b4:	2a01      	cmp	r2, #1
 800c3b6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800c3b8:	d029      	beq.n	800c40e <ai_platform_network_process+0x56a>
 800c3ba:	f106 070c 	add.w	r7, r6, #12
 800c3be:	e76e      	b.n	800c29e <ai_platform_network_process+0x3fa>
 800c3c0:	2218      	movs	r2, #24
 800c3c2:	2113      	movs	r1, #19
 800c3c4:	f105 0010 	add.w	r0, r5, #16
 800c3c8:	2400      	movs	r4, #0
 800c3ca:	f000 f84b 	bl	800c464 <core_set_error>
 800c3ce:	e70f      	b.n	800c1f0 <ai_platform_network_process+0x34c>
 800c3d0:	9d03      	ldr	r5, [sp, #12]
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	2217      	movs	r2, #23
 800c3d6:	2112      	movs	r1, #18
 800c3d8:	f105 0010 	add.w	r0, r5, #16
 800c3dc:	f000 f842 	bl	800c464 <core_set_error>
 800c3e0:	e706      	b.n	800c1f0 <ai_platform_network_process+0x34c>
 800c3e2:	9d03      	ldr	r5, [sp, #12]
 800c3e4:	2219      	movs	r2, #25
 800c3e6:	2112      	movs	r1, #18
 800c3e8:	2400      	movs	r4, #0
 800c3ea:	f105 0010 	add.w	r0, r5, #16
 800c3ee:	f000 f839 	bl	800c464 <core_set_error>
 800c3f2:	e6fd      	b.n	800c1f0 <ai_platform_network_process+0x34c>
 800c3f4:	9d03      	ldr	r5, [sp, #12]
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	2221      	movs	r2, #33	; 0x21
 800c3fa:	2112      	movs	r1, #18
 800c3fc:	f105 0010 	add.w	r0, r5, #16
 800c400:	f000 f830 	bl	800c464 <core_set_error>
 800c404:	e6f4      	b.n	800c1f0 <ai_platform_network_process+0x34c>
 800c406:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800c40a:	82ab      	strh	r3, [r5, #20]
 800c40c:	e742      	b.n	800c294 <ai_platform_network_process+0x3f0>
 800c40e:	2700      	movs	r7, #0
 800c410:	e745      	b.n	800c29e <ai_platform_network_process+0x3fa>
 800c412:	4604      	mov	r4, r0
 800c414:	2217      	movs	r2, #23
 800c416:	2113      	movs	r1, #19
 800c418:	f105 0010 	add.w	r0, r5, #16
 800c41c:	f000 f822 	bl	800c464 <core_set_error>
 800c420:	e6e6      	b.n	800c1f0 <ai_platform_network_process+0x34c>
 800c422:	2219      	movs	r2, #25
 800c424:	2113      	movs	r1, #19
 800c426:	f105 0010 	add.w	r0, r5, #16
 800c42a:	2400      	movs	r4, #0
 800c42c:	f000 f81a 	bl	800c464 <core_set_error>
 800c430:	e6de      	b.n	800c1f0 <ai_platform_network_process+0x34c>
 800c432:	4604      	mov	r4, r0
 800c434:	2221      	movs	r2, #33	; 0x21
 800c436:	2113      	movs	r1, #19
 800c438:	f105 0010 	add.w	r0, r5, #16
 800c43c:	f000 f812 	bl	800c464 <core_set_error>
 800c440:	e6d6      	b.n	800c1f0 <ai_platform_network_process+0x34c>
 800c442:	2217      	movs	r2, #23
 800c444:	2113      	movs	r1, #19
 800c446:	f105 0010 	add.w	r0, r5, #16
 800c44a:	4654      	mov	r4, sl
 800c44c:	f000 f80a 	bl	800c464 <core_set_error>
 800c450:	e6ce      	b.n	800c1f0 <ai_platform_network_process+0x34c>
 800c452:	bf00      	nop
 800c454:	58024000 	.word	0x58024000
 800c458:	f407a5c2 	.word	0xf407a5c2
 800c45c:	b5e8b5cd 	.word	0xb5e8b5cd

0800c460 <core_init>:
 800c460:	2001      	movs	r0, #1
 800c462:	4770      	bx	lr

0800c464 <core_set_error>:
 800c464:	4603      	mov	r3, r0
 800c466:	7800      	ldrb	r0, [r0, #0]
 800c468:	b108      	cbz	r0, 800c46e <core_set_error+0xa>
 800c46a:	2000      	movs	r0, #0
 800c46c:	4770      	bx	lr
 800c46e:	7019      	strb	r1, [r3, #0]
 800c470:	2001      	movs	r0, #1
 800c472:	6819      	ldr	r1, [r3, #0]
 800c474:	f362 211f 	bfi	r1, r2, #8, #24
 800c478:	6019      	str	r1, [r3, #0]
 800c47a:	4770      	bx	lr

0800c47c <func_dummy>:
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop

0800c480 <ai_conv2d_stripe_f32.constprop.0>:
 800c480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c484:	ed2d 8b0e 	vpush	{d8-d14}
 800c488:	b09d      	sub	sp, #116	; 0x74
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	f8d7 90ec 	ldr.w	r9, [r7, #236]	; 0xec
 800c490:	66f8      	str	r0, [r7, #108]	; 0x6c
 800c492:	f1b9 0f01 	cmp.w	r9, #1
 800c496:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800c49a:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 800c49e:	f8d7 c0fc 	ldr.w	ip, [r7, #252]	; 0xfc
 800c4a2:	f9b7 e104 	ldrsh.w	lr, [r7, #260]	; 0x104
 800c4a6:	6579      	str	r1, [r7, #84]	; 0x54
 800c4a8:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 800c4ac:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800c4b0:	f9b7 2108 	ldrsh.w	r2, [r7, #264]	; 0x108
 800c4b4:	663b      	str	r3, [r7, #96]	; 0x60
 800c4b6:	e9d7 303c 	ldrd	r3, r0, [r7, #240]	; 0xf0
 800c4ba:	f000 812f 	beq.w	800c71c <ai_conv2d_stripe_f32.constprop.0+0x29c>
 800c4be:	45b1      	cmp	r9, r6
 800c4c0:	f000 8278 	beq.w	800c9b4 <ai_conv2d_stripe_f32.constprop.0+0x534>
 800c4c4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c4c8:	2900      	cmp	r1, #0
 800c4ca:	f000 8114 	beq.w	800c6f6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800c4ce:	eba0 0803 	sub.w	r8, r0, r3
 800c4d2:	1898      	adds	r0, r3, r2
 800c4d4:	eddf 6a90 	vldr	s13, [pc, #576]	; 800c718 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800c4d8:	3801      	subs	r0, #1
 800c4da:	fb93 f1f2 	sdiv	r1, r3, r2
 800c4de:	fb90 f0f2 	sdiv	r0, r0, r2
 800c4e2:	fb02 3111 	mls	r1, r2, r1, r3
 800c4e6:	eba2 0a01 	sub.w	sl, r2, r1
 800c4ea:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800c4ee:	fb01 f100 	mul.w	r1, r1, r0
 800c4f2:	fb9a f0f2 	sdiv	r0, sl, r2
 800c4f6:	fb02 a010 	mls	r0, r2, r0, sl
 800c4fa:	62b9      	str	r1, [r7, #40]	; 0x28
 800c4fc:	4403      	add	r3, r0
 800c4fe:	eba8 0100 	sub.w	r1, r8, r0
 800c502:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c506:	4463      	add	r3, ip
 800c508:	4411      	add	r1, r2
 800c50a:	fb00 f303 	mul.w	r3, r0, r3
 800c50e:	3901      	subs	r1, #1
 800c510:	fbb6 f4f9 	udiv	r4, r6, r9
 800c514:	623b      	str	r3, [r7, #32]
 800c516:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800c51a:	fb00 f302 	mul.w	r3, r0, r2
 800c51e:	f8c7 a014 	str.w	sl, [r7, #20]
 800c522:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c524:	fb0e f306 	mul.w	r3, lr, r6
 800c528:	1b1b      	subs	r3, r3, r4
 800c52a:	fb91 fbf2 	sdiv	fp, r1, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	eba5 020b 	sub.w	r2, r5, fp
 800c534:	00b1      	lsls	r1, r6, #2
 800c536:	46dc      	mov	ip, fp
 800c538:	64bb      	str	r3, [r7, #72]	; 0x48
 800c53a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c53e:	61f9      	str	r1, [r7, #28]
 800c540:	fb04 f303 	mul.w	r3, r4, r3
 800c544:	fb02 f303 	mul.w	r3, r2, r3
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	627b      	str	r3, [r7, #36]	; 0x24
 800c54c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c550:	fbb3 f3f9 	udiv	r3, r3, r9
 800c554:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	633b      	str	r3, [r7, #48]	; 0x30
 800c55e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c562:	f1c3 0800 	rsb	r8, r3, #0
 800c566:	ebae 0303 	sub.w	r3, lr, r3
 800c56a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c56c:	2300      	movs	r3, #0
 800c56e:	653b      	str	r3, [r7, #80]	; 0x50
 800c570:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c574:	2b00      	cmp	r3, #0
 800c576:	f2c0 80c4 	blt.w	800c702 <ai_conv2d_stripe_f32.constprop.0+0x282>
 800c57a:	2000      	movs	r0, #0
 800c57c:	4673      	mov	r3, lr
 800c57e:	4672      	mov	r2, lr
 800c580:	4601      	mov	r1, r0
 800c582:	3b01      	subs	r3, #1
 800c584:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800c586:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 800c58a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c58e:	fb93 f3fe 	sdiv	r3, r3, lr
 800c592:	4423      	add	r3, r4
 800c594:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800c596:	fb0a 4303 	mla	r3, sl, r3, r4
 800c59a:	fb92 f4fe 	sdiv	r4, r2, lr
 800c59e:	fb0e 2214 	mls	r2, lr, r4, r2
 800c5a2:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800c5a6:	4444      	add	r4, r8
 800c5a8:	42ac      	cmp	r4, r5
 800c5aa:	bf94      	ite	ls
 800c5ac:	ebc1 0104 	rsbls	r1, r1, r4
 800c5b0:	ebc1 0105 	rsbhi	r1, r1, r5
 800c5b4:	6a3c      	ldr	r4, [r7, #32]
 800c5b6:	1a89      	subs	r1, r1, r2
 800c5b8:	4471      	add	r1, lr
 800c5ba:	3901      	subs	r1, #1
 800c5bc:	fb91 f6fe 	sdiv	r6, r1, lr
 800c5c0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800c5c4:	4421      	add	r1, r4
 800c5c6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800c5c8:	4401      	add	r1, r0
 800c5ca:	69f8      	ldr	r0, [r7, #28]
 800c5cc:	4411      	add	r1, r2
 800c5ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5d0:	fb00 2201 	mla	r2, r0, r1, r2
 800c5d4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c5d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c5d8:	460a      	mov	r2, r1
 800c5da:	2900      	cmp	r1, #0
 800c5dc:	bf08      	it	eq
 800c5de:	4622      	moveq	r2, r4
 800c5e0:	42a2      	cmp	r2, r4
 800c5e2:	637a      	str	r2, [r7, #52]	; 0x34
 800c5e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5e6:	fe06 7a87 	vseleq.f32	s14, s13, s14
 800c5ea:	fb0e 2116 	mls	r1, lr, r6, r2
 800c5ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c5f2:	1b92      	subs	r2, r2, r6
 800c5f4:	f1b9 0f00 	cmp.w	r9, #0
 800c5f8:	d066      	beq.n	800c6c8 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800c5fa:	fb0a f202 	mul.w	r2, sl, r2
 800c5fe:	fb00 f101 	mul.w	r1, r0, r1
 800c602:	643a      	str	r2, [r7, #64]	; 0x40
 800c604:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c608:	6479      	str	r1, [r7, #68]	; 0x44
 800c60a:	4591      	cmp	r9, r2
 800c60c:	d85c      	bhi.n	800c6c8 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800c60e:	2500      	movs	r5, #0
 800c610:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c612:	46ab      	mov	fp, r5
 800c614:	3a01      	subs	r2, #1
 800c616:	e9c7 e803 	strd	lr, r8, [r7, #12]
 800c61a:	61ba      	str	r2, [r7, #24]
 800c61c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c61e:	f04f 0800 	mov.w	r8, #0
 800c622:	f8c7 b008 	str.w	fp, [r7, #8]
 800c626:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800c62a:	63ba      	str	r2, [r7, #56]	; 0x38
 800c62c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c62e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800c632:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c636:	f1bc 0f00 	cmp.w	ip, #0
 800c63a:	ecf2 7a01 	vldmia	r2!, {s15}
 800c63e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c642:	63ba      	str	r2, [r7, #56]	; 0x38
 800c644:	dd21      	ble.n	800c68a <ai_conv2d_stripe_f32.constprop.0+0x20a>
 800c646:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c648:	2100      	movs	r1, #0
 800c64a:	2e00      	cmp	r6, #0
 800c64c:	dd16      	ble.n	800c67c <ai_conv2d_stripe_f32.constprop.0+0x1fc>
 800c64e:	2000      	movs	r0, #0
 800c650:	eb02 040a 	add.w	r4, r2, sl
 800c654:	4294      	cmp	r4, r2
 800c656:	d90c      	bls.n	800c672 <ai_conv2d_stripe_f32.constprop.0+0x1f2>
 800c658:	4696      	mov	lr, r2
 800c65a:	469b      	mov	fp, r3
 800c65c:	ecbe 6a01 	vldmia	lr!, {s12}
 800c660:	ecfb 5a01 	vldmia	fp!, {s11}
 800c664:	4574      	cmp	r4, lr
 800c666:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c66a:	d8f7      	bhi.n	800c65c <ai_conv2d_stripe_f32.constprop.0+0x1dc>
 800c66c:	697c      	ldr	r4, [r7, #20]
 800c66e:	4423      	add	r3, r4
 800c670:	4422      	add	r2, r4
 800c672:	3001      	adds	r0, #1
 800c674:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800c676:	4286      	cmp	r6, r0
 800c678:	4422      	add	r2, r4
 800c67a:	d1e9      	bne.n	800c650 <ai_conv2d_stripe_f32.constprop.0+0x1d0>
 800c67c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c67e:	3101      	adds	r1, #1
 800c680:	4402      	add	r2, r0
 800c682:	458c      	cmp	ip, r1
 800c684:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c686:	4403      	add	r3, r0
 800c688:	d1df      	bne.n	800c64a <ai_conv2d_stripe_f32.constprop.0+0x1ca>
 800c68a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c68c:	f108 0801 	add.w	r8, r8, #1
 800c690:	ece2 7a01 	vstmia	r2!, {s15}
 800c694:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c698:	4413      	add	r3, r2
 800c69a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c69c:	4542      	cmp	r2, r8
 800c69e:	d8c9      	bhi.n	800c634 <ai_conv2d_stripe_f32.constprop.0+0x1b4>
 800c6a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c6a2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800c6a6:	4452      	add	r2, sl
 800c6a8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c6ac:	f10b 0b01 	add.w	fp, fp, #1
 800c6b0:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c6b2:	69ba      	ldr	r2, [r7, #24]
 800c6b4:	4589      	cmp	r9, r1
 800c6b6:	bf88      	it	hi
 800c6b8:	2200      	movhi	r2, #0
 800c6ba:	45d9      	cmp	r9, fp
 800c6bc:	f102 0201 	add.w	r2, r2, #1
 800c6c0:	4415      	add	r5, r2
 800c6c2:	d1ab      	bne.n	800c61c <ai_conv2d_stripe_f32.constprop.0+0x19c>
 800c6c4:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 800c6c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c6ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6ce:	440a      	add	r2, r1
 800c6d0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c6d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c6da:	653b      	str	r3, [r7, #80]	; 0x50
 800c6dc:	4411      	add	r1, r2
 800c6de:	eba8 0802 	sub.w	r8, r8, r2
 800c6e2:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800c6e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c6e8:	1a8a      	subs	r2, r1, r2
 800c6ea:	65ba      	str	r2, [r7, #88]	; 0x58
 800c6ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	f47f af3d 	bne.w	800c570 <ai_conv2d_stripe_f32.constprop.0+0xf0>
 800c6f6:	3774      	adds	r7, #116	; 0x74
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	ecbd 8b0e 	vpop	{d8-d14}
 800c6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c702:	fb98 f2fe 	sdiv	r2, r8, lr
 800c706:	fb0e 8212 	mls	r2, lr, r2, r8
 800c70a:	4641      	mov	r1, r8
 800c70c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c70e:	4640      	mov	r0, r8
 800c710:	ebae 0202 	sub.w	r2, lr, r2
 800c714:	e735      	b.n	800c582 <ai_conv2d_stripe_f32.constprop.0+0x102>
 800c716:	bf00      	nop
 800c718:	00000000 	.word	0x00000000
 800c71c:	fb0e f102 	mul.w	r1, lr, r2
 800c720:	2901      	cmp	r1, #1
 800c722:	f47f aecf 	bne.w	800c4c4 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800c726:	1ac2      	subs	r2, r0, r3
 800c728:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800c72c:	00b0      	lsls	r0, r6, #2
 800c72e:	eb0c 0103 	add.w	r1, ip, r3
 800c732:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c734:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c736:	63b8      	str	r0, [r7, #56]	; 0x38
 800c738:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 800c73c:	fb00 f004 	mul.w	r0, r0, r4
 800c740:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800c742:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800c746:	fb00 4101 	mla	r1, r0, r1, r4
 800c74a:	65b9      	str	r1, [r7, #88]	; 0x58
 800c74c:	f080 8263 	bcs.w	800cc16 <ai_conv2d_stripe_f32.constprop.0+0x796>
 800c750:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c754:	2a00      	cmp	r2, #0
 800c756:	d0ce      	beq.n	800c6f6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800c758:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c75c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800c760:	fb05 f202 	mul.w	r2, r5, r2
 800c764:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 800c718 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800c768:	fb00 f303 	mul.w	r3, r0, r3
 800c76c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c76e:	fb06 f302 	mul.w	r3, r6, r2
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	643b      	str	r3, [r7, #64]	; 0x40
 800c776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c778:	fb03 f306 	mul.w	r3, r3, r6
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	627b      	str	r3, [r7, #36]	; 0x24
 800c780:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c784:	fb03 f306 	mul.w	r3, r3, r6
 800c788:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c78c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c78e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c798:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c79a:	2300      	movs	r3, #0
 800c79c:	653b      	str	r3, [r7, #80]	; 0x50
 800c79e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f000 8104 	beq.w	800c9ae <ai_conv2d_stripe_f32.constprop.0+0x52e>
 800c7a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7a8:	ecf3 6a01 	vldmia	r3!, {s13}
 800c7ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f000 80e8 	beq.w	800c988 <ai_conv2d_stripe_f32.constprop.0+0x508>
 800c7b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c7bc:	f04f 0b00 	mov.w	fp, #0
 800c7c0:	f8d7 90f8 	ldr.w	r9, [r7, #248]	; 0xf8
 800c7c4:	425d      	negs	r5, r3
 800c7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c8:	657b      	str	r3, [r7, #84]	; 0x54
 800c7ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7cc:	647b      	str	r3, [r7, #68]	; 0x44
 800c7ce:	f1b9 0f00 	cmp.w	r9, #0
 800c7d2:	f2c0 8219 	blt.w	800cc08 <ai_conv2d_stripe_f32.constprop.0+0x788>
 800c7d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7d8:	2300      	movs	r3, #0
 800c7da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7dc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800c7de:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800c7e0:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800c7e4:	fb02 0c06 	mla	ip, r2, r6, r0
 800c7e8:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c7ec:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c7f0:	4428      	add	r0, r5
 800c7f2:	42a0      	cmp	r0, r4
 800c7f4:	bf94      	ite	ls
 800c7f6:	ebc3 0300 	rsbls	r3, r3, r0
 800c7fa:	ebc3 0304 	rsbhi	r3, r3, r4
 800c7fe:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800c802:	1ac4      	subs	r4, r0, r3
 800c804:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800c808:	1ac0      	subs	r0, r0, r3
 800c80a:	fb02 f303 	mul.w	r3, r2, r3
 800c80e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c810:	2a00      	cmp	r2, #0
 800c812:	f340 81f6 	ble.w	800cc02 <ai_conv2d_stripe_f32.constprop.0+0x782>
 800c816:	fb06 f204 	mul.w	r2, r6, r4
 800c81a:	f023 040f 	bic.w	r4, r3, #15
 800c81e:	eeb0 7a66 	vmov.f32	s14, s13
 800c822:	637a      	str	r2, [r7, #52]	; 0x34
 800c824:	fb06 f200 	mul.w	r2, r6, r0
 800c828:	1e60      	subs	r0, r4, #1
 800c82a:	2600      	movs	r6, #0
 800c82c:	0900      	lsrs	r0, r0, #4
 800c82e:	633a      	str	r2, [r7, #48]	; 0x30
 800c830:	3001      	adds	r0, #1
 800c832:	0102      	lsls	r2, r0, #4
 800c834:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800c838:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c83a:	4662      	mov	r2, ip
 800c83c:	2c00      	cmp	r4, #0
 800c83e:	f340 81e8 	ble.w	800cc12 <ai_conv2d_stripe_f32.constprop.0+0x792>
 800c842:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800c846:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800c84a:	f04f 0800 	mov.w	r8, #0
 800c84e:	ed50 5a0f 	vldr	s11, [r0, #-60]	; 0xffffffc4
 800c852:	f108 0810 	add.w	r8, r8, #16
 800c856:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800c85a:	3040      	adds	r0, #64	; 0x40
 800c85c:	ed5c 3a10 	vldr	s7, [ip, #-64]	; 0xffffffc0
 800c860:	45a0      	cmp	r8, r4
 800c862:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c866:	ed10 4a20 	vldr	s8, [r0, #-128]	; 0xffffff80
 800c86a:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 800c86e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800c872:	ed10 5a1e 	vldr	s10, [r0, #-120]	; 0xffffff88
 800c876:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c87a:	ed50 5a1d 	vldr	s11, [r0, #-116]	; 0xffffff8c
 800c87e:	ed1c ea1d 	vldr	s28, [ip, #-116]	; 0xffffff8c
 800c882:	ed5c da1c 	vldr	s27, [ip, #-112]	; 0xffffff90
 800c886:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800c88a:	ed5c ca1b 	vldr	s25, [ip, #-108]	; 0xffffff94
 800c88e:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800c892:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c896:	ed5c ba1a 	vldr	s23, [ip, #-104]	; 0xffffff98
 800c89a:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800c89e:	ed5c aa19 	vldr	s21, [ip, #-100]	; 0xffffff9c
 800c8a2:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800c8a6:	ed5c 9a18 	vldr	s19, [ip, #-96]	; 0xffffffa0
 800c8aa:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800c8ae:	eeee 7a25 	vfma.f32	s15, s28, s11
 800c8b2:	ed5c 8a17 	vldr	s17, [ip, #-92]	; 0xffffffa4
 800c8b6:	ed10 8a17 	vldr	s16, [r0, #-92]	; 0xffffffa4
 800c8ba:	ed1c 0a16 	vldr	s0, [ip, #-88]	; 0xffffffa8
 800c8be:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 800c8c2:	ed1c 1a15 	vldr	s2, [ip, #-84]	; 0xffffffac
 800c8c6:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 800c8ca:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800c8ce:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 800c8d2:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 800c8d6:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 800c8da:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 800c8de:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 800c8e2:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 800c8e6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800c8ea:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 800c8ee:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 800c8f2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800c8f6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800c8fa:	eee9 7a89 	vfma.f32	s15, s19, s18
 800c8fe:	eee8 7a88 	vfma.f32	s15, s17, s16
 800c902:	eee0 7a20 	vfma.f32	s15, s0, s1
 800c906:	eee1 7a21 	vfma.f32	s15, s2, s3
 800c90a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c90e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c912:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c916:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c91a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c91e:	db96      	blt.n	800c84e <ai_conv2d_stripe_f32.constprop.0+0x3ce>
 800c920:	4471      	add	r1, lr
 800c922:	4472      	add	r2, lr
 800c924:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c926:	4283      	cmp	r3, r0
 800c928:	dd11      	ble.n	800c94e <ai_conv2d_stripe_f32.constprop.0+0x4ce>
 800c92a:	4684      	mov	ip, r0
 800c92c:	468a      	mov	sl, r1
 800c92e:	4690      	mov	r8, r2
 800c930:	f10c 0c01 	add.w	ip, ip, #1
 800c934:	ecf8 5a01 	vldmia	r8!, {s11}
 800c938:	ecfa 7a01 	vldmia	sl!, {s15}
 800c93c:	4563      	cmp	r3, ip
 800c93e:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c942:	d1f5      	bne.n	800c930 <ai_conv2d_stripe_f32.constprop.0+0x4b0>
 800c944:	1a18      	subs	r0, r3, r0
 800c946:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800c94a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800c94e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c950:	3601      	adds	r6, #1
 800c952:	4401      	add	r1, r0
 800c954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c956:	4402      	add	r2, r0
 800c958:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c95a:	42b0      	cmp	r0, r6
 800c95c:	f47f af6e 	bne.w	800c83c <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 800c960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c962:	f10b 0b01 	add.w	fp, fp, #1
 800c966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c968:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c96a:	ed83 7a00 	vstr	s14, [r3]
 800c96e:	440b      	add	r3, r1
 800c970:	4491      	add	r9, r2
 800c972:	1aad      	subs	r5, r5, r2
 800c974:	647b      	str	r3, [r7, #68]	; 0x44
 800c976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c97a:	4413      	add	r3, r2
 800c97c:	657b      	str	r3, [r7, #84]	; 0x54
 800c97e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c982:	455b      	cmp	r3, fp
 800c984:	f47f af23 	bne.w	800c7ce <ai_conv2d_stripe_f32.constprop.0+0x34e>
 800c988:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c98a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c98c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c98e:	440a      	add	r2, r1
 800c990:	3301      	adds	r3, #1
 800c992:	66ba      	str	r2, [r7, #104]	; 0x68
 800c994:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c996:	653b      	str	r3, [r7, #80]	; 0x50
 800c998:	3204      	adds	r2, #4
 800c99a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c99c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	f43f aea8 	beq.w	800c6f6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800c9a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f47f aefc 	bne.w	800c7a6 <ai_conv2d_stripe_f32.constprop.0+0x326>
 800c9ae:	eef0 6a46 	vmov.f32	s13, s12
 800c9b2:	e6fc      	b.n	800c7ae <ai_conv2d_stripe_f32.constprop.0+0x32e>
 800c9b4:	fb0e f102 	mul.w	r1, lr, r2
 800c9b8:	2901      	cmp	r1, #1
 800c9ba:	f47f ad83 	bne.w	800c4c4 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800c9be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c9c2:	2a00      	cmp	r2, #0
 800c9c4:	f43f ae97 	beq.w	800c6f6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800c9c8:	eb0c 0203 	add.w	r2, ip, r3
 800c9cc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800c9d0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800c9d4:	ed5f 3ab0 	vldr	s7, [pc, #-704]	; 800c718 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800c9d8:	fb01 f202 	mul.w	r2, r1, r2
 800c9dc:	1ac1      	subs	r1, r0, r3
 800c9de:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800c9e2:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800c9e6:	61fa      	str	r2, [r7, #28]
 800c9e8:	1a1a      	subs	r2, r3, r0
 800c9ea:	64f9      	str	r1, [r7, #76]	; 0x4c
 800c9ec:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 800c9f0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800c9f4:	442a      	add	r2, r5
 800c9f6:	fb03 f301 	mul.w	r3, r3, r1
 800c9fa:	fb01 f202 	mul.w	r2, r1, r2
 800c9fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca00:	0093      	lsls	r3, r2, #2
 800ca02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ca08:	fbb3 f3f6 	udiv	r3, r3, r6
 800ca0c:	61bb      	str	r3, [r7, #24]
 800ca0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca1a:	f1c3 0b00 	rsb	fp, r3, #0
 800ca1e:	00f3      	lsls	r3, r6, #3
 800ca20:	623b      	str	r3, [r7, #32]
 800ca22:	2300      	movs	r3, #0
 800ca24:	653b      	str	r3, [r7, #80]	; 0x50
 800ca26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f2c0 80e3 	blt.w	800cbf6 <ai_conv2d_stripe_f32.constprop.0+0x776>
 800ca30:	2500      	movs	r5, #0
 800ca32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ca34:	462b      	mov	r3, r5
 800ca36:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800ca3a:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800ca3e:	445a      	add	r2, fp
 800ca40:	69fc      	ldr	r4, [r7, #28]
 800ca42:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800ca44:	4282      	cmp	r2, r0
 800ca46:	bf28      	it	cs
 800ca48:	4602      	movcs	r2, r0
 800ca4a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800ca4e:	1ad2      	subs	r2, r2, r3
 800ca50:	1904      	adds	r4, r0, r4
 800ca52:	2e00      	cmp	r6, #0
 800ca54:	f000 8228 	beq.w	800cea8 <ai_conv2d_stripe_f32.constprop.0+0xa28>
 800ca58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca5a:	647e      	str	r6, [r7, #68]	; 0x44
 800ca5c:	429e      	cmp	r6, r3
 800ca5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca60:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ca64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca68:	fe03 3aa2 	vseleq.f32	s6, s7, s5
 800ca6c:	1a98      	subs	r0, r3, r2
 800ca6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ca72:	fb03 f000 	mul.w	r0, r3, r0
 800ca76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca7a:	1a9b      	subs	r3, r3, r2
 800ca7c:	442c      	add	r4, r5
 800ca7e:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800ca80:	fb08 5e04 	mla	lr, r8, r4, r5
 800ca84:	eb0e 0408 	add.w	r4, lr, r8
 800ca88:	45a6      	cmp	lr, r4
 800ca8a:	62bc      	str	r4, [r7, #40]	; 0x28
 800ca8c:	f080 809a 	bcs.w	800cbc4 <ai_conv2d_stripe_f32.constprop.0+0x744>
 800ca90:	0080      	lsls	r0, r0, #2
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	6378      	str	r0, [r7, #52]	; 0x34
 800ca96:	633b      	str	r3, [r7, #48]	; 0x30
 800ca98:	f022 0303 	bic.w	r3, r2, #3
 800ca9c:	e9d7 0434 	ldrd	r0, r4, [r7, #208]	; 0xd0
 800caa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800caa2:	42a0      	cmp	r0, r4
 800caa4:	f200 808e 	bhi.w	800cbc4 <ai_conv2d_stripe_f32.constprop.0+0x744>
 800caa8:	1e58      	subs	r0, r3, #1
 800caaa:	f04f 0900 	mov.w	r9, #0
 800caae:	0880      	lsrs	r0, r0, #2
 800cab0:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 800cab4:	1c43      	adds	r3, r0, #1
 800cab6:	fb00 a00a 	mla	r0, r0, sl, sl
 800caba:	6138      	str	r0, [r7, #16]
 800cabc:	0118      	lsls	r0, r3, #4
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	6178      	str	r0, [r7, #20]
 800cac2:	e9c7 b302 	strd	fp, r3, [r7, #8]
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800caca:	4499      	add	r9, r3
 800cacc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cace:	181c      	adds	r4, r3, r0
 800cad0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800cad4:	65bc      	str	r4, [r7, #88]	; 0x58
 800cad6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800cad8:	627b      	str	r3, [r7, #36]	; 0x24
 800cada:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800cade:	1820      	adds	r0, r4, r0
 800cae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cae2:	6438      	str	r0, [r7, #64]	; 0x40
 800cae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cae6:	ecb3 7a01 	vldmia	r3!, {s14}
 800caea:	65bb      	str	r3, [r7, #88]	; 0x58
 800caec:	ee27 7a03 	vmul.f32	s14, s14, s6
 800caf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	dd55      	ble.n	800cba2 <ai_conv2d_stripe_f32.constprop.0+0x722>
 800caf6:	4675      	mov	r5, lr
 800caf8:	f04f 0b00 	mov.w	fp, #0
 800cafc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f340 81d0 	ble.w	800cea4 <ai_conv2d_stripe_f32.constprop.0+0xa24>
 800cb04:	6a38      	ldr	r0, [r7, #32]
 800cb06:	f101 0310 	add.w	r3, r1, #16
 800cb0a:	2600      	movs	r6, #0
 800cb0c:	607a      	str	r2, [r7, #4]
 800cb0e:	182c      	adds	r4, r5, r0
 800cb10:	4628      	mov	r0, r5
 800cb12:	eb00 0c08 	add.w	ip, r0, r8
 800cb16:	ed13 4a03 	vldr	s8, [r3, #-12]
 800cb1a:	ed53 4a04 	vldr	s9, [r3, #-16]
 800cb1e:	3604      	adds	r6, #4
 800cb20:	eddc 7a00 	vldr	s15, [ip]
 800cb24:	eb04 0c08 	add.w	ip, r4, r8
 800cb28:	ed90 5a00 	vldr	s10, [r0]
 800cb2c:	3310      	adds	r3, #16
 800cb2e:	ee67 7a84 	vmul.f32	s15, s15, s8
 800cb32:	edd4 6a00 	vldr	s13, [r4]
 800cb36:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 800cb3a:	4450      	add	r0, sl
 800cb3c:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800cb40:	4454      	add	r4, sl
 800cb42:	eee4 7a85 	vfma.f32	s15, s9, s10
 800cb46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb48:	4296      	cmp	r6, r2
 800cb4a:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800cb4e:	eddc 6a00 	vldr	s13, [ip]
 800cb52:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cb56:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cb5a:	dbda      	blt.n	800cb12 <ai_conv2d_stripe_f32.constprop.0+0x692>
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	441d      	add	r5, r3
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	68fc      	ldr	r4, [r7, #12]
 800cb66:	4419      	add	r1, r3
 800cb68:	42a2      	cmp	r2, r4
 800cb6a:	dd11      	ble.n	800cb90 <ai_conv2d_stripe_f32.constprop.0+0x710>
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	462b      	mov	r3, r5
 800cb70:	460e      	mov	r6, r1
 800cb72:	3001      	adds	r0, #1
 800cb74:	edd3 7a00 	vldr	s15, [r3]
 800cb78:	ecf6 6a01 	vldmia	r6!, {s13}
 800cb7c:	4443      	add	r3, r8
 800cb7e:	4290      	cmp	r0, r2
 800cb80:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cb84:	d1f5      	bne.n	800cb72 <ai_conv2d_stripe_f32.constprop.0+0x6f2>
 800cb86:	1b14      	subs	r4, r2, r4
 800cb88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb8c:	fb04 5508 	mla	r5, r4, r8, r5
 800cb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb92:	f10b 0b01 	add.w	fp, fp, #1
 800cb96:	441d      	add	r5, r3
 800cb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9a:	4419      	add	r1, r3
 800cb9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb9e:	459b      	cmp	fp, r3
 800cba0:	d1ac      	bne.n	800cafc <ai_conv2d_stripe_f32.constprop.0+0x67c>
 800cba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cba4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cba6:	eca3 7a01 	vstmia	r3!, {s14}
 800cbaa:	643b      	str	r3, [r7, #64]	; 0x40
 800cbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbae:	4419      	add	r1, r3
 800cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb2:	4283      	cmp	r3, r0
 800cbb4:	d196      	bne.n	800cae4 <ai_conv2d_stripe_f32.constprop.0+0x664>
 800cbb6:	f10e 0e04 	add.w	lr, lr, #4
 800cbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbbc:	459e      	cmp	lr, r3
 800cbbe:	d382      	bcc.n	800cac6 <ai_conv2d_stripe_f32.constprop.0+0x646>
 800cbc0:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800cbc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cbc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cbc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbca:	440a      	add	r2, r1
 800cbcc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cbce:	3301      	adds	r3, #1
 800cbd0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cbd2:	ebab 0b01 	sub.w	fp, fp, r1
 800cbd6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800cbda:	653b      	str	r3, [r7, #80]	; 0x50
 800cbdc:	440a      	add	r2, r1
 800cbde:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800cbe2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	f43f ad85 	beq.w	800c6f6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800cbec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	f6bf af1d 	bge.w	800ca30 <ai_conv2d_stripe_f32.constprop.0+0x5b0>
 800cbf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbf8:	465b      	mov	r3, fp
 800cbfa:	465d      	mov	r5, fp
 800cbfc:	eb02 010b 	add.w	r1, r2, fp
 800cc00:	e719      	b.n	800ca36 <ai_conv2d_stripe_f32.constprop.0+0x5b6>
 800cc02:	eeb0 7a66 	vmov.f32	s14, s13
 800cc06:	e6ab      	b.n	800c960 <ai_conv2d_stripe_f32.constprop.0+0x4e0>
 800cc08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc0a:	462b      	mov	r3, r5
 800cc0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cc0e:	442a      	add	r2, r5
 800cc10:	e5e4      	b.n	800c7dc <ai_conv2d_stripe_f32.constprop.0+0x35c>
 800cc12:	2000      	movs	r0, #0
 800cc14:	e687      	b.n	800c926 <ai_conv2d_stripe_f32.constprop.0+0x4a6>
 800cc16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cc1a:	4669      	mov	r1, sp
 800cc1c:	fb05 f202 	mul.w	r2, r5, r2
 800cc20:	ee0e 1a90 	vmov	s29, r1
 800cc24:	fb06 f202 	mul.w	r2, r6, r2
 800cc28:	0095      	lsls	r5, r2, #2
 800cc2a:	637a      	str	r2, [r7, #52]	; 0x34
 800cc2c:	1dea      	adds	r2, r5, #7
 800cc2e:	f022 0207 	bic.w	r2, r2, #7
 800cc32:	ebad 0d02 	sub.w	sp, sp, r2
 800cc36:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800cc3a:	46e9      	mov	r9, sp
 800cc3c:	2a00      	cmp	r2, #0
 800cc3e:	f000 812d 	beq.w	800ce9c <ai_conv2d_stripe_f32.constprop.0+0xa1c>
 800cc42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cc46:	46ca      	mov	sl, r9
 800cc48:	ed9f 8aa7 	vldr	s16, [pc, #668]	; 800cee8 <ai_conv2d_stripe_f32.constprop.0+0xa68>
 800cc4c:	46a9      	mov	r9, r5
 800cc4e:	fb02 f303 	mul.w	r3, r2, r3
 800cc52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc54:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800cc58:	647b      	str	r3, [r7, #68]	; 0x44
 800cc5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc5c:	fb03 f306 	mul.w	r3, r3, r6
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	623b      	str	r3, [r7, #32]
 800cc64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cc68:	fb03 f306 	mul.w	r3, r3, r6
 800cc6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc70:	627b      	str	r3, [r7, #36]	; 0x24
 800cc72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc7e:	2300      	movs	r3, #0
 800cc80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc84:	b123      	cbz	r3, 800cc90 <ai_conv2d_stripe_f32.constprop.0+0x810>
 800cc86:	464a      	mov	r2, r9
 800cc88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cc8a:	4650      	mov	r0, sl
 800cc8c:	f001 ffe0 	bl	800ec50 <memcpy>
 800cc90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f000 811c 	beq.w	800ced0 <ai_conv2d_stripe_f32.constprop.0+0xa50>
 800cc98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc9a:	ecf3 6a01 	vldmia	r3!, {s13}
 800cc9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	f000 80eb 	beq.w	800ce80 <ai_conv2d_stripe_f32.constprop.0+0xa00>
 800ccaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ccae:	f8c7 901c 	str.w	r9, [r7, #28]
 800ccb2:	425d      	negs	r5, r3
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb6:	653b      	str	r3, [r7, #80]	; 0x50
 800ccb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccba:	643b      	str	r3, [r7, #64]	; 0x40
 800ccbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ccc0:	657b      	str	r3, [r7, #84]	; 0x54
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f2c0 8107 	blt.w	800cedc <ai_conv2d_stripe_f32.constprop.0+0xa5c>
 800ccce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccd4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800ccd8:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 800ccdc:	4428      	add	r0, r5
 800ccde:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800cce0:	42b0      	cmp	r0, r6
 800cce2:	bf94      	ite	ls
 800cce4:	ebc3 0300 	rsbls	r3, r3, r0
 800cce8:	ebc3 0306 	rsbhi	r3, r3, r6
 800ccec:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800ccf0:	fb02 a204 	mla	r2, r2, r4, sl
 800ccf4:	eba0 0c03 	sub.w	ip, r0, r3
 800ccf8:	1af0      	subs	r0, r6, r3
 800ccfa:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800ccfe:	fb06 f303 	mul.w	r3, r6, r3
 800cd02:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 800cd04:	2e00      	cmp	r6, #0
 800cd06:	f340 80e6 	ble.w	800ced6 <ai_conv2d_stripe_f32.constprop.0+0xa56>
 800cd0a:	fb04 f000 	mul.w	r0, r4, r0
 800cd0e:	eeb0 7a66 	vmov.f32	s14, s13
 800cd12:	fb04 fc0c 	mul.w	ip, r4, ip
 800cd16:	f023 040f 	bic.w	r4, r3, #15
 800cd1a:	6338      	str	r0, [r7, #48]	; 0x30
 800cd1c:	2600      	movs	r6, #0
 800cd1e:	1e60      	subs	r0, r4, #1
 800cd20:	0900      	lsrs	r0, r0, #4
 800cd22:	3001      	adds	r0, #1
 800cd24:	ea4f 1880 	mov.w	r8, r0, lsl #6
 800cd28:	0100      	lsls	r0, r0, #4
 800cd2a:	62b8      	str	r0, [r7, #40]	; 0x28
 800cd2c:	2c00      	cmp	r4, #0
 800cd2e:	f340 80cd 	ble.w	800cecc <ai_conv2d_stripe_f32.constprop.0+0xa4c>
 800cd32:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 800cd36:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800cd3a:	f04f 0900 	mov.w	r9, #0
 800cd3e:	ed10 6a0f 	vldr	s12, [r0, #-60]	; 0xffffffc4
 800cd42:	f109 0910 	add.w	r9, r9, #16
 800cd46:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 800cd4a:	3040      	adds	r0, #64	; 0x40
 800cd4c:	ed1e 4a10 	vldr	s8, [lr, #-64]	; 0xffffffc0
 800cd50:	45a1      	cmp	r9, r4
 800cd52:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cd56:	ed50 4a20 	vldr	s9, [r0, #-128]	; 0xffffff80
 800cd5a:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 800cd5e:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 800cd62:	ed50 5a1e 	vldr	s11, [r0, #-120]	; 0xffffff88
 800cd66:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cd6a:	ed10 6a1d 	vldr	s12, [r0, #-116]	; 0xffffff8c
 800cd6e:	ed1e ea1d 	vldr	s28, [lr, #-116]	; 0xffffff8c
 800cd72:	ed5e da1c 	vldr	s27, [lr, #-112]	; 0xffffff90
 800cd76:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800cd7a:	ed5e ca1b 	vldr	s25, [lr, #-108]	; 0xffffff94
 800cd7e:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800cd82:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cd86:	ed5e ba1a 	vldr	s23, [lr, #-104]	; 0xffffff98
 800cd8a:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800cd8e:	ed5e aa19 	vldr	s21, [lr, #-100]	; 0xffffff9c
 800cd92:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800cd96:	ed5e 9a18 	vldr	s19, [lr, #-96]	; 0xffffffa0
 800cd9a:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800cd9e:	eeee 7a06 	vfma.f32	s15, s28, s12
 800cda2:	ed5e 8a17 	vldr	s17, [lr, #-92]	; 0xffffffa4
 800cda6:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 800cdaa:	ed5e 0a16 	vldr	s1, [lr, #-88]	; 0xffffffa8
 800cdae:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 800cdb2:	ed5e 1a15 	vldr	s3, [lr, #-84]	; 0xffffffac
 800cdb6:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 800cdba:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800cdbe:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 800cdc2:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800cdc6:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 800cdca:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800cdce:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 800cdd2:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800cdd6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800cdda:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 800cdde:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800cde2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800cde6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800cdea:	eee9 7a89 	vfma.f32	s15, s19, s18
 800cdee:	eee8 7a80 	vfma.f32	s15, s17, s0
 800cdf2:	eee0 7a81 	vfma.f32	s15, s1, s2
 800cdf6:	eee1 7a82 	vfma.f32	s15, s3, s4
 800cdfa:	eee2 7a83 	vfma.f32	s15, s5, s6
 800cdfe:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ce02:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ce06:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ce0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce0e:	db96      	blt.n	800cd3e <ai_conv2d_stripe_f32.constprop.0+0x8be>
 800ce10:	4441      	add	r1, r8
 800ce12:	4442      	add	r2, r8
 800ce14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce16:	4283      	cmp	r3, r0
 800ce18:	dd11      	ble.n	800ce3e <ai_conv2d_stripe_f32.constprop.0+0x9be>
 800ce1a:	4686      	mov	lr, r0
 800ce1c:	468b      	mov	fp, r1
 800ce1e:	4691      	mov	r9, r2
 800ce20:	f10e 0e01 	add.w	lr, lr, #1
 800ce24:	ecb9 6a01 	vldmia	r9!, {s12}
 800ce28:	ecfb 7a01 	vldmia	fp!, {s15}
 800ce2c:	4573      	cmp	r3, lr
 800ce2e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ce32:	d1f5      	bne.n	800ce20 <ai_conv2d_stripe_f32.constprop.0+0x9a0>
 800ce34:	1a18      	subs	r0, r3, r0
 800ce36:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800ce3a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ce3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce40:	3601      	adds	r6, #1
 800ce42:	4461      	add	r1, ip
 800ce44:	4402      	add	r2, r0
 800ce46:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ce48:	42b0      	cmp	r0, r6
 800ce4a:	f47f af6f 	bne.w	800cd2c <ai_conv2d_stripe_f32.constprop.0+0x8ac>
 800ce4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce50:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ce52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce54:	4401      	add	r1, r0
 800ce56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce58:	ed82 7a00 	vstr	s14, [r2]
 800ce5c:	1a2d      	subs	r5, r5, r0
 800ce5e:	6579      	str	r1, [r7, #84]	; 0x54
 800ce60:	3301      	adds	r3, #1
 800ce62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce66:	440a      	add	r2, r1
 800ce68:	6a39      	ldr	r1, [r7, #32]
 800ce6a:	643a      	str	r2, [r7, #64]	; 0x40
 800ce6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce6e:	440a      	add	r2, r1
 800ce70:	653a      	str	r2, [r7, #80]	; 0x50
 800ce72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ce76:	429a      	cmp	r2, r3
 800ce78:	f47f af25 	bne.w	800ccc6 <ai_conv2d_stripe_f32.constprop.0+0x846>
 800ce7c:	f8d7 901c 	ldr.w	r9, [r7, #28]
 800ce80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce84:	444a      	add	r2, r9
 800ce86:	3301      	adds	r3, #1
 800ce88:	66ba      	str	r2, [r7, #104]	; 0x68
 800ce8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ce8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce8e:	3204      	adds	r2, #4
 800ce90:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ce92:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800ce96:	429a      	cmp	r2, r3
 800ce98:	f47f aef3 	bne.w	800cc82 <ai_conv2d_stripe_f32.constprop.0+0x802>
 800ce9c:	ee1e 3a90 	vmov	r3, s29
 800cea0:	469d      	mov	sp, r3
 800cea2:	e428      	b.n	800c6f6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800cea4:	2400      	movs	r4, #0
 800cea6:	e65f      	b.n	800cb68 <ai_conv2d_stripe_f32.constprop.0+0x6e8>
 800cea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ceaa:	eeb0 3a63 	vmov.f32	s6, s7
 800ceae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ceb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceb4:	647b      	str	r3, [r7, #68]	; 0x44
 800ceb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ceba:	1a98      	subs	r0, r3, r2
 800cebc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cec0:	fb03 f000 	mul.w	r0, r3, r0
 800cec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cec8:	1a9b      	subs	r3, r3, r2
 800ceca:	e5d7      	b.n	800ca7c <ai_conv2d_stripe_f32.constprop.0+0x5fc>
 800cecc:	2000      	movs	r0, #0
 800cece:	e7a2      	b.n	800ce16 <ai_conv2d_stripe_f32.constprop.0+0x996>
 800ced0:	eef0 6a48 	vmov.f32	s13, s16
 800ced4:	e6e4      	b.n	800cca0 <ai_conv2d_stripe_f32.constprop.0+0x820>
 800ced6:	eeb0 7a66 	vmov.f32	s14, s13
 800ceda:	e7b8      	b.n	800ce4e <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 800cedc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cede:	462b      	mov	r3, r5
 800cee0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cee2:	442a      	add	r2, r5
 800cee4:	e6f6      	b.n	800ccd4 <ai_conv2d_stripe_f32.constprop.0+0x854>
 800cee6:	bf00      	nop
 800cee8:	00000000 	.word	0x00000000

0800ceec <ai_dict_decompress_f32>:
 800ceec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cef0:	9d08      	ldr	r5, [sp, #32]
 800cef2:	2b04      	cmp	r3, #4
 800cef4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800cef8:	d00e      	beq.n	800cf18 <ai_dict_decompress_f32+0x2c>
 800cefa:	2b08      	cmp	r3, #8
 800cefc:	d10a      	bne.n	800cf14 <ai_dict_decompress_f32+0x28>
 800cefe:	42a8      	cmp	r0, r5
 800cf00:	d208      	bcs.n	800cf14 <ai_dict_decompress_f32+0x28>
 800cf02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f840 3b04 	str.w	r3, [r0], #4
 800cf10:	4285      	cmp	r5, r0
 800cf12:	d8f6      	bhi.n	800cf02 <ai_dict_decompress_f32+0x16>
 800cf14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf18:	9b07      	ldr	r3, [sp, #28]
 800cf1a:	085e      	lsrs	r6, r3, #1
 800cf1c:	f003 0701 	and.w	r7, r3, #1
 800cf20:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800cf24:	f106 38ff 	add.w	r8, r6, #4294967295
 800cf28:	42a8      	cmp	r0, r5
 800cf2a:	d2f3      	bcs.n	800cf14 <ai_dict_decompress_f32+0x28>
 800cf2c:	b33e      	cbz	r6, 800cf7e <ai_dict_decompress_f32+0x92>
 800cf2e:	f100 0e08 	add.w	lr, r0, #8
 800cf32:	f101 3cff 	add.w	ip, r1, #4294967295
 800cf36:	eb01 0408 	add.w	r4, r1, r8
 800cf3a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800cf3e:	f10e 0e08 	add.w	lr, lr, #8
 800cf42:	091b      	lsrs	r3, r3, #4
 800cf44:	4564      	cmp	r4, ip
 800cf46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f84e 3c10 	str.w	r3, [lr, #-16]
 800cf50:	f89c 3000 	ldrb.w	r3, [ip]
 800cf54:	f003 030f 	and.w	r3, r3, #15
 800cf58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800cf62:	d1ea      	bne.n	800cf3a <ai_dict_decompress_f32+0x4e>
 800cf64:	4431      	add	r1, r6
 800cf66:	4448      	add	r0, r9
 800cf68:	2f00      	cmp	r7, #0
 800cf6a:	d0dd      	beq.n	800cf28 <ai_dict_decompress_f32+0x3c>
 800cf6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf70:	091b      	lsrs	r3, r3, #4
 800cf72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f840 3b04 	str.w	r3, [r0], #4
 800cf7c:	e7d4      	b.n	800cf28 <ai_dict_decompress_f32+0x3c>
 800cf7e:	2f00      	cmp	r7, #0
 800cf80:	d1f4      	bne.n	800cf6c <ai_dict_decompress_f32+0x80>
 800cf82:	42a8      	cmp	r0, r5
 800cf84:	d3fd      	bcc.n	800cf82 <ai_dict_decompress_f32+0x96>
 800cf86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf8a:	bf00      	nop

0800cf8c <forward_conv2d_nl_pool>:
 800cf8c:	6981      	ldr	r1, [r0, #24]
 800cf8e:	880b      	ldrh	r3, [r1, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f000 814a 	beq.w	800d22a <forward_conv2d_nl_pool+0x29e>
 800cf96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf9a:	ed2d 8b04 	vpush	{d8-d9}
 800cf9e:	684e      	ldr	r6, [r1, #4]
 800cfa0:	b0b9      	sub	sp, #228	; 0xe4
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	6872      	ldr	r2, [r6, #4]
 800cfa6:	b102      	cbz	r2, 800cfaa <forward_conv2d_nl_pool+0x1e>
 800cfa8:	6812      	ldr	r2, [r2, #0]
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	f000 824d 	beq.w	800d44a <forward_conv2d_nl_pool+0x4be>
 800cfb0:	6930      	ldr	r0, [r6, #16]
 800cfb2:	9011      	str	r0, [sp, #68]	; 0x44
 800cfb4:	b108      	cbz	r0, 800cfba <forward_conv2d_nl_pool+0x2e>
 800cfb6:	6800      	ldr	r0, [r0, #0]
 800cfb8:	9011      	str	r0, [sp, #68]	; 0x44
 800cfba:	2b02      	cmp	r3, #2
 800cfbc:	f000 8137 	beq.w	800d22e <forward_conv2d_nl_pool+0x2a2>
 800cfc0:	69f0      	ldr	r0, [r6, #28]
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	f000 8231 	beq.w	800d42a <forward_conv2d_nl_pool+0x49e>
 800cfc8:	8b37      	ldrh	r7, [r6, #24]
 800cfca:	6806      	ldr	r6, [r0, #0]
 800cfcc:	2f01      	cmp	r7, #1
 800cfce:	f240 8233 	bls.w	800d438 <forward_conv2d_nl_pool+0x4ac>
 800cfd2:	6845      	ldr	r5, [r0, #4]
 800cfd4:	ee08 5a10 	vmov	s16, r5
 800cfd8:	6880      	ldr	r0, [r0, #8]
 800cfda:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800cfde:	6992      	ldr	r2, [r2, #24]
 800cfe0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cfe4:	6892      	ldr	r2, [r2, #8]
 800cfe6:	952a      	str	r5, [sp, #168]	; 0xa8
 800cfe8:	ee09 2a10 	vmov	s18, r2
 800cfec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cfee:	f8d4 e03c 	ldr.w	lr, [r4, #60]	; 0x3c
 800cff2:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800cff6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800cffa:	f8d9 500c 	ldr.w	r5, [r9, #12]
 800cffe:	6d67      	ldr	r7, [r4, #84]	; 0x54
 800d000:	951d      	str	r5, [sp, #116]	; 0x74
 800d002:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800d006:	69b2      	ldr	r2, [r6, #24]
 800d008:	951f      	str	r5, [sp, #124]	; 0x7c
 800d00a:	f8d8 500c 	ldr.w	r5, [r8, #12]
 800d00e:	f8d9 b004 	ldr.w	fp, [r9, #4]
 800d012:	9527      	str	r5, [sp, #156]	; 0x9c
 800d014:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d018:	952e      	str	r5, [sp, #184]	; 0xb8
 800d01a:	8d25      	ldrh	r5, [r4, #40]	; 0x28
 800d01c:	952f      	str	r5, [sp, #188]	; 0xbc
 800d01e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800d020:	9513      	str	r5, [sp, #76]	; 0x4c
 800d022:	f8de 5000 	ldr.w	r5, [lr]
 800d026:	9515      	str	r5, [sp, #84]	; 0x54
 800d028:	e9de a501 	ldrd	sl, r5, [lr, #4]
 800d02c:	9516      	str	r5, [sp, #88]	; 0x58
 800d02e:	69e5      	ldr	r5, [r4, #28]
 800d030:	9530      	str	r5, [sp, #192]	; 0xc0
 800d032:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800d034:	9526      	str	r5, [sp, #152]	; 0x98
 800d036:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d038:	9512      	str	r5, [sp, #72]	; 0x48
 800d03a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800d03e:	9528      	str	r5, [sp, #160]	; 0xa0
 800d040:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800d044:	9529      	str	r5, [sp, #164]	; 0xa4
 800d046:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800d048:	9522      	str	r5, [sp, #136]	; 0x88
 800d04a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800d04c:	9523      	str	r5, [sp, #140]	; 0x8c
 800d04e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d050:	951a      	str	r5, [sp, #104]	; 0x68
 800d052:	e9d7 8500 	ldrd	r8, r5, [r7]
 800d056:	9524      	str	r5, [sp, #144]	; 0x90
 800d058:	6895      	ldr	r5, [r2, #8]
 800d05a:	ee08 5a90 	vmov	s17, r5
 800d05e:	ee18 5a10 	vmov	r5, s16
 800d062:	b11d      	cbz	r5, 800d06c <forward_conv2d_nl_pool+0xe0>
 800d064:	69af      	ldr	r7, [r5, #24]
 800d066:	68bd      	ldr	r5, [r7, #8]
 800d068:	ee08 5a10 	vmov	s16, r5
 800d06c:	f8d4 9020 	ldr.w	r9, [r4, #32]
 800d070:	2800      	cmp	r0, #0
 800d072:	f000 81c7 	beq.w	800d404 <forward_conv2d_nl_pool+0x478>
 800d076:	6987      	ldr	r7, [r0, #24]
 800d078:	2f00      	cmp	r7, #0
 800d07a:	f000 81cc 	beq.w	800d416 <forward_conv2d_nl_pool+0x48a>
 800d07e:	6943      	ldr	r3, [r0, #20]
 800d080:	f8d7 9008 	ldr.w	r9, [r7, #8]
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d08a:	9333      	str	r3, [sp, #204]	; 0xcc
 800d08c:	f001 fc3a 	bl	800e904 <ai_array_get_byte_size>
 800d090:	69a1      	ldr	r1, [r4, #24]
 800d092:	69b2      	ldr	r2, [r6, #24]
 800d094:	880b      	ldrh	r3, [r1, #0]
 800d096:	9014      	str	r0, [sp, #80]	; 0x50
 800d098:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d09a:	902d      	str	r0, [sp, #180]	; 0xb4
 800d09c:	2800      	cmp	r0, #0
 800d09e:	f000 81ae 	beq.w	800d3fe <forward_conv2d_nl_pool+0x472>
 800d0a2:	fa1f f58a 	uxth.w	r5, sl
 800d0a6:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 800d0aa:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800d0ae:	9517      	str	r5, [sp, #92]	; 0x5c
 800d0b0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800d0b2:	9015      	str	r0, [sp, #84]	; 0x54
 800d0b4:	fa10 f085 	uxtah	r0, r0, r5
 800d0b8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800d0ba:	961b      	str	r6, [sp, #108]	; 0x6c
 800d0bc:	4428      	add	r0, r5
 800d0be:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800d0c2:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 800d0c4:	3e01      	subs	r6, #1
 800d0c6:	1e6f      	subs	r7, r5, #1
 800d0c8:	fb07 5506 	mla	r5, r7, r6, r5
 800d0cc:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d0ce:	1b40      	subs	r0, r0, r5
 800d0d0:	952b      	str	r5, [sp, #172]	; 0xac
 800d0d2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800d0d4:	fbb0 f0f6 	udiv	r0, r0, r6
 800d0d8:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800d0dc:	1e6f      	subs	r7, r5, #1
 800d0de:	9013      	str	r0, [sp, #76]	; 0x4c
 800d0e0:	3e01      	subs	r6, #1
 800d0e2:	6810      	ldr	r0, [r2, #0]
 800d0e4:	fb07 5506 	mla	r5, r7, r6, r5
 800d0e8:	f3c0 4643 	ubfx	r6, r0, #17, #4
 800d0ec:	952c      	str	r5, [sp, #176]	; 0xb0
 800d0ee:	2e04      	cmp	r6, #4
 800d0f0:	6da5      	ldr	r5, [r4, #88]	; 0x58
 800d0f2:	9520      	str	r5, [sp, #128]	; 0x80
 800d0f4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800d0f6:	9519      	str	r5, [sp, #100]	; 0x64
 800d0f8:	f000 8148 	beq.w	800d38c <forward_conv2d_nl_pool+0x400>
 800d0fc:	2e08      	cmp	r6, #8
 800d0fe:	f000 8145 	beq.w	800d38c <forward_conv2d_nl_pool+0x400>
 800d102:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d104:	2b03      	cmp	r3, #3
 800d106:	fa0f f888 	sxth.w	r8, r8
 800d10a:	6992      	ldr	r2, [r2, #24]
 800d10c:	921c      	str	r2, [sp, #112]	; 0x70
 800d10e:	f240 81a1 	bls.w	800d454 <forward_conv2d_nl_pool+0x4c8>
 800d112:	684b      	ldr	r3, [r1, #4]
 800d114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d116:	2b00      	cmp	r3, #0
 800d118:	f000 819f 	beq.w	800d45a <forward_conv2d_nl_pool+0x4ce>
 800d11c:	681e      	ldr	r6, [r3, #0]
 800d11e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d120:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d122:	425b      	negs	r3, r3
 800d124:	9316      	str	r3, [sp, #88]	; 0x58
 800d126:	68f3      	ldr	r3, [r6, #12]
 800d128:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800d12c:	69b3      	ldr	r3, [r6, #24]
 800d12e:	689c      	ldr	r4, [r3, #8]
 800d130:	2a00      	cmp	r2, #0
 800d132:	d070      	beq.n	800d216 <forward_conv2d_nl_pool+0x28a>
 800d134:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d136:	fb0a f20b 	mul.w	r2, sl, fp
 800d13a:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 800d13e:	425b      	negs	r3, r3
 800d140:	9236      	str	r2, [sp, #216]	; 0xd8
 800d142:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800d146:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 800d14a:	9331      	str	r3, [sp, #196]	; 0xc4
 800d14c:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 800d150:	9234      	str	r2, [sp, #208]	; 0xd0
 800d152:	9332      	str	r3, [sp, #200]	; 0xc8
 800d154:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d156:	fb03 f30b 	mul.w	r3, r3, fp
 800d15a:	fb0a f303 	mul.w	r3, sl, r3
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	9335      	str	r3, [sp, #212]	; 0xd4
 800d162:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d164:	fb03 f30b 	mul.w	r3, r3, fp
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	9325      	str	r3, [sp, #148]	; 0x94
 800d16c:	2300      	movs	r3, #0
 800d16e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d170:	931e      	str	r3, [sp, #120]	; 0x78
 800d172:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 800d176:	9337      	str	r3, [sp, #220]	; 0xdc
 800d178:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d17a:	3301      	adds	r3, #1
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	dc6b      	bgt.n	800d258 <forward_conv2d_nl_pool+0x2cc>
 800d180:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d182:	2b00      	cmp	r3, #0
 800d184:	f2c0 80d4 	blt.w	800d330 <forward_conv2d_nl_pool+0x3a4>
 800d188:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d18a:	4598      	cmp	r8, r3
 800d18c:	d352      	bcc.n	800d234 <forward_conv2d_nl_pool+0x2a8>
 800d18e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d190:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d192:	69b0      	ldr	r0, [r6, #24]
 800d194:	440a      	add	r2, r1
 800d196:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800d198:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800d19a:	9216      	str	r2, [sp, #88]	; 0x58
 800d19c:	3701      	adds	r7, #1
 800d19e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d1a0:	9717      	str	r7, [sp, #92]	; 0x5c
 800d1a2:	3a01      	subs	r2, #1
 800d1a4:	9213      	str	r2, [sp, #76]	; 0x4c
 800d1a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d1a8:	1a52      	subs	r2, r2, r1
 800d1aa:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d1ac:	9215      	str	r2, [sp, #84]	; 0x54
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800d1b4:	9201      	str	r2, [sp, #4]
 800d1b6:	1a52      	subs	r2, r2, r1
 800d1b8:	eba8 0803 	sub.w	r8, r8, r3
 800d1bc:	9305      	str	r3, [sp, #20]
 800d1be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d1c0:	b292      	uxth	r2, r2
 800d1c2:	fa1f f18a 	uxth.w	r1, sl
 800d1c6:	9308      	str	r3, [sp, #32]
 800d1c8:	fa0f f888 	sxth.w	r8, r8
 800d1cc:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800d1d0:	9303      	str	r3, [sp, #12]
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	9307      	str	r3, [sp, #28]
 800d1d6:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 800d1da:	9306      	str	r3, [sp, #24]
 800d1dc:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800d1e0:	9304      	str	r3, [sp, #16]
 800d1e2:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 800d1e6:	9302      	str	r3, [sp, #8]
 800d1e8:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800d1ec:	9300      	str	r3, [sp, #0]
 800d1ee:	fa1f f38b 	uxth.w	r3, fp
 800d1f2:	47a8      	blx	r5
 800d1f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d1f6:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 800d1fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d1fc:	1acb      	subs	r3, r1, r3
 800d1fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d202:	b219      	sxth	r1, r3
 800d204:	6893      	ldr	r3, [r2, #8]
 800d206:	9118      	str	r1, [sp, #96]	; 0x60
 800d208:	9925      	ldr	r1, [sp, #148]	; 0x94
 800d20a:	440b      	add	r3, r1
 800d20c:	6093      	str	r3, [r2, #8]
 800d20e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d210:	42bb      	cmp	r3, r7
 800d212:	d8b1      	bhi.n	800d178 <forward_conv2d_nl_pool+0x1ec>
 800d214:	69b3      	ldr	r3, [r6, #24]
 800d216:	68da      	ldr	r2, [r3, #12]
 800d218:	609a      	str	r2, [r3, #8]
 800d21a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d21c:	68d3      	ldr	r3, [r2, #12]
 800d21e:	6093      	str	r3, [r2, #8]
 800d220:	b039      	add	sp, #228	; 0xe4
 800d222:	ecbd 8b04 	vpop	{d8-d9}
 800d226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	deff      	udf	#255	; 0xff
 800d22e:	2300      	movs	r3, #0
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	deff      	udf	#255	; 0xff
 800d234:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d236:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d238:	4413      	add	r3, r2
 800d23a:	9316      	str	r3, [sp, #88]	; 0x58
 800d23c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d23e:	3b01      	subs	r3, #1
 800d240:	9313      	str	r3, [sp, #76]	; 0x4c
 800d242:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d244:	1a9b      	subs	r3, r3, r2
 800d246:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d248:	9315      	str	r3, [sp, #84]	; 0x54
 800d24a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d9e1      	bls.n	800d214 <forward_conv2d_nl_pool+0x288>
 800d250:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d252:	3301      	adds	r3, #1
 800d254:	2b00      	cmp	r3, #0
 800d256:	dd93      	ble.n	800d180 <forward_conv2d_nl_pool+0x1f4>
 800d258:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800d25a:	ee19 1a10 	vmov	r1, s18
 800d25e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d260:	4620      	mov	r0, r4
 800d262:	920e      	str	r2, [sp, #56]	; 0x38
 800d264:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800d266:	2b00      	cmp	r3, #0
 800d268:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d26c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800d26e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d270:	930a      	str	r3, [sp, #40]	; 0x28
 800d272:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800d274:	9307      	str	r3, [sp, #28]
 800d276:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800d278:	9306      	str	r3, [sp, #24]
 800d27a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d27c:	9305      	str	r3, [sp, #20]
 800d27e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d280:	e9cd a303 	strd	sl, r3, [sp, #12]
 800d284:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d286:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d28a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d290:	4413      	add	r3, r2
 800d292:	bfa8      	it	ge
 800d294:	2200      	movge	r2, #0
 800d296:	9208      	str	r2, [sp, #32]
 800d298:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800d29a:	4293      	cmp	r3, r2
 800d29c:	bf28      	it	cs
 800d29e:	4613      	movcs	r3, r2
 800d2a0:	ee18 2a90 	vmov	r2, s17
 800d2a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2a6:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
 800d2aa:	930d      	str	r3, [sp, #52]	; 0x34
 800d2ac:	ee18 3a10 	vmov	r3, s16
 800d2b0:	f7ff f8e6 	bl	800c480 <ai_conv2d_stripe_f32.constprop.0>
 800d2b4:	69b2      	ldr	r2, [r6, #24]
 800d2b6:	f1ba 0f00 	cmp.w	sl, #0
 800d2ba:	f000 809e 	beq.w	800d3fa <forward_conv2d_nl_pool+0x46e>
 800d2be:	4611      	mov	r1, r2
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	465a      	mov	r2, fp
 800d2c4:	4656      	mov	r6, sl
 800d2c6:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
 800d2ca:	2700      	movs	r7, #0
 800d2cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800d2ce:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 800d2d2:	e9dd ba33 	ldrd	fp, sl, [sp, #204]	; 0xcc
 800d2d6:	462b      	mov	r3, r5
 800d2d8:	608c      	str	r4, [r1, #8]
 800d2da:	4601      	mov	r1, r0
 800d2dc:	445d      	add	r5, fp
 800d2de:	9212      	str	r2, [sp, #72]	; 0x48
 800d2e0:	4454      	add	r4, sl
 800d2e2:	9011      	str	r0, [sp, #68]	; 0x44
 800d2e4:	47c0      	blx	r8
 800d2e6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d2e8:	eba5 0309 	sub.w	r3, r5, r9
 800d2ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d2ee:	3701      	adds	r7, #1
 800d2f0:	6981      	ldr	r1, [r0, #24]
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	bfa8      	it	ge
 800d2f6:	464d      	movge	r5, r9
 800d2f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d2fa:	684b      	ldr	r3, [r1, #4]
 800d2fc:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800d300:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800d304:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d308:	429c      	cmp	r4, r3
 800d30a:	bf28      	it	cs
 800d30c:	eba4 040e 	subcs.w	r4, r4, lr
 800d310:	42be      	cmp	r6, r7
 800d312:	d1e0      	bne.n	800d2d6 <forward_conv2d_nl_pool+0x34a>
 800d314:	4693      	mov	fp, r2
 800d316:	46b2      	mov	sl, r6
 800d318:	460a      	mov	r2, r1
 800d31a:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800d31e:	4661      	mov	r1, ip
 800d320:	4606      	mov	r6, r0
 800d322:	9511      	str	r5, [sp, #68]	; 0x44
 800d324:	f108 0801 	add.w	r8, r8, #1
 800d328:	6091      	str	r1, [r2, #8]
 800d32a:	fa0f f888 	sxth.w	r8, r8
 800d32e:	e72b      	b.n	800d188 <forward_conv2d_nl_pool+0x1fc>
 800d330:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800d332:	fb03 f208 	mul.w	r2, r3, r8
 800d336:	69b3      	ldr	r3, [r6, #24]
 800d338:	eba4 0282 	sub.w	r2, r4, r2, lsl #2
 800d33c:	68d9      	ldr	r1, [r3, #12]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	4291      	cmp	r1, r2
 800d342:	bf88      	it	hi
 800d344:	eb02 0283 	addhi.w	r2, r2, r3, lsl #2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	4291      	cmp	r1, r2
 800d34c:	d21c      	bcs.n	800d388 <forward_conv2d_nl_pool+0x3fc>
 800d34e:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800d350:	4419      	add	r1, r3
 800d352:	4540      	cmp	r0, r8
 800d354:	d13f      	bne.n	800d3d6 <forward_conv2d_nl_pool+0x44a>
 800d356:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d358:	fa1f f888 	uxth.w	r8, r8
 800d35c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d35e:	4402      	add	r2, r0
 800d360:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800d362:	eba2 0208 	sub.w	r2, r2, r8
 800d366:	4404      	add	r4, r0
 800d368:	981a      	ldr	r0, [sp, #104]	; 0x68
 800d36a:	b212      	sxth	r2, r2
 800d36c:	428c      	cmp	r4, r1
 800d36e:	4480      	add	r8, r0
 800d370:	921e      	str	r2, [sp, #120]	; 0x78
 800d372:	fa0f f888 	sxth.w	r8, r8
 800d376:	f4ff af07 	bcc.w	800d188 <forward_conv2d_nl_pool+0x1fc>
 800d37a:	425b      	negs	r3, r3
 800d37c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800d37e:	441c      	add	r4, r3
 800d380:	428c      	cmp	r4, r1
 800d382:	d2fc      	bcs.n	800d37e <forward_conv2d_nl_pool+0x3f2>
 800d384:	9511      	str	r5, [sp, #68]	; 0x44
 800d386:	e6ff      	b.n	800d188 <forward_conv2d_nl_pool+0x1fc>
 800d388:	4419      	add	r1, r3
 800d38a:	e7e4      	b.n	800d356 <forward_conv2d_nl_pool+0x3ca>
 800d38c:	68d6      	ldr	r6, [r2, #12]
 800d38e:	2e00      	cmp	r6, #0
 800d390:	f43f aeb7 	beq.w	800d102 <forward_conv2d_nl_pool+0x176>
 800d394:	2b03      	cmp	r3, #3
 800d396:	d962      	bls.n	800d45e <forward_conv2d_nl_pool+0x4d2>
 800d398:	684b      	ldr	r3, [r1, #4]
 800d39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d04f      	beq.n	800d440 <forward_conv2d_nl_pool+0x4b4>
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d04c      	beq.n	800d440 <forward_conv2d_nl_pool+0x4b4>
 800d3a6:	699f      	ldr	r7, [r3, #24]
 800d3a8:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d3ac:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800d3b0:	6891      	ldr	r1, [r2, #8]
 800d3b2:	4632      	mov	r2, r6
 800d3b4:	4103      	asrs	r3, r0
 800d3b6:	e9d7 0601 	ldrd	r0, r6, [r7, #4]
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	9001      	str	r0, [sp, #4]
 800d3be:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800d3c0:	9000      	str	r0, [sp, #0]
 800d3c2:	4630      	mov	r0, r6
 800d3c4:	f7ff fd92 	bl	800ceec <ai_dict_decompress_f32>
 800d3c8:	69a1      	ldr	r1, [r4, #24]
 800d3ca:	2e00      	cmp	r6, #0
 800d3cc:	d03b      	beq.n	800d446 <forward_conv2d_nl_pool+0x4ba>
 800d3ce:	ee08 6a90 	vmov	s17, r6
 800d3d2:	880b      	ldrh	r3, [r1, #0]
 800d3d4:	e695      	b.n	800d102 <forward_conv2d_nl_pool+0x176>
 800d3d6:	428a      	cmp	r2, r1
 800d3d8:	d2bd      	bcs.n	800d356 <forward_conv2d_nl_pool+0x3ca>
 800d3da:	4620      	mov	r0, r4
 800d3dc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800d3de:	f852 3b04 	ldr.w	r3, [r2], #4
 800d3e2:	f840 3b04 	str.w	r3, [r0], #4
 800d3e6:	69b1      	ldr	r1, [r6, #24]
 800d3e8:	684b      	ldr	r3, [r1, #4]
 800d3ea:	68c9      	ldr	r1, [r1, #12]
 800d3ec:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	4291      	cmp	r1, r2
 800d3f4:	d8f3      	bhi.n	800d3de <forward_conv2d_nl_pool+0x452>
 800d3f6:	9511      	str	r5, [sp, #68]	; 0x44
 800d3f8:	e7ad      	b.n	800d356 <forward_conv2d_nl_pool+0x3ca>
 800d3fa:	68d1      	ldr	r1, [r2, #12]
 800d3fc:	e792      	b.n	800d324 <forward_conv2d_nl_pool+0x398>
 800d3fe:	4819      	ldr	r0, [pc, #100]	; (800d464 <forward_conv2d_nl_pool+0x4d8>)
 800d400:	902d      	str	r0, [sp, #180]	; 0xb4
 800d402:	e64e      	b.n	800d0a2 <forward_conv2d_nl_pool+0x116>
 800d404:	f1b9 0f00 	cmp.w	r9, #0
 800d408:	d00b      	beq.n	800d422 <forward_conv2d_nl_pool+0x496>
 800d40a:	9033      	str	r0, [sp, #204]	; 0xcc
 800d40c:	2001      	movs	r0, #1
 800d40e:	f8d9 9008 	ldr.w	r9, [r9, #8]
 800d412:	9014      	str	r0, [sp, #80]	; 0x50
 800d414:	e640      	b.n	800d098 <forward_conv2d_nl_pool+0x10c>
 800d416:	f1b9 0f00 	cmp.w	r9, #0
 800d41a:	d001      	beq.n	800d420 <forward_conv2d_nl_pool+0x494>
 800d41c:	f8d9 9008 	ldr.w	r9, [r9, #8]
 800d420:	2000      	movs	r0, #0
 800d422:	9033      	str	r0, [sp, #204]	; 0xcc
 800d424:	2001      	movs	r0, #1
 800d426:	9014      	str	r0, [sp, #80]	; 0x50
 800d428:	e636      	b.n	800d098 <forward_conv2d_nl_pool+0x10c>
 800d42a:	8b36      	ldrh	r6, [r6, #24]
 800d42c:	2e01      	cmp	r6, #1
 800d42e:	d90f      	bls.n	800d450 <forward_conv2d_nl_pool+0x4c4>
 800d430:	ee08 0a10 	vmov	s16, r0
 800d434:	4606      	mov	r6, r0
 800d436:	e5d0      	b.n	800cfda <forward_conv2d_nl_pool+0x4e>
 800d438:	2500      	movs	r5, #0
 800d43a:	ee08 5a10 	vmov	s16, r5
 800d43e:	e5cb      	b.n	800cfd8 <forward_conv2d_nl_pool+0x4c>
 800d440:	2300      	movs	r3, #0
 800d442:	699b      	ldr	r3, [r3, #24]
 800d444:	deff      	udf	#255	; 0xff
 800d446:	880b      	ldrh	r3, [r1, #0]
 800d448:	e65b      	b.n	800d102 <forward_conv2d_nl_pool+0x176>
 800d44a:	2300      	movs	r3, #0
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	deff      	udf	#255	; 0xff
 800d450:	68c3      	ldr	r3, [r0, #12]
 800d452:	deff      	udf	#255	; 0xff
 800d454:	2300      	movs	r3, #0
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	deff      	udf	#255	; 0xff
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	deff      	udf	#255	; 0xff
 800d45e:	2300      	movs	r3, #0
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	deff      	udf	#255	; 0xff
 800d464:	0800c47d 	.word	0x0800c47d

0800d468 <forward_dense>:
 800d468:	6983      	ldr	r3, [r0, #24]
 800d46a:	881a      	ldrh	r2, [r3, #0]
 800d46c:	2a00      	cmp	r2, #0
 800d46e:	f000 80f0 	beq.w	800d652 <forward_dense+0x1ea>
 800d472:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d476:	ed2d 8b02 	vpush	{d8}
 800d47a:	6858      	ldr	r0, [r3, #4]
 800d47c:	b09b      	sub	sp, #108	; 0x6c
 800d47e:	6845      	ldr	r5, [r0, #4]
 800d480:	b105      	cbz	r5, 800d484 <forward_dense+0x1c>
 800d482:	682d      	ldr	r5, [r5, #0]
 800d484:	2a01      	cmp	r2, #1
 800d486:	f000 840a 	beq.w	800dc9e <forward_dense+0x836>
 800d48a:	6906      	ldr	r6, [r0, #16]
 800d48c:	b106      	cbz	r6, 800d490 <forward_dense+0x28>
 800d48e:	6836      	ldr	r6, [r6, #0]
 800d490:	2a02      	cmp	r2, #2
 800d492:	f000 80e0 	beq.w	800d656 <forward_dense+0x1ee>
 800d496:	69c3      	ldr	r3, [r0, #28]
 800d498:	930d      	str	r3, [sp, #52]	; 0x34
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f000 83f1 	beq.w	800dc82 <forward_dense+0x81a>
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	8b03      	ldrh	r3, [r0, #24]
 800d4a4:	6809      	ldr	r1, [r1, #0]
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	910f      	str	r1, [sp, #60]	; 0x3c
 800d4aa:	f240 83ec 	bls.w	800dc86 <forward_dense+0x81e>
 800d4ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	930d      	str	r3, [sp, #52]	; 0x34
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800d4ba:	2a03      	cmp	r2, #3
 800d4bc:	68eb      	ldr	r3, [r5, #12]
 800d4be:	68f7      	ldr	r7, [r6, #12]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	687c      	ldr	r4, [r7, #4]
 800d4c4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d4c6:	f8d8 3000 	ldr.w	r3, [r8]
 800d4ca:	4621      	mov	r1, r4
 800d4cc:	9419      	str	r4, [sp, #100]	; 0x64
 800d4ce:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800d4d2:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800d4d6:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800d4da:	fb01 f404 	mul.w	r4, r1, r4
 800d4de:	fa4e f10c 	asr.w	r1, lr, ip
 800d4e2:	9116      	str	r1, [sp, #88]	; 0x58
 800d4e4:	f000 83d8 	beq.w	800dc98 <forward_dense+0x830>
 800d4e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d4ea:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800d4ee:	2a00      	cmp	r2, #0
 800d4f0:	f000 83c2 	beq.w	800dc78 <forward_dense+0x810>
 800d4f4:	6812      	ldr	r2, [r2, #0]
 800d4f6:	2a00      	cmp	r2, #0
 800d4f8:	f000 83be 	beq.w	800dc78 <forward_dense+0x810>
 800d4fc:	2b04      	cmp	r3, #4
 800d4fe:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800d502:	f000 83a8 	beq.w	800dc56 <forward_dense+0x7ee>
 800d506:	2b08      	cmp	r3, #8
 800d508:	f000 83a5 	beq.w	800dc56 <forward_dense+0x7ee>
 800d50c:	f04f 0a00 	mov.w	sl, #0
 800d510:	69ab      	ldr	r3, [r5, #24]
 800d512:	fb07 f404 	mul.w	r4, r7, r4
 800d516:	69b2      	ldr	r2, [r6, #24]
 800d518:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800d51c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d51e:	6892      	ldr	r2, [r2, #8]
 800d520:	695b      	ldr	r3, [r3, #20]
 800d522:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800d526:	9206      	str	r2, [sp, #24]
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	428a      	cmp	r2, r1
 800d52c:	9110      	str	r1, [sp, #64]	; 0x40
 800d52e:	9304      	str	r3, [sp, #16]
 800d530:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d532:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800d536:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d53a:	900e      	str	r0, [sp, #56]	; 0x38
 800d53c:	9303      	str	r3, [sp, #12]
 800d53e:	f080 8380 	bcs.w	800dc42 <forward_dense+0x7da>
 800d542:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d544:	4654      	mov	r4, sl
 800d546:	4bb9      	ldr	r3, [pc, #740]	; (800d82c <forward_dense+0x3c4>)
 800d548:	46ca      	mov	sl, r9
 800d54a:	08d0      	lsrs	r0, r2, #3
 800d54c:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 800d830 <forward_dense+0x3c8>
 800d550:	4413      	add	r3, r2
 800d552:	9009      	str	r0, [sp, #36]	; 0x24
 800d554:	0099      	lsls	r1, r3, #2
 800d556:	f022 0301 	bic.w	r3, r2, #1
 800d55a:	f002 0201 	and.w	r2, r2, #1
 800d55e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d562:	9118      	str	r1, [sp, #96]	; 0x60
 800d564:	920a      	str	r2, [sp, #40]	; 0x28
 800d566:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 800d56a:	9305      	str	r3, [sp, #20]
 800d56c:	f101 0320 	add.w	r3, r1, #32
 800d570:	9207      	str	r2, [sp, #28]
 800d572:	9311      	str	r3, [sp, #68]	; 0x44
 800d574:	444b      	add	r3, r9
 800d576:	469b      	mov	fp, r3
 800d578:	930b      	str	r3, [sp, #44]	; 0x2c
 800d57a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d57c:	699b      	ldr	r3, [r3, #24]
 800d57e:	689a      	ldr	r2, [r3, #8]
 800d580:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d582:	b10b      	cbz	r3, 800d588 <forward_dense+0x120>
 800d584:	699b      	ldr	r3, [r3, #24]
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	2c00      	cmp	r4, #0
 800d58a:	f000 834b 	beq.w	800dc24 <forward_dense+0x7bc>
 800d58e:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d590:	2904      	cmp	r1, #4
 800d592:	f000 826a 	beq.w	800da6a <forward_dense+0x602>
 800d596:	9903      	ldr	r1, [sp, #12]
 800d598:	9806      	ldr	r0, [sp, #24]
 800d59a:	4281      	cmp	r1, r0
 800d59c:	f240 8356 	bls.w	800dc4c <forward_dense+0x7e4>
 800d5a0:	4686      	mov	lr, r0
 800d5a2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d5a4:	eb00 090a 	add.w	r9, r0, sl
 800d5a8:	0941      	lsrs	r1, r0, #5
 800d5aa:	f10a 0004 	add.w	r0, sl, #4
 800d5ae:	f8cd 9020 	str.w	r9, [sp, #32]
 800d5b2:	9012      	str	r0, [sp, #72]	; 0x48
 800d5b4:	1c48      	adds	r0, r1, #1
 800d5b6:	00c9      	lsls	r1, r1, #3
 800d5b8:	3110      	adds	r1, #16
 800d5ba:	9115      	str	r1, [sp, #84]	; 0x54
 800d5bc:	00c1      	lsls	r1, r0, #3
 800d5be:	9113      	str	r1, [sp, #76]	; 0x4c
 800d5c0:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 800d5c4:	9114      	str	r1, [sp, #80]	; 0x50
 800d5c6:	f1a9 0104 	sub.w	r1, r9, #4
 800d5ca:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800d5ce:	910c      	str	r1, [sp, #48]	; 0x30
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f000 8128 	beq.w	800d826 <forward_dense+0x3be>
 800d5d6:	ecb3 5a01 	vldmia	r3!, {s10}
 800d5da:	f1b9 0f07 	cmp.w	r9, #7
 800d5de:	d83d      	bhi.n	800d65c <forward_dense+0x1f4>
 800d5e0:	45da      	cmp	sl, fp
 800d5e2:	d211      	bcs.n	800d608 <forward_dense+0x1a0>
 800d5e4:	eddf 7a92 	vldr	s15, [pc, #584]	; 800d830 <forward_dense+0x3c8>
 800d5e8:	4650      	mov	r0, sl
 800d5ea:	4615      	mov	r5, r2
 800d5ec:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d5f0:	ecb0 7a01 	vldmia	r0!, {s14}
 800d5f4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d5f8:	4558      	cmp	r0, fp
 800d5fa:	edd1 6a00 	vldr	s13, [r1]
 800d5fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d602:	d3f3      	bcc.n	800d5ec <forward_dense+0x184>
 800d604:	ee35 5a27 	vadd.f32	s10, s10, s15
 800d608:	9904      	ldr	r1, [sp, #16]
 800d60a:	ecae 5a01 	vstmia	lr!, {s10}
 800d60e:	440a      	add	r2, r1
 800d610:	9903      	ldr	r1, [sp, #12]
 800d612:	458e      	cmp	lr, r1
 800d614:	d3dc      	bcc.n	800d5d0 <forward_dense+0x168>
 800d616:	9a06      	ldr	r2, [sp, #24]
 800d618:	1a8b      	subs	r3, r1, r2
 800d61a:	3b01      	subs	r3, #1
 800d61c:	f023 0303 	bic.w	r3, r3, #3
 800d620:	3304      	adds	r3, #4
 800d622:	18d3      	adds	r3, r2, r3
 800d624:	4619      	mov	r1, r3
 800d626:	9306      	str	r3, [sp, #24]
 800d628:	9b03      	ldr	r3, [sp, #12]
 800d62a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d62c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d62e:	4413      	add	r3, r2
 800d630:	9a07      	ldr	r2, [sp, #28]
 800d632:	4281      	cmp	r1, r0
 800d634:	9303      	str	r3, [sp, #12]
 800d636:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d638:	441a      	add	r2, r3
 800d63a:	449b      	add	fp, r3
 800d63c:	9207      	str	r2, [sp, #28]
 800d63e:	9a05      	ldr	r2, [sp, #20]
 800d640:	441a      	add	r2, r3
 800d642:	9205      	str	r2, [sp, #20]
 800d644:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d646:	4692      	mov	sl, r2
 800d648:	f080 82fb 	bcs.w	800dc42 <forward_dense+0x7da>
 800d64c:	441a      	add	r2, r3
 800d64e:	920b      	str	r2, [sp, #44]	; 0x2c
 800d650:	e793      	b.n	800d57a <forward_dense+0x112>
 800d652:	6853      	ldr	r3, [r2, #4]
 800d654:	deff      	udf	#255	; 0xff
 800d656:	2300      	movs	r3, #0
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	deff      	udf	#255	; 0xff
 800d65c:	f002 0103 	and.w	r1, r2, #3
 800d660:	2902      	cmp	r1, #2
 800d662:	f000 81e6 	beq.w	800da32 <forward_dense+0x5ca>
 800d666:	2903      	cmp	r1, #3
 800d668:	f000 80e4 	beq.w	800d834 <forward_dense+0x3cc>
 800d66c:	2901      	cmp	r1, #1
 800d66e:	f000 81ef 	beq.w	800da50 <forward_dense+0x5e8>
 800d672:	9908      	ldr	r1, [sp, #32]
 800d674:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800d830 <forward_dense+0x3c8>
 800d678:	458a      	cmp	sl, r1
 800d67a:	f200 82e9 	bhi.w	800dc50 <forward_dense+0x7e8>
 800d67e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d680:	f102 0108 	add.w	r1, r2, #8
 800d684:	f10a 0020 	add.w	r0, sl, #32
 800d688:	18ae      	adds	r6, r5, r2
 800d68a:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800d68e:	3108      	adds	r1, #8
 800d690:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800d694:	3020      	adds	r0, #32
 800d696:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d69a:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800d69e:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800d6a2:	edd5 7a00 	vldr	s15, [r5]
 800d6a6:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800d6aa:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800d6ae:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800d6b2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d6b6:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800d6ba:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800d6be:	edd5 2a00 	vldr	s5, [r5]
 800d6c2:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800d6c6:	eee2 7a83 	vfma.f32	s15, s5, s6
 800d6ca:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800d6ce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d6d2:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800d6d6:	ed95 3a00 	vldr	s6, [r5]
 800d6da:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800d6de:	eee3 7a23 	vfma.f32	s15, s6, s7
 800d6e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d6e6:	edd5 3a00 	vldr	s7, [r5]
 800d6ea:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800d6ee:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d6f2:	eee3 7a84 	vfma.f32	s15, s7, s8
 800d6f6:	ed95 4a00 	vldr	s8, [r5]
 800d6fa:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800d6fe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d702:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d706:	edd5 4a00 	vldr	s9, [r5]
 800d70a:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800d70e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d712:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800d716:	edd5 5a00 	vldr	s11, [r5]
 800d71a:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800d71e:	428e      	cmp	r6, r1
 800d720:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d724:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d728:	ed95 6a00 	vldr	s12, [r5]
 800d72c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d730:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d734:	d1a9      	bne.n	800d68a <forward_dense+0x222>
 800d736:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d738:	1850      	adds	r0, r2, r1
 800d73a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d73c:	4559      	cmp	r1, fp
 800d73e:	d26f      	bcs.n	800d820 <forward_dense+0x3b8>
 800d740:	7805      	ldrb	r5, [r0, #0]
 800d742:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d746:	edd5 7a00 	vldr	s15, [r5]
 800d74a:	460d      	mov	r5, r1
 800d74c:	ecf5 6a01 	vldmia	r5!, {s13}
 800d750:	45ab      	cmp	fp, r5
 800d752:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d756:	d963      	bls.n	800d820 <forward_dense+0x3b8>
 800d758:	7845      	ldrb	r5, [r0, #1]
 800d75a:	edd1 6a01 	vldr	s13, [r1, #4]
 800d75e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d762:	edd5 7a00 	vldr	s15, [r5]
 800d766:	f101 0508 	add.w	r5, r1, #8
 800d76a:	45ab      	cmp	fp, r5
 800d76c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d770:	d956      	bls.n	800d820 <forward_dense+0x3b8>
 800d772:	7885      	ldrb	r5, [r0, #2]
 800d774:	edd1 6a02 	vldr	s13, [r1, #8]
 800d778:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d77c:	edd5 7a00 	vldr	s15, [r5]
 800d780:	f101 050c 	add.w	r5, r1, #12
 800d784:	45ab      	cmp	fp, r5
 800d786:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d78a:	d949      	bls.n	800d820 <forward_dense+0x3b8>
 800d78c:	78c5      	ldrb	r5, [r0, #3]
 800d78e:	edd1 6a03 	vldr	s13, [r1, #12]
 800d792:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d796:	edd5 7a00 	vldr	s15, [r5]
 800d79a:	f101 0510 	add.w	r5, r1, #16
 800d79e:	45ab      	cmp	fp, r5
 800d7a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d7a4:	d93c      	bls.n	800d820 <forward_dense+0x3b8>
 800d7a6:	7905      	ldrb	r5, [r0, #4]
 800d7a8:	edd1 6a04 	vldr	s13, [r1, #16]
 800d7ac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d7b0:	edd5 7a00 	vldr	s15, [r5]
 800d7b4:	f101 0514 	add.w	r5, r1, #20
 800d7b8:	45ab      	cmp	fp, r5
 800d7ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d7be:	d92f      	bls.n	800d820 <forward_dense+0x3b8>
 800d7c0:	7945      	ldrb	r5, [r0, #5]
 800d7c2:	edd1 6a05 	vldr	s13, [r1, #20]
 800d7c6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d7ca:	edd5 7a00 	vldr	s15, [r5]
 800d7ce:	f101 0518 	add.w	r5, r1, #24
 800d7d2:	45ab      	cmp	fp, r5
 800d7d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d7d8:	d922      	bls.n	800d820 <forward_dense+0x3b8>
 800d7da:	7985      	ldrb	r5, [r0, #6]
 800d7dc:	edd1 6a06 	vldr	s13, [r1, #24]
 800d7e0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d7e4:	edd5 7a00 	vldr	s15, [r5]
 800d7e8:	f101 051c 	add.w	r5, r1, #28
 800d7ec:	45ab      	cmp	fp, r5
 800d7ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d7f2:	d915      	bls.n	800d820 <forward_dense+0x3b8>
 800d7f4:	79c5      	ldrb	r5, [r0, #7]
 800d7f6:	edd1 6a07 	vldr	s13, [r1, #28]
 800d7fa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d7fe:	edd5 7a00 	vldr	s15, [r5]
 800d802:	f101 0520 	add.w	r5, r1, #32
 800d806:	45ab      	cmp	fp, r5
 800d808:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d80c:	d908      	bls.n	800d820 <forward_dense+0x3b8>
 800d80e:	edd1 7a08 	vldr	s15, [r1, #32]
 800d812:	7a01      	ldrb	r1, [r0, #8]
 800d814:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d818:	edd1 6a00 	vldr	s13, [r1]
 800d81c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d820:	ee35 5a07 	vadd.f32	s10, s10, s14
 800d824:	e6f0      	b.n	800d608 <forward_dense+0x1a0>
 800d826:	ed9f 5a02 	vldr	s10, [pc, #8]	; 800d830 <forward_dense+0x3c8>
 800d82a:	e6d6      	b.n	800d5da <forward_dense+0x172>
 800d82c:	3ffffff8 	.word	0x3ffffff8
 800d830:	00000000 	.word	0x00000000
 800d834:	eeb0 7a48 	vmov.f32	s14, s16
 800d838:	4650      	mov	r0, sl
 800d83a:	4611      	mov	r1, r2
 800d83c:	468c      	mov	ip, r1
 800d83e:	4606      	mov	r6, r0
 800d840:	f81c 5b01 	ldrb.w	r5, [ip], #1
 800d844:	ecf6 7a01 	vldmia	r6!, {s15}
 800d848:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d84c:	edd5 6a00 	vldr	s13, [r5]
 800d850:	9d08      	ldr	r5, [sp, #32]
 800d852:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d856:	42ae      	cmp	r6, r5
 800d858:	d866      	bhi.n	800d928 <forward_dense+0x4c0>
 800d85a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d85c:	f101 0711 	add.w	r7, r1, #17
 800d860:	3109      	adds	r1, #9
 800d862:	eba5 0800 	sub.w	r8, r5, r0
 800d866:	3024      	adds	r0, #36	; 0x24
 800d868:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800d86c:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800d870:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800d874:	3108      	adds	r1, #8
 800d876:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800d87a:	3020      	adds	r0, #32
 800d87c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d880:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800d884:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800d888:	edd5 7a00 	vldr	s15, [r5]
 800d88c:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800d890:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800d894:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800d898:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d89c:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800d8a0:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800d8a4:	edd5 2a00 	vldr	s5, [r5]
 800d8a8:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800d8ac:	eee2 7a83 	vfma.f32	s15, s5, s6
 800d8b0:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800d8b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d8b8:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800d8bc:	ed95 3a00 	vldr	s6, [r5]
 800d8c0:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800d8c4:	eee3 7a23 	vfma.f32	s15, s6, s7
 800d8c8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d8cc:	edd5 3a00 	vldr	s7, [r5]
 800d8d0:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800d8d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d8d8:	eee3 7a84 	vfma.f32	s15, s7, s8
 800d8dc:	ed95 4a00 	vldr	s8, [r5]
 800d8e0:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800d8e4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d8e8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d8ec:	edd5 4a00 	vldr	s9, [r5]
 800d8f0:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800d8f4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d8f8:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800d8fc:	edd5 5a00 	vldr	s11, [r5]
 800d900:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800d904:	428f      	cmp	r7, r1
 800d906:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d90a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d90e:	ed95 6a00 	vldr	s12, [r5]
 800d912:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d916:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d91a:	d1a9      	bne.n	800d870 <forward_dense+0x408>
 800d91c:	f108 0801 	add.w	r8, r8, #1
 800d920:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800d924:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 800d928:	455e      	cmp	r6, fp
 800d92a:	f4bf af79 	bcs.w	800d820 <forward_dense+0x3b8>
 800d92e:	f89c 1000 	ldrb.w	r1, [ip]
 800d932:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d936:	edd1 7a00 	vldr	s15, [r1]
 800d93a:	4631      	mov	r1, r6
 800d93c:	ecf1 6a01 	vldmia	r1!, {s13}
 800d940:	458b      	cmp	fp, r1
 800d942:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d946:	f67f af6b 	bls.w	800d820 <forward_dense+0x3b8>
 800d94a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800d94e:	edd6 6a01 	vldr	s13, [r6, #4]
 800d952:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d956:	edd1 7a00 	vldr	s15, [r1]
 800d95a:	f106 0108 	add.w	r1, r6, #8
 800d95e:	458b      	cmp	fp, r1
 800d960:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d964:	f67f af5c 	bls.w	800d820 <forward_dense+0x3b8>
 800d968:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800d96c:	edd6 6a02 	vldr	s13, [r6, #8]
 800d970:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d974:	edd1 7a00 	vldr	s15, [r1]
 800d978:	f106 010c 	add.w	r1, r6, #12
 800d97c:	458b      	cmp	fp, r1
 800d97e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d982:	f67f af4d 	bls.w	800d820 <forward_dense+0x3b8>
 800d986:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800d98a:	edd6 6a03 	vldr	s13, [r6, #12]
 800d98e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d992:	edd1 7a00 	vldr	s15, [r1]
 800d996:	f106 0110 	add.w	r1, r6, #16
 800d99a:	458b      	cmp	fp, r1
 800d99c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d9a0:	f67f af3e 	bls.w	800d820 <forward_dense+0x3b8>
 800d9a4:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800d9a8:	edd6 6a04 	vldr	s13, [r6, #16]
 800d9ac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d9b0:	edd1 7a00 	vldr	s15, [r1]
 800d9b4:	f106 0114 	add.w	r1, r6, #20
 800d9b8:	458b      	cmp	fp, r1
 800d9ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d9be:	f67f af2f 	bls.w	800d820 <forward_dense+0x3b8>
 800d9c2:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800d9c6:	edd6 6a05 	vldr	s13, [r6, #20]
 800d9ca:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d9ce:	edd1 7a00 	vldr	s15, [r1]
 800d9d2:	f106 0118 	add.w	r1, r6, #24
 800d9d6:	458b      	cmp	fp, r1
 800d9d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d9dc:	f67f af20 	bls.w	800d820 <forward_dense+0x3b8>
 800d9e0:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800d9e4:	edd6 6a06 	vldr	s13, [r6, #24]
 800d9e8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d9ec:	edd1 7a00 	vldr	s15, [r1]
 800d9f0:	f106 011c 	add.w	r1, r6, #28
 800d9f4:	458b      	cmp	fp, r1
 800d9f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d9fa:	f67f af11 	bls.w	800d820 <forward_dense+0x3b8>
 800d9fe:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800da02:	edd6 6a07 	vldr	s13, [r6, #28]
 800da06:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800da0a:	edd1 7a00 	vldr	s15, [r1]
 800da0e:	f106 0120 	add.w	r1, r6, #32
 800da12:	458b      	cmp	fp, r1
 800da14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800da18:	f67f af02 	bls.w	800d820 <forward_dense+0x3b8>
 800da1c:	f89c 1008 	ldrb.w	r1, [ip, #8]
 800da20:	edd6 7a08 	vldr	s15, [r6, #32]
 800da24:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800da28:	edd1 6a00 	vldr	s13, [r1]
 800da2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800da30:	e6f6      	b.n	800d820 <forward_dense+0x3b8>
 800da32:	eeb0 7a48 	vmov.f32	s14, s16
 800da36:	4650      	mov	r0, sl
 800da38:	4611      	mov	r1, r2
 800da3a:	f811 5b01 	ldrb.w	r5, [r1], #1
 800da3e:	ecf0 7a01 	vldmia	r0!, {s15}
 800da42:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da46:	edd5 6a00 	vldr	s13, [r5]
 800da4a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800da4e:	e6f5      	b.n	800d83c <forward_dense+0x3d4>
 800da50:	4611      	mov	r1, r2
 800da52:	edda 7a00 	vldr	s15, [sl]
 800da56:	9812      	ldr	r0, [sp, #72]	; 0x48
 800da58:	f811 5b01 	ldrb.w	r5, [r1], #1
 800da5c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da60:	ed95 7a00 	vldr	s14, [r5]
 800da64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da68:	e7e7      	b.n	800da3a <forward_dense+0x5d2>
 800da6a:	9803      	ldr	r0, [sp, #12]
 800da6c:	9906      	ldr	r1, [sp, #24]
 800da6e:	4288      	cmp	r0, r1
 800da70:	f67f adda 	bls.w	800d628 <forward_dense+0x1c0>
 800da74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da76:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800da7a:	468b      	mov	fp, r1
 800da7c:	f100 0c01 	add.w	ip, r0, #1
 800da80:	9805      	ldr	r0, [sp, #20]
 800da82:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800da86:	3801      	subs	r0, #1
 800da88:	9008      	str	r0, [sp, #32]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f000 80bf 	beq.w	800dc0e <forward_dense+0x7a6>
 800da90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da92:	ecf3 2a01 	vldmia	r3!, {s5}
 800da96:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800d830 <forward_dense+0x3c8>
 800da9a:	2900      	cmp	r1, #0
 800da9c:	f000 80bf 	beq.w	800dc1e <forward_dense+0x7b6>
 800daa0:	1d10      	adds	r0, r2, #4
 800daa2:	f10a 0120 	add.w	r1, sl, #32
 800daa6:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800daaa:	3004      	adds	r0, #4
 800daac:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800dab0:	3120      	adds	r1, #32
 800dab2:	f007 0e0f 	and.w	lr, r7, #15
 800dab6:	093f      	lsrs	r7, r7, #4
 800dab8:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 800dabc:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 800dac0:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 800dac4:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800dac8:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 800dacc:	edde 7a00 	vldr	s15, [lr]
 800dad0:	ed97 3a00 	vldr	s6, [r7]
 800dad4:	0937      	lsrs	r7, r6, #4
 800dad6:	ee67 7a82 	vmul.f32	s15, s15, s4
 800dada:	f006 060f 	and.w	r6, r6, #15
 800dade:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800dae2:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 800dae6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800daea:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 800daee:	eee3 7a04 	vfma.f32	s15, s6, s8
 800daf2:	ed97 3a00 	vldr	s6, [r7]
 800daf6:	ed96 4a00 	vldr	s8, [r6]
 800dafa:	092e      	lsrs	r6, r5, #4
 800dafc:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 800db00:	f005 050f 	and.w	r5, r5, #15
 800db04:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800db08:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 800db0c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db10:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800db14:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800db18:	eee3 7a23 	vfma.f32	s15, s6, s7
 800db1c:	eee4 7a05 	vfma.f32	s15, s8, s10
 800db20:	ed96 4a00 	vldr	s8, [r6]
 800db24:	ed95 5a00 	vldr	s10, [r5]
 800db28:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 800db2c:	4560      	cmp	r0, ip
 800db2e:	ea4f 1615 	mov.w	r6, r5, lsr #4
 800db32:	f005 050f 	and.w	r5, r5, #15
 800db36:	eee4 7a24 	vfma.f32	s15, s8, s9
 800db3a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800db3e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db42:	eee5 7a06 	vfma.f32	s15, s10, s12
 800db46:	ed96 5a00 	vldr	s10, [r6]
 800db4a:	ed95 6a00 	vldr	s12, [r5]
 800db4e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800db52:	eee6 7a26 	vfma.f32	s15, s12, s13
 800db56:	ee37 7a27 	vadd.f32	s14, s14, s15
 800db5a:	d1a4      	bne.n	800daa6 <forward_dense+0x63e>
 800db5c:	f1ac 0804 	sub.w	r8, ip, #4
 800db60:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800db64:	9905      	ldr	r1, [sp, #20]
 800db66:	458e      	cmp	lr, r1
 800db68:	d229      	bcs.n	800dbbe <forward_dense+0x756>
 800db6a:	9908      	ldr	r1, [sp, #32]
 800db6c:	f10e 0008 	add.w	r0, lr, #8
 800db70:	f108 36ff 	add.w	r6, r8, #4294967295
 800db74:	eba1 070e 	sub.w	r7, r1, lr
 800db78:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 800db7c:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800db80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800db84:	3008      	adds	r0, #8
 800db86:	ed50 5a03 	vldr	s11, [r0, #-12]
 800db8a:	f001 050f 	and.w	r5, r1, #15
 800db8e:	0909      	lsrs	r1, r1, #4
 800db90:	ed50 6a04 	vldr	s13, [r0, #-16]
 800db94:	42b7      	cmp	r7, r6
 800db96:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db9a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800db9e:	edd5 7a00 	vldr	s15, [r5]
 800dba2:	ed91 6a00 	vldr	s12, [r1]
 800dba6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dbaa:	eee6 7a26 	vfma.f32	s15, s12, s13
 800dbae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dbb2:	d1e5      	bne.n	800db80 <forward_dense+0x718>
 800dbb4:	f109 0901 	add.w	r9, r9, #1
 800dbb8:	44c8      	add	r8, r9
 800dbba:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800dbbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dbc0:	b1c1      	cbz	r1, 800dbf4 <forward_dense+0x78c>
 800dbc2:	f898 1000 	ldrb.w	r1, [r8]
 800dbc6:	edde 7a00 	vldr	s15, [lr]
 800dbca:	0909      	lsrs	r1, r1, #4
 800dbcc:	9804      	ldr	r0, [sp, #16]
 800dbce:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dbd2:	4402      	add	r2, r0
 800dbd4:	4484      	add	ip, r0
 800dbd6:	edd1 6a00 	vldr	s13, [r1]
 800dbda:	9903      	ldr	r1, [sp, #12]
 800dbdc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dbe0:	ee72 2a87 	vadd.f32	s5, s5, s14
 800dbe4:	eceb 2a01 	vstmia	fp!, {s5}
 800dbe8:	4559      	cmp	r1, fp
 800dbea:	f63f af4e 	bhi.w	800da8a <forward_dense+0x622>
 800dbee:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800dbf2:	e510      	b.n	800d616 <forward_dense+0x1ae>
 800dbf4:	9904      	ldr	r1, [sp, #16]
 800dbf6:	ee32 7a87 	vadd.f32	s14, s5, s14
 800dbfa:	440a      	add	r2, r1
 800dbfc:	448c      	add	ip, r1
 800dbfe:	9903      	ldr	r1, [sp, #12]
 800dc00:	ecab 7a01 	vstmia	fp!, {s14}
 800dc04:	458b      	cmp	fp, r1
 800dc06:	d2f2      	bcs.n	800dbee <forward_dense+0x786>
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	f47f af41 	bne.w	800da90 <forward_dense+0x628>
 800dc0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc10:	eef0 2a48 	vmov.f32	s5, s16
 800dc14:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800dca4 <forward_dense+0x83c>
 800dc18:	2900      	cmp	r1, #0
 800dc1a:	f47f af41 	bne.w	800daa0 <forward_dense+0x638>
 800dc1e:	46d6      	mov	lr, sl
 800dc20:	4690      	mov	r8, r2
 800dc22:	e79f      	b.n	800db64 <forward_dense+0x6fc>
 800dc24:	9819      	ldr	r0, [sp, #100]	; 0x64
 800dc26:	4651      	mov	r1, sl
 800dc28:	9d06      	ldr	r5, [sp, #24]
 800dc2a:	9001      	str	r0, [sp, #4]
 800dc2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800dc2e:	9000      	str	r0, [sp, #0]
 800dc30:	4628      	mov	r0, r5
 800dc32:	f000 fcb7 	bl	800e5a4 <lite_dense_if32of32wf32>
 800dc36:	462b      	mov	r3, r5
 800dc38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc3a:	4413      	add	r3, r2
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	9306      	str	r3, [sp, #24]
 800dc40:	e4f2      	b.n	800d628 <forward_dense+0x1c0>
 800dc42:	b01b      	add	sp, #108	; 0x6c
 800dc44:	ecbd 8b02 	vpop	{d8}
 800dc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4c:	4601      	mov	r1, r0
 800dc4e:	e4eb      	b.n	800d628 <forward_dense+0x1c0>
 800dc50:	4651      	mov	r1, sl
 800dc52:	4610      	mov	r0, r2
 800dc54:	e572      	b.n	800d73c <forward_dense+0x2d4>
 800dc56:	f8d8 800c 	ldr.w	r8, [r8, #12]
 800dc5a:	f1b9 0f00 	cmp.w	r9, #0
 800dc5e:	d016      	beq.n	800dc8e <forward_dense+0x826>
 800dc60:	e9d9 0100 	ldrd	r0, r1, [r9]
 800dc64:	f000 fe4e 	bl	800e904 <ai_array_get_byte_size>
 800dc68:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	4641      	mov	r1, r8
 800dc70:	4650      	mov	r0, sl
 800dc72:	f000 ffed 	bl	800ec50 <memcpy>
 800dc76:	e44b      	b.n	800d510 <forward_dense+0xa8>
 800dc78:	2b04      	cmp	r3, #4
 800dc7a:	d00a      	beq.n	800dc92 <forward_dense+0x82a>
 800dc7c:	f04f 0900 	mov.w	r9, #0
 800dc80:	e441      	b.n	800d506 <forward_dense+0x9e>
 800dc82:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc84:	e417      	b.n	800d4b6 <forward_dense+0x4e>
 800dc86:	2300      	movs	r3, #0
 800dc88:	930d      	str	r3, [sp, #52]	; 0x34
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	e413      	b.n	800d4b6 <forward_dense+0x4e>
 800dc8e:	46c2      	mov	sl, r8
 800dc90:	e43e      	b.n	800d510 <forward_dense+0xa8>
 800dc92:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800dc96:	e43b      	b.n	800d510 <forward_dense+0xa8>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	deff      	udf	#255	; 0xff
 800dc9e:	2300      	movs	r3, #0
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	deff      	udf	#255	; 0xff
 800dca4:	00000000 	.word	0x00000000

0800dca8 <pool_func_mp_array_f32>:
 800dca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcac:	b093      	sub	sp, #76	; 0x4c
 800dcae:	468a      	mov	sl, r1
 800dcb0:	461f      	mov	r7, r3
 800dcb2:	4693      	mov	fp, r2
 800dcb4:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 800dcb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dcba:	9104      	str	r1, [sp, #16]
 800dcbc:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	9100      	str	r1, [sp, #0]
 800dcc4:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 800dcc8:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 800dccc:	9105      	str	r1, [sp, #20]
 800dcce:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 800dcd2:	9303      	str	r3, [sp, #12]
 800dcd4:	9106      	str	r1, [sp, #24]
 800dcd6:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800dcda:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 800dcde:	ea52 0c03 	orrs.w	ip, r2, r3
 800dce2:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800dce6:	9101      	str	r1, [sp, #4]
 800dce8:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 800dcec:	9102      	str	r1, [sp, #8]
 800dcee:	d173      	bne.n	800ddd8 <pool_func_mp_array_f32+0x130>
 800dcf0:	9904      	ldr	r1, [sp, #16]
 800dcf2:	9d01      	ldr	r5, [sp, #4]
 800dcf4:	eba1 000a 	sub.w	r0, r1, sl
 800dcf8:	9e05      	ldr	r6, [sp, #20]
 800dcfa:	1e69      	subs	r1, r5, #1
 800dcfc:	3801      	subs	r0, #1
 800dcfe:	fb11 0106 	smlabb	r1, r1, r6, r0
 800dd02:	0408      	lsls	r0, r1, #16
 800dd04:	d568      	bpl.n	800ddd8 <pool_func_mp_array_f32+0x130>
 800dd06:	9900      	ldr	r1, [sp, #0]
 800dd08:	9e02      	ldr	r6, [sp, #8]
 800dd0a:	eba1 000b 	sub.w	r0, r1, fp
 800dd0e:	9c06      	ldr	r4, [sp, #24]
 800dd10:	1e71      	subs	r1, r6, #1
 800dd12:	3801      	subs	r0, #1
 800dd14:	fb11 0104 	smlabb	r1, r1, r4, r0
 800dd18:	0409      	lsls	r1, r1, #16
 800dd1a:	d55d      	bpl.n	800ddd8 <pool_func_mp_array_f32+0x130>
 800dd1c:	2e00      	cmp	r6, #0
 800dd1e:	d058      	beq.n	800ddd2 <pool_func_mp_array_f32+0x12a>
 800dd20:	2d00      	cmp	r5, #0
 800dd22:	d056      	beq.n	800ddd2 <pool_func_mp_array_f32+0x12a>
 800dd24:	2f00      	cmp	r7, #0
 800dd26:	d054      	beq.n	800ddd2 <pool_func_mp_array_f32+0x12a>
 800dd28:	2f01      	cmp	r7, #1
 800dd2a:	f040 815b 	bne.w	800dfe4 <pool_func_mp_array_f32+0x33c>
 800dd2e:	46e3      	mov	fp, ip
 800dd30:	4663      	mov	r3, ip
 800dd32:	f8cd c01c 	str.w	ip, [sp, #28]
 800dd36:	9a01      	ldr	r2, [sp, #4]
 800dd38:	2700      	movs	r7, #0
 800dd3a:	f9bd 6000 	ldrsh.w	r6, [sp]
 800dd3e:	fb02 f303 	mul.w	r3, r2, r3
 800dd42:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dd46:	46be      	mov	lr, r7
 800dd48:	46bc      	mov	ip, r7
 800dd4a:	9308      	str	r3, [sp, #32]
 800dd4c:	fa0f f38b 	sxth.w	r3, fp
 800dd50:	9309      	str	r3, [sp, #36]	; 0x24
 800dd52:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dd54:	b23d      	sxth	r5, r7
 800dd56:	9b08      	ldr	r3, [sp, #32]
 800dd58:	fa0f f088 	sxth.w	r0, r8
 800dd5c:	42b4      	cmp	r4, r6
 800dd5e:	eddf 7aa0 	vldr	s15, [pc, #640]	; 800dfe0 <pool_func_mp_array_f32+0x338>
 800dd62:	449c      	add	ip, r3
 800dd64:	da12      	bge.n	800dd8c <pool_func_mp_array_f32+0xe4>
 800dd66:	4285      	cmp	r5, r0
 800dd68:	da0c      	bge.n	800dd84 <pool_func_mp_array_f32+0xdc>
 800dd6a:	fb04 520a 	mla	r2, r4, sl, r5
 800dd6e:	462b      	mov	r3, r5
 800dd70:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800dd74:	3301      	adds	r3, #1
 800dd76:	ecb2 7a01 	vldmia	r2!, {s14}
 800dd7a:	b219      	sxth	r1, r3
 800dd7c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800dd80:	4281      	cmp	r1, r0
 800dd82:	dbf7      	blt.n	800dd74 <pool_func_mp_array_f32+0xcc>
 800dd84:	3401      	adds	r4, #1
 800dd86:	b224      	sxth	r4, r4
 800dd88:	42b4      	cmp	r4, r6
 800dd8a:	dbec      	blt.n	800dd66 <pool_func_mp_array_f32+0xbe>
 800dd8c:	9b03      	ldr	r3, [sp, #12]
 800dd8e:	f10e 0e01 	add.w	lr, lr, #1
 800dd92:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800dd96:	9b05      	ldr	r3, [sp, #20]
 800dd98:	fa0f fe8e 	sxth.w	lr, lr
 800dd9c:	4498      	add	r8, r3
 800dd9e:	441f      	add	r7, r3
 800dda0:	9b01      	ldr	r3, [sp, #4]
 800dda2:	edcc 7a00 	vstr	s15, [ip]
 800dda6:	fa1f f888 	uxth.w	r8, r8
 800ddaa:	4573      	cmp	r3, lr
 800ddac:	b2bf      	uxth	r7, r7
 800ddae:	46f4      	mov	ip, lr
 800ddb0:	dccf      	bgt.n	800dd52 <pool_func_mp_array_f32+0xaa>
 800ddb2:	9a07      	ldr	r2, [sp, #28]
 800ddb4:	9906      	ldr	r1, [sp, #24]
 800ddb6:	9b00      	ldr	r3, [sp, #0]
 800ddb8:	3201      	adds	r2, #1
 800ddba:	448b      	add	fp, r1
 800ddbc:	b212      	sxth	r2, r2
 800ddbe:	440b      	add	r3, r1
 800ddc0:	9902      	ldr	r1, [sp, #8]
 800ddc2:	fa1f fb8b 	uxth.w	fp, fp
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	9207      	str	r2, [sp, #28]
 800ddca:	4291      	cmp	r1, r2
 800ddcc:	9300      	str	r3, [sp, #0]
 800ddce:	4613      	mov	r3, r2
 800ddd0:	dcb1      	bgt.n	800dd36 <pool_func_mp_array_f32+0x8e>
 800ddd2:	b013      	add	sp, #76	; 0x4c
 800ddd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd8:	9902      	ldr	r1, [sp, #8]
 800ddda:	2900      	cmp	r1, #0
 800dddc:	d0f9      	beq.n	800ddd2 <pool_func_mp_array_f32+0x12a>
 800ddde:	9901      	ldr	r1, [sp, #4]
 800dde0:	2900      	cmp	r1, #0
 800dde2:	d0f6      	beq.n	800ddd2 <pool_func_mp_array_f32+0x12a>
 800dde4:	2f00      	cmp	r7, #0
 800dde6:	d0f4      	beq.n	800ddd2 <pool_func_mp_array_f32+0x12a>
 800dde8:	2f01      	cmp	r7, #1
 800ddea:	9900      	ldr	r1, [sp, #0]
 800ddec:	d16a      	bne.n	800dec4 <pool_func_mp_array_f32+0x21c>
 800ddee:	1a8a      	subs	r2, r1, r2
 800ddf0:	9904      	ldr	r1, [sp, #16]
 800ddf2:	1ac9      	subs	r1, r1, r3
 800ddf4:	425b      	negs	r3, r3
 800ddf6:	b292      	uxth	r2, r2
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	9207      	str	r2, [sp, #28]
 800ddfc:	b28a      	uxth	r2, r1
 800ddfe:	930c      	str	r3, [sp, #48]	; 0x30
 800de00:	2300      	movs	r3, #0
 800de02:	920b      	str	r2, [sp, #44]	; 0x2c
 800de04:	9308      	str	r3, [sp, #32]
 800de06:	9a01      	ldr	r2, [sp, #4]
 800de08:	f04f 0c00 	mov.w	ip, #0
 800de0c:	fb02 f303 	mul.w	r3, r2, r3
 800de10:	9a07      	ldr	r2, [sp, #28]
 800de12:	46e6      	mov	lr, ip
 800de14:	9309      	str	r3, [sp, #36]	; 0x24
 800de16:	b217      	sxth	r7, r2
 800de18:	9b00      	ldr	r3, [sp, #0]
 800de1a:	1ad3      	subs	r3, r2, r3
 800de1c:	b21b      	sxth	r3, r3
 800de1e:	930a      	str	r3, [sp, #40]	; 0x28
 800de20:	e9dd 830b 	ldrd	r8, r3, [sp, #44]	; 0x2c
 800de24:	9304      	str	r3, [sp, #16]
 800de26:	980a      	ldr	r0, [sp, #40]	; 0x28
 800de28:	fa0f f488 	sxth.w	r4, r8
 800de2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de2e:	4287      	cmp	r7, r0
 800de30:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 800de34:	449e      	add	lr, r3
 800de36:	eddf 7a6a 	vldr	s15, [pc, #424]	; 800dfe0 <pool_func_mp_array_f32+0x338>
 800de3a:	dd1e      	ble.n	800de7a <pool_func_mp_array_f32+0x1d2>
 800de3c:	42a6      	cmp	r6, r4
 800de3e:	da18      	bge.n	800de72 <pool_func_mp_array_f32+0x1ca>
 800de40:	43c1      	mvns	r1, r0
 800de42:	4583      	cmp	fp, r0
 800de44:	fb00 f20a 	mul.w	r2, r0, sl
 800de48:	ea4f 71d1 	mov.w	r1, r1, lsr #31
 800de4c:	dd11      	ble.n	800de72 <pool_func_mp_array_f32+0x1ca>
 800de4e:	4432      	add	r2, r6
 800de50:	4633      	mov	r3, r6
 800de52:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800de56:	041d      	lsls	r5, r3, #16
 800de58:	d406      	bmi.n	800de68 <pool_func_mp_array_f32+0x1c0>
 800de5a:	b129      	cbz	r1, 800de68 <pool_func_mp_array_f32+0x1c0>
 800de5c:	459a      	cmp	sl, r3
 800de5e:	dd03      	ble.n	800de68 <pool_func_mp_array_f32+0x1c0>
 800de60:	ed92 7a00 	vldr	s14, [r2]
 800de64:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800de68:	3301      	adds	r3, #1
 800de6a:	3204      	adds	r2, #4
 800de6c:	b21d      	sxth	r5, r3
 800de6e:	42a5      	cmp	r5, r4
 800de70:	dbf1      	blt.n	800de56 <pool_func_mp_array_f32+0x1ae>
 800de72:	3001      	adds	r0, #1
 800de74:	b200      	sxth	r0, r0
 800de76:	42b8      	cmp	r0, r7
 800de78:	dbe0      	blt.n	800de3c <pool_func_mp_array_f32+0x194>
 800de7a:	9b03      	ldr	r3, [sp, #12]
 800de7c:	f10c 0c01 	add.w	ip, ip, #1
 800de80:	9a05      	ldr	r2, [sp, #20]
 800de82:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800de86:	9b04      	ldr	r3, [sp, #16]
 800de88:	fa0f fc8c 	sxth.w	ip, ip
 800de8c:	4490      	add	r8, r2
 800de8e:	4413      	add	r3, r2
 800de90:	edce 7a00 	vstr	s15, [lr]
 800de94:	fa1f f888 	uxth.w	r8, r8
 800de98:	46e6      	mov	lr, ip
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	9304      	str	r3, [sp, #16]
 800de9e:	9b01      	ldr	r3, [sp, #4]
 800dea0:	4563      	cmp	r3, ip
 800dea2:	dcc0      	bgt.n	800de26 <pool_func_mp_array_f32+0x17e>
 800dea4:	9a08      	ldr	r2, [sp, #32]
 800dea6:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 800deaa:	3201      	adds	r2, #1
 800deac:	440b      	add	r3, r1
 800deae:	9902      	ldr	r1, [sp, #8]
 800deb0:	b212      	sxth	r2, r2
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	4291      	cmp	r1, r2
 800deb6:	9208      	str	r2, [sp, #32]
 800deb8:	9307      	str	r3, [sp, #28]
 800deba:	4613      	mov	r3, r2
 800debc:	dca3      	bgt.n	800de06 <pool_func_mp_array_f32+0x15e>
 800debe:	b013      	add	sp, #76	; 0x4c
 800dec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec4:	1a88      	subs	r0, r1, r2
 800dec6:	9904      	ldr	r1, [sp, #16]
 800dec8:	4252      	negs	r2, r2
 800deca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800dece:	1ac9      	subs	r1, r1, r3
 800ded0:	425b      	negs	r3, r3
 800ded2:	b292      	uxth	r2, r2
 800ded4:	46b9      	mov	r9, r7
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	b280      	uxth	r0, r0
 800deda:	9208      	str	r2, [sp, #32]
 800dedc:	9311      	str	r3, [sp, #68]	; 0x44
 800dede:	b28a      	uxth	r2, r1
 800dee0:	2300      	movs	r3, #0
 800dee2:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800dee6:	9007      	str	r0, [sp, #28]
 800dee8:	9210      	str	r2, [sp, #64]	; 0x40
 800deea:	930c      	str	r3, [sp, #48]	; 0x30
 800deec:	9a01      	ldr	r2, [sp, #4]
 800deee:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 800def2:	fb02 f303 	mul.w	r3, r2, r3
 800def6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800defa:	920b      	str	r2, [sp, #44]	; 0x2c
 800defc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800defe:	930f      	str	r3, [sp, #60]	; 0x3c
 800df00:	2300      	movs	r3, #0
 800df02:	9200      	str	r2, [sp, #0]
 800df04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df06:	930d      	str	r3, [sp, #52]	; 0x34
 800df08:	9204      	str	r2, [sp, #16]
 800df0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df0c:	f04f 0e00 	mov.w	lr, #0
 800df10:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 800df14:	4413      	add	r3, r2
 800df16:	f9bd 4000 	ldrsh.w	r4, [sp]
 800df1a:	46f4      	mov	ip, lr
 800df1c:	fb09 f303 	mul.w	r3, r9, r3
 800df20:	930a      	str	r3, [sp, #40]	; 0x28
 800df22:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800df24:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800dfe0 <pool_func_mp_array_f32+0x338>
 800df28:	42b8      	cmp	r0, r7
 800df2a:	da26      	bge.n	800df7a <pool_func_mp_array_f32+0x2d2>
 800df2c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800df30:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 800df34:	42a6      	cmp	r6, r4
 800df36:	da1a      	bge.n	800df6e <pool_func_mp_array_f32+0x2c6>
 800df38:	43c5      	mvns	r5, r0
 800df3a:	4558      	cmp	r0, fp
 800df3c:	fb00 f30a 	mul.w	r3, r0, sl
 800df40:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 800df44:	da13      	bge.n	800df6e <pool_func_mp_array_f32+0x2c6>
 800df46:	199a      	adds	r2, r3, r6
 800df48:	4633      	mov	r3, r6
 800df4a:	fb09 c202 	mla	r2, r9, r2, ip
 800df4e:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 800df52:	0419      	lsls	r1, r3, #16
 800df54:	d406      	bmi.n	800df64 <pool_func_mp_array_f32+0x2bc>
 800df56:	b12d      	cbz	r5, 800df64 <pool_func_mp_array_f32+0x2bc>
 800df58:	459a      	cmp	sl, r3
 800df5a:	dd03      	ble.n	800df64 <pool_func_mp_array_f32+0x2bc>
 800df5c:	ed92 7a00 	vldr	s14, [r2]
 800df60:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800df64:	3301      	adds	r3, #1
 800df66:	4442      	add	r2, r8
 800df68:	b219      	sxth	r1, r3
 800df6a:	42a1      	cmp	r1, r4
 800df6c:	dbf1      	blt.n	800df52 <pool_func_mp_array_f32+0x2aa>
 800df6e:	3001      	adds	r0, #1
 800df70:	b200      	sxth	r0, r0
 800df72:	42b8      	cmp	r0, r7
 800df74:	dbde      	blt.n	800df34 <pool_func_mp_array_f32+0x28c>
 800df76:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800df7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df7c:	f10e 0e01 	add.w	lr, lr, #1
 800df80:	9a03      	ldr	r2, [sp, #12]
 800df82:	4463      	add	r3, ip
 800df84:	fa0f fe8e 	sxth.w	lr, lr
 800df88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df8c:	45ce      	cmp	lr, r9
 800df8e:	46f4      	mov	ip, lr
 800df90:	edc3 7a00 	vstr	s15, [r3]
 800df94:	dbc5      	blt.n	800df22 <pool_func_mp_array_f32+0x27a>
 800df96:	9a00      	ldr	r2, [sp, #0]
 800df98:	9805      	ldr	r0, [sp, #20]
 800df9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800df9c:	4402      	add	r2, r0
 800df9e:	9b04      	ldr	r3, [sp, #16]
 800dfa0:	3101      	adds	r1, #1
 800dfa2:	b292      	uxth	r2, r2
 800dfa4:	4403      	add	r3, r0
 800dfa6:	b209      	sxth	r1, r1
 800dfa8:	9200      	str	r2, [sp, #0]
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	9a01      	ldr	r2, [sp, #4]
 800dfae:	9304      	str	r3, [sp, #16]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	428a      	cmp	r2, r1
 800dfb4:	910d      	str	r1, [sp, #52]	; 0x34
 800dfb6:	dca8      	bgt.n	800df0a <pool_func_mp_array_f32+0x262>
 800dfb8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dfba:	9b08      	ldr	r3, [sp, #32]
 800dfbc:	3101      	adds	r1, #1
 800dfbe:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 800dfc2:	b209      	sxth	r1, r1
 800dfc4:	4402      	add	r2, r0
 800dfc6:	4403      	add	r3, r0
 800dfc8:	910c      	str	r1, [sp, #48]	; 0x30
 800dfca:	b292      	uxth	r2, r2
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	9207      	str	r2, [sp, #28]
 800dfd0:	9a02      	ldr	r2, [sp, #8]
 800dfd2:	9308      	str	r3, [sp, #32]
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	428a      	cmp	r2, r1
 800dfd8:	dc88      	bgt.n	800deec <pool_func_mp_array_f32+0x244>
 800dfda:	b013      	add	sp, #76	; 0x4c
 800dfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe0:	cf000000 	.word	0xcf000000
 800dfe4:	4663      	mov	r3, ip
 800dfe6:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800dfea:	f8cd c020 	str.w	ip, [sp, #32]
 800dfee:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800dff2:	9a01      	ldr	r2, [sp, #4]
 800dff4:	f04f 0800 	mov.w	r8, #0
 800dff8:	f9bd c000 	ldrsh.w	ip, [sp]
 800dffc:	fb02 f303 	mul.w	r3, r2, r3
 800e000:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800e004:	930c      	str	r3, [sp, #48]	; 0x30
 800e006:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800e00a:	930d      	str	r3, [sp, #52]	; 0x34
 800e00c:	9b04      	ldr	r3, [sp, #16]
 800e00e:	9307      	str	r3, [sp, #28]
 800e010:	4643      	mov	r3, r8
 800e012:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e014:	f04f 0e00 	mov.w	lr, #0
 800e018:	fa0f f588 	sxth.w	r5, r8
 800e01c:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800e020:	4413      	add	r3, r2
 800e022:	4676      	mov	r6, lr
 800e024:	fb07 f303 	mul.w	r3, r7, r3
 800e028:	930b      	str	r3, [sp, #44]	; 0x2c
 800e02a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e02c:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 800dfe0 <pool_func_mp_array_f32+0x338>
 800e030:	4564      	cmp	r4, ip
 800e032:	da15      	bge.n	800e060 <pool_func_mp_array_f32+0x3b8>
 800e034:	4285      	cmp	r5, r0
 800e036:	da0f      	bge.n	800e058 <pool_func_mp_array_f32+0x3b0>
 800e038:	fb0a 5304 	mla	r3, sl, r4, r5
 800e03c:	462a      	mov	r2, r5
 800e03e:	fb07 6303 	mla	r3, r7, r3, r6
 800e042:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800e046:	3201      	adds	r2, #1
 800e048:	ed93 7a00 	vldr	s14, [r3]
 800e04c:	445b      	add	r3, fp
 800e04e:	b211      	sxth	r1, r2
 800e050:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800e054:	4281      	cmp	r1, r0
 800e056:	dbf6      	blt.n	800e046 <pool_func_mp_array_f32+0x39e>
 800e058:	3401      	adds	r4, #1
 800e05a:	b224      	sxth	r4, r4
 800e05c:	4564      	cmp	r4, ip
 800e05e:	dbe9      	blt.n	800e034 <pool_func_mp_array_f32+0x38c>
 800e060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e062:	f10e 0e01 	add.w	lr, lr, #1
 800e066:	9a03      	ldr	r2, [sp, #12]
 800e068:	4433      	add	r3, r6
 800e06a:	fa0f fe8e 	sxth.w	lr, lr
 800e06e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e072:	45be      	cmp	lr, r7
 800e074:	4676      	mov	r6, lr
 800e076:	edc3 7a00 	vstr	s15, [r3]
 800e07a:	dbd6      	blt.n	800e02a <pool_func_mp_array_f32+0x382>
 800e07c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e07e:	9905      	ldr	r1, [sp, #20]
 800e080:	9b07      	ldr	r3, [sp, #28]
 800e082:	3201      	adds	r2, #1
 800e084:	4488      	add	r8, r1
 800e086:	b212      	sxth	r2, r2
 800e088:	440b      	add	r3, r1
 800e08a:	9901      	ldr	r1, [sp, #4]
 800e08c:	fa1f f888 	uxth.w	r8, r8
 800e090:	b29b      	uxth	r3, r3
 800e092:	920a      	str	r2, [sp, #40]	; 0x28
 800e094:	4291      	cmp	r1, r2
 800e096:	9307      	str	r3, [sp, #28]
 800e098:	4613      	mov	r3, r2
 800e09a:	dcba      	bgt.n	800e012 <pool_func_mp_array_f32+0x36a>
 800e09c:	9a00      	ldr	r2, [sp, #0]
 800e09e:	9806      	ldr	r0, [sp, #24]
 800e0a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0a2:	4402      	add	r2, r0
 800e0a4:	9b08      	ldr	r3, [sp, #32]
 800e0a6:	3101      	adds	r1, #1
 800e0a8:	b292      	uxth	r2, r2
 800e0aa:	4403      	add	r3, r0
 800e0ac:	b209      	sxth	r1, r1
 800e0ae:	9200      	str	r2, [sp, #0]
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	9a02      	ldr	r2, [sp, #8]
 800e0b4:	9308      	str	r3, [sp, #32]
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	428a      	cmp	r2, r1
 800e0ba:	9109      	str	r1, [sp, #36]	; 0x24
 800e0bc:	dc99      	bgt.n	800dff2 <pool_func_mp_array_f32+0x34a>
 800e0be:	e688      	b.n	800ddd2 <pool_func_mp_array_f32+0x12a>

0800e0c0 <nl_func_relu_array_f32>:
 800e0c0:	b410      	push	{r4}
 800e0c2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e0c6:	698c      	ldr	r4, [r1, #24]
 800e0c8:	6981      	ldr	r1, [r0, #24]
 800e0ca:	4413      	add	r3, r2
 800e0cc:	68a0      	ldr	r0, [r4, #8]
 800e0ce:	6889      	ldr	r1, [r1, #8]
 800e0d0:	009a      	lsls	r2, r3, #2
 800e0d2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e0d6:	4298      	cmp	r0, r3
 800e0d8:	d80f      	bhi.n	800e0fa <nl_func_relu_array_f32+0x3a>
 800e0da:	3204      	adds	r2, #4
 800e0dc:	3304      	adds	r3, #4
 800e0de:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800e100 <nl_func_relu_array_f32+0x40>
 800e0e2:	4411      	add	r1, r2
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	ed73 7a01 	vldmdb	r3!, {s15}
 800e0ea:	3a08      	subs	r2, #8
 800e0ec:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800e0f0:	ed61 7a01 	vstmdb	r1!, {s15}
 800e0f4:	68a0      	ldr	r0, [r4, #8]
 800e0f6:	4290      	cmp	r0, r2
 800e0f8:	d9f4      	bls.n	800e0e4 <nl_func_relu_array_f32+0x24>
 800e0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0fe:	4770      	bx	lr
 800e100:	00000000 	.word	0x00000000

0800e104 <forward_relu>:
 800e104:	6982      	ldr	r2, [r0, #24]
 800e106:	8813      	ldrh	r3, [r2, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d05b      	beq.n	800e1c4 <forward_relu+0xc0>
 800e10c:	6851      	ldr	r1, [r2, #4]
 800e10e:	684a      	ldr	r2, [r1, #4]
 800e110:	b102      	cbz	r2, 800e114 <forward_relu+0x10>
 800e112:	6812      	ldr	r2, [r2, #0]
 800e114:	2b01      	cmp	r3, #1
 800e116:	f000 8123 	beq.w	800e360 <forward_relu+0x25c>
 800e11a:	b470      	push	{r4, r5, r6}
 800e11c:	690b      	ldr	r3, [r1, #16]
 800e11e:	b103      	cbz	r3, 800e122 <forward_relu+0x1e>
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	69c6      	ldr	r6, [r0, #28]
 800e124:	2e00      	cmp	r6, #0
 800e126:	f000 809e 	beq.w	800e266 <forward_relu+0x162>
 800e12a:	6871      	ldr	r1, [r6, #4]
 800e12c:	6998      	ldr	r0, [r3, #24]
 800e12e:	2901      	cmp	r1, #1
 800e130:	f000 80c3 	beq.w	800e2ba <forward_relu+0x1b6>
 800e134:	6893      	ldr	r3, [r2, #8]
 800e136:	6991      	ldr	r1, [r2, #24]
 800e138:	0a1b      	lsrs	r3, r3, #8
 800e13a:	6880      	ldr	r0, [r0, #8]
 800e13c:	688d      	ldr	r5, [r1, #8]
 800e13e:	f000 80f2 	beq.w	800e326 <forward_relu+0x222>
 800e142:	68d4      	ldr	r4, [r2, #12]
 800e144:	2201      	movs	r2, #1
 800e146:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e14a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e14e:	42a3      	cmp	r3, r4
 800e150:	fb01 f202 	mul.w	r2, r1, r2
 800e154:	d1f9      	bne.n	800e14a <forward_relu+0x46>
 800e156:	68b3      	ldr	r3, [r6, #8]
 800e158:	ed93 7a02 	vldr	s14, [r3, #8]
 800e15c:	edd3 6a00 	vldr	s13, [r3]
 800e160:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e164:	ed93 6a01 	vldr	s12, [r3, #4]
 800e168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e16c:	d42c      	bmi.n	800e1c8 <forward_relu+0xc4>
 800e16e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e172:	4413      	add	r3, r2
 800e174:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800e178:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e17c:	4295      	cmp	r5, r2
 800e17e:	d81f      	bhi.n	800e1c0 <forward_relu+0xbc>
 800e180:	3204      	adds	r2, #4
 800e182:	1d01      	adds	r1, r0, #4
 800e184:	e00d      	b.n	800e1a2 <forward_relu+0x9e>
 800e186:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e18e:	db03      	blt.n	800e198 <forward_relu+0x94>
 800e190:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e194:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e198:	3b08      	subs	r3, #8
 800e19a:	ed61 7a01 	vstmdb	r1!, {s15}
 800e19e:	429d      	cmp	r5, r3
 800e1a0:	d80e      	bhi.n	800e1c0 <forward_relu+0xbc>
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	ed72 7a01 	vldmdb	r2!, {s15}
 800e1a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b0:	d9e9      	bls.n	800e186 <forward_relu+0x82>
 800e1b2:	3b08      	subs	r3, #8
 800e1b4:	eef0 7a47 	vmov.f32	s15, s14
 800e1b8:	429d      	cmp	r5, r3
 800e1ba:	ed61 7a01 	vstmdb	r1!, {s15}
 800e1be:	d9f0      	bls.n	800e1a2 <forward_relu+0x9e>
 800e1c0:	bc70      	pop	{r4, r5, r6}
 800e1c2:	4770      	bx	lr
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	deff      	udf	#255	; 0xff
 800e1c8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e1cc:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800e1d0:	4411      	add	r1, r2
 800e1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800e1da:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800e1de:	d11f      	bne.n	800e220 <forward_relu+0x11c>
 800e1e0:	429d      	cmp	r5, r3
 800e1e2:	d8ed      	bhi.n	800e1c0 <forward_relu+0xbc>
 800e1e4:	1b5d      	subs	r5, r3, r5
 800e1e6:	1d1a      	adds	r2, r3, #4
 800e1e8:	1d01      	adds	r1, r0, #4
 800e1ea:	2000      	movs	r0, #0
 800e1ec:	f025 0503 	bic.w	r5, r5, #3
 800e1f0:	1b5b      	subs	r3, r3, r5
 800e1f2:	ed72 7a01 	vldmdb	r2!, {s15}
 800e1f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1fe:	dc0a      	bgt.n	800e216 <forward_relu+0x112>
 800e200:	429a      	cmp	r2, r3
 800e202:	f841 0d04 	str.w	r0, [r1, #-4]!
 800e206:	d0db      	beq.n	800e1c0 <forward_relu+0xbc>
 800e208:	ed72 7a01 	vldmdb	r2!, {s15}
 800e20c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e214:	ddf4      	ble.n	800e200 <forward_relu+0xfc>
 800e216:	429a      	cmp	r2, r3
 800e218:	ed61 7a01 	vstmdb	r1!, {s15}
 800e21c:	d1e9      	bne.n	800e1f2 <forward_relu+0xee>
 800e21e:	e7cf      	b.n	800e1c0 <forward_relu+0xbc>
 800e220:	429d      	cmp	r5, r3
 800e222:	d8cd      	bhi.n	800e1c0 <forward_relu+0xbc>
 800e224:	1b5d      	subs	r5, r3, r5
 800e226:	1d1a      	adds	r2, r3, #4
 800e228:	1d01      	adds	r1, r0, #4
 800e22a:	f025 0503 	bic.w	r5, r5, #3
 800e22e:	1b5b      	subs	r3, r3, r5
 800e230:	ed72 7a01 	vldmdb	r2!, {s15}
 800e234:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e23c:	db0e      	blt.n	800e25c <forward_relu+0x158>
 800e23e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e242:	4293      	cmp	r3, r2
 800e244:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e248:	ed61 7a01 	vstmdb	r1!, {s15}
 800e24c:	d0b8      	beq.n	800e1c0 <forward_relu+0xbc>
 800e24e:	ed72 7a01 	vldmdb	r2!, {s15}
 800e252:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25a:	daf0      	bge.n	800e23e <forward_relu+0x13a>
 800e25c:	4293      	cmp	r3, r2
 800e25e:	ed61 7a01 	vstmdb	r1!, {s15}
 800e262:	d1e5      	bne.n	800e230 <forward_relu+0x12c>
 800e264:	e7ac      	b.n	800e1c0 <forward_relu+0xbc>
 800e266:	6999      	ldr	r1, [r3, #24]
 800e268:	6893      	ldr	r3, [r2, #8]
 800e26a:	6990      	ldr	r0, [r2, #24]
 800e26c:	0a1b      	lsrs	r3, r3, #8
 800e26e:	6889      	ldr	r1, [r1, #8]
 800e270:	6884      	ldr	r4, [r0, #8]
 800e272:	d06e      	beq.n	800e352 <forward_relu+0x24e>
 800e274:	68d5      	ldr	r5, [r2, #12]
 800e276:	2201      	movs	r2, #1
 800e278:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e27c:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800e280:	429d      	cmp	r5, r3
 800e282:	fb00 f202 	mul.w	r2, r0, r2
 800e286:	d1f9      	bne.n	800e27c <forward_relu+0x178>
 800e288:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e28c:	4413      	add	r3, r2
 800e28e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e292:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e296:	4294      	cmp	r4, r2
 800e298:	d892      	bhi.n	800e1c0 <forward_relu+0xbc>
 800e29a:	3204      	adds	r2, #4
 800e29c:	3104      	adds	r1, #4
 800e29e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800e368 <forward_relu+0x264>
 800e2a2:	4613      	mov	r3, r2
 800e2a4:	ed72 7a01 	vldmdb	r2!, {s15}
 800e2a8:	3b08      	subs	r3, #8
 800e2aa:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800e2ae:	ed61 7a01 	vstmdb	r1!, {s15}
 800e2b2:	429c      	cmp	r4, r3
 800e2b4:	d9f5      	bls.n	800e2a2 <forward_relu+0x19e>
 800e2b6:	bc70      	pop	{r4, r5, r6}
 800e2b8:	4770      	bx	lr
 800e2ba:	6993      	ldr	r3, [r2, #24]
 800e2bc:	6880      	ldr	r0, [r0, #8]
 800e2be:	689c      	ldr	r4, [r3, #8]
 800e2c0:	6893      	ldr	r3, [r2, #8]
 800e2c2:	0a1b      	lsrs	r3, r3, #8
 800e2c4:	d047      	beq.n	800e356 <forward_relu+0x252>
 800e2c6:	68d5      	ldr	r5, [r2, #12]
 800e2c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e2cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e2d0:	42ab      	cmp	r3, r5
 800e2d2:	fb02 f101 	mul.w	r1, r2, r1
 800e2d6:	d1f9      	bne.n	800e2cc <forward_relu+0x1c8>
 800e2d8:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800e2dc:	68b3      	ldr	r3, [r6, #8]
 800e2de:	440a      	add	r2, r1
 800e2e0:	ed93 7a00 	vldr	s14, [r3]
 800e2e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2e8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e2ec:	429c      	cmp	r4, r3
 800e2ee:	f63f af67 	bhi.w	800e1c0 <forward_relu+0xbc>
 800e2f2:	1d02      	adds	r2, r0, #4
 800e2f4:	3304      	adds	r3, #4
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e2fc:	1f19      	subs	r1, r3, #4
 800e2fe:	3b08      	subs	r3, #8
 800e300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e308:	d406      	bmi.n	800e318 <forward_relu+0x214>
 800e30a:	429c      	cmp	r4, r3
 800e30c:	f842 0d04 	str.w	r0, [r2, #-4]!
 800e310:	f63f af56 	bhi.w	800e1c0 <forward_relu+0xbc>
 800e314:	460b      	mov	r3, r1
 800e316:	e7ef      	b.n	800e2f8 <forward_relu+0x1f4>
 800e318:	429c      	cmp	r4, r3
 800e31a:	ed62 7a01 	vstmdb	r2!, {s15}
 800e31e:	f63f af4f 	bhi.w	800e1c0 <forward_relu+0xbc>
 800e322:	460b      	mov	r3, r1
 800e324:	e7e8      	b.n	800e2f8 <forward_relu+0x1f4>
 800e326:	68b3      	ldr	r3, [r6, #8]
 800e328:	ed93 7a02 	vldr	s14, [r3, #8]
 800e32c:	edd3 6a00 	vldr	s13, [r3]
 800e330:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e334:	ed93 6a01 	vldr	s12, [r3, #4]
 800e338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33c:	d401      	bmi.n	800e342 <forward_relu+0x23e>
 800e33e:	462a      	mov	r2, r5
 800e340:	e71e      	b.n	800e180 <forward_relu+0x7c>
 800e342:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e346:	462b      	mov	r3, r5
 800e348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e34c:	f47f af6a 	bne.w	800e224 <forward_relu+0x120>
 800e350:	e748      	b.n	800e1e4 <forward_relu+0xe0>
 800e352:	4622      	mov	r2, r4
 800e354:	e7a1      	b.n	800e29a <forward_relu+0x196>
 800e356:	68b2      	ldr	r2, [r6, #8]
 800e358:	4623      	mov	r3, r4
 800e35a:	ed92 7a00 	vldr	s14, [r2]
 800e35e:	e7c8      	b.n	800e2f2 <forward_relu+0x1ee>
 800e360:	2300      	movs	r3, #0
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	deff      	udf	#255	; 0xff
 800e366:	bf00      	nop
 800e368:	00000000 	.word	0x00000000

0800e36c <forward_sm>:
 800e36c:	6982      	ldr	r2, [r0, #24]
 800e36e:	8813      	ldrh	r3, [r2, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d078      	beq.n	800e466 <forward_sm+0xfa>
 800e374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e378:	ed2d 8b04 	vpush	{d8-d9}
 800e37c:	6852      	ldr	r2, [r2, #4]
 800e37e:	b085      	sub	sp, #20
 800e380:	6854      	ldr	r4, [r2, #4]
 800e382:	b104      	cbz	r4, 800e386 <forward_sm+0x1a>
 800e384:	6824      	ldr	r4, [r4, #0]
 800e386:	2b01      	cmp	r3, #1
 800e388:	d072      	beq.n	800e470 <forward_sm+0x104>
 800e38a:	6913      	ldr	r3, [r2, #16]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d072      	beq.n	800e476 <forward_sm+0x10a>
 800e390:	681e      	ldr	r6, [r3, #0]
 800e392:	68a3      	ldr	r3, [r4, #8]
 800e394:	68e0      	ldr	r0, [r4, #12]
 800e396:	68f2      	ldr	r2, [r6, #12]
 800e398:	0a1b      	lsrs	r3, r3, #8
 800e39a:	6845      	ldr	r5, [r0, #4]
 800e39c:	6857      	ldr	r7, [r2, #4]
 800e39e:	d064      	beq.n	800e46a <forward_sm+0xfe>
 800e3a0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e3aa:	4298      	cmp	r0, r3
 800e3ac:	fb01 f202 	mul.w	r2, r1, r2
 800e3b0:	d1f9      	bne.n	800e3a6 <forward_sm+0x3a>
 800e3b2:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800e3b6:	69a2      	ldr	r2, [r4, #24]
 800e3b8:	69b3      	ldr	r3, [r6, #24]
 800e3ba:	6892      	ldr	r2, [r2, #8]
 800e3bc:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e3c0:	eb02 0309 	add.w	r3, r2, r9
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	9301      	str	r3, [sp, #4]
 800e3c8:	d248      	bcs.n	800e45c <forward_sm+0xf0>
 800e3ca:	00bb      	lsls	r3, r7, #2
 800e3cc:	2d01      	cmp	r5, #1
 800e3ce:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800e3d2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800e3d6:	9303      	str	r3, [sp, #12]
 800e3d8:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800e3dc:	463e      	mov	r6, r7
 800e3de:	ed92 8a00 	vldr	s16, [r2]
 800e3e2:	9302      	str	r3, [sp, #8]
 800e3e4:	d937      	bls.n	800e456 <forward_sm+0xea>
 800e3e6:	1d13      	adds	r3, r2, #4
 800e3e8:	ecf3 7a01 	vldmia	r3!, {s15}
 800e3ec:	429e      	cmp	r6, r3
 800e3ee:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800e3f2:	d1f9      	bne.n	800e3e8 <forward_sm+0x7c>
 800e3f4:	4692      	mov	sl, r2
 800e3f6:	46c3      	mov	fp, r8
 800e3f8:	46c1      	mov	r9, r8
 800e3fa:	eddf 8a20 	vldr	s17, [pc, #128]	; 800e47c <forward_sm+0x110>
 800e3fe:	2400      	movs	r4, #0
 800e400:	ecba 0a01 	vldmia	sl!, {s0}
 800e404:	3401      	adds	r4, #1
 800e406:	ee30 0a48 	vsub.f32	s0, s0, s16
 800e40a:	f000 fab3 	bl	800e974 <expf>
 800e40e:	42a5      	cmp	r5, r4
 800e410:	ee78 8a80 	vadd.f32	s17, s17, s0
 800e414:	eca9 0a01 	vstmia	r9!, {s0}
 800e418:	d8f2      	bhi.n	800e400 <forward_sm+0x94>
 800e41a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e422:	d00b      	beq.n	800e43c <forward_sm+0xd0>
 800e424:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800e428:	2300      	movs	r3, #0
 800e42a:	eddb 7a00 	vldr	s15, [fp]
 800e42e:	3301      	adds	r3, #1
 800e430:	429d      	cmp	r5, r3
 800e432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e436:	eceb 7a01 	vstmia	fp!, {s15}
 800e43a:	d8f6      	bhi.n	800e42a <forward_sm+0xbe>
 800e43c:	9b03      	ldr	r3, [sp, #12]
 800e43e:	463a      	mov	r2, r7
 800e440:	9901      	ldr	r1, [sp, #4]
 800e442:	4498      	add	r8, r3
 800e444:	9b02      	ldr	r3, [sp, #8]
 800e446:	42b9      	cmp	r1, r7
 800e448:	441e      	add	r6, r3
 800e44a:	d907      	bls.n	800e45c <forward_sm+0xf0>
 800e44c:	2d01      	cmp	r5, #1
 800e44e:	441f      	add	r7, r3
 800e450:	ed92 8a00 	vldr	s16, [r2]
 800e454:	d8c7      	bhi.n	800e3e6 <forward_sm+0x7a>
 800e456:	2d00      	cmp	r5, #0
 800e458:	d0f0      	beq.n	800e43c <forward_sm+0xd0>
 800e45a:	e7cb      	b.n	800e3f4 <forward_sm+0x88>
 800e45c:	b005      	add	sp, #20
 800e45e:	ecbd 8b04 	vpop	{d8-d9}
 800e462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	deff      	udf	#255	; 0xff
 800e46a:	f04f 0904 	mov.w	r9, #4
 800e46e:	e7a2      	b.n	800e3b6 <forward_sm+0x4a>
 800e470:	2300      	movs	r3, #0
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	deff      	udf	#255	; 0xff
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	deff      	udf	#255	; 0xff
 800e47a:	bf00      	nop
 800e47c:	00000000 	.word	0x00000000

0800e480 <ai_check_custom_types>:
 800e480:	b082      	sub	sp, #8
 800e482:	4b12      	ldr	r3, [pc, #72]	; (800e4cc <ai_check_custom_types+0x4c>)
 800e484:	9301      	str	r3, [sp, #4]
 800e486:	b118      	cbz	r0, 800e490 <ai_check_custom_types+0x10>
 800e488:	7803      	ldrb	r3, [r0, #0]
 800e48a:	2b03      	cmp	r3, #3
 800e48c:	d002      	beq.n	800e494 <ai_check_custom_types+0x14>
 800e48e:	2000      	movs	r0, #0
 800e490:	b002      	add	sp, #8
 800e492:	4770      	bx	lr
 800e494:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e498:	4293      	cmp	r3, r2
 800e49a:	d004      	beq.n	800e4a6 <ai_check_custom_types+0x26>
 800e49c:	2001      	movs	r0, #1
 800e49e:	f080 0001 	eor.w	r0, r0, #1
 800e4a2:	b002      	add	sp, #8
 800e4a4:	4770      	bx	lr
 800e4a6:	7842      	ldrb	r2, [r0, #1]
 800e4a8:	3001      	adds	r0, #1
 800e4aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d1f4      	bne.n	800e49c <ai_check_custom_types+0x1c>
 800e4b2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800e4b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d1ee      	bne.n	800e49c <ai_check_custom_types+0x1c>
 800e4be:	7842      	ldrb	r2, [r0, #1]
 800e4c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d1e9      	bne.n	800e49c <ai_check_custom_types+0x1c>
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	e7e8      	b.n	800e49e <ai_check_custom_types+0x1e>
 800e4cc:	84048403 	.word	0x84048403

0800e4d0 <ai_layers_init_all>:
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e4d4:	b13b      	cbz	r3, 800e4e6 <ai_layers_init_all+0x16>
 800e4d6:	691a      	ldr	r2, [r3, #16]
 800e4d8:	3101      	adds	r1, #1
 800e4da:	60d8      	str	r0, [r3, #12]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	4613      	mov	r3, r2
 800e4e0:	d001      	beq.n	800e4e6 <ai_layers_init_all+0x16>
 800e4e2:	2a00      	cmp	r2, #0
 800e4e4:	d1f6      	bne.n	800e4d4 <ai_layers_init_all+0x4>
 800e4e6:	4608      	mov	r0, r1
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop

0800e4ec <ai_layers_post_init_all>:
 800e4ec:	b538      	push	{r3, r4, r5, lr}
 800e4ee:	2500      	movs	r5, #0
 800e4f0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e4f2:	b16c      	cbz	r4, 800e510 <ai_layers_post_init_all+0x24>
 800e4f4:	6863      	ldr	r3, [r4, #4]
 800e4f6:	07db      	lsls	r3, r3, #31
 800e4f8:	d504      	bpl.n	800e504 <ai_layers_post_init_all+0x18>
 800e4fa:	6a23      	ldr	r3, [r4, #32]
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	b10b      	cbz	r3, 800e504 <ai_layers_post_init_all+0x18>
 800e500:	3501      	adds	r5, #1
 800e502:	4798      	blx	r3
 800e504:	6923      	ldr	r3, [r4, #16]
 800e506:	42a3      	cmp	r3, r4
 800e508:	461c      	mov	r4, r3
 800e50a:	d001      	beq.n	800e510 <ai_layers_post_init_all+0x24>
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d1f0      	bne.n	800e4f2 <ai_layers_post_init_all+0x6>
 800e510:	4628      	mov	r0, r5
 800e512:	bd38      	pop	{r3, r4, r5, pc}

0800e514 <ai_layers_forward_all>:
 800e514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e518:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800e51c:	4604      	mov	r4, r0
 800e51e:	f1b8 0f00 	cmp.w	r8, #0
 800e522:	d02a      	beq.n	800e57a <ai_layers_forward_all+0x66>
 800e524:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800e526:	6381      	str	r1, [r0, #56]	; 0x38
 800e528:	b319      	cbz	r1, 800e572 <ai_layers_forward_all+0x5e>
 800e52a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e52c:	2001      	movs	r0, #1
 800e52e:	47c0      	blx	r8
 800e530:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e532:	b1f6      	cbz	r6, 800e572 <ai_layers_forward_all+0x5e>
 800e534:	2700      	movs	r7, #0
 800e536:	4631      	mov	r1, r6
 800e538:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e53a:	2002      	movs	r0, #2
 800e53c:	47c0      	blx	r8
 800e53e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800e540:	4628      	mov	r0, r5
 800e542:	696b      	ldr	r3, [r5, #20]
 800e544:	4798      	blx	r3
 800e546:	692e      	ldr	r6, [r5, #16]
 800e548:	2003      	movs	r0, #3
 800e54a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e54c:	42b5      	cmp	r5, r6
 800e54e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e550:	d007      	beq.n	800e562 <ai_layers_forward_all+0x4e>
 800e552:	47c0      	blx	r8
 800e554:	3701      	adds	r7, #1
 800e556:	63a6      	str	r6, [r4, #56]	; 0x38
 800e558:	2e00      	cmp	r6, #0
 800e55a:	d1ec      	bne.n	800e536 <ai_layers_forward_all+0x22>
 800e55c:	4638      	mov	r0, r7
 800e55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e562:	2003      	movs	r0, #3
 800e564:	3701      	adds	r7, #1
 800e566:	47c0      	blx	r8
 800e568:	2300      	movs	r3, #0
 800e56a:	4638      	mov	r0, r7
 800e56c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e572:	2700      	movs	r7, #0
 800e574:	4638      	mov	r0, r7
 800e576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e57a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800e57c:	6385      	str	r5, [r0, #56]	; 0x38
 800e57e:	2d00      	cmp	r5, #0
 800e580:	d0f7      	beq.n	800e572 <ai_layers_forward_all+0x5e>
 800e582:	4647      	mov	r7, r8
 800e584:	696b      	ldr	r3, [r5, #20]
 800e586:	4628      	mov	r0, r5
 800e588:	4798      	blx	r3
 800e58a:	462b      	mov	r3, r5
 800e58c:	692d      	ldr	r5, [r5, #16]
 800e58e:	429d      	cmp	r5, r3
 800e590:	d004      	beq.n	800e59c <ai_layers_forward_all+0x88>
 800e592:	3701      	adds	r7, #1
 800e594:	63a5      	str	r5, [r4, #56]	; 0x38
 800e596:	2d00      	cmp	r5, #0
 800e598:	d1f4      	bne.n	800e584 <ai_layers_forward_all+0x70>
 800e59a:	e7df      	b.n	800e55c <ai_layers_forward_all+0x48>
 800e59c:	2300      	movs	r3, #0
 800e59e:	3701      	adds	r7, #1
 800e5a0:	63a3      	str	r3, [r4, #56]	; 0x38
 800e5a2:	e7db      	b.n	800e55c <ai_layers_forward_all+0x48>

0800e5a4 <lite_dense_if32of32wf32>:
 800e5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a8:	ed2d 8b0c 	vpush	{d8-d13}
 800e5ac:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 800e5b0:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800e5b4:	4287      	cmp	r7, r0
 800e5b6:	f240 8105 	bls.w	800e7c4 <lite_dense_if32of32wf32+0x220>
 800e5ba:	f1a6 0810 	sub.w	r8, r6, #16
 800e5be:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800e5c2:	4605      	mov	r5, r0
 800e5c4:	f006 0b0f 	and.w	fp, r6, #15
 800e5c8:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800e5cc:	f108 0801 	add.w	r8, r8, #1
 800e5d0:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 800e5d4:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800e5d8:	2e0f      	cmp	r6, #15
 800e5da:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800e7f0 <lite_dense_if32of32wf32+0x24c>
 800e5de:	f240 8102 	bls.w	800e7e6 <lite_dense_if32of32wf32+0x242>
 800e5e2:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800e5e6:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800e5ea:	46b6      	mov	lr, r6
 800e5ec:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 800e5f0:	f1ae 0e10 	sub.w	lr, lr, #16
 800e5f4:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800e5f8:	3440      	adds	r4, #64	; 0x40
 800e5fa:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 800e5fe:	f1be 0f0f 	cmp.w	lr, #15
 800e602:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e606:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 800e60a:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800e60e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800e612:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 800e616:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e61a:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 800e61e:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 800e622:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 800e626:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 800e62a:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 800e62e:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 800e632:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e636:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 800e63a:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 800e63e:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 800e642:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 800e646:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 800e64a:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 800e64e:	eeed 7a26 	vfma.f32	s15, s26, s13
 800e652:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 800e656:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 800e65a:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 800e65e:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 800e662:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 800e666:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 800e66a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800e66e:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800e672:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800e676:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800e67a:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800e67e:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800e682:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800e686:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800e68a:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800e68e:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800e692:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800e696:	eee9 7a89 	vfma.f32	s15, s19, s18
 800e69a:	eee8 7a88 	vfma.f32	s15, s17, s16
 800e69e:	eee0 7a20 	vfma.f32	s15, s0, s1
 800e6a2:	eee1 7a21 	vfma.f32	s15, s2, s3
 800e6a6:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e6aa:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e6ae:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e6b2:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e6b6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e6ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e6be:	d895      	bhi.n	800e5ec <lite_dense_if32of32wf32+0x48>
 800e6c0:	eb02 0e0a 	add.w	lr, r2, sl
 800e6c4:	465c      	mov	r4, fp
 800e6c6:	46c4      	mov	ip, r8
 800e6c8:	2c00      	cmp	r4, #0
 800e6ca:	d075      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e6cc:	eddc 6a00 	vldr	s13, [ip]
 800e6d0:	2c01      	cmp	r4, #1
 800e6d2:	edde 7a00 	vldr	s15, [lr]
 800e6d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6da:	d06d      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e6dc:	eddc 6a01 	vldr	s13, [ip, #4]
 800e6e0:	2c02      	cmp	r4, #2
 800e6e2:	edde 7a01 	vldr	s15, [lr, #4]
 800e6e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6ea:	d065      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e6ec:	eddc 6a02 	vldr	s13, [ip, #8]
 800e6f0:	2c03      	cmp	r4, #3
 800e6f2:	edde 7a02 	vldr	s15, [lr, #8]
 800e6f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e6fa:	d05d      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e6fc:	eddc 6a03 	vldr	s13, [ip, #12]
 800e700:	2c04      	cmp	r4, #4
 800e702:	edde 7a03 	vldr	s15, [lr, #12]
 800e706:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e70a:	d055      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e70c:	eddc 6a04 	vldr	s13, [ip, #16]
 800e710:	2c05      	cmp	r4, #5
 800e712:	edde 7a04 	vldr	s15, [lr, #16]
 800e716:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e71a:	d04d      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e71c:	eddc 6a05 	vldr	s13, [ip, #20]
 800e720:	2c06      	cmp	r4, #6
 800e722:	edde 7a05 	vldr	s15, [lr, #20]
 800e726:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e72a:	d045      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e72c:	eddc 6a06 	vldr	s13, [ip, #24]
 800e730:	2c07      	cmp	r4, #7
 800e732:	edde 7a06 	vldr	s15, [lr, #24]
 800e736:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e73a:	d03d      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e73c:	eddc 6a07 	vldr	s13, [ip, #28]
 800e740:	2c08      	cmp	r4, #8
 800e742:	edde 7a07 	vldr	s15, [lr, #28]
 800e746:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e74a:	d035      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e74c:	eddc 6a08 	vldr	s13, [ip, #32]
 800e750:	2c09      	cmp	r4, #9
 800e752:	edde 7a08 	vldr	s15, [lr, #32]
 800e756:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e75a:	d02d      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e75c:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800e760:	2c0a      	cmp	r4, #10
 800e762:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800e766:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e76a:	d025      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e76c:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800e770:	2c0b      	cmp	r4, #11
 800e772:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800e776:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e77a:	d01d      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e77c:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800e780:	2c0c      	cmp	r4, #12
 800e782:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800e786:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e78a:	d015      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e78c:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800e790:	3c0d      	subs	r4, #13
 800e792:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800e796:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e79a:	d00d      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e79c:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800e7a0:	2c01      	cmp	r4, #1
 800e7a2:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800e7a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e7aa:	d005      	beq.n	800e7b8 <lite_dense_if32of32wf32+0x214>
 800e7ac:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800e7b0:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800e7b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e7b8:	eca5 7a01 	vstmia	r5!, {s14}
 800e7bc:	42af      	cmp	r7, r5
 800e7be:	444a      	add	r2, r9
 800e7c0:	f63f af0a 	bhi.w	800e5d8 <lite_dense_if32of32wf32+0x34>
 800e7c4:	b15b      	cbz	r3, 800e7de <lite_dense_if32of32wf32+0x23a>
 800e7c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e7c8:	b14a      	cbz	r2, 800e7de <lite_dense_if32of32wf32+0x23a>
 800e7ca:	edd0 7a00 	vldr	s15, [r0]
 800e7ce:	ecb3 7a01 	vldmia	r3!, {s14}
 800e7d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7d6:	ece0 7a01 	vstmia	r0!, {s15}
 800e7da:	4287      	cmp	r7, r0
 800e7dc:	d1f5      	bne.n	800e7ca <lite_dense_if32of32wf32+0x226>
 800e7de:	ecbd 8b0c 	vpop	{d8-d13}
 800e7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e6:	4634      	mov	r4, r6
 800e7e8:	4696      	mov	lr, r2
 800e7ea:	468c      	mov	ip, r1
 800e7ec:	e76c      	b.n	800e6c8 <lite_dense_if32of32wf32+0x124>
 800e7ee:	bf00      	nop
 800e7f0:	00000000 	.word	0x00000000

0800e7f4 <ai_version_get>:
 800e7f4:	0212      	lsls	r2, r2, #8
 800e7f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e7fa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800e7fe:	4770      	bx	lr

0800e800 <get_tensor_byte_size>:
 800e800:	b430      	push	{r4, r5}
 800e802:	6985      	ldr	r5, [r0, #24]
 800e804:	68c4      	ldr	r4, [r0, #12]
 800e806:	6941      	ldr	r1, [r0, #20]
 800e808:	4b06      	ldr	r3, [pc, #24]	; (800e824 <get_tensor_byte_size+0x24>)
 800e80a:	6828      	ldr	r0, [r5, #0]
 800e80c:	4a06      	ldr	r2, [pc, #24]	; (800e828 <get_tensor_byte_size+0x28>)
 800e80e:	4003      	ands	r3, r0
 800e810:	68c9      	ldr	r1, [r1, #12]
 800e812:	68e0      	ldr	r0, [r4, #12]
 800e814:	4293      	cmp	r3, r2
 800e816:	fb01 f000 	mul.w	r0, r1, r0
 800e81a:	d101      	bne.n	800e820 <get_tensor_byte_size+0x20>
 800e81c:	3007      	adds	r0, #7
 800e81e:	08c0      	lsrs	r0, r0, #3
 800e820:	bc30      	pop	{r4, r5}
 800e822:	4770      	bx	lr
 800e824:	017fffff 	.word	0x017fffff
 800e828:	000400c0 	.word	0x000400c0

0800e82c <ai_array_to_buffer_fmt>:
 800e82c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800e830:	2b02      	cmp	r3, #2
 800e832:	d050      	beq.n	800e8d6 <ai_array_to_buffer_fmt+0xaa>
 800e834:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800e838:	4b29      	ldr	r3, [pc, #164]	; (800e8e0 <ai_array_to_buffer_fmt+0xb4>)
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d00b      	beq.n	800e856 <ai_array_to_buffer_fmt+0x2a>
 800e83e:	dc1c      	bgt.n	800e87a <ai_array_to_buffer_fmt+0x4e>
 800e840:	4b28      	ldr	r3, [pc, #160]	; (800e8e4 <ai_array_to_buffer_fmt+0xb8>)
 800e842:	429a      	cmp	r2, r3
 800e844:	d007      	beq.n	800e856 <ai_array_to_buffer_fmt+0x2a>
 800e846:	dd0b      	ble.n	800e860 <ai_array_to_buffer_fmt+0x34>
 800e848:	4b27      	ldr	r3, [pc, #156]	; (800e8e8 <ai_array_to_buffer_fmt+0xbc>)
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d003      	beq.n	800e856 <ai_array_to_buffer_fmt+0x2a>
 800e84e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800e852:	429a      	cmp	r2, r3
 800e854:	d131      	bne.n	800e8ba <ai_array_to_buffer_fmt+0x8e>
 800e856:	4613      	mov	r3, r2
 800e858:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800e85c:	4318      	orrs	r0, r3
 800e85e:	4770      	bx	lr
 800e860:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e864:	429a      	cmp	r2, r3
 800e866:	d0f6      	beq.n	800e856 <ai_array_to_buffer_fmt+0x2a>
 800e868:	dd2c      	ble.n	800e8c4 <ai_array_to_buffer_fmt+0x98>
 800e86a:	4b20      	ldr	r3, [pc, #128]	; (800e8ec <ai_array_to_buffer_fmt+0xc0>)
 800e86c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800e870:	429a      	cmp	r2, r3
 800e872:	bf18      	it	ne
 800e874:	2340      	movne	r3, #64	; 0x40
 800e876:	4318      	orrs	r0, r3
 800e878:	4770      	bx	lr
 800e87a:	4b1d      	ldr	r3, [pc, #116]	; (800e8f0 <ai_array_to_buffer_fmt+0xc4>)
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d0ea      	beq.n	800e856 <ai_array_to_buffer_fmt+0x2a>
 800e880:	dd0e      	ble.n	800e8a0 <ai_array_to_buffer_fmt+0x74>
 800e882:	4b1c      	ldr	r3, [pc, #112]	; (800e8f4 <ai_array_to_buffer_fmt+0xc8>)
 800e884:	429a      	cmp	r2, r3
 800e886:	d0e6      	beq.n	800e856 <ai_array_to_buffer_fmt+0x2a>
 800e888:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d0e2      	beq.n	800e856 <ai_array_to_buffer_fmt+0x2a>
 800e890:	4b19      	ldr	r3, [pc, #100]	; (800e8f8 <ai_array_to_buffer_fmt+0xcc>)
 800e892:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800e896:	429a      	cmp	r2, r3
 800e898:	bf18      	it	ne
 800e89a:	2340      	movne	r3, #64	; 0x40
 800e89c:	4318      	orrs	r0, r3
 800e89e:	4770      	bx	lr
 800e8a0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d0d6      	beq.n	800e856 <ai_array_to_buffer_fmt+0x2a>
 800e8a8:	3307      	adds	r3, #7
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d0d3      	beq.n	800e856 <ai_array_to_buffer_fmt+0x2a>
 800e8ae:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	bf18      	it	ne
 800e8b6:	2340      	movne	r3, #64	; 0x40
 800e8b8:	e7ce      	b.n	800e858 <ai_array_to_buffer_fmt+0x2c>
 800e8ba:	4b10      	ldr	r3, [pc, #64]	; (800e8fc <ai_array_to_buffer_fmt+0xd0>)
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	bf18      	it	ne
 800e8c0:	2340      	movne	r3, #64	; 0x40
 800e8c2:	e7c9      	b.n	800e858 <ai_array_to_buffer_fmt+0x2c>
 800e8c4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d0c4      	beq.n	800e856 <ai_array_to_buffer_fmt+0x2a>
 800e8cc:	3380      	adds	r3, #128	; 0x80
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	bf18      	it	ne
 800e8d2:	2340      	movne	r3, #64	; 0x40
 800e8d4:	e7c0      	b.n	800e858 <ai_array_to_buffer_fmt+0x2c>
 800e8d6:	4b0a      	ldr	r3, [pc, #40]	; (800e900 <ai_array_to_buffer_fmt+0xd4>)
 800e8d8:	4003      	ands	r3, r0
 800e8da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e8de:	e7bb      	b.n	800e858 <ai_array_to_buffer_fmt+0x2c>
 800e8e0:	00840040 	.word	0x00840040
 800e8e4:	00040840 	.word	0x00040840
 800e8e8:	00041040 	.word	0x00041040
 800e8ec:	00040447 	.word	0x00040447
 800e8f0:	00840840 	.word	0x00840840
 800e8f4:	00841040 	.word	0x00841040
 800e8f8:	0084084f 	.word	0x0084084f
 800e8fc:	0004084f 	.word	0x0004084f
 800e900:	00803fff 	.word	0x00803fff

0800e904 <ai_array_get_byte_size>:
 800e904:	b319      	cbz	r1, 800e94e <ai_array_get_byte_size+0x4a>
 800e906:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800e90a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800e90e:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800e912:	11c0      	asrs	r0, r0, #7
 800e914:	fb03 f101 	mul.w	r1, r3, r1
 800e918:	2a04      	cmp	r2, #4
 800e91a:	f101 0107 	add.w	r1, r1, #7
 800e91e:	f021 0107 	bic.w	r1, r1, #7
 800e922:	fa21 f10c 	lsr.w	r1, r1, ip
 800e926:	d00b      	beq.n	800e940 <ai_array_get_byte_size+0x3c>
 800e928:	2a08      	cmp	r2, #8
 800e92a:	d002      	beq.n	800e932 <ai_array_get_byte_size+0x2e>
 800e92c:	3107      	adds	r1, #7
 800e92e:	08c8      	lsrs	r0, r1, #3
 800e930:	4770      	bx	lr
 800e932:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e936:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800e93a:	3107      	adds	r1, #7
 800e93c:	08c8      	lsrs	r0, r1, #3
 800e93e:	4770      	bx	lr
 800e940:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e944:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800e948:	3107      	adds	r1, #7
 800e94a:	08c8      	lsrs	r0, r1, #3
 800e94c:	4770      	bx	lr
 800e94e:	4608      	mov	r0, r1
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop

0800e954 <ai_array_get_data_byte_size>:
 800e954:	b161      	cbz	r1, 800e970 <ai_array_get_data_byte_size+0x1c>
 800e956:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800e95a:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800e95e:	fb03 f101 	mul.w	r1, r3, r1
 800e962:	1dc8      	adds	r0, r1, #7
 800e964:	f020 0007 	bic.w	r0, r0, #7
 800e968:	40d0      	lsrs	r0, r2
 800e96a:	3007      	adds	r0, #7
 800e96c:	08c0      	lsrs	r0, r0, #3
 800e96e:	4770      	bx	lr
 800e970:	4608      	mov	r0, r1
 800e972:	4770      	bx	lr

0800e974 <expf>:
 800e974:	b508      	push	{r3, lr}
 800e976:	ed2d 8b02 	vpush	{d8}
 800e97a:	eef0 8a40 	vmov.f32	s17, s0
 800e97e:	f000 f82f 	bl	800e9e0 <__ieee754_expf>
 800e982:	eeb0 8a40 	vmov.f32	s16, s0
 800e986:	eeb0 0a68 	vmov.f32	s0, s17
 800e98a:	f000 f919 	bl	800ebc0 <finitef>
 800e98e:	b160      	cbz	r0, 800e9aa <expf+0x36>
 800e990:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e9d0 <expf+0x5c>
 800e994:	eef4 8ae7 	vcmpe.f32	s17, s15
 800e998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e99c:	dd0a      	ble.n	800e9b4 <expf+0x40>
 800e99e:	f000 f91d 	bl	800ebdc <__errno>
 800e9a2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800e9d4 <expf+0x60>
 800e9a6:	2322      	movs	r3, #34	; 0x22
 800e9a8:	6003      	str	r3, [r0, #0]
 800e9aa:	eeb0 0a48 	vmov.f32	s0, s16
 800e9ae:	ecbd 8b02 	vpop	{d8}
 800e9b2:	bd08      	pop	{r3, pc}
 800e9b4:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e9d8 <expf+0x64>
 800e9b8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800e9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9c0:	d5f3      	bpl.n	800e9aa <expf+0x36>
 800e9c2:	f000 f90b 	bl	800ebdc <__errno>
 800e9c6:	2322      	movs	r3, #34	; 0x22
 800e9c8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800e9dc <expf+0x68>
 800e9cc:	6003      	str	r3, [r0, #0]
 800e9ce:	e7ec      	b.n	800e9aa <expf+0x36>
 800e9d0:	42b17180 	.word	0x42b17180
 800e9d4:	7f800000 	.word	0x7f800000
 800e9d8:	c2cff1b5 	.word	0xc2cff1b5
 800e9dc:	00000000 	.word	0x00000000

0800e9e0 <__ieee754_expf>:
 800e9e0:	ee10 2a10 	vmov	r2, s0
 800e9e4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800e9e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e9ec:	d902      	bls.n	800e9f4 <__ieee754_expf+0x14>
 800e9ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e9f2:	4770      	bx	lr
 800e9f4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800e9f8:	d106      	bne.n	800ea08 <__ieee754_expf+0x28>
 800e9fa:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800eb34 <__ieee754_expf+0x154>
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	bf18      	it	ne
 800ea02:	eeb0 0a67 	vmovne.f32	s0, s15
 800ea06:	4770      	bx	lr
 800ea08:	484b      	ldr	r0, [pc, #300]	; (800eb38 <__ieee754_expf+0x158>)
 800ea0a:	4282      	cmp	r2, r0
 800ea0c:	dd02      	ble.n	800ea14 <__ieee754_expf+0x34>
 800ea0e:	2000      	movs	r0, #0
 800ea10:	f000 b8d0 	b.w	800ebb4 <__math_oflowf>
 800ea14:	2a00      	cmp	r2, #0
 800ea16:	da05      	bge.n	800ea24 <__ieee754_expf+0x44>
 800ea18:	4a48      	ldr	r2, [pc, #288]	; (800eb3c <__ieee754_expf+0x15c>)
 800ea1a:	4291      	cmp	r1, r2
 800ea1c:	d902      	bls.n	800ea24 <__ieee754_expf+0x44>
 800ea1e:	2000      	movs	r0, #0
 800ea20:	f000 b8c2 	b.w	800eba8 <__math_uflowf>
 800ea24:	4a46      	ldr	r2, [pc, #280]	; (800eb40 <__ieee754_expf+0x160>)
 800ea26:	4291      	cmp	r1, r2
 800ea28:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ea2c:	d952      	bls.n	800ead4 <__ieee754_expf+0xf4>
 800ea2e:	4a45      	ldr	r2, [pc, #276]	; (800eb44 <__ieee754_expf+0x164>)
 800ea30:	4291      	cmp	r1, r2
 800ea32:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800ea36:	d834      	bhi.n	800eaa2 <__ieee754_expf+0xc2>
 800ea38:	4943      	ldr	r1, [pc, #268]	; (800eb48 <__ieee754_expf+0x168>)
 800ea3a:	4411      	add	r1, r2
 800ea3c:	ed91 7a00 	vldr	s14, [r1]
 800ea40:	4942      	ldr	r1, [pc, #264]	; (800eb4c <__ieee754_expf+0x16c>)
 800ea42:	440a      	add	r2, r1
 800ea44:	edd2 7a00 	vldr	s15, [r2]
 800ea48:	ee30 7a47 	vsub.f32	s14, s0, s14
 800ea4c:	f1c3 0201 	rsb	r2, r3, #1
 800ea50:	1ad2      	subs	r2, r2, r3
 800ea52:	ee37 0a67 	vsub.f32	s0, s14, s15
 800ea56:	ee20 6a00 	vmul.f32	s12, s0, s0
 800ea5a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800eb50 <__ieee754_expf+0x170>
 800ea5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800eb54 <__ieee754_expf+0x174>
 800ea62:	eee6 6a05 	vfma.f32	s13, s12, s10
 800ea66:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800eb58 <__ieee754_expf+0x178>
 800ea6a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800ea6e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800eb5c <__ieee754_expf+0x17c>
 800ea72:	eee5 6a06 	vfma.f32	s13, s10, s12
 800ea76:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800eb60 <__ieee754_expf+0x180>
 800ea7a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800ea7e:	eef0 6a40 	vmov.f32	s13, s0
 800ea82:	eee5 6a46 	vfms.f32	s13, s10, s12
 800ea86:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800ea8a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800ea8e:	bb92      	cbnz	r2, 800eaf6 <__ieee754_expf+0x116>
 800ea90:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800ea94:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800ea98:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ea9c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800eaa0:	4770      	bx	lr
 800eaa2:	4b30      	ldr	r3, [pc, #192]	; (800eb64 <__ieee754_expf+0x184>)
 800eaa4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800eb68 <__ieee754_expf+0x188>
 800eaa8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800eb6c <__ieee754_expf+0x18c>
 800eaac:	4413      	add	r3, r2
 800eaae:	edd3 7a00 	vldr	s15, [r3]
 800eab2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800eab6:	eeb0 7a40 	vmov.f32	s14, s0
 800eaba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eabe:	ee17 2a90 	vmov	r2, s15
 800eac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eac6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800eaca:	eddf 6a29 	vldr	s13, [pc, #164]	; 800eb70 <__ieee754_expf+0x190>
 800eace:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ead2:	e7be      	b.n	800ea52 <__ieee754_expf+0x72>
 800ead4:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800ead8:	d20b      	bcs.n	800eaf2 <__ieee754_expf+0x112>
 800eada:	eddf 6a26 	vldr	s13, [pc, #152]	; 800eb74 <__ieee754_expf+0x194>
 800eade:	ee70 6a26 	vadd.f32	s13, s0, s13
 800eae2:	eef4 6ae5 	vcmpe.f32	s13, s11
 800eae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaea:	dd02      	ble.n	800eaf2 <__ieee754_expf+0x112>
 800eaec:	ee30 0a25 	vadd.f32	s0, s0, s11
 800eaf0:	4770      	bx	lr
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	e7af      	b.n	800ea56 <__ieee754_expf+0x76>
 800eaf6:	ee76 6a66 	vsub.f32	s13, s12, s13
 800eafa:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800eafe:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800eb02:	bfb8      	it	lt
 800eb04:	3264      	addlt	r2, #100	; 0x64
 800eb06:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800eb0a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800eb0e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800eb12:	ee17 3a90 	vmov	r3, s15
 800eb16:	bfab      	itete	ge
 800eb18:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800eb1c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800eb20:	ee00 3a10 	vmovge	s0, r3
 800eb24:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800eb78 <__ieee754_expf+0x198>
 800eb28:	bfbc      	itt	lt
 800eb2a:	ee00 3a10 	vmovlt	s0, r3
 800eb2e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800eb32:	4770      	bx	lr
 800eb34:	00000000 	.word	0x00000000
 800eb38:	42b17217 	.word	0x42b17217
 800eb3c:	42cff1b5 	.word	0x42cff1b5
 800eb40:	3eb17218 	.word	0x3eb17218
 800eb44:	3f851591 	.word	0x3f851591
 800eb48:	0806d6e0 	.word	0x0806d6e0
 800eb4c:	0806d6e8 	.word	0x0806d6e8
 800eb50:	3331bb4c 	.word	0x3331bb4c
 800eb54:	b5ddea0e 	.word	0xb5ddea0e
 800eb58:	388ab355 	.word	0x388ab355
 800eb5c:	bb360b61 	.word	0xbb360b61
 800eb60:	3e2aaaab 	.word	0x3e2aaaab
 800eb64:	0806d6d8 	.word	0x0806d6d8
 800eb68:	3fb8aa3b 	.word	0x3fb8aa3b
 800eb6c:	3f317180 	.word	0x3f317180
 800eb70:	3717f7d1 	.word	0x3717f7d1
 800eb74:	7149f2ca 	.word	0x7149f2ca
 800eb78:	0d800000 	.word	0x0d800000

0800eb7c <with_errnof>:
 800eb7c:	b513      	push	{r0, r1, r4, lr}
 800eb7e:	4604      	mov	r4, r0
 800eb80:	ed8d 0a01 	vstr	s0, [sp, #4]
 800eb84:	f000 f82a 	bl	800ebdc <__errno>
 800eb88:	ed9d 0a01 	vldr	s0, [sp, #4]
 800eb8c:	6004      	str	r4, [r0, #0]
 800eb8e:	b002      	add	sp, #8
 800eb90:	bd10      	pop	{r4, pc}

0800eb92 <xflowf>:
 800eb92:	b130      	cbz	r0, 800eba2 <xflowf+0x10>
 800eb94:	eef1 7a40 	vneg.f32	s15, s0
 800eb98:	ee27 0a80 	vmul.f32	s0, s15, s0
 800eb9c:	2022      	movs	r0, #34	; 0x22
 800eb9e:	f7ff bfed 	b.w	800eb7c <with_errnof>
 800eba2:	eef0 7a40 	vmov.f32	s15, s0
 800eba6:	e7f7      	b.n	800eb98 <xflowf+0x6>

0800eba8 <__math_uflowf>:
 800eba8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ebb0 <__math_uflowf+0x8>
 800ebac:	f7ff bff1 	b.w	800eb92 <xflowf>
 800ebb0:	10000000 	.word	0x10000000

0800ebb4 <__math_oflowf>:
 800ebb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ebbc <__math_oflowf+0x8>
 800ebb8:	f7ff bfeb 	b.w	800eb92 <xflowf>
 800ebbc:	70000000 	.word	0x70000000

0800ebc0 <finitef>:
 800ebc0:	b082      	sub	sp, #8
 800ebc2:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ebc6:	9801      	ldr	r0, [sp, #4]
 800ebc8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ebcc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ebd0:	bfac      	ite	ge
 800ebd2:	2000      	movge	r0, #0
 800ebd4:	2001      	movlt	r0, #1
 800ebd6:	b002      	add	sp, #8
 800ebd8:	4770      	bx	lr
	...

0800ebdc <__errno>:
 800ebdc:	4b01      	ldr	r3, [pc, #4]	; (800ebe4 <__errno+0x8>)
 800ebde:	6818      	ldr	r0, [r3, #0]
 800ebe0:	4770      	bx	lr
 800ebe2:	bf00      	nop
 800ebe4:	20000924 	.word	0x20000924

0800ebe8 <__libc_init_array>:
 800ebe8:	b570      	push	{r4, r5, r6, lr}
 800ebea:	4d0d      	ldr	r5, [pc, #52]	; (800ec20 <__libc_init_array+0x38>)
 800ebec:	4c0d      	ldr	r4, [pc, #52]	; (800ec24 <__libc_init_array+0x3c>)
 800ebee:	1b64      	subs	r4, r4, r5
 800ebf0:	10a4      	asrs	r4, r4, #2
 800ebf2:	2600      	movs	r6, #0
 800ebf4:	42a6      	cmp	r6, r4
 800ebf6:	d109      	bne.n	800ec0c <__libc_init_array+0x24>
 800ebf8:	4d0b      	ldr	r5, [pc, #44]	; (800ec28 <__libc_init_array+0x40>)
 800ebfa:	4c0c      	ldr	r4, [pc, #48]	; (800ec2c <__libc_init_array+0x44>)
 800ebfc:	f002 ff52 	bl	8011aa4 <_init>
 800ec00:	1b64      	subs	r4, r4, r5
 800ec02:	10a4      	asrs	r4, r4, #2
 800ec04:	2600      	movs	r6, #0
 800ec06:	42a6      	cmp	r6, r4
 800ec08:	d105      	bne.n	800ec16 <__libc_init_array+0x2e>
 800ec0a:	bd70      	pop	{r4, r5, r6, pc}
 800ec0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec10:	4798      	blx	r3
 800ec12:	3601      	adds	r6, #1
 800ec14:	e7ee      	b.n	800ebf4 <__libc_init_array+0xc>
 800ec16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec1a:	4798      	blx	r3
 800ec1c:	3601      	adds	r6, #1
 800ec1e:	e7f2      	b.n	800ec06 <__libc_init_array+0x1e>
 800ec20:	0806dad4 	.word	0x0806dad4
 800ec24:	0806dad4 	.word	0x0806dad4
 800ec28:	0806dad4 	.word	0x0806dad4
 800ec2c:	0806dad8 	.word	0x0806dad8

0800ec30 <malloc>:
 800ec30:	4b02      	ldr	r3, [pc, #8]	; (800ec3c <malloc+0xc>)
 800ec32:	4601      	mov	r1, r0
 800ec34:	6818      	ldr	r0, [r3, #0]
 800ec36:	f000 b88d 	b.w	800ed54 <_malloc_r>
 800ec3a:	bf00      	nop
 800ec3c:	20000924 	.word	0x20000924

0800ec40 <free>:
 800ec40:	4b02      	ldr	r3, [pc, #8]	; (800ec4c <free+0xc>)
 800ec42:	4601      	mov	r1, r0
 800ec44:	6818      	ldr	r0, [r3, #0]
 800ec46:	f000 b819 	b.w	800ec7c <_free_r>
 800ec4a:	bf00      	nop
 800ec4c:	20000924 	.word	0x20000924

0800ec50 <memcpy>:
 800ec50:	440a      	add	r2, r1
 800ec52:	4291      	cmp	r1, r2
 800ec54:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec58:	d100      	bne.n	800ec5c <memcpy+0xc>
 800ec5a:	4770      	bx	lr
 800ec5c:	b510      	push	{r4, lr}
 800ec5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec66:	4291      	cmp	r1, r2
 800ec68:	d1f9      	bne.n	800ec5e <memcpy+0xe>
 800ec6a:	bd10      	pop	{r4, pc}

0800ec6c <memset>:
 800ec6c:	4402      	add	r2, r0
 800ec6e:	4603      	mov	r3, r0
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d100      	bne.n	800ec76 <memset+0xa>
 800ec74:	4770      	bx	lr
 800ec76:	f803 1b01 	strb.w	r1, [r3], #1
 800ec7a:	e7f9      	b.n	800ec70 <memset+0x4>

0800ec7c <_free_r>:
 800ec7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec7e:	2900      	cmp	r1, #0
 800ec80:	d044      	beq.n	800ed0c <_free_r+0x90>
 800ec82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec86:	9001      	str	r0, [sp, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	f1a1 0404 	sub.w	r4, r1, #4
 800ec8e:	bfb8      	it	lt
 800ec90:	18e4      	addlt	r4, r4, r3
 800ec92:	f001 fbf3 	bl	801047c <__malloc_lock>
 800ec96:	4a1e      	ldr	r2, [pc, #120]	; (800ed10 <_free_r+0x94>)
 800ec98:	9801      	ldr	r0, [sp, #4]
 800ec9a:	6813      	ldr	r3, [r2, #0]
 800ec9c:	b933      	cbnz	r3, 800ecac <_free_r+0x30>
 800ec9e:	6063      	str	r3, [r4, #4]
 800eca0:	6014      	str	r4, [r2, #0]
 800eca2:	b003      	add	sp, #12
 800eca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eca8:	f001 bbee 	b.w	8010488 <__malloc_unlock>
 800ecac:	42a3      	cmp	r3, r4
 800ecae:	d908      	bls.n	800ecc2 <_free_r+0x46>
 800ecb0:	6825      	ldr	r5, [r4, #0]
 800ecb2:	1961      	adds	r1, r4, r5
 800ecb4:	428b      	cmp	r3, r1
 800ecb6:	bf01      	itttt	eq
 800ecb8:	6819      	ldreq	r1, [r3, #0]
 800ecba:	685b      	ldreq	r3, [r3, #4]
 800ecbc:	1949      	addeq	r1, r1, r5
 800ecbe:	6021      	streq	r1, [r4, #0]
 800ecc0:	e7ed      	b.n	800ec9e <_free_r+0x22>
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	b10b      	cbz	r3, 800eccc <_free_r+0x50>
 800ecc8:	42a3      	cmp	r3, r4
 800ecca:	d9fa      	bls.n	800ecc2 <_free_r+0x46>
 800eccc:	6811      	ldr	r1, [r2, #0]
 800ecce:	1855      	adds	r5, r2, r1
 800ecd0:	42a5      	cmp	r5, r4
 800ecd2:	d10b      	bne.n	800ecec <_free_r+0x70>
 800ecd4:	6824      	ldr	r4, [r4, #0]
 800ecd6:	4421      	add	r1, r4
 800ecd8:	1854      	adds	r4, r2, r1
 800ecda:	42a3      	cmp	r3, r4
 800ecdc:	6011      	str	r1, [r2, #0]
 800ecde:	d1e0      	bne.n	800eca2 <_free_r+0x26>
 800ece0:	681c      	ldr	r4, [r3, #0]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	6053      	str	r3, [r2, #4]
 800ece6:	4421      	add	r1, r4
 800ece8:	6011      	str	r1, [r2, #0]
 800ecea:	e7da      	b.n	800eca2 <_free_r+0x26>
 800ecec:	d902      	bls.n	800ecf4 <_free_r+0x78>
 800ecee:	230c      	movs	r3, #12
 800ecf0:	6003      	str	r3, [r0, #0]
 800ecf2:	e7d6      	b.n	800eca2 <_free_r+0x26>
 800ecf4:	6825      	ldr	r5, [r4, #0]
 800ecf6:	1961      	adds	r1, r4, r5
 800ecf8:	428b      	cmp	r3, r1
 800ecfa:	bf04      	itt	eq
 800ecfc:	6819      	ldreq	r1, [r3, #0]
 800ecfe:	685b      	ldreq	r3, [r3, #4]
 800ed00:	6063      	str	r3, [r4, #4]
 800ed02:	bf04      	itt	eq
 800ed04:	1949      	addeq	r1, r1, r5
 800ed06:	6021      	streq	r1, [r4, #0]
 800ed08:	6054      	str	r4, [r2, #4]
 800ed0a:	e7ca      	b.n	800eca2 <_free_r+0x26>
 800ed0c:	b003      	add	sp, #12
 800ed0e:	bd30      	pop	{r4, r5, pc}
 800ed10:	2000a008 	.word	0x2000a008

0800ed14 <sbrk_aligned>:
 800ed14:	b570      	push	{r4, r5, r6, lr}
 800ed16:	4e0e      	ldr	r6, [pc, #56]	; (800ed50 <sbrk_aligned+0x3c>)
 800ed18:	460c      	mov	r4, r1
 800ed1a:	6831      	ldr	r1, [r6, #0]
 800ed1c:	4605      	mov	r5, r0
 800ed1e:	b911      	cbnz	r1, 800ed26 <sbrk_aligned+0x12>
 800ed20:	f000 fcf6 	bl	800f710 <_sbrk_r>
 800ed24:	6030      	str	r0, [r6, #0]
 800ed26:	4621      	mov	r1, r4
 800ed28:	4628      	mov	r0, r5
 800ed2a:	f000 fcf1 	bl	800f710 <_sbrk_r>
 800ed2e:	1c43      	adds	r3, r0, #1
 800ed30:	d00a      	beq.n	800ed48 <sbrk_aligned+0x34>
 800ed32:	1cc4      	adds	r4, r0, #3
 800ed34:	f024 0403 	bic.w	r4, r4, #3
 800ed38:	42a0      	cmp	r0, r4
 800ed3a:	d007      	beq.n	800ed4c <sbrk_aligned+0x38>
 800ed3c:	1a21      	subs	r1, r4, r0
 800ed3e:	4628      	mov	r0, r5
 800ed40:	f000 fce6 	bl	800f710 <_sbrk_r>
 800ed44:	3001      	adds	r0, #1
 800ed46:	d101      	bne.n	800ed4c <sbrk_aligned+0x38>
 800ed48:	f04f 34ff 	mov.w	r4, #4294967295
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	bd70      	pop	{r4, r5, r6, pc}
 800ed50:	2000a00c 	.word	0x2000a00c

0800ed54 <_malloc_r>:
 800ed54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed58:	1ccd      	adds	r5, r1, #3
 800ed5a:	f025 0503 	bic.w	r5, r5, #3
 800ed5e:	3508      	adds	r5, #8
 800ed60:	2d0c      	cmp	r5, #12
 800ed62:	bf38      	it	cc
 800ed64:	250c      	movcc	r5, #12
 800ed66:	2d00      	cmp	r5, #0
 800ed68:	4607      	mov	r7, r0
 800ed6a:	db01      	blt.n	800ed70 <_malloc_r+0x1c>
 800ed6c:	42a9      	cmp	r1, r5
 800ed6e:	d905      	bls.n	800ed7c <_malloc_r+0x28>
 800ed70:	230c      	movs	r3, #12
 800ed72:	603b      	str	r3, [r7, #0]
 800ed74:	2600      	movs	r6, #0
 800ed76:	4630      	mov	r0, r6
 800ed78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed7c:	4e2e      	ldr	r6, [pc, #184]	; (800ee38 <_malloc_r+0xe4>)
 800ed7e:	f001 fb7d 	bl	801047c <__malloc_lock>
 800ed82:	6833      	ldr	r3, [r6, #0]
 800ed84:	461c      	mov	r4, r3
 800ed86:	bb34      	cbnz	r4, 800edd6 <_malloc_r+0x82>
 800ed88:	4629      	mov	r1, r5
 800ed8a:	4638      	mov	r0, r7
 800ed8c:	f7ff ffc2 	bl	800ed14 <sbrk_aligned>
 800ed90:	1c43      	adds	r3, r0, #1
 800ed92:	4604      	mov	r4, r0
 800ed94:	d14d      	bne.n	800ee32 <_malloc_r+0xde>
 800ed96:	6834      	ldr	r4, [r6, #0]
 800ed98:	4626      	mov	r6, r4
 800ed9a:	2e00      	cmp	r6, #0
 800ed9c:	d140      	bne.n	800ee20 <_malloc_r+0xcc>
 800ed9e:	6823      	ldr	r3, [r4, #0]
 800eda0:	4631      	mov	r1, r6
 800eda2:	4638      	mov	r0, r7
 800eda4:	eb04 0803 	add.w	r8, r4, r3
 800eda8:	f000 fcb2 	bl	800f710 <_sbrk_r>
 800edac:	4580      	cmp	r8, r0
 800edae:	d13a      	bne.n	800ee26 <_malloc_r+0xd2>
 800edb0:	6821      	ldr	r1, [r4, #0]
 800edb2:	3503      	adds	r5, #3
 800edb4:	1a6d      	subs	r5, r5, r1
 800edb6:	f025 0503 	bic.w	r5, r5, #3
 800edba:	3508      	adds	r5, #8
 800edbc:	2d0c      	cmp	r5, #12
 800edbe:	bf38      	it	cc
 800edc0:	250c      	movcc	r5, #12
 800edc2:	4629      	mov	r1, r5
 800edc4:	4638      	mov	r0, r7
 800edc6:	f7ff ffa5 	bl	800ed14 <sbrk_aligned>
 800edca:	3001      	adds	r0, #1
 800edcc:	d02b      	beq.n	800ee26 <_malloc_r+0xd2>
 800edce:	6823      	ldr	r3, [r4, #0]
 800edd0:	442b      	add	r3, r5
 800edd2:	6023      	str	r3, [r4, #0]
 800edd4:	e00e      	b.n	800edf4 <_malloc_r+0xa0>
 800edd6:	6822      	ldr	r2, [r4, #0]
 800edd8:	1b52      	subs	r2, r2, r5
 800edda:	d41e      	bmi.n	800ee1a <_malloc_r+0xc6>
 800eddc:	2a0b      	cmp	r2, #11
 800edde:	d916      	bls.n	800ee0e <_malloc_r+0xba>
 800ede0:	1961      	adds	r1, r4, r5
 800ede2:	42a3      	cmp	r3, r4
 800ede4:	6025      	str	r5, [r4, #0]
 800ede6:	bf18      	it	ne
 800ede8:	6059      	strne	r1, [r3, #4]
 800edea:	6863      	ldr	r3, [r4, #4]
 800edec:	bf08      	it	eq
 800edee:	6031      	streq	r1, [r6, #0]
 800edf0:	5162      	str	r2, [r4, r5]
 800edf2:	604b      	str	r3, [r1, #4]
 800edf4:	4638      	mov	r0, r7
 800edf6:	f104 060b 	add.w	r6, r4, #11
 800edfa:	f001 fb45 	bl	8010488 <__malloc_unlock>
 800edfe:	f026 0607 	bic.w	r6, r6, #7
 800ee02:	1d23      	adds	r3, r4, #4
 800ee04:	1af2      	subs	r2, r6, r3
 800ee06:	d0b6      	beq.n	800ed76 <_malloc_r+0x22>
 800ee08:	1b9b      	subs	r3, r3, r6
 800ee0a:	50a3      	str	r3, [r4, r2]
 800ee0c:	e7b3      	b.n	800ed76 <_malloc_r+0x22>
 800ee0e:	6862      	ldr	r2, [r4, #4]
 800ee10:	42a3      	cmp	r3, r4
 800ee12:	bf0c      	ite	eq
 800ee14:	6032      	streq	r2, [r6, #0]
 800ee16:	605a      	strne	r2, [r3, #4]
 800ee18:	e7ec      	b.n	800edf4 <_malloc_r+0xa0>
 800ee1a:	4623      	mov	r3, r4
 800ee1c:	6864      	ldr	r4, [r4, #4]
 800ee1e:	e7b2      	b.n	800ed86 <_malloc_r+0x32>
 800ee20:	4634      	mov	r4, r6
 800ee22:	6876      	ldr	r6, [r6, #4]
 800ee24:	e7b9      	b.n	800ed9a <_malloc_r+0x46>
 800ee26:	230c      	movs	r3, #12
 800ee28:	603b      	str	r3, [r7, #0]
 800ee2a:	4638      	mov	r0, r7
 800ee2c:	f001 fb2c 	bl	8010488 <__malloc_unlock>
 800ee30:	e7a1      	b.n	800ed76 <_malloc_r+0x22>
 800ee32:	6025      	str	r5, [r4, #0]
 800ee34:	e7de      	b.n	800edf4 <_malloc_r+0xa0>
 800ee36:	bf00      	nop
 800ee38:	2000a008 	.word	0x2000a008

0800ee3c <__cvt>:
 800ee3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee40:	ec55 4b10 	vmov	r4, r5, d0
 800ee44:	2d00      	cmp	r5, #0
 800ee46:	460e      	mov	r6, r1
 800ee48:	4619      	mov	r1, r3
 800ee4a:	462b      	mov	r3, r5
 800ee4c:	bfbb      	ittet	lt
 800ee4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ee52:	461d      	movlt	r5, r3
 800ee54:	2300      	movge	r3, #0
 800ee56:	232d      	movlt	r3, #45	; 0x2d
 800ee58:	700b      	strb	r3, [r1, #0]
 800ee5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ee60:	4691      	mov	r9, r2
 800ee62:	f023 0820 	bic.w	r8, r3, #32
 800ee66:	bfbc      	itt	lt
 800ee68:	4622      	movlt	r2, r4
 800ee6a:	4614      	movlt	r4, r2
 800ee6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ee70:	d005      	beq.n	800ee7e <__cvt+0x42>
 800ee72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ee76:	d100      	bne.n	800ee7a <__cvt+0x3e>
 800ee78:	3601      	adds	r6, #1
 800ee7a:	2102      	movs	r1, #2
 800ee7c:	e000      	b.n	800ee80 <__cvt+0x44>
 800ee7e:	2103      	movs	r1, #3
 800ee80:	ab03      	add	r3, sp, #12
 800ee82:	9301      	str	r3, [sp, #4]
 800ee84:	ab02      	add	r3, sp, #8
 800ee86:	9300      	str	r3, [sp, #0]
 800ee88:	ec45 4b10 	vmov	d0, r4, r5
 800ee8c:	4653      	mov	r3, sl
 800ee8e:	4632      	mov	r2, r6
 800ee90:	f000 fd02 	bl	800f898 <_dtoa_r>
 800ee94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ee98:	4607      	mov	r7, r0
 800ee9a:	d102      	bne.n	800eea2 <__cvt+0x66>
 800ee9c:	f019 0f01 	tst.w	r9, #1
 800eea0:	d022      	beq.n	800eee8 <__cvt+0xac>
 800eea2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eea6:	eb07 0906 	add.w	r9, r7, r6
 800eeaa:	d110      	bne.n	800eece <__cvt+0x92>
 800eeac:	783b      	ldrb	r3, [r7, #0]
 800eeae:	2b30      	cmp	r3, #48	; 0x30
 800eeb0:	d10a      	bne.n	800eec8 <__cvt+0x8c>
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	4629      	mov	r1, r5
 800eeba:	f7f1 fe25 	bl	8000b08 <__aeabi_dcmpeq>
 800eebe:	b918      	cbnz	r0, 800eec8 <__cvt+0x8c>
 800eec0:	f1c6 0601 	rsb	r6, r6, #1
 800eec4:	f8ca 6000 	str.w	r6, [sl]
 800eec8:	f8da 3000 	ldr.w	r3, [sl]
 800eecc:	4499      	add	r9, r3
 800eece:	2200      	movs	r2, #0
 800eed0:	2300      	movs	r3, #0
 800eed2:	4620      	mov	r0, r4
 800eed4:	4629      	mov	r1, r5
 800eed6:	f7f1 fe17 	bl	8000b08 <__aeabi_dcmpeq>
 800eeda:	b108      	cbz	r0, 800eee0 <__cvt+0xa4>
 800eedc:	f8cd 900c 	str.w	r9, [sp, #12]
 800eee0:	2230      	movs	r2, #48	; 0x30
 800eee2:	9b03      	ldr	r3, [sp, #12]
 800eee4:	454b      	cmp	r3, r9
 800eee6:	d307      	bcc.n	800eef8 <__cvt+0xbc>
 800eee8:	9b03      	ldr	r3, [sp, #12]
 800eeea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eeec:	1bdb      	subs	r3, r3, r7
 800eeee:	4638      	mov	r0, r7
 800eef0:	6013      	str	r3, [r2, #0]
 800eef2:	b004      	add	sp, #16
 800eef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eef8:	1c59      	adds	r1, r3, #1
 800eefa:	9103      	str	r1, [sp, #12]
 800eefc:	701a      	strb	r2, [r3, #0]
 800eefe:	e7f0      	b.n	800eee2 <__cvt+0xa6>

0800ef00 <__exponent>:
 800ef00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef02:	4603      	mov	r3, r0
 800ef04:	2900      	cmp	r1, #0
 800ef06:	bfb8      	it	lt
 800ef08:	4249      	neglt	r1, r1
 800ef0a:	f803 2b02 	strb.w	r2, [r3], #2
 800ef0e:	bfb4      	ite	lt
 800ef10:	222d      	movlt	r2, #45	; 0x2d
 800ef12:	222b      	movge	r2, #43	; 0x2b
 800ef14:	2909      	cmp	r1, #9
 800ef16:	7042      	strb	r2, [r0, #1]
 800ef18:	dd2a      	ble.n	800ef70 <__exponent+0x70>
 800ef1a:	f10d 0407 	add.w	r4, sp, #7
 800ef1e:	46a4      	mov	ip, r4
 800ef20:	270a      	movs	r7, #10
 800ef22:	46a6      	mov	lr, r4
 800ef24:	460a      	mov	r2, r1
 800ef26:	fb91 f6f7 	sdiv	r6, r1, r7
 800ef2a:	fb07 1516 	mls	r5, r7, r6, r1
 800ef2e:	3530      	adds	r5, #48	; 0x30
 800ef30:	2a63      	cmp	r2, #99	; 0x63
 800ef32:	f104 34ff 	add.w	r4, r4, #4294967295
 800ef36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ef3a:	4631      	mov	r1, r6
 800ef3c:	dcf1      	bgt.n	800ef22 <__exponent+0x22>
 800ef3e:	3130      	adds	r1, #48	; 0x30
 800ef40:	f1ae 0502 	sub.w	r5, lr, #2
 800ef44:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ef48:	1c44      	adds	r4, r0, #1
 800ef4a:	4629      	mov	r1, r5
 800ef4c:	4561      	cmp	r1, ip
 800ef4e:	d30a      	bcc.n	800ef66 <__exponent+0x66>
 800ef50:	f10d 0209 	add.w	r2, sp, #9
 800ef54:	eba2 020e 	sub.w	r2, r2, lr
 800ef58:	4565      	cmp	r5, ip
 800ef5a:	bf88      	it	hi
 800ef5c:	2200      	movhi	r2, #0
 800ef5e:	4413      	add	r3, r2
 800ef60:	1a18      	subs	r0, r3, r0
 800ef62:	b003      	add	sp, #12
 800ef64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ef6e:	e7ed      	b.n	800ef4c <__exponent+0x4c>
 800ef70:	2330      	movs	r3, #48	; 0x30
 800ef72:	3130      	adds	r1, #48	; 0x30
 800ef74:	7083      	strb	r3, [r0, #2]
 800ef76:	70c1      	strb	r1, [r0, #3]
 800ef78:	1d03      	adds	r3, r0, #4
 800ef7a:	e7f1      	b.n	800ef60 <__exponent+0x60>

0800ef7c <_printf_float>:
 800ef7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef80:	ed2d 8b02 	vpush	{d8}
 800ef84:	b08d      	sub	sp, #52	; 0x34
 800ef86:	460c      	mov	r4, r1
 800ef88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ef8c:	4616      	mov	r6, r2
 800ef8e:	461f      	mov	r7, r3
 800ef90:	4605      	mov	r5, r0
 800ef92:	f001 fa6f 	bl	8010474 <_localeconv_r>
 800ef96:	f8d0 a000 	ldr.w	sl, [r0]
 800ef9a:	4650      	mov	r0, sl
 800ef9c:	f7f1 f938 	bl	8000210 <strlen>
 800efa0:	2300      	movs	r3, #0
 800efa2:	930a      	str	r3, [sp, #40]	; 0x28
 800efa4:	6823      	ldr	r3, [r4, #0]
 800efa6:	9305      	str	r3, [sp, #20]
 800efa8:	f8d8 3000 	ldr.w	r3, [r8]
 800efac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800efb0:	3307      	adds	r3, #7
 800efb2:	f023 0307 	bic.w	r3, r3, #7
 800efb6:	f103 0208 	add.w	r2, r3, #8
 800efba:	f8c8 2000 	str.w	r2, [r8]
 800efbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800efc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800efca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800efce:	9307      	str	r3, [sp, #28]
 800efd0:	f8cd 8018 	str.w	r8, [sp, #24]
 800efd4:	ee08 0a10 	vmov	s16, r0
 800efd8:	4b9f      	ldr	r3, [pc, #636]	; (800f258 <_printf_float+0x2dc>)
 800efda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efde:	f04f 32ff 	mov.w	r2, #4294967295
 800efe2:	f7f1 fdc3 	bl	8000b6c <__aeabi_dcmpun>
 800efe6:	bb88      	cbnz	r0, 800f04c <_printf_float+0xd0>
 800efe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efec:	4b9a      	ldr	r3, [pc, #616]	; (800f258 <_printf_float+0x2dc>)
 800efee:	f04f 32ff 	mov.w	r2, #4294967295
 800eff2:	f7f1 fd9d 	bl	8000b30 <__aeabi_dcmple>
 800eff6:	bb48      	cbnz	r0, 800f04c <_printf_float+0xd0>
 800eff8:	2200      	movs	r2, #0
 800effa:	2300      	movs	r3, #0
 800effc:	4640      	mov	r0, r8
 800effe:	4649      	mov	r1, r9
 800f000:	f7f1 fd8c 	bl	8000b1c <__aeabi_dcmplt>
 800f004:	b110      	cbz	r0, 800f00c <_printf_float+0x90>
 800f006:	232d      	movs	r3, #45	; 0x2d
 800f008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f00c:	4b93      	ldr	r3, [pc, #588]	; (800f25c <_printf_float+0x2e0>)
 800f00e:	4894      	ldr	r0, [pc, #592]	; (800f260 <_printf_float+0x2e4>)
 800f010:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f014:	bf94      	ite	ls
 800f016:	4698      	movls	r8, r3
 800f018:	4680      	movhi	r8, r0
 800f01a:	2303      	movs	r3, #3
 800f01c:	6123      	str	r3, [r4, #16]
 800f01e:	9b05      	ldr	r3, [sp, #20]
 800f020:	f023 0204 	bic.w	r2, r3, #4
 800f024:	6022      	str	r2, [r4, #0]
 800f026:	f04f 0900 	mov.w	r9, #0
 800f02a:	9700      	str	r7, [sp, #0]
 800f02c:	4633      	mov	r3, r6
 800f02e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f030:	4621      	mov	r1, r4
 800f032:	4628      	mov	r0, r5
 800f034:	f000 f9d8 	bl	800f3e8 <_printf_common>
 800f038:	3001      	adds	r0, #1
 800f03a:	f040 8090 	bne.w	800f15e <_printf_float+0x1e2>
 800f03e:	f04f 30ff 	mov.w	r0, #4294967295
 800f042:	b00d      	add	sp, #52	; 0x34
 800f044:	ecbd 8b02 	vpop	{d8}
 800f048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f04c:	4642      	mov	r2, r8
 800f04e:	464b      	mov	r3, r9
 800f050:	4640      	mov	r0, r8
 800f052:	4649      	mov	r1, r9
 800f054:	f7f1 fd8a 	bl	8000b6c <__aeabi_dcmpun>
 800f058:	b140      	cbz	r0, 800f06c <_printf_float+0xf0>
 800f05a:	464b      	mov	r3, r9
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	bfbc      	itt	lt
 800f060:	232d      	movlt	r3, #45	; 0x2d
 800f062:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f066:	487f      	ldr	r0, [pc, #508]	; (800f264 <_printf_float+0x2e8>)
 800f068:	4b7f      	ldr	r3, [pc, #508]	; (800f268 <_printf_float+0x2ec>)
 800f06a:	e7d1      	b.n	800f010 <_printf_float+0x94>
 800f06c:	6863      	ldr	r3, [r4, #4]
 800f06e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f072:	9206      	str	r2, [sp, #24]
 800f074:	1c5a      	adds	r2, r3, #1
 800f076:	d13f      	bne.n	800f0f8 <_printf_float+0x17c>
 800f078:	2306      	movs	r3, #6
 800f07a:	6063      	str	r3, [r4, #4]
 800f07c:	9b05      	ldr	r3, [sp, #20]
 800f07e:	6861      	ldr	r1, [r4, #4]
 800f080:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f084:	2300      	movs	r3, #0
 800f086:	9303      	str	r3, [sp, #12]
 800f088:	ab0a      	add	r3, sp, #40	; 0x28
 800f08a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f08e:	ab09      	add	r3, sp, #36	; 0x24
 800f090:	ec49 8b10 	vmov	d0, r8, r9
 800f094:	9300      	str	r3, [sp, #0]
 800f096:	6022      	str	r2, [r4, #0]
 800f098:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f09c:	4628      	mov	r0, r5
 800f09e:	f7ff fecd 	bl	800ee3c <__cvt>
 800f0a2:	9b06      	ldr	r3, [sp, #24]
 800f0a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f0a6:	2b47      	cmp	r3, #71	; 0x47
 800f0a8:	4680      	mov	r8, r0
 800f0aa:	d108      	bne.n	800f0be <_printf_float+0x142>
 800f0ac:	1cc8      	adds	r0, r1, #3
 800f0ae:	db02      	blt.n	800f0b6 <_printf_float+0x13a>
 800f0b0:	6863      	ldr	r3, [r4, #4]
 800f0b2:	4299      	cmp	r1, r3
 800f0b4:	dd41      	ble.n	800f13a <_printf_float+0x1be>
 800f0b6:	f1ab 0b02 	sub.w	fp, fp, #2
 800f0ba:	fa5f fb8b 	uxtb.w	fp, fp
 800f0be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f0c2:	d820      	bhi.n	800f106 <_printf_float+0x18a>
 800f0c4:	3901      	subs	r1, #1
 800f0c6:	465a      	mov	r2, fp
 800f0c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f0cc:	9109      	str	r1, [sp, #36]	; 0x24
 800f0ce:	f7ff ff17 	bl	800ef00 <__exponent>
 800f0d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0d4:	1813      	adds	r3, r2, r0
 800f0d6:	2a01      	cmp	r2, #1
 800f0d8:	4681      	mov	r9, r0
 800f0da:	6123      	str	r3, [r4, #16]
 800f0dc:	dc02      	bgt.n	800f0e4 <_printf_float+0x168>
 800f0de:	6822      	ldr	r2, [r4, #0]
 800f0e0:	07d2      	lsls	r2, r2, #31
 800f0e2:	d501      	bpl.n	800f0e8 <_printf_float+0x16c>
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	6123      	str	r3, [r4, #16]
 800f0e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d09c      	beq.n	800f02a <_printf_float+0xae>
 800f0f0:	232d      	movs	r3, #45	; 0x2d
 800f0f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0f6:	e798      	b.n	800f02a <_printf_float+0xae>
 800f0f8:	9a06      	ldr	r2, [sp, #24]
 800f0fa:	2a47      	cmp	r2, #71	; 0x47
 800f0fc:	d1be      	bne.n	800f07c <_printf_float+0x100>
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d1bc      	bne.n	800f07c <_printf_float+0x100>
 800f102:	2301      	movs	r3, #1
 800f104:	e7b9      	b.n	800f07a <_printf_float+0xfe>
 800f106:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f10a:	d118      	bne.n	800f13e <_printf_float+0x1c2>
 800f10c:	2900      	cmp	r1, #0
 800f10e:	6863      	ldr	r3, [r4, #4]
 800f110:	dd0b      	ble.n	800f12a <_printf_float+0x1ae>
 800f112:	6121      	str	r1, [r4, #16]
 800f114:	b913      	cbnz	r3, 800f11c <_printf_float+0x1a0>
 800f116:	6822      	ldr	r2, [r4, #0]
 800f118:	07d0      	lsls	r0, r2, #31
 800f11a:	d502      	bpl.n	800f122 <_printf_float+0x1a6>
 800f11c:	3301      	adds	r3, #1
 800f11e:	440b      	add	r3, r1
 800f120:	6123      	str	r3, [r4, #16]
 800f122:	65a1      	str	r1, [r4, #88]	; 0x58
 800f124:	f04f 0900 	mov.w	r9, #0
 800f128:	e7de      	b.n	800f0e8 <_printf_float+0x16c>
 800f12a:	b913      	cbnz	r3, 800f132 <_printf_float+0x1b6>
 800f12c:	6822      	ldr	r2, [r4, #0]
 800f12e:	07d2      	lsls	r2, r2, #31
 800f130:	d501      	bpl.n	800f136 <_printf_float+0x1ba>
 800f132:	3302      	adds	r3, #2
 800f134:	e7f4      	b.n	800f120 <_printf_float+0x1a4>
 800f136:	2301      	movs	r3, #1
 800f138:	e7f2      	b.n	800f120 <_printf_float+0x1a4>
 800f13a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f140:	4299      	cmp	r1, r3
 800f142:	db05      	blt.n	800f150 <_printf_float+0x1d4>
 800f144:	6823      	ldr	r3, [r4, #0]
 800f146:	6121      	str	r1, [r4, #16]
 800f148:	07d8      	lsls	r0, r3, #31
 800f14a:	d5ea      	bpl.n	800f122 <_printf_float+0x1a6>
 800f14c:	1c4b      	adds	r3, r1, #1
 800f14e:	e7e7      	b.n	800f120 <_printf_float+0x1a4>
 800f150:	2900      	cmp	r1, #0
 800f152:	bfd4      	ite	le
 800f154:	f1c1 0202 	rsble	r2, r1, #2
 800f158:	2201      	movgt	r2, #1
 800f15a:	4413      	add	r3, r2
 800f15c:	e7e0      	b.n	800f120 <_printf_float+0x1a4>
 800f15e:	6823      	ldr	r3, [r4, #0]
 800f160:	055a      	lsls	r2, r3, #21
 800f162:	d407      	bmi.n	800f174 <_printf_float+0x1f8>
 800f164:	6923      	ldr	r3, [r4, #16]
 800f166:	4642      	mov	r2, r8
 800f168:	4631      	mov	r1, r6
 800f16a:	4628      	mov	r0, r5
 800f16c:	47b8      	blx	r7
 800f16e:	3001      	adds	r0, #1
 800f170:	d12c      	bne.n	800f1cc <_printf_float+0x250>
 800f172:	e764      	b.n	800f03e <_printf_float+0xc2>
 800f174:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f178:	f240 80e0 	bls.w	800f33c <_printf_float+0x3c0>
 800f17c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f180:	2200      	movs	r2, #0
 800f182:	2300      	movs	r3, #0
 800f184:	f7f1 fcc0 	bl	8000b08 <__aeabi_dcmpeq>
 800f188:	2800      	cmp	r0, #0
 800f18a:	d034      	beq.n	800f1f6 <_printf_float+0x27a>
 800f18c:	4a37      	ldr	r2, [pc, #220]	; (800f26c <_printf_float+0x2f0>)
 800f18e:	2301      	movs	r3, #1
 800f190:	4631      	mov	r1, r6
 800f192:	4628      	mov	r0, r5
 800f194:	47b8      	blx	r7
 800f196:	3001      	adds	r0, #1
 800f198:	f43f af51 	beq.w	800f03e <_printf_float+0xc2>
 800f19c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	db02      	blt.n	800f1aa <_printf_float+0x22e>
 800f1a4:	6823      	ldr	r3, [r4, #0]
 800f1a6:	07d8      	lsls	r0, r3, #31
 800f1a8:	d510      	bpl.n	800f1cc <_printf_float+0x250>
 800f1aa:	ee18 3a10 	vmov	r3, s16
 800f1ae:	4652      	mov	r2, sl
 800f1b0:	4631      	mov	r1, r6
 800f1b2:	4628      	mov	r0, r5
 800f1b4:	47b8      	blx	r7
 800f1b6:	3001      	adds	r0, #1
 800f1b8:	f43f af41 	beq.w	800f03e <_printf_float+0xc2>
 800f1bc:	f04f 0800 	mov.w	r8, #0
 800f1c0:	f104 091a 	add.w	r9, r4, #26
 800f1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1c6:	3b01      	subs	r3, #1
 800f1c8:	4543      	cmp	r3, r8
 800f1ca:	dc09      	bgt.n	800f1e0 <_printf_float+0x264>
 800f1cc:	6823      	ldr	r3, [r4, #0]
 800f1ce:	079b      	lsls	r3, r3, #30
 800f1d0:	f100 8105 	bmi.w	800f3de <_printf_float+0x462>
 800f1d4:	68e0      	ldr	r0, [r4, #12]
 800f1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1d8:	4298      	cmp	r0, r3
 800f1da:	bfb8      	it	lt
 800f1dc:	4618      	movlt	r0, r3
 800f1de:	e730      	b.n	800f042 <_printf_float+0xc6>
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	464a      	mov	r2, r9
 800f1e4:	4631      	mov	r1, r6
 800f1e6:	4628      	mov	r0, r5
 800f1e8:	47b8      	blx	r7
 800f1ea:	3001      	adds	r0, #1
 800f1ec:	f43f af27 	beq.w	800f03e <_printf_float+0xc2>
 800f1f0:	f108 0801 	add.w	r8, r8, #1
 800f1f4:	e7e6      	b.n	800f1c4 <_printf_float+0x248>
 800f1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	dc39      	bgt.n	800f270 <_printf_float+0x2f4>
 800f1fc:	4a1b      	ldr	r2, [pc, #108]	; (800f26c <_printf_float+0x2f0>)
 800f1fe:	2301      	movs	r3, #1
 800f200:	4631      	mov	r1, r6
 800f202:	4628      	mov	r0, r5
 800f204:	47b8      	blx	r7
 800f206:	3001      	adds	r0, #1
 800f208:	f43f af19 	beq.w	800f03e <_printf_float+0xc2>
 800f20c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f210:	4313      	orrs	r3, r2
 800f212:	d102      	bne.n	800f21a <_printf_float+0x29e>
 800f214:	6823      	ldr	r3, [r4, #0]
 800f216:	07d9      	lsls	r1, r3, #31
 800f218:	d5d8      	bpl.n	800f1cc <_printf_float+0x250>
 800f21a:	ee18 3a10 	vmov	r3, s16
 800f21e:	4652      	mov	r2, sl
 800f220:	4631      	mov	r1, r6
 800f222:	4628      	mov	r0, r5
 800f224:	47b8      	blx	r7
 800f226:	3001      	adds	r0, #1
 800f228:	f43f af09 	beq.w	800f03e <_printf_float+0xc2>
 800f22c:	f04f 0900 	mov.w	r9, #0
 800f230:	f104 0a1a 	add.w	sl, r4, #26
 800f234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f236:	425b      	negs	r3, r3
 800f238:	454b      	cmp	r3, r9
 800f23a:	dc01      	bgt.n	800f240 <_printf_float+0x2c4>
 800f23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f23e:	e792      	b.n	800f166 <_printf_float+0x1ea>
 800f240:	2301      	movs	r3, #1
 800f242:	4652      	mov	r2, sl
 800f244:	4631      	mov	r1, r6
 800f246:	4628      	mov	r0, r5
 800f248:	47b8      	blx	r7
 800f24a:	3001      	adds	r0, #1
 800f24c:	f43f aef7 	beq.w	800f03e <_printf_float+0xc2>
 800f250:	f109 0901 	add.w	r9, r9, #1
 800f254:	e7ee      	b.n	800f234 <_printf_float+0x2b8>
 800f256:	bf00      	nop
 800f258:	7fefffff 	.word	0x7fefffff
 800f25c:	0806d6f4 	.word	0x0806d6f4
 800f260:	0806d6f8 	.word	0x0806d6f8
 800f264:	0806d700 	.word	0x0806d700
 800f268:	0806d6fc 	.word	0x0806d6fc
 800f26c:	0806d704 	.word	0x0806d704
 800f270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f272:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f274:	429a      	cmp	r2, r3
 800f276:	bfa8      	it	ge
 800f278:	461a      	movge	r2, r3
 800f27a:	2a00      	cmp	r2, #0
 800f27c:	4691      	mov	r9, r2
 800f27e:	dc37      	bgt.n	800f2f0 <_printf_float+0x374>
 800f280:	f04f 0b00 	mov.w	fp, #0
 800f284:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f288:	f104 021a 	add.w	r2, r4, #26
 800f28c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f28e:	9305      	str	r3, [sp, #20]
 800f290:	eba3 0309 	sub.w	r3, r3, r9
 800f294:	455b      	cmp	r3, fp
 800f296:	dc33      	bgt.n	800f300 <_printf_float+0x384>
 800f298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f29c:	429a      	cmp	r2, r3
 800f29e:	db3b      	blt.n	800f318 <_printf_float+0x39c>
 800f2a0:	6823      	ldr	r3, [r4, #0]
 800f2a2:	07da      	lsls	r2, r3, #31
 800f2a4:	d438      	bmi.n	800f318 <_printf_float+0x39c>
 800f2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2a8:	9a05      	ldr	r2, [sp, #20]
 800f2aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2ac:	1a9a      	subs	r2, r3, r2
 800f2ae:	eba3 0901 	sub.w	r9, r3, r1
 800f2b2:	4591      	cmp	r9, r2
 800f2b4:	bfa8      	it	ge
 800f2b6:	4691      	movge	r9, r2
 800f2b8:	f1b9 0f00 	cmp.w	r9, #0
 800f2bc:	dc35      	bgt.n	800f32a <_printf_float+0x3ae>
 800f2be:	f04f 0800 	mov.w	r8, #0
 800f2c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2c6:	f104 0a1a 	add.w	sl, r4, #26
 800f2ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2ce:	1a9b      	subs	r3, r3, r2
 800f2d0:	eba3 0309 	sub.w	r3, r3, r9
 800f2d4:	4543      	cmp	r3, r8
 800f2d6:	f77f af79 	ble.w	800f1cc <_printf_float+0x250>
 800f2da:	2301      	movs	r3, #1
 800f2dc:	4652      	mov	r2, sl
 800f2de:	4631      	mov	r1, r6
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	47b8      	blx	r7
 800f2e4:	3001      	adds	r0, #1
 800f2e6:	f43f aeaa 	beq.w	800f03e <_printf_float+0xc2>
 800f2ea:	f108 0801 	add.w	r8, r8, #1
 800f2ee:	e7ec      	b.n	800f2ca <_printf_float+0x34e>
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	4631      	mov	r1, r6
 800f2f4:	4642      	mov	r2, r8
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	47b8      	blx	r7
 800f2fa:	3001      	adds	r0, #1
 800f2fc:	d1c0      	bne.n	800f280 <_printf_float+0x304>
 800f2fe:	e69e      	b.n	800f03e <_printf_float+0xc2>
 800f300:	2301      	movs	r3, #1
 800f302:	4631      	mov	r1, r6
 800f304:	4628      	mov	r0, r5
 800f306:	9205      	str	r2, [sp, #20]
 800f308:	47b8      	blx	r7
 800f30a:	3001      	adds	r0, #1
 800f30c:	f43f ae97 	beq.w	800f03e <_printf_float+0xc2>
 800f310:	9a05      	ldr	r2, [sp, #20]
 800f312:	f10b 0b01 	add.w	fp, fp, #1
 800f316:	e7b9      	b.n	800f28c <_printf_float+0x310>
 800f318:	ee18 3a10 	vmov	r3, s16
 800f31c:	4652      	mov	r2, sl
 800f31e:	4631      	mov	r1, r6
 800f320:	4628      	mov	r0, r5
 800f322:	47b8      	blx	r7
 800f324:	3001      	adds	r0, #1
 800f326:	d1be      	bne.n	800f2a6 <_printf_float+0x32a>
 800f328:	e689      	b.n	800f03e <_printf_float+0xc2>
 800f32a:	9a05      	ldr	r2, [sp, #20]
 800f32c:	464b      	mov	r3, r9
 800f32e:	4442      	add	r2, r8
 800f330:	4631      	mov	r1, r6
 800f332:	4628      	mov	r0, r5
 800f334:	47b8      	blx	r7
 800f336:	3001      	adds	r0, #1
 800f338:	d1c1      	bne.n	800f2be <_printf_float+0x342>
 800f33a:	e680      	b.n	800f03e <_printf_float+0xc2>
 800f33c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f33e:	2a01      	cmp	r2, #1
 800f340:	dc01      	bgt.n	800f346 <_printf_float+0x3ca>
 800f342:	07db      	lsls	r3, r3, #31
 800f344:	d538      	bpl.n	800f3b8 <_printf_float+0x43c>
 800f346:	2301      	movs	r3, #1
 800f348:	4642      	mov	r2, r8
 800f34a:	4631      	mov	r1, r6
 800f34c:	4628      	mov	r0, r5
 800f34e:	47b8      	blx	r7
 800f350:	3001      	adds	r0, #1
 800f352:	f43f ae74 	beq.w	800f03e <_printf_float+0xc2>
 800f356:	ee18 3a10 	vmov	r3, s16
 800f35a:	4652      	mov	r2, sl
 800f35c:	4631      	mov	r1, r6
 800f35e:	4628      	mov	r0, r5
 800f360:	47b8      	blx	r7
 800f362:	3001      	adds	r0, #1
 800f364:	f43f ae6b 	beq.w	800f03e <_printf_float+0xc2>
 800f368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f36c:	2200      	movs	r2, #0
 800f36e:	2300      	movs	r3, #0
 800f370:	f7f1 fbca 	bl	8000b08 <__aeabi_dcmpeq>
 800f374:	b9d8      	cbnz	r0, 800f3ae <_printf_float+0x432>
 800f376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f378:	f108 0201 	add.w	r2, r8, #1
 800f37c:	3b01      	subs	r3, #1
 800f37e:	4631      	mov	r1, r6
 800f380:	4628      	mov	r0, r5
 800f382:	47b8      	blx	r7
 800f384:	3001      	adds	r0, #1
 800f386:	d10e      	bne.n	800f3a6 <_printf_float+0x42a>
 800f388:	e659      	b.n	800f03e <_printf_float+0xc2>
 800f38a:	2301      	movs	r3, #1
 800f38c:	4652      	mov	r2, sl
 800f38e:	4631      	mov	r1, r6
 800f390:	4628      	mov	r0, r5
 800f392:	47b8      	blx	r7
 800f394:	3001      	adds	r0, #1
 800f396:	f43f ae52 	beq.w	800f03e <_printf_float+0xc2>
 800f39a:	f108 0801 	add.w	r8, r8, #1
 800f39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3a0:	3b01      	subs	r3, #1
 800f3a2:	4543      	cmp	r3, r8
 800f3a4:	dcf1      	bgt.n	800f38a <_printf_float+0x40e>
 800f3a6:	464b      	mov	r3, r9
 800f3a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f3ac:	e6dc      	b.n	800f168 <_printf_float+0x1ec>
 800f3ae:	f04f 0800 	mov.w	r8, #0
 800f3b2:	f104 0a1a 	add.w	sl, r4, #26
 800f3b6:	e7f2      	b.n	800f39e <_printf_float+0x422>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	4642      	mov	r2, r8
 800f3bc:	e7df      	b.n	800f37e <_printf_float+0x402>
 800f3be:	2301      	movs	r3, #1
 800f3c0:	464a      	mov	r2, r9
 800f3c2:	4631      	mov	r1, r6
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	47b8      	blx	r7
 800f3c8:	3001      	adds	r0, #1
 800f3ca:	f43f ae38 	beq.w	800f03e <_printf_float+0xc2>
 800f3ce:	f108 0801 	add.w	r8, r8, #1
 800f3d2:	68e3      	ldr	r3, [r4, #12]
 800f3d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f3d6:	1a5b      	subs	r3, r3, r1
 800f3d8:	4543      	cmp	r3, r8
 800f3da:	dcf0      	bgt.n	800f3be <_printf_float+0x442>
 800f3dc:	e6fa      	b.n	800f1d4 <_printf_float+0x258>
 800f3de:	f04f 0800 	mov.w	r8, #0
 800f3e2:	f104 0919 	add.w	r9, r4, #25
 800f3e6:	e7f4      	b.n	800f3d2 <_printf_float+0x456>

0800f3e8 <_printf_common>:
 800f3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3ec:	4616      	mov	r6, r2
 800f3ee:	4699      	mov	r9, r3
 800f3f0:	688a      	ldr	r2, [r1, #8]
 800f3f2:	690b      	ldr	r3, [r1, #16]
 800f3f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	bfb8      	it	lt
 800f3fc:	4613      	movlt	r3, r2
 800f3fe:	6033      	str	r3, [r6, #0]
 800f400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f404:	4607      	mov	r7, r0
 800f406:	460c      	mov	r4, r1
 800f408:	b10a      	cbz	r2, 800f40e <_printf_common+0x26>
 800f40a:	3301      	adds	r3, #1
 800f40c:	6033      	str	r3, [r6, #0]
 800f40e:	6823      	ldr	r3, [r4, #0]
 800f410:	0699      	lsls	r1, r3, #26
 800f412:	bf42      	ittt	mi
 800f414:	6833      	ldrmi	r3, [r6, #0]
 800f416:	3302      	addmi	r3, #2
 800f418:	6033      	strmi	r3, [r6, #0]
 800f41a:	6825      	ldr	r5, [r4, #0]
 800f41c:	f015 0506 	ands.w	r5, r5, #6
 800f420:	d106      	bne.n	800f430 <_printf_common+0x48>
 800f422:	f104 0a19 	add.w	sl, r4, #25
 800f426:	68e3      	ldr	r3, [r4, #12]
 800f428:	6832      	ldr	r2, [r6, #0]
 800f42a:	1a9b      	subs	r3, r3, r2
 800f42c:	42ab      	cmp	r3, r5
 800f42e:	dc26      	bgt.n	800f47e <_printf_common+0x96>
 800f430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f434:	1e13      	subs	r3, r2, #0
 800f436:	6822      	ldr	r2, [r4, #0]
 800f438:	bf18      	it	ne
 800f43a:	2301      	movne	r3, #1
 800f43c:	0692      	lsls	r2, r2, #26
 800f43e:	d42b      	bmi.n	800f498 <_printf_common+0xb0>
 800f440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f444:	4649      	mov	r1, r9
 800f446:	4638      	mov	r0, r7
 800f448:	47c0      	blx	r8
 800f44a:	3001      	adds	r0, #1
 800f44c:	d01e      	beq.n	800f48c <_printf_common+0xa4>
 800f44e:	6823      	ldr	r3, [r4, #0]
 800f450:	68e5      	ldr	r5, [r4, #12]
 800f452:	6832      	ldr	r2, [r6, #0]
 800f454:	f003 0306 	and.w	r3, r3, #6
 800f458:	2b04      	cmp	r3, #4
 800f45a:	bf08      	it	eq
 800f45c:	1aad      	subeq	r5, r5, r2
 800f45e:	68a3      	ldr	r3, [r4, #8]
 800f460:	6922      	ldr	r2, [r4, #16]
 800f462:	bf0c      	ite	eq
 800f464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f468:	2500      	movne	r5, #0
 800f46a:	4293      	cmp	r3, r2
 800f46c:	bfc4      	itt	gt
 800f46e:	1a9b      	subgt	r3, r3, r2
 800f470:	18ed      	addgt	r5, r5, r3
 800f472:	2600      	movs	r6, #0
 800f474:	341a      	adds	r4, #26
 800f476:	42b5      	cmp	r5, r6
 800f478:	d11a      	bne.n	800f4b0 <_printf_common+0xc8>
 800f47a:	2000      	movs	r0, #0
 800f47c:	e008      	b.n	800f490 <_printf_common+0xa8>
 800f47e:	2301      	movs	r3, #1
 800f480:	4652      	mov	r2, sl
 800f482:	4649      	mov	r1, r9
 800f484:	4638      	mov	r0, r7
 800f486:	47c0      	blx	r8
 800f488:	3001      	adds	r0, #1
 800f48a:	d103      	bne.n	800f494 <_printf_common+0xac>
 800f48c:	f04f 30ff 	mov.w	r0, #4294967295
 800f490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f494:	3501      	adds	r5, #1
 800f496:	e7c6      	b.n	800f426 <_printf_common+0x3e>
 800f498:	18e1      	adds	r1, r4, r3
 800f49a:	1c5a      	adds	r2, r3, #1
 800f49c:	2030      	movs	r0, #48	; 0x30
 800f49e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4a2:	4422      	add	r2, r4
 800f4a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f4a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f4ac:	3302      	adds	r3, #2
 800f4ae:	e7c7      	b.n	800f440 <_printf_common+0x58>
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	4622      	mov	r2, r4
 800f4b4:	4649      	mov	r1, r9
 800f4b6:	4638      	mov	r0, r7
 800f4b8:	47c0      	blx	r8
 800f4ba:	3001      	adds	r0, #1
 800f4bc:	d0e6      	beq.n	800f48c <_printf_common+0xa4>
 800f4be:	3601      	adds	r6, #1
 800f4c0:	e7d9      	b.n	800f476 <_printf_common+0x8e>
	...

0800f4c4 <_printf_i>:
 800f4c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4c8:	7e0f      	ldrb	r7, [r1, #24]
 800f4ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4cc:	2f78      	cmp	r7, #120	; 0x78
 800f4ce:	4691      	mov	r9, r2
 800f4d0:	4680      	mov	r8, r0
 800f4d2:	460c      	mov	r4, r1
 800f4d4:	469a      	mov	sl, r3
 800f4d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f4da:	d807      	bhi.n	800f4ec <_printf_i+0x28>
 800f4dc:	2f62      	cmp	r7, #98	; 0x62
 800f4de:	d80a      	bhi.n	800f4f6 <_printf_i+0x32>
 800f4e0:	2f00      	cmp	r7, #0
 800f4e2:	f000 80d8 	beq.w	800f696 <_printf_i+0x1d2>
 800f4e6:	2f58      	cmp	r7, #88	; 0x58
 800f4e8:	f000 80a3 	beq.w	800f632 <_printf_i+0x16e>
 800f4ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f4f4:	e03a      	b.n	800f56c <_printf_i+0xa8>
 800f4f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f4fa:	2b15      	cmp	r3, #21
 800f4fc:	d8f6      	bhi.n	800f4ec <_printf_i+0x28>
 800f4fe:	a101      	add	r1, pc, #4	; (adr r1, 800f504 <_printf_i+0x40>)
 800f500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f504:	0800f55d 	.word	0x0800f55d
 800f508:	0800f571 	.word	0x0800f571
 800f50c:	0800f4ed 	.word	0x0800f4ed
 800f510:	0800f4ed 	.word	0x0800f4ed
 800f514:	0800f4ed 	.word	0x0800f4ed
 800f518:	0800f4ed 	.word	0x0800f4ed
 800f51c:	0800f571 	.word	0x0800f571
 800f520:	0800f4ed 	.word	0x0800f4ed
 800f524:	0800f4ed 	.word	0x0800f4ed
 800f528:	0800f4ed 	.word	0x0800f4ed
 800f52c:	0800f4ed 	.word	0x0800f4ed
 800f530:	0800f67d 	.word	0x0800f67d
 800f534:	0800f5a1 	.word	0x0800f5a1
 800f538:	0800f65f 	.word	0x0800f65f
 800f53c:	0800f4ed 	.word	0x0800f4ed
 800f540:	0800f4ed 	.word	0x0800f4ed
 800f544:	0800f69f 	.word	0x0800f69f
 800f548:	0800f4ed 	.word	0x0800f4ed
 800f54c:	0800f5a1 	.word	0x0800f5a1
 800f550:	0800f4ed 	.word	0x0800f4ed
 800f554:	0800f4ed 	.word	0x0800f4ed
 800f558:	0800f667 	.word	0x0800f667
 800f55c:	682b      	ldr	r3, [r5, #0]
 800f55e:	1d1a      	adds	r2, r3, #4
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	602a      	str	r2, [r5, #0]
 800f564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f56c:	2301      	movs	r3, #1
 800f56e:	e0a3      	b.n	800f6b8 <_printf_i+0x1f4>
 800f570:	6820      	ldr	r0, [r4, #0]
 800f572:	6829      	ldr	r1, [r5, #0]
 800f574:	0606      	lsls	r6, r0, #24
 800f576:	f101 0304 	add.w	r3, r1, #4
 800f57a:	d50a      	bpl.n	800f592 <_printf_i+0xce>
 800f57c:	680e      	ldr	r6, [r1, #0]
 800f57e:	602b      	str	r3, [r5, #0]
 800f580:	2e00      	cmp	r6, #0
 800f582:	da03      	bge.n	800f58c <_printf_i+0xc8>
 800f584:	232d      	movs	r3, #45	; 0x2d
 800f586:	4276      	negs	r6, r6
 800f588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f58c:	485e      	ldr	r0, [pc, #376]	; (800f708 <_printf_i+0x244>)
 800f58e:	230a      	movs	r3, #10
 800f590:	e019      	b.n	800f5c6 <_printf_i+0x102>
 800f592:	680e      	ldr	r6, [r1, #0]
 800f594:	602b      	str	r3, [r5, #0]
 800f596:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f59a:	bf18      	it	ne
 800f59c:	b236      	sxthne	r6, r6
 800f59e:	e7ef      	b.n	800f580 <_printf_i+0xbc>
 800f5a0:	682b      	ldr	r3, [r5, #0]
 800f5a2:	6820      	ldr	r0, [r4, #0]
 800f5a4:	1d19      	adds	r1, r3, #4
 800f5a6:	6029      	str	r1, [r5, #0]
 800f5a8:	0601      	lsls	r1, r0, #24
 800f5aa:	d501      	bpl.n	800f5b0 <_printf_i+0xec>
 800f5ac:	681e      	ldr	r6, [r3, #0]
 800f5ae:	e002      	b.n	800f5b6 <_printf_i+0xf2>
 800f5b0:	0646      	lsls	r6, r0, #25
 800f5b2:	d5fb      	bpl.n	800f5ac <_printf_i+0xe8>
 800f5b4:	881e      	ldrh	r6, [r3, #0]
 800f5b6:	4854      	ldr	r0, [pc, #336]	; (800f708 <_printf_i+0x244>)
 800f5b8:	2f6f      	cmp	r7, #111	; 0x6f
 800f5ba:	bf0c      	ite	eq
 800f5bc:	2308      	moveq	r3, #8
 800f5be:	230a      	movne	r3, #10
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5c6:	6865      	ldr	r5, [r4, #4]
 800f5c8:	60a5      	str	r5, [r4, #8]
 800f5ca:	2d00      	cmp	r5, #0
 800f5cc:	bfa2      	ittt	ge
 800f5ce:	6821      	ldrge	r1, [r4, #0]
 800f5d0:	f021 0104 	bicge.w	r1, r1, #4
 800f5d4:	6021      	strge	r1, [r4, #0]
 800f5d6:	b90e      	cbnz	r6, 800f5dc <_printf_i+0x118>
 800f5d8:	2d00      	cmp	r5, #0
 800f5da:	d04d      	beq.n	800f678 <_printf_i+0x1b4>
 800f5dc:	4615      	mov	r5, r2
 800f5de:	fbb6 f1f3 	udiv	r1, r6, r3
 800f5e2:	fb03 6711 	mls	r7, r3, r1, r6
 800f5e6:	5dc7      	ldrb	r7, [r0, r7]
 800f5e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f5ec:	4637      	mov	r7, r6
 800f5ee:	42bb      	cmp	r3, r7
 800f5f0:	460e      	mov	r6, r1
 800f5f2:	d9f4      	bls.n	800f5de <_printf_i+0x11a>
 800f5f4:	2b08      	cmp	r3, #8
 800f5f6:	d10b      	bne.n	800f610 <_printf_i+0x14c>
 800f5f8:	6823      	ldr	r3, [r4, #0]
 800f5fa:	07de      	lsls	r6, r3, #31
 800f5fc:	d508      	bpl.n	800f610 <_printf_i+0x14c>
 800f5fe:	6923      	ldr	r3, [r4, #16]
 800f600:	6861      	ldr	r1, [r4, #4]
 800f602:	4299      	cmp	r1, r3
 800f604:	bfde      	ittt	le
 800f606:	2330      	movle	r3, #48	; 0x30
 800f608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f60c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f610:	1b52      	subs	r2, r2, r5
 800f612:	6122      	str	r2, [r4, #16]
 800f614:	f8cd a000 	str.w	sl, [sp]
 800f618:	464b      	mov	r3, r9
 800f61a:	aa03      	add	r2, sp, #12
 800f61c:	4621      	mov	r1, r4
 800f61e:	4640      	mov	r0, r8
 800f620:	f7ff fee2 	bl	800f3e8 <_printf_common>
 800f624:	3001      	adds	r0, #1
 800f626:	d14c      	bne.n	800f6c2 <_printf_i+0x1fe>
 800f628:	f04f 30ff 	mov.w	r0, #4294967295
 800f62c:	b004      	add	sp, #16
 800f62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f632:	4835      	ldr	r0, [pc, #212]	; (800f708 <_printf_i+0x244>)
 800f634:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f638:	6829      	ldr	r1, [r5, #0]
 800f63a:	6823      	ldr	r3, [r4, #0]
 800f63c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f640:	6029      	str	r1, [r5, #0]
 800f642:	061d      	lsls	r5, r3, #24
 800f644:	d514      	bpl.n	800f670 <_printf_i+0x1ac>
 800f646:	07df      	lsls	r7, r3, #31
 800f648:	bf44      	itt	mi
 800f64a:	f043 0320 	orrmi.w	r3, r3, #32
 800f64e:	6023      	strmi	r3, [r4, #0]
 800f650:	b91e      	cbnz	r6, 800f65a <_printf_i+0x196>
 800f652:	6823      	ldr	r3, [r4, #0]
 800f654:	f023 0320 	bic.w	r3, r3, #32
 800f658:	6023      	str	r3, [r4, #0]
 800f65a:	2310      	movs	r3, #16
 800f65c:	e7b0      	b.n	800f5c0 <_printf_i+0xfc>
 800f65e:	6823      	ldr	r3, [r4, #0]
 800f660:	f043 0320 	orr.w	r3, r3, #32
 800f664:	6023      	str	r3, [r4, #0]
 800f666:	2378      	movs	r3, #120	; 0x78
 800f668:	4828      	ldr	r0, [pc, #160]	; (800f70c <_printf_i+0x248>)
 800f66a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f66e:	e7e3      	b.n	800f638 <_printf_i+0x174>
 800f670:	0659      	lsls	r1, r3, #25
 800f672:	bf48      	it	mi
 800f674:	b2b6      	uxthmi	r6, r6
 800f676:	e7e6      	b.n	800f646 <_printf_i+0x182>
 800f678:	4615      	mov	r5, r2
 800f67a:	e7bb      	b.n	800f5f4 <_printf_i+0x130>
 800f67c:	682b      	ldr	r3, [r5, #0]
 800f67e:	6826      	ldr	r6, [r4, #0]
 800f680:	6961      	ldr	r1, [r4, #20]
 800f682:	1d18      	adds	r0, r3, #4
 800f684:	6028      	str	r0, [r5, #0]
 800f686:	0635      	lsls	r5, r6, #24
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	d501      	bpl.n	800f690 <_printf_i+0x1cc>
 800f68c:	6019      	str	r1, [r3, #0]
 800f68e:	e002      	b.n	800f696 <_printf_i+0x1d2>
 800f690:	0670      	lsls	r0, r6, #25
 800f692:	d5fb      	bpl.n	800f68c <_printf_i+0x1c8>
 800f694:	8019      	strh	r1, [r3, #0]
 800f696:	2300      	movs	r3, #0
 800f698:	6123      	str	r3, [r4, #16]
 800f69a:	4615      	mov	r5, r2
 800f69c:	e7ba      	b.n	800f614 <_printf_i+0x150>
 800f69e:	682b      	ldr	r3, [r5, #0]
 800f6a0:	1d1a      	adds	r2, r3, #4
 800f6a2:	602a      	str	r2, [r5, #0]
 800f6a4:	681d      	ldr	r5, [r3, #0]
 800f6a6:	6862      	ldr	r2, [r4, #4]
 800f6a8:	2100      	movs	r1, #0
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	f7f0 fdb8 	bl	8000220 <memchr>
 800f6b0:	b108      	cbz	r0, 800f6b6 <_printf_i+0x1f2>
 800f6b2:	1b40      	subs	r0, r0, r5
 800f6b4:	6060      	str	r0, [r4, #4]
 800f6b6:	6863      	ldr	r3, [r4, #4]
 800f6b8:	6123      	str	r3, [r4, #16]
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6c0:	e7a8      	b.n	800f614 <_printf_i+0x150>
 800f6c2:	6923      	ldr	r3, [r4, #16]
 800f6c4:	462a      	mov	r2, r5
 800f6c6:	4649      	mov	r1, r9
 800f6c8:	4640      	mov	r0, r8
 800f6ca:	47d0      	blx	sl
 800f6cc:	3001      	adds	r0, #1
 800f6ce:	d0ab      	beq.n	800f628 <_printf_i+0x164>
 800f6d0:	6823      	ldr	r3, [r4, #0]
 800f6d2:	079b      	lsls	r3, r3, #30
 800f6d4:	d413      	bmi.n	800f6fe <_printf_i+0x23a>
 800f6d6:	68e0      	ldr	r0, [r4, #12]
 800f6d8:	9b03      	ldr	r3, [sp, #12]
 800f6da:	4298      	cmp	r0, r3
 800f6dc:	bfb8      	it	lt
 800f6de:	4618      	movlt	r0, r3
 800f6e0:	e7a4      	b.n	800f62c <_printf_i+0x168>
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	4632      	mov	r2, r6
 800f6e6:	4649      	mov	r1, r9
 800f6e8:	4640      	mov	r0, r8
 800f6ea:	47d0      	blx	sl
 800f6ec:	3001      	adds	r0, #1
 800f6ee:	d09b      	beq.n	800f628 <_printf_i+0x164>
 800f6f0:	3501      	adds	r5, #1
 800f6f2:	68e3      	ldr	r3, [r4, #12]
 800f6f4:	9903      	ldr	r1, [sp, #12]
 800f6f6:	1a5b      	subs	r3, r3, r1
 800f6f8:	42ab      	cmp	r3, r5
 800f6fa:	dcf2      	bgt.n	800f6e2 <_printf_i+0x21e>
 800f6fc:	e7eb      	b.n	800f6d6 <_printf_i+0x212>
 800f6fe:	2500      	movs	r5, #0
 800f700:	f104 0619 	add.w	r6, r4, #25
 800f704:	e7f5      	b.n	800f6f2 <_printf_i+0x22e>
 800f706:	bf00      	nop
 800f708:	0806d706 	.word	0x0806d706
 800f70c:	0806d717 	.word	0x0806d717

0800f710 <_sbrk_r>:
 800f710:	b538      	push	{r3, r4, r5, lr}
 800f712:	4d06      	ldr	r5, [pc, #24]	; (800f72c <_sbrk_r+0x1c>)
 800f714:	2300      	movs	r3, #0
 800f716:	4604      	mov	r4, r0
 800f718:	4608      	mov	r0, r1
 800f71a:	602b      	str	r3, [r5, #0]
 800f71c:	f7f3 f99a 	bl	8002a54 <_sbrk>
 800f720:	1c43      	adds	r3, r0, #1
 800f722:	d102      	bne.n	800f72a <_sbrk_r+0x1a>
 800f724:	682b      	ldr	r3, [r5, #0]
 800f726:	b103      	cbz	r3, 800f72a <_sbrk_r+0x1a>
 800f728:	6023      	str	r3, [r4, #0]
 800f72a:	bd38      	pop	{r3, r4, r5, pc}
 800f72c:	2000a010 	.word	0x2000a010

0800f730 <siprintf>:
 800f730:	b40e      	push	{r1, r2, r3}
 800f732:	b500      	push	{lr}
 800f734:	b09c      	sub	sp, #112	; 0x70
 800f736:	ab1d      	add	r3, sp, #116	; 0x74
 800f738:	9002      	str	r0, [sp, #8]
 800f73a:	9006      	str	r0, [sp, #24]
 800f73c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f740:	4809      	ldr	r0, [pc, #36]	; (800f768 <siprintf+0x38>)
 800f742:	9107      	str	r1, [sp, #28]
 800f744:	9104      	str	r1, [sp, #16]
 800f746:	4909      	ldr	r1, [pc, #36]	; (800f76c <siprintf+0x3c>)
 800f748:	f853 2b04 	ldr.w	r2, [r3], #4
 800f74c:	9105      	str	r1, [sp, #20]
 800f74e:	6800      	ldr	r0, [r0, #0]
 800f750:	9301      	str	r3, [sp, #4]
 800f752:	a902      	add	r1, sp, #8
 800f754:	f001 fac2 	bl	8010cdc <_svfiprintf_r>
 800f758:	9b02      	ldr	r3, [sp, #8]
 800f75a:	2200      	movs	r2, #0
 800f75c:	701a      	strb	r2, [r3, #0]
 800f75e:	b01c      	add	sp, #112	; 0x70
 800f760:	f85d eb04 	ldr.w	lr, [sp], #4
 800f764:	b003      	add	sp, #12
 800f766:	4770      	bx	lr
 800f768:	20000924 	.word	0x20000924
 800f76c:	ffff0208 	.word	0xffff0208

0800f770 <strcpy>:
 800f770:	4603      	mov	r3, r0
 800f772:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f776:	f803 2b01 	strb.w	r2, [r3], #1
 800f77a:	2a00      	cmp	r2, #0
 800f77c:	d1f9      	bne.n	800f772 <strcpy+0x2>
 800f77e:	4770      	bx	lr

0800f780 <quorem>:
 800f780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f784:	6903      	ldr	r3, [r0, #16]
 800f786:	690c      	ldr	r4, [r1, #16]
 800f788:	42a3      	cmp	r3, r4
 800f78a:	4607      	mov	r7, r0
 800f78c:	f2c0 8081 	blt.w	800f892 <quorem+0x112>
 800f790:	3c01      	subs	r4, #1
 800f792:	f101 0814 	add.w	r8, r1, #20
 800f796:	f100 0514 	add.w	r5, r0, #20
 800f79a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f79e:	9301      	str	r3, [sp, #4]
 800f7a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f7a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f7b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f7b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800f7b8:	d331      	bcc.n	800f81e <quorem+0x9e>
 800f7ba:	f04f 0e00 	mov.w	lr, #0
 800f7be:	4640      	mov	r0, r8
 800f7c0:	46ac      	mov	ip, r5
 800f7c2:	46f2      	mov	sl, lr
 800f7c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800f7c8:	b293      	uxth	r3, r2
 800f7ca:	fb06 e303 	mla	r3, r6, r3, lr
 800f7ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	ebaa 0303 	sub.w	r3, sl, r3
 800f7d8:	f8dc a000 	ldr.w	sl, [ip]
 800f7dc:	0c12      	lsrs	r2, r2, #16
 800f7de:	fa13 f38a 	uxtah	r3, r3, sl
 800f7e2:	fb06 e202 	mla	r2, r6, r2, lr
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	9b00      	ldr	r3, [sp, #0]
 800f7ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f7ee:	b292      	uxth	r2, r2
 800f7f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f7f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f7f8:	f8bd 3000 	ldrh.w	r3, [sp]
 800f7fc:	4581      	cmp	r9, r0
 800f7fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f802:	f84c 3b04 	str.w	r3, [ip], #4
 800f806:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f80a:	d2db      	bcs.n	800f7c4 <quorem+0x44>
 800f80c:	f855 300b 	ldr.w	r3, [r5, fp]
 800f810:	b92b      	cbnz	r3, 800f81e <quorem+0x9e>
 800f812:	9b01      	ldr	r3, [sp, #4]
 800f814:	3b04      	subs	r3, #4
 800f816:	429d      	cmp	r5, r3
 800f818:	461a      	mov	r2, r3
 800f81a:	d32e      	bcc.n	800f87a <quorem+0xfa>
 800f81c:	613c      	str	r4, [r7, #16]
 800f81e:	4638      	mov	r0, r7
 800f820:	f001 f8ba 	bl	8010998 <__mcmp>
 800f824:	2800      	cmp	r0, #0
 800f826:	db24      	blt.n	800f872 <quorem+0xf2>
 800f828:	3601      	adds	r6, #1
 800f82a:	4628      	mov	r0, r5
 800f82c:	f04f 0c00 	mov.w	ip, #0
 800f830:	f858 2b04 	ldr.w	r2, [r8], #4
 800f834:	f8d0 e000 	ldr.w	lr, [r0]
 800f838:	b293      	uxth	r3, r2
 800f83a:	ebac 0303 	sub.w	r3, ip, r3
 800f83e:	0c12      	lsrs	r2, r2, #16
 800f840:	fa13 f38e 	uxtah	r3, r3, lr
 800f844:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f852:	45c1      	cmp	r9, r8
 800f854:	f840 3b04 	str.w	r3, [r0], #4
 800f858:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f85c:	d2e8      	bcs.n	800f830 <quorem+0xb0>
 800f85e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f862:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f866:	b922      	cbnz	r2, 800f872 <quorem+0xf2>
 800f868:	3b04      	subs	r3, #4
 800f86a:	429d      	cmp	r5, r3
 800f86c:	461a      	mov	r2, r3
 800f86e:	d30a      	bcc.n	800f886 <quorem+0x106>
 800f870:	613c      	str	r4, [r7, #16]
 800f872:	4630      	mov	r0, r6
 800f874:	b003      	add	sp, #12
 800f876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f87a:	6812      	ldr	r2, [r2, #0]
 800f87c:	3b04      	subs	r3, #4
 800f87e:	2a00      	cmp	r2, #0
 800f880:	d1cc      	bne.n	800f81c <quorem+0x9c>
 800f882:	3c01      	subs	r4, #1
 800f884:	e7c7      	b.n	800f816 <quorem+0x96>
 800f886:	6812      	ldr	r2, [r2, #0]
 800f888:	3b04      	subs	r3, #4
 800f88a:	2a00      	cmp	r2, #0
 800f88c:	d1f0      	bne.n	800f870 <quorem+0xf0>
 800f88e:	3c01      	subs	r4, #1
 800f890:	e7eb      	b.n	800f86a <quorem+0xea>
 800f892:	2000      	movs	r0, #0
 800f894:	e7ee      	b.n	800f874 <quorem+0xf4>
	...

0800f898 <_dtoa_r>:
 800f898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89c:	ed2d 8b04 	vpush	{d8-d9}
 800f8a0:	ec57 6b10 	vmov	r6, r7, d0
 800f8a4:	b093      	sub	sp, #76	; 0x4c
 800f8a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f8a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f8ac:	9106      	str	r1, [sp, #24]
 800f8ae:	ee10 aa10 	vmov	sl, s0
 800f8b2:	4604      	mov	r4, r0
 800f8b4:	9209      	str	r2, [sp, #36]	; 0x24
 800f8b6:	930c      	str	r3, [sp, #48]	; 0x30
 800f8b8:	46bb      	mov	fp, r7
 800f8ba:	b975      	cbnz	r5, 800f8da <_dtoa_r+0x42>
 800f8bc:	2010      	movs	r0, #16
 800f8be:	f7ff f9b7 	bl	800ec30 <malloc>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	6260      	str	r0, [r4, #36]	; 0x24
 800f8c6:	b920      	cbnz	r0, 800f8d2 <_dtoa_r+0x3a>
 800f8c8:	4ba7      	ldr	r3, [pc, #668]	; (800fb68 <_dtoa_r+0x2d0>)
 800f8ca:	21ea      	movs	r1, #234	; 0xea
 800f8cc:	48a7      	ldr	r0, [pc, #668]	; (800fb6c <_dtoa_r+0x2d4>)
 800f8ce:	f001 fb05 	bl	8010edc <__assert_func>
 800f8d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f8d6:	6005      	str	r5, [r0, #0]
 800f8d8:	60c5      	str	r5, [r0, #12]
 800f8da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8dc:	6819      	ldr	r1, [r3, #0]
 800f8de:	b151      	cbz	r1, 800f8f6 <_dtoa_r+0x5e>
 800f8e0:	685a      	ldr	r2, [r3, #4]
 800f8e2:	604a      	str	r2, [r1, #4]
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	4093      	lsls	r3, r2
 800f8e8:	608b      	str	r3, [r1, #8]
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f000 fe12 	bl	8010514 <_Bfree>
 800f8f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	601a      	str	r2, [r3, #0]
 800f8f6:	1e3b      	subs	r3, r7, #0
 800f8f8:	bfaa      	itet	ge
 800f8fa:	2300      	movge	r3, #0
 800f8fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f900:	f8c8 3000 	strge.w	r3, [r8]
 800f904:	4b9a      	ldr	r3, [pc, #616]	; (800fb70 <_dtoa_r+0x2d8>)
 800f906:	bfbc      	itt	lt
 800f908:	2201      	movlt	r2, #1
 800f90a:	f8c8 2000 	strlt.w	r2, [r8]
 800f90e:	ea33 030b 	bics.w	r3, r3, fp
 800f912:	d11b      	bne.n	800f94c <_dtoa_r+0xb4>
 800f914:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f916:	f242 730f 	movw	r3, #9999	; 0x270f
 800f91a:	6013      	str	r3, [r2, #0]
 800f91c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f920:	4333      	orrs	r3, r6
 800f922:	f000 8592 	beq.w	801044a <_dtoa_r+0xbb2>
 800f926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f928:	b963      	cbnz	r3, 800f944 <_dtoa_r+0xac>
 800f92a:	4b92      	ldr	r3, [pc, #584]	; (800fb74 <_dtoa_r+0x2dc>)
 800f92c:	e022      	b.n	800f974 <_dtoa_r+0xdc>
 800f92e:	4b92      	ldr	r3, [pc, #584]	; (800fb78 <_dtoa_r+0x2e0>)
 800f930:	9301      	str	r3, [sp, #4]
 800f932:	3308      	adds	r3, #8
 800f934:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f936:	6013      	str	r3, [r2, #0]
 800f938:	9801      	ldr	r0, [sp, #4]
 800f93a:	b013      	add	sp, #76	; 0x4c
 800f93c:	ecbd 8b04 	vpop	{d8-d9}
 800f940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f944:	4b8b      	ldr	r3, [pc, #556]	; (800fb74 <_dtoa_r+0x2dc>)
 800f946:	9301      	str	r3, [sp, #4]
 800f948:	3303      	adds	r3, #3
 800f94a:	e7f3      	b.n	800f934 <_dtoa_r+0x9c>
 800f94c:	2200      	movs	r2, #0
 800f94e:	2300      	movs	r3, #0
 800f950:	4650      	mov	r0, sl
 800f952:	4659      	mov	r1, fp
 800f954:	f7f1 f8d8 	bl	8000b08 <__aeabi_dcmpeq>
 800f958:	ec4b ab19 	vmov	d9, sl, fp
 800f95c:	4680      	mov	r8, r0
 800f95e:	b158      	cbz	r0, 800f978 <_dtoa_r+0xe0>
 800f960:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f962:	2301      	movs	r3, #1
 800f964:	6013      	str	r3, [r2, #0]
 800f966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f968:	2b00      	cmp	r3, #0
 800f96a:	f000 856b 	beq.w	8010444 <_dtoa_r+0xbac>
 800f96e:	4883      	ldr	r0, [pc, #524]	; (800fb7c <_dtoa_r+0x2e4>)
 800f970:	6018      	str	r0, [r3, #0]
 800f972:	1e43      	subs	r3, r0, #1
 800f974:	9301      	str	r3, [sp, #4]
 800f976:	e7df      	b.n	800f938 <_dtoa_r+0xa0>
 800f978:	ec4b ab10 	vmov	d0, sl, fp
 800f97c:	aa10      	add	r2, sp, #64	; 0x40
 800f97e:	a911      	add	r1, sp, #68	; 0x44
 800f980:	4620      	mov	r0, r4
 800f982:	f001 f8af 	bl	8010ae4 <__d2b>
 800f986:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f98a:	ee08 0a10 	vmov	s16, r0
 800f98e:	2d00      	cmp	r5, #0
 800f990:	f000 8084 	beq.w	800fa9c <_dtoa_r+0x204>
 800f994:	ee19 3a90 	vmov	r3, s19
 800f998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f99c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f9a0:	4656      	mov	r6, sl
 800f9a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f9a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f9aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f9ae:	4b74      	ldr	r3, [pc, #464]	; (800fb80 <_dtoa_r+0x2e8>)
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	4639      	mov	r1, r7
 800f9b6:	f7f0 fc87 	bl	80002c8 <__aeabi_dsub>
 800f9ba:	a365      	add	r3, pc, #404	; (adr r3, 800fb50 <_dtoa_r+0x2b8>)
 800f9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c0:	f7f0 fe3a 	bl	8000638 <__aeabi_dmul>
 800f9c4:	a364      	add	r3, pc, #400	; (adr r3, 800fb58 <_dtoa_r+0x2c0>)
 800f9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ca:	f7f0 fc7f 	bl	80002cc <__adddf3>
 800f9ce:	4606      	mov	r6, r0
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	460f      	mov	r7, r1
 800f9d4:	f7f0 fdc6 	bl	8000564 <__aeabi_i2d>
 800f9d8:	a361      	add	r3, pc, #388	; (adr r3, 800fb60 <_dtoa_r+0x2c8>)
 800f9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9de:	f7f0 fe2b 	bl	8000638 <__aeabi_dmul>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	460b      	mov	r3, r1
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	4639      	mov	r1, r7
 800f9ea:	f7f0 fc6f 	bl	80002cc <__adddf3>
 800f9ee:	4606      	mov	r6, r0
 800f9f0:	460f      	mov	r7, r1
 800f9f2:	f7f1 f8d1 	bl	8000b98 <__aeabi_d2iz>
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	9000      	str	r0, [sp, #0]
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	4630      	mov	r0, r6
 800f9fe:	4639      	mov	r1, r7
 800fa00:	f7f1 f88c 	bl	8000b1c <__aeabi_dcmplt>
 800fa04:	b150      	cbz	r0, 800fa1c <_dtoa_r+0x184>
 800fa06:	9800      	ldr	r0, [sp, #0]
 800fa08:	f7f0 fdac 	bl	8000564 <__aeabi_i2d>
 800fa0c:	4632      	mov	r2, r6
 800fa0e:	463b      	mov	r3, r7
 800fa10:	f7f1 f87a 	bl	8000b08 <__aeabi_dcmpeq>
 800fa14:	b910      	cbnz	r0, 800fa1c <_dtoa_r+0x184>
 800fa16:	9b00      	ldr	r3, [sp, #0]
 800fa18:	3b01      	subs	r3, #1
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	9b00      	ldr	r3, [sp, #0]
 800fa1e:	2b16      	cmp	r3, #22
 800fa20:	d85a      	bhi.n	800fad8 <_dtoa_r+0x240>
 800fa22:	9a00      	ldr	r2, [sp, #0]
 800fa24:	4b57      	ldr	r3, [pc, #348]	; (800fb84 <_dtoa_r+0x2ec>)
 800fa26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2e:	ec51 0b19 	vmov	r0, r1, d9
 800fa32:	f7f1 f873 	bl	8000b1c <__aeabi_dcmplt>
 800fa36:	2800      	cmp	r0, #0
 800fa38:	d050      	beq.n	800fadc <_dtoa_r+0x244>
 800fa3a:	9b00      	ldr	r3, [sp, #0]
 800fa3c:	3b01      	subs	r3, #1
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	2300      	movs	r3, #0
 800fa42:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa46:	1b5d      	subs	r5, r3, r5
 800fa48:	1e6b      	subs	r3, r5, #1
 800fa4a:	9305      	str	r3, [sp, #20]
 800fa4c:	bf45      	ittet	mi
 800fa4e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fa52:	9304      	strmi	r3, [sp, #16]
 800fa54:	2300      	movpl	r3, #0
 800fa56:	2300      	movmi	r3, #0
 800fa58:	bf4c      	ite	mi
 800fa5a:	9305      	strmi	r3, [sp, #20]
 800fa5c:	9304      	strpl	r3, [sp, #16]
 800fa5e:	9b00      	ldr	r3, [sp, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	db3d      	blt.n	800fae0 <_dtoa_r+0x248>
 800fa64:	9b05      	ldr	r3, [sp, #20]
 800fa66:	9a00      	ldr	r2, [sp, #0]
 800fa68:	920a      	str	r2, [sp, #40]	; 0x28
 800fa6a:	4413      	add	r3, r2
 800fa6c:	9305      	str	r3, [sp, #20]
 800fa6e:	2300      	movs	r3, #0
 800fa70:	9307      	str	r3, [sp, #28]
 800fa72:	9b06      	ldr	r3, [sp, #24]
 800fa74:	2b09      	cmp	r3, #9
 800fa76:	f200 8089 	bhi.w	800fb8c <_dtoa_r+0x2f4>
 800fa7a:	2b05      	cmp	r3, #5
 800fa7c:	bfc4      	itt	gt
 800fa7e:	3b04      	subgt	r3, #4
 800fa80:	9306      	strgt	r3, [sp, #24]
 800fa82:	9b06      	ldr	r3, [sp, #24]
 800fa84:	f1a3 0302 	sub.w	r3, r3, #2
 800fa88:	bfcc      	ite	gt
 800fa8a:	2500      	movgt	r5, #0
 800fa8c:	2501      	movle	r5, #1
 800fa8e:	2b03      	cmp	r3, #3
 800fa90:	f200 8087 	bhi.w	800fba2 <_dtoa_r+0x30a>
 800fa94:	e8df f003 	tbb	[pc, r3]
 800fa98:	59383a2d 	.word	0x59383a2d
 800fa9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800faa0:	441d      	add	r5, r3
 800faa2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800faa6:	2b20      	cmp	r3, #32
 800faa8:	bfc1      	itttt	gt
 800faaa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800faae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fab2:	fa0b f303 	lslgt.w	r3, fp, r3
 800fab6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800faba:	bfda      	itte	le
 800fabc:	f1c3 0320 	rsble	r3, r3, #32
 800fac0:	fa06 f003 	lslle.w	r0, r6, r3
 800fac4:	4318      	orrgt	r0, r3
 800fac6:	f7f0 fd3d 	bl	8000544 <__aeabi_ui2d>
 800faca:	2301      	movs	r3, #1
 800facc:	4606      	mov	r6, r0
 800face:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fad2:	3d01      	subs	r5, #1
 800fad4:	930e      	str	r3, [sp, #56]	; 0x38
 800fad6:	e76a      	b.n	800f9ae <_dtoa_r+0x116>
 800fad8:	2301      	movs	r3, #1
 800fada:	e7b2      	b.n	800fa42 <_dtoa_r+0x1aa>
 800fadc:	900b      	str	r0, [sp, #44]	; 0x2c
 800fade:	e7b1      	b.n	800fa44 <_dtoa_r+0x1ac>
 800fae0:	9b04      	ldr	r3, [sp, #16]
 800fae2:	9a00      	ldr	r2, [sp, #0]
 800fae4:	1a9b      	subs	r3, r3, r2
 800fae6:	9304      	str	r3, [sp, #16]
 800fae8:	4253      	negs	r3, r2
 800faea:	9307      	str	r3, [sp, #28]
 800faec:	2300      	movs	r3, #0
 800faee:	930a      	str	r3, [sp, #40]	; 0x28
 800faf0:	e7bf      	b.n	800fa72 <_dtoa_r+0x1da>
 800faf2:	2300      	movs	r3, #0
 800faf4:	9308      	str	r3, [sp, #32]
 800faf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	dc55      	bgt.n	800fba8 <_dtoa_r+0x310>
 800fafc:	2301      	movs	r3, #1
 800fafe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fb02:	461a      	mov	r2, r3
 800fb04:	9209      	str	r2, [sp, #36]	; 0x24
 800fb06:	e00c      	b.n	800fb22 <_dtoa_r+0x28a>
 800fb08:	2301      	movs	r3, #1
 800fb0a:	e7f3      	b.n	800faf4 <_dtoa_r+0x25c>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb10:	9308      	str	r3, [sp, #32]
 800fb12:	9b00      	ldr	r3, [sp, #0]
 800fb14:	4413      	add	r3, r2
 800fb16:	9302      	str	r3, [sp, #8]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	9303      	str	r3, [sp, #12]
 800fb1e:	bfb8      	it	lt
 800fb20:	2301      	movlt	r3, #1
 800fb22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fb24:	2200      	movs	r2, #0
 800fb26:	6042      	str	r2, [r0, #4]
 800fb28:	2204      	movs	r2, #4
 800fb2a:	f102 0614 	add.w	r6, r2, #20
 800fb2e:	429e      	cmp	r6, r3
 800fb30:	6841      	ldr	r1, [r0, #4]
 800fb32:	d93d      	bls.n	800fbb0 <_dtoa_r+0x318>
 800fb34:	4620      	mov	r0, r4
 800fb36:	f000 fcad 	bl	8010494 <_Balloc>
 800fb3a:	9001      	str	r0, [sp, #4]
 800fb3c:	2800      	cmp	r0, #0
 800fb3e:	d13b      	bne.n	800fbb8 <_dtoa_r+0x320>
 800fb40:	4b11      	ldr	r3, [pc, #68]	; (800fb88 <_dtoa_r+0x2f0>)
 800fb42:	4602      	mov	r2, r0
 800fb44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fb48:	e6c0      	b.n	800f8cc <_dtoa_r+0x34>
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	e7df      	b.n	800fb0e <_dtoa_r+0x276>
 800fb4e:	bf00      	nop
 800fb50:	636f4361 	.word	0x636f4361
 800fb54:	3fd287a7 	.word	0x3fd287a7
 800fb58:	8b60c8b3 	.word	0x8b60c8b3
 800fb5c:	3fc68a28 	.word	0x3fc68a28
 800fb60:	509f79fb 	.word	0x509f79fb
 800fb64:	3fd34413 	.word	0x3fd34413
 800fb68:	0806d735 	.word	0x0806d735
 800fb6c:	0806d74c 	.word	0x0806d74c
 800fb70:	7ff00000 	.word	0x7ff00000
 800fb74:	0806d731 	.word	0x0806d731
 800fb78:	0806d728 	.word	0x0806d728
 800fb7c:	0806d705 	.word	0x0806d705
 800fb80:	3ff80000 	.word	0x3ff80000
 800fb84:	0806d840 	.word	0x0806d840
 800fb88:	0806d7a7 	.word	0x0806d7a7
 800fb8c:	2501      	movs	r5, #1
 800fb8e:	2300      	movs	r3, #0
 800fb90:	9306      	str	r3, [sp, #24]
 800fb92:	9508      	str	r5, [sp, #32]
 800fb94:	f04f 33ff 	mov.w	r3, #4294967295
 800fb98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	2312      	movs	r3, #18
 800fba0:	e7b0      	b.n	800fb04 <_dtoa_r+0x26c>
 800fba2:	2301      	movs	r3, #1
 800fba4:	9308      	str	r3, [sp, #32]
 800fba6:	e7f5      	b.n	800fb94 <_dtoa_r+0x2fc>
 800fba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fbae:	e7b8      	b.n	800fb22 <_dtoa_r+0x28a>
 800fbb0:	3101      	adds	r1, #1
 800fbb2:	6041      	str	r1, [r0, #4]
 800fbb4:	0052      	lsls	r2, r2, #1
 800fbb6:	e7b8      	b.n	800fb2a <_dtoa_r+0x292>
 800fbb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbba:	9a01      	ldr	r2, [sp, #4]
 800fbbc:	601a      	str	r2, [r3, #0]
 800fbbe:	9b03      	ldr	r3, [sp, #12]
 800fbc0:	2b0e      	cmp	r3, #14
 800fbc2:	f200 809d 	bhi.w	800fd00 <_dtoa_r+0x468>
 800fbc6:	2d00      	cmp	r5, #0
 800fbc8:	f000 809a 	beq.w	800fd00 <_dtoa_r+0x468>
 800fbcc:	9b00      	ldr	r3, [sp, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	dd32      	ble.n	800fc38 <_dtoa_r+0x3a0>
 800fbd2:	4ab7      	ldr	r2, [pc, #732]	; (800feb0 <_dtoa_r+0x618>)
 800fbd4:	f003 030f 	and.w	r3, r3, #15
 800fbd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fbdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fbe0:	9b00      	ldr	r3, [sp, #0]
 800fbe2:	05d8      	lsls	r0, r3, #23
 800fbe4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fbe8:	d516      	bpl.n	800fc18 <_dtoa_r+0x380>
 800fbea:	4bb2      	ldr	r3, [pc, #712]	; (800feb4 <_dtoa_r+0x61c>)
 800fbec:	ec51 0b19 	vmov	r0, r1, d9
 800fbf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fbf4:	f7f0 fe4a 	bl	800088c <__aeabi_ddiv>
 800fbf8:	f007 070f 	and.w	r7, r7, #15
 800fbfc:	4682      	mov	sl, r0
 800fbfe:	468b      	mov	fp, r1
 800fc00:	2503      	movs	r5, #3
 800fc02:	4eac      	ldr	r6, [pc, #688]	; (800feb4 <_dtoa_r+0x61c>)
 800fc04:	b957      	cbnz	r7, 800fc1c <_dtoa_r+0x384>
 800fc06:	4642      	mov	r2, r8
 800fc08:	464b      	mov	r3, r9
 800fc0a:	4650      	mov	r0, sl
 800fc0c:	4659      	mov	r1, fp
 800fc0e:	f7f0 fe3d 	bl	800088c <__aeabi_ddiv>
 800fc12:	4682      	mov	sl, r0
 800fc14:	468b      	mov	fp, r1
 800fc16:	e028      	b.n	800fc6a <_dtoa_r+0x3d2>
 800fc18:	2502      	movs	r5, #2
 800fc1a:	e7f2      	b.n	800fc02 <_dtoa_r+0x36a>
 800fc1c:	07f9      	lsls	r1, r7, #31
 800fc1e:	d508      	bpl.n	800fc32 <_dtoa_r+0x39a>
 800fc20:	4640      	mov	r0, r8
 800fc22:	4649      	mov	r1, r9
 800fc24:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fc28:	f7f0 fd06 	bl	8000638 <__aeabi_dmul>
 800fc2c:	3501      	adds	r5, #1
 800fc2e:	4680      	mov	r8, r0
 800fc30:	4689      	mov	r9, r1
 800fc32:	107f      	asrs	r7, r7, #1
 800fc34:	3608      	adds	r6, #8
 800fc36:	e7e5      	b.n	800fc04 <_dtoa_r+0x36c>
 800fc38:	f000 809b 	beq.w	800fd72 <_dtoa_r+0x4da>
 800fc3c:	9b00      	ldr	r3, [sp, #0]
 800fc3e:	4f9d      	ldr	r7, [pc, #628]	; (800feb4 <_dtoa_r+0x61c>)
 800fc40:	425e      	negs	r6, r3
 800fc42:	4b9b      	ldr	r3, [pc, #620]	; (800feb0 <_dtoa_r+0x618>)
 800fc44:	f006 020f 	and.w	r2, r6, #15
 800fc48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc50:	ec51 0b19 	vmov	r0, r1, d9
 800fc54:	f7f0 fcf0 	bl	8000638 <__aeabi_dmul>
 800fc58:	1136      	asrs	r6, r6, #4
 800fc5a:	4682      	mov	sl, r0
 800fc5c:	468b      	mov	fp, r1
 800fc5e:	2300      	movs	r3, #0
 800fc60:	2502      	movs	r5, #2
 800fc62:	2e00      	cmp	r6, #0
 800fc64:	d17a      	bne.n	800fd5c <_dtoa_r+0x4c4>
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d1d3      	bne.n	800fc12 <_dtoa_r+0x37a>
 800fc6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	f000 8082 	beq.w	800fd76 <_dtoa_r+0x4de>
 800fc72:	4b91      	ldr	r3, [pc, #580]	; (800feb8 <_dtoa_r+0x620>)
 800fc74:	2200      	movs	r2, #0
 800fc76:	4650      	mov	r0, sl
 800fc78:	4659      	mov	r1, fp
 800fc7a:	f7f0 ff4f 	bl	8000b1c <__aeabi_dcmplt>
 800fc7e:	2800      	cmp	r0, #0
 800fc80:	d079      	beq.n	800fd76 <_dtoa_r+0x4de>
 800fc82:	9b03      	ldr	r3, [sp, #12]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d076      	beq.n	800fd76 <_dtoa_r+0x4de>
 800fc88:	9b02      	ldr	r3, [sp, #8]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	dd36      	ble.n	800fcfc <_dtoa_r+0x464>
 800fc8e:	9b00      	ldr	r3, [sp, #0]
 800fc90:	4650      	mov	r0, sl
 800fc92:	4659      	mov	r1, fp
 800fc94:	1e5f      	subs	r7, r3, #1
 800fc96:	2200      	movs	r2, #0
 800fc98:	4b88      	ldr	r3, [pc, #544]	; (800febc <_dtoa_r+0x624>)
 800fc9a:	f7f0 fccd 	bl	8000638 <__aeabi_dmul>
 800fc9e:	9e02      	ldr	r6, [sp, #8]
 800fca0:	4682      	mov	sl, r0
 800fca2:	468b      	mov	fp, r1
 800fca4:	3501      	adds	r5, #1
 800fca6:	4628      	mov	r0, r5
 800fca8:	f7f0 fc5c 	bl	8000564 <__aeabi_i2d>
 800fcac:	4652      	mov	r2, sl
 800fcae:	465b      	mov	r3, fp
 800fcb0:	f7f0 fcc2 	bl	8000638 <__aeabi_dmul>
 800fcb4:	4b82      	ldr	r3, [pc, #520]	; (800fec0 <_dtoa_r+0x628>)
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f7f0 fb08 	bl	80002cc <__adddf3>
 800fcbc:	46d0      	mov	r8, sl
 800fcbe:	46d9      	mov	r9, fp
 800fcc0:	4682      	mov	sl, r0
 800fcc2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fcc6:	2e00      	cmp	r6, #0
 800fcc8:	d158      	bne.n	800fd7c <_dtoa_r+0x4e4>
 800fcca:	4b7e      	ldr	r3, [pc, #504]	; (800fec4 <_dtoa_r+0x62c>)
 800fccc:	2200      	movs	r2, #0
 800fcce:	4640      	mov	r0, r8
 800fcd0:	4649      	mov	r1, r9
 800fcd2:	f7f0 faf9 	bl	80002c8 <__aeabi_dsub>
 800fcd6:	4652      	mov	r2, sl
 800fcd8:	465b      	mov	r3, fp
 800fcda:	4680      	mov	r8, r0
 800fcdc:	4689      	mov	r9, r1
 800fcde:	f7f0 ff3b 	bl	8000b58 <__aeabi_dcmpgt>
 800fce2:	2800      	cmp	r0, #0
 800fce4:	f040 8295 	bne.w	8010212 <_dtoa_r+0x97a>
 800fce8:	4652      	mov	r2, sl
 800fcea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fcee:	4640      	mov	r0, r8
 800fcf0:	4649      	mov	r1, r9
 800fcf2:	f7f0 ff13 	bl	8000b1c <__aeabi_dcmplt>
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	f040 8289 	bne.w	801020e <_dtoa_r+0x976>
 800fcfc:	ec5b ab19 	vmov	sl, fp, d9
 800fd00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f2c0 8148 	blt.w	800ff98 <_dtoa_r+0x700>
 800fd08:	9a00      	ldr	r2, [sp, #0]
 800fd0a:	2a0e      	cmp	r2, #14
 800fd0c:	f300 8144 	bgt.w	800ff98 <_dtoa_r+0x700>
 800fd10:	4b67      	ldr	r3, [pc, #412]	; (800feb0 <_dtoa_r+0x618>)
 800fd12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd16:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	f280 80d5 	bge.w	800fecc <_dtoa_r+0x634>
 800fd22:	9b03      	ldr	r3, [sp, #12]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f300 80d1 	bgt.w	800fecc <_dtoa_r+0x634>
 800fd2a:	f040 826f 	bne.w	801020c <_dtoa_r+0x974>
 800fd2e:	4b65      	ldr	r3, [pc, #404]	; (800fec4 <_dtoa_r+0x62c>)
 800fd30:	2200      	movs	r2, #0
 800fd32:	4640      	mov	r0, r8
 800fd34:	4649      	mov	r1, r9
 800fd36:	f7f0 fc7f 	bl	8000638 <__aeabi_dmul>
 800fd3a:	4652      	mov	r2, sl
 800fd3c:	465b      	mov	r3, fp
 800fd3e:	f7f0 ff01 	bl	8000b44 <__aeabi_dcmpge>
 800fd42:	9e03      	ldr	r6, [sp, #12]
 800fd44:	4637      	mov	r7, r6
 800fd46:	2800      	cmp	r0, #0
 800fd48:	f040 8245 	bne.w	80101d6 <_dtoa_r+0x93e>
 800fd4c:	9d01      	ldr	r5, [sp, #4]
 800fd4e:	2331      	movs	r3, #49	; 0x31
 800fd50:	f805 3b01 	strb.w	r3, [r5], #1
 800fd54:	9b00      	ldr	r3, [sp, #0]
 800fd56:	3301      	adds	r3, #1
 800fd58:	9300      	str	r3, [sp, #0]
 800fd5a:	e240      	b.n	80101de <_dtoa_r+0x946>
 800fd5c:	07f2      	lsls	r2, r6, #31
 800fd5e:	d505      	bpl.n	800fd6c <_dtoa_r+0x4d4>
 800fd60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd64:	f7f0 fc68 	bl	8000638 <__aeabi_dmul>
 800fd68:	3501      	adds	r5, #1
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	1076      	asrs	r6, r6, #1
 800fd6e:	3708      	adds	r7, #8
 800fd70:	e777      	b.n	800fc62 <_dtoa_r+0x3ca>
 800fd72:	2502      	movs	r5, #2
 800fd74:	e779      	b.n	800fc6a <_dtoa_r+0x3d2>
 800fd76:	9f00      	ldr	r7, [sp, #0]
 800fd78:	9e03      	ldr	r6, [sp, #12]
 800fd7a:	e794      	b.n	800fca6 <_dtoa_r+0x40e>
 800fd7c:	9901      	ldr	r1, [sp, #4]
 800fd7e:	4b4c      	ldr	r3, [pc, #304]	; (800feb0 <_dtoa_r+0x618>)
 800fd80:	4431      	add	r1, r6
 800fd82:	910d      	str	r1, [sp, #52]	; 0x34
 800fd84:	9908      	ldr	r1, [sp, #32]
 800fd86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fd8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fd8e:	2900      	cmp	r1, #0
 800fd90:	d043      	beq.n	800fe1a <_dtoa_r+0x582>
 800fd92:	494d      	ldr	r1, [pc, #308]	; (800fec8 <_dtoa_r+0x630>)
 800fd94:	2000      	movs	r0, #0
 800fd96:	f7f0 fd79 	bl	800088c <__aeabi_ddiv>
 800fd9a:	4652      	mov	r2, sl
 800fd9c:	465b      	mov	r3, fp
 800fd9e:	f7f0 fa93 	bl	80002c8 <__aeabi_dsub>
 800fda2:	9d01      	ldr	r5, [sp, #4]
 800fda4:	4682      	mov	sl, r0
 800fda6:	468b      	mov	fp, r1
 800fda8:	4649      	mov	r1, r9
 800fdaa:	4640      	mov	r0, r8
 800fdac:	f7f0 fef4 	bl	8000b98 <__aeabi_d2iz>
 800fdb0:	4606      	mov	r6, r0
 800fdb2:	f7f0 fbd7 	bl	8000564 <__aeabi_i2d>
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	460b      	mov	r3, r1
 800fdba:	4640      	mov	r0, r8
 800fdbc:	4649      	mov	r1, r9
 800fdbe:	f7f0 fa83 	bl	80002c8 <__aeabi_dsub>
 800fdc2:	3630      	adds	r6, #48	; 0x30
 800fdc4:	f805 6b01 	strb.w	r6, [r5], #1
 800fdc8:	4652      	mov	r2, sl
 800fdca:	465b      	mov	r3, fp
 800fdcc:	4680      	mov	r8, r0
 800fdce:	4689      	mov	r9, r1
 800fdd0:	f7f0 fea4 	bl	8000b1c <__aeabi_dcmplt>
 800fdd4:	2800      	cmp	r0, #0
 800fdd6:	d163      	bne.n	800fea0 <_dtoa_r+0x608>
 800fdd8:	4642      	mov	r2, r8
 800fdda:	464b      	mov	r3, r9
 800fddc:	4936      	ldr	r1, [pc, #216]	; (800feb8 <_dtoa_r+0x620>)
 800fdde:	2000      	movs	r0, #0
 800fde0:	f7f0 fa72 	bl	80002c8 <__aeabi_dsub>
 800fde4:	4652      	mov	r2, sl
 800fde6:	465b      	mov	r3, fp
 800fde8:	f7f0 fe98 	bl	8000b1c <__aeabi_dcmplt>
 800fdec:	2800      	cmp	r0, #0
 800fdee:	f040 80b5 	bne.w	800ff5c <_dtoa_r+0x6c4>
 800fdf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdf4:	429d      	cmp	r5, r3
 800fdf6:	d081      	beq.n	800fcfc <_dtoa_r+0x464>
 800fdf8:	4b30      	ldr	r3, [pc, #192]	; (800febc <_dtoa_r+0x624>)
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	4650      	mov	r0, sl
 800fdfe:	4659      	mov	r1, fp
 800fe00:	f7f0 fc1a 	bl	8000638 <__aeabi_dmul>
 800fe04:	4b2d      	ldr	r3, [pc, #180]	; (800febc <_dtoa_r+0x624>)
 800fe06:	4682      	mov	sl, r0
 800fe08:	468b      	mov	fp, r1
 800fe0a:	4640      	mov	r0, r8
 800fe0c:	4649      	mov	r1, r9
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f7f0 fc12 	bl	8000638 <__aeabi_dmul>
 800fe14:	4680      	mov	r8, r0
 800fe16:	4689      	mov	r9, r1
 800fe18:	e7c6      	b.n	800fda8 <_dtoa_r+0x510>
 800fe1a:	4650      	mov	r0, sl
 800fe1c:	4659      	mov	r1, fp
 800fe1e:	f7f0 fc0b 	bl	8000638 <__aeabi_dmul>
 800fe22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe24:	9d01      	ldr	r5, [sp, #4]
 800fe26:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe28:	4682      	mov	sl, r0
 800fe2a:	468b      	mov	fp, r1
 800fe2c:	4649      	mov	r1, r9
 800fe2e:	4640      	mov	r0, r8
 800fe30:	f7f0 feb2 	bl	8000b98 <__aeabi_d2iz>
 800fe34:	4606      	mov	r6, r0
 800fe36:	f7f0 fb95 	bl	8000564 <__aeabi_i2d>
 800fe3a:	3630      	adds	r6, #48	; 0x30
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	460b      	mov	r3, r1
 800fe40:	4640      	mov	r0, r8
 800fe42:	4649      	mov	r1, r9
 800fe44:	f7f0 fa40 	bl	80002c8 <__aeabi_dsub>
 800fe48:	f805 6b01 	strb.w	r6, [r5], #1
 800fe4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe4e:	429d      	cmp	r5, r3
 800fe50:	4680      	mov	r8, r0
 800fe52:	4689      	mov	r9, r1
 800fe54:	f04f 0200 	mov.w	r2, #0
 800fe58:	d124      	bne.n	800fea4 <_dtoa_r+0x60c>
 800fe5a:	4b1b      	ldr	r3, [pc, #108]	; (800fec8 <_dtoa_r+0x630>)
 800fe5c:	4650      	mov	r0, sl
 800fe5e:	4659      	mov	r1, fp
 800fe60:	f7f0 fa34 	bl	80002cc <__adddf3>
 800fe64:	4602      	mov	r2, r0
 800fe66:	460b      	mov	r3, r1
 800fe68:	4640      	mov	r0, r8
 800fe6a:	4649      	mov	r1, r9
 800fe6c:	f7f0 fe74 	bl	8000b58 <__aeabi_dcmpgt>
 800fe70:	2800      	cmp	r0, #0
 800fe72:	d173      	bne.n	800ff5c <_dtoa_r+0x6c4>
 800fe74:	4652      	mov	r2, sl
 800fe76:	465b      	mov	r3, fp
 800fe78:	4913      	ldr	r1, [pc, #76]	; (800fec8 <_dtoa_r+0x630>)
 800fe7a:	2000      	movs	r0, #0
 800fe7c:	f7f0 fa24 	bl	80002c8 <__aeabi_dsub>
 800fe80:	4602      	mov	r2, r0
 800fe82:	460b      	mov	r3, r1
 800fe84:	4640      	mov	r0, r8
 800fe86:	4649      	mov	r1, r9
 800fe88:	f7f0 fe48 	bl	8000b1c <__aeabi_dcmplt>
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	f43f af35 	beq.w	800fcfc <_dtoa_r+0x464>
 800fe92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fe94:	1e6b      	subs	r3, r5, #1
 800fe96:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe98:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fe9c:	2b30      	cmp	r3, #48	; 0x30
 800fe9e:	d0f8      	beq.n	800fe92 <_dtoa_r+0x5fa>
 800fea0:	9700      	str	r7, [sp, #0]
 800fea2:	e049      	b.n	800ff38 <_dtoa_r+0x6a0>
 800fea4:	4b05      	ldr	r3, [pc, #20]	; (800febc <_dtoa_r+0x624>)
 800fea6:	f7f0 fbc7 	bl	8000638 <__aeabi_dmul>
 800feaa:	4680      	mov	r8, r0
 800feac:	4689      	mov	r9, r1
 800feae:	e7bd      	b.n	800fe2c <_dtoa_r+0x594>
 800feb0:	0806d840 	.word	0x0806d840
 800feb4:	0806d818 	.word	0x0806d818
 800feb8:	3ff00000 	.word	0x3ff00000
 800febc:	40240000 	.word	0x40240000
 800fec0:	401c0000 	.word	0x401c0000
 800fec4:	40140000 	.word	0x40140000
 800fec8:	3fe00000 	.word	0x3fe00000
 800fecc:	9d01      	ldr	r5, [sp, #4]
 800fece:	4656      	mov	r6, sl
 800fed0:	465f      	mov	r7, fp
 800fed2:	4642      	mov	r2, r8
 800fed4:	464b      	mov	r3, r9
 800fed6:	4630      	mov	r0, r6
 800fed8:	4639      	mov	r1, r7
 800feda:	f7f0 fcd7 	bl	800088c <__aeabi_ddiv>
 800fede:	f7f0 fe5b 	bl	8000b98 <__aeabi_d2iz>
 800fee2:	4682      	mov	sl, r0
 800fee4:	f7f0 fb3e 	bl	8000564 <__aeabi_i2d>
 800fee8:	4642      	mov	r2, r8
 800feea:	464b      	mov	r3, r9
 800feec:	f7f0 fba4 	bl	8000638 <__aeabi_dmul>
 800fef0:	4602      	mov	r2, r0
 800fef2:	460b      	mov	r3, r1
 800fef4:	4630      	mov	r0, r6
 800fef6:	4639      	mov	r1, r7
 800fef8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fefc:	f7f0 f9e4 	bl	80002c8 <__aeabi_dsub>
 800ff00:	f805 6b01 	strb.w	r6, [r5], #1
 800ff04:	9e01      	ldr	r6, [sp, #4]
 800ff06:	9f03      	ldr	r7, [sp, #12]
 800ff08:	1bae      	subs	r6, r5, r6
 800ff0a:	42b7      	cmp	r7, r6
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	460b      	mov	r3, r1
 800ff10:	d135      	bne.n	800ff7e <_dtoa_r+0x6e6>
 800ff12:	f7f0 f9db 	bl	80002cc <__adddf3>
 800ff16:	4642      	mov	r2, r8
 800ff18:	464b      	mov	r3, r9
 800ff1a:	4606      	mov	r6, r0
 800ff1c:	460f      	mov	r7, r1
 800ff1e:	f7f0 fe1b 	bl	8000b58 <__aeabi_dcmpgt>
 800ff22:	b9d0      	cbnz	r0, 800ff5a <_dtoa_r+0x6c2>
 800ff24:	4642      	mov	r2, r8
 800ff26:	464b      	mov	r3, r9
 800ff28:	4630      	mov	r0, r6
 800ff2a:	4639      	mov	r1, r7
 800ff2c:	f7f0 fdec 	bl	8000b08 <__aeabi_dcmpeq>
 800ff30:	b110      	cbz	r0, 800ff38 <_dtoa_r+0x6a0>
 800ff32:	f01a 0f01 	tst.w	sl, #1
 800ff36:	d110      	bne.n	800ff5a <_dtoa_r+0x6c2>
 800ff38:	4620      	mov	r0, r4
 800ff3a:	ee18 1a10 	vmov	r1, s16
 800ff3e:	f000 fae9 	bl	8010514 <_Bfree>
 800ff42:	2300      	movs	r3, #0
 800ff44:	9800      	ldr	r0, [sp, #0]
 800ff46:	702b      	strb	r3, [r5, #0]
 800ff48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff4a:	3001      	adds	r0, #1
 800ff4c:	6018      	str	r0, [r3, #0]
 800ff4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f43f acf1 	beq.w	800f938 <_dtoa_r+0xa0>
 800ff56:	601d      	str	r5, [r3, #0]
 800ff58:	e4ee      	b.n	800f938 <_dtoa_r+0xa0>
 800ff5a:	9f00      	ldr	r7, [sp, #0]
 800ff5c:	462b      	mov	r3, r5
 800ff5e:	461d      	mov	r5, r3
 800ff60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff64:	2a39      	cmp	r2, #57	; 0x39
 800ff66:	d106      	bne.n	800ff76 <_dtoa_r+0x6de>
 800ff68:	9a01      	ldr	r2, [sp, #4]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d1f7      	bne.n	800ff5e <_dtoa_r+0x6c6>
 800ff6e:	9901      	ldr	r1, [sp, #4]
 800ff70:	2230      	movs	r2, #48	; 0x30
 800ff72:	3701      	adds	r7, #1
 800ff74:	700a      	strb	r2, [r1, #0]
 800ff76:	781a      	ldrb	r2, [r3, #0]
 800ff78:	3201      	adds	r2, #1
 800ff7a:	701a      	strb	r2, [r3, #0]
 800ff7c:	e790      	b.n	800fea0 <_dtoa_r+0x608>
 800ff7e:	4ba6      	ldr	r3, [pc, #664]	; (8010218 <_dtoa_r+0x980>)
 800ff80:	2200      	movs	r2, #0
 800ff82:	f7f0 fb59 	bl	8000638 <__aeabi_dmul>
 800ff86:	2200      	movs	r2, #0
 800ff88:	2300      	movs	r3, #0
 800ff8a:	4606      	mov	r6, r0
 800ff8c:	460f      	mov	r7, r1
 800ff8e:	f7f0 fdbb 	bl	8000b08 <__aeabi_dcmpeq>
 800ff92:	2800      	cmp	r0, #0
 800ff94:	d09d      	beq.n	800fed2 <_dtoa_r+0x63a>
 800ff96:	e7cf      	b.n	800ff38 <_dtoa_r+0x6a0>
 800ff98:	9a08      	ldr	r2, [sp, #32]
 800ff9a:	2a00      	cmp	r2, #0
 800ff9c:	f000 80d7 	beq.w	801014e <_dtoa_r+0x8b6>
 800ffa0:	9a06      	ldr	r2, [sp, #24]
 800ffa2:	2a01      	cmp	r2, #1
 800ffa4:	f300 80ba 	bgt.w	801011c <_dtoa_r+0x884>
 800ffa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffaa:	2a00      	cmp	r2, #0
 800ffac:	f000 80b2 	beq.w	8010114 <_dtoa_r+0x87c>
 800ffb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ffb4:	9e07      	ldr	r6, [sp, #28]
 800ffb6:	9d04      	ldr	r5, [sp, #16]
 800ffb8:	9a04      	ldr	r2, [sp, #16]
 800ffba:	441a      	add	r2, r3
 800ffbc:	9204      	str	r2, [sp, #16]
 800ffbe:	9a05      	ldr	r2, [sp, #20]
 800ffc0:	2101      	movs	r1, #1
 800ffc2:	441a      	add	r2, r3
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	9205      	str	r2, [sp, #20]
 800ffc8:	f000 fb5c 	bl	8010684 <__i2b>
 800ffcc:	4607      	mov	r7, r0
 800ffce:	2d00      	cmp	r5, #0
 800ffd0:	dd0c      	ble.n	800ffec <_dtoa_r+0x754>
 800ffd2:	9b05      	ldr	r3, [sp, #20]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	dd09      	ble.n	800ffec <_dtoa_r+0x754>
 800ffd8:	42ab      	cmp	r3, r5
 800ffda:	9a04      	ldr	r2, [sp, #16]
 800ffdc:	bfa8      	it	ge
 800ffde:	462b      	movge	r3, r5
 800ffe0:	1ad2      	subs	r2, r2, r3
 800ffe2:	9204      	str	r2, [sp, #16]
 800ffe4:	9a05      	ldr	r2, [sp, #20]
 800ffe6:	1aed      	subs	r5, r5, r3
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	9305      	str	r3, [sp, #20]
 800ffec:	9b07      	ldr	r3, [sp, #28]
 800ffee:	b31b      	cbz	r3, 8010038 <_dtoa_r+0x7a0>
 800fff0:	9b08      	ldr	r3, [sp, #32]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	f000 80af 	beq.w	8010156 <_dtoa_r+0x8be>
 800fff8:	2e00      	cmp	r6, #0
 800fffa:	dd13      	ble.n	8010024 <_dtoa_r+0x78c>
 800fffc:	4639      	mov	r1, r7
 800fffe:	4632      	mov	r2, r6
 8010000:	4620      	mov	r0, r4
 8010002:	f000 fbff 	bl	8010804 <__pow5mult>
 8010006:	ee18 2a10 	vmov	r2, s16
 801000a:	4601      	mov	r1, r0
 801000c:	4607      	mov	r7, r0
 801000e:	4620      	mov	r0, r4
 8010010:	f000 fb4e 	bl	80106b0 <__multiply>
 8010014:	ee18 1a10 	vmov	r1, s16
 8010018:	4680      	mov	r8, r0
 801001a:	4620      	mov	r0, r4
 801001c:	f000 fa7a 	bl	8010514 <_Bfree>
 8010020:	ee08 8a10 	vmov	s16, r8
 8010024:	9b07      	ldr	r3, [sp, #28]
 8010026:	1b9a      	subs	r2, r3, r6
 8010028:	d006      	beq.n	8010038 <_dtoa_r+0x7a0>
 801002a:	ee18 1a10 	vmov	r1, s16
 801002e:	4620      	mov	r0, r4
 8010030:	f000 fbe8 	bl	8010804 <__pow5mult>
 8010034:	ee08 0a10 	vmov	s16, r0
 8010038:	2101      	movs	r1, #1
 801003a:	4620      	mov	r0, r4
 801003c:	f000 fb22 	bl	8010684 <__i2b>
 8010040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010042:	2b00      	cmp	r3, #0
 8010044:	4606      	mov	r6, r0
 8010046:	f340 8088 	ble.w	801015a <_dtoa_r+0x8c2>
 801004a:	461a      	mov	r2, r3
 801004c:	4601      	mov	r1, r0
 801004e:	4620      	mov	r0, r4
 8010050:	f000 fbd8 	bl	8010804 <__pow5mult>
 8010054:	9b06      	ldr	r3, [sp, #24]
 8010056:	2b01      	cmp	r3, #1
 8010058:	4606      	mov	r6, r0
 801005a:	f340 8081 	ble.w	8010160 <_dtoa_r+0x8c8>
 801005e:	f04f 0800 	mov.w	r8, #0
 8010062:	6933      	ldr	r3, [r6, #16]
 8010064:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010068:	6918      	ldr	r0, [r3, #16]
 801006a:	f000 fabb 	bl	80105e4 <__hi0bits>
 801006e:	f1c0 0020 	rsb	r0, r0, #32
 8010072:	9b05      	ldr	r3, [sp, #20]
 8010074:	4418      	add	r0, r3
 8010076:	f010 001f 	ands.w	r0, r0, #31
 801007a:	f000 8092 	beq.w	80101a2 <_dtoa_r+0x90a>
 801007e:	f1c0 0320 	rsb	r3, r0, #32
 8010082:	2b04      	cmp	r3, #4
 8010084:	f340 808a 	ble.w	801019c <_dtoa_r+0x904>
 8010088:	f1c0 001c 	rsb	r0, r0, #28
 801008c:	9b04      	ldr	r3, [sp, #16]
 801008e:	4403      	add	r3, r0
 8010090:	9304      	str	r3, [sp, #16]
 8010092:	9b05      	ldr	r3, [sp, #20]
 8010094:	4403      	add	r3, r0
 8010096:	4405      	add	r5, r0
 8010098:	9305      	str	r3, [sp, #20]
 801009a:	9b04      	ldr	r3, [sp, #16]
 801009c:	2b00      	cmp	r3, #0
 801009e:	dd07      	ble.n	80100b0 <_dtoa_r+0x818>
 80100a0:	ee18 1a10 	vmov	r1, s16
 80100a4:	461a      	mov	r2, r3
 80100a6:	4620      	mov	r0, r4
 80100a8:	f000 fc06 	bl	80108b8 <__lshift>
 80100ac:	ee08 0a10 	vmov	s16, r0
 80100b0:	9b05      	ldr	r3, [sp, #20]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	dd05      	ble.n	80100c2 <_dtoa_r+0x82a>
 80100b6:	4631      	mov	r1, r6
 80100b8:	461a      	mov	r2, r3
 80100ba:	4620      	mov	r0, r4
 80100bc:	f000 fbfc 	bl	80108b8 <__lshift>
 80100c0:	4606      	mov	r6, r0
 80100c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d06e      	beq.n	80101a6 <_dtoa_r+0x90e>
 80100c8:	ee18 0a10 	vmov	r0, s16
 80100cc:	4631      	mov	r1, r6
 80100ce:	f000 fc63 	bl	8010998 <__mcmp>
 80100d2:	2800      	cmp	r0, #0
 80100d4:	da67      	bge.n	80101a6 <_dtoa_r+0x90e>
 80100d6:	9b00      	ldr	r3, [sp, #0]
 80100d8:	3b01      	subs	r3, #1
 80100da:	ee18 1a10 	vmov	r1, s16
 80100de:	9300      	str	r3, [sp, #0]
 80100e0:	220a      	movs	r2, #10
 80100e2:	2300      	movs	r3, #0
 80100e4:	4620      	mov	r0, r4
 80100e6:	f000 fa37 	bl	8010558 <__multadd>
 80100ea:	9b08      	ldr	r3, [sp, #32]
 80100ec:	ee08 0a10 	vmov	s16, r0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	f000 81b1 	beq.w	8010458 <_dtoa_r+0xbc0>
 80100f6:	2300      	movs	r3, #0
 80100f8:	4639      	mov	r1, r7
 80100fa:	220a      	movs	r2, #10
 80100fc:	4620      	mov	r0, r4
 80100fe:	f000 fa2b 	bl	8010558 <__multadd>
 8010102:	9b02      	ldr	r3, [sp, #8]
 8010104:	2b00      	cmp	r3, #0
 8010106:	4607      	mov	r7, r0
 8010108:	f300 808e 	bgt.w	8010228 <_dtoa_r+0x990>
 801010c:	9b06      	ldr	r3, [sp, #24]
 801010e:	2b02      	cmp	r3, #2
 8010110:	dc51      	bgt.n	80101b6 <_dtoa_r+0x91e>
 8010112:	e089      	b.n	8010228 <_dtoa_r+0x990>
 8010114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010116:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801011a:	e74b      	b.n	800ffb4 <_dtoa_r+0x71c>
 801011c:	9b03      	ldr	r3, [sp, #12]
 801011e:	1e5e      	subs	r6, r3, #1
 8010120:	9b07      	ldr	r3, [sp, #28]
 8010122:	42b3      	cmp	r3, r6
 8010124:	bfbf      	itttt	lt
 8010126:	9b07      	ldrlt	r3, [sp, #28]
 8010128:	9607      	strlt	r6, [sp, #28]
 801012a:	1af2      	sublt	r2, r6, r3
 801012c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801012e:	bfb6      	itet	lt
 8010130:	189b      	addlt	r3, r3, r2
 8010132:	1b9e      	subge	r6, r3, r6
 8010134:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010136:	9b03      	ldr	r3, [sp, #12]
 8010138:	bfb8      	it	lt
 801013a:	2600      	movlt	r6, #0
 801013c:	2b00      	cmp	r3, #0
 801013e:	bfb7      	itett	lt
 8010140:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010144:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010148:	1a9d      	sublt	r5, r3, r2
 801014a:	2300      	movlt	r3, #0
 801014c:	e734      	b.n	800ffb8 <_dtoa_r+0x720>
 801014e:	9e07      	ldr	r6, [sp, #28]
 8010150:	9d04      	ldr	r5, [sp, #16]
 8010152:	9f08      	ldr	r7, [sp, #32]
 8010154:	e73b      	b.n	800ffce <_dtoa_r+0x736>
 8010156:	9a07      	ldr	r2, [sp, #28]
 8010158:	e767      	b.n	801002a <_dtoa_r+0x792>
 801015a:	9b06      	ldr	r3, [sp, #24]
 801015c:	2b01      	cmp	r3, #1
 801015e:	dc18      	bgt.n	8010192 <_dtoa_r+0x8fa>
 8010160:	f1ba 0f00 	cmp.w	sl, #0
 8010164:	d115      	bne.n	8010192 <_dtoa_r+0x8fa>
 8010166:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801016a:	b993      	cbnz	r3, 8010192 <_dtoa_r+0x8fa>
 801016c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010170:	0d1b      	lsrs	r3, r3, #20
 8010172:	051b      	lsls	r3, r3, #20
 8010174:	b183      	cbz	r3, 8010198 <_dtoa_r+0x900>
 8010176:	9b04      	ldr	r3, [sp, #16]
 8010178:	3301      	adds	r3, #1
 801017a:	9304      	str	r3, [sp, #16]
 801017c:	9b05      	ldr	r3, [sp, #20]
 801017e:	3301      	adds	r3, #1
 8010180:	9305      	str	r3, [sp, #20]
 8010182:	f04f 0801 	mov.w	r8, #1
 8010186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010188:	2b00      	cmp	r3, #0
 801018a:	f47f af6a 	bne.w	8010062 <_dtoa_r+0x7ca>
 801018e:	2001      	movs	r0, #1
 8010190:	e76f      	b.n	8010072 <_dtoa_r+0x7da>
 8010192:	f04f 0800 	mov.w	r8, #0
 8010196:	e7f6      	b.n	8010186 <_dtoa_r+0x8ee>
 8010198:	4698      	mov	r8, r3
 801019a:	e7f4      	b.n	8010186 <_dtoa_r+0x8ee>
 801019c:	f43f af7d 	beq.w	801009a <_dtoa_r+0x802>
 80101a0:	4618      	mov	r0, r3
 80101a2:	301c      	adds	r0, #28
 80101a4:	e772      	b.n	801008c <_dtoa_r+0x7f4>
 80101a6:	9b03      	ldr	r3, [sp, #12]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	dc37      	bgt.n	801021c <_dtoa_r+0x984>
 80101ac:	9b06      	ldr	r3, [sp, #24]
 80101ae:	2b02      	cmp	r3, #2
 80101b0:	dd34      	ble.n	801021c <_dtoa_r+0x984>
 80101b2:	9b03      	ldr	r3, [sp, #12]
 80101b4:	9302      	str	r3, [sp, #8]
 80101b6:	9b02      	ldr	r3, [sp, #8]
 80101b8:	b96b      	cbnz	r3, 80101d6 <_dtoa_r+0x93e>
 80101ba:	4631      	mov	r1, r6
 80101bc:	2205      	movs	r2, #5
 80101be:	4620      	mov	r0, r4
 80101c0:	f000 f9ca 	bl	8010558 <__multadd>
 80101c4:	4601      	mov	r1, r0
 80101c6:	4606      	mov	r6, r0
 80101c8:	ee18 0a10 	vmov	r0, s16
 80101cc:	f000 fbe4 	bl	8010998 <__mcmp>
 80101d0:	2800      	cmp	r0, #0
 80101d2:	f73f adbb 	bgt.w	800fd4c <_dtoa_r+0x4b4>
 80101d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101d8:	9d01      	ldr	r5, [sp, #4]
 80101da:	43db      	mvns	r3, r3
 80101dc:	9300      	str	r3, [sp, #0]
 80101de:	f04f 0800 	mov.w	r8, #0
 80101e2:	4631      	mov	r1, r6
 80101e4:	4620      	mov	r0, r4
 80101e6:	f000 f995 	bl	8010514 <_Bfree>
 80101ea:	2f00      	cmp	r7, #0
 80101ec:	f43f aea4 	beq.w	800ff38 <_dtoa_r+0x6a0>
 80101f0:	f1b8 0f00 	cmp.w	r8, #0
 80101f4:	d005      	beq.n	8010202 <_dtoa_r+0x96a>
 80101f6:	45b8      	cmp	r8, r7
 80101f8:	d003      	beq.n	8010202 <_dtoa_r+0x96a>
 80101fa:	4641      	mov	r1, r8
 80101fc:	4620      	mov	r0, r4
 80101fe:	f000 f989 	bl	8010514 <_Bfree>
 8010202:	4639      	mov	r1, r7
 8010204:	4620      	mov	r0, r4
 8010206:	f000 f985 	bl	8010514 <_Bfree>
 801020a:	e695      	b.n	800ff38 <_dtoa_r+0x6a0>
 801020c:	2600      	movs	r6, #0
 801020e:	4637      	mov	r7, r6
 8010210:	e7e1      	b.n	80101d6 <_dtoa_r+0x93e>
 8010212:	9700      	str	r7, [sp, #0]
 8010214:	4637      	mov	r7, r6
 8010216:	e599      	b.n	800fd4c <_dtoa_r+0x4b4>
 8010218:	40240000 	.word	0x40240000
 801021c:	9b08      	ldr	r3, [sp, #32]
 801021e:	2b00      	cmp	r3, #0
 8010220:	f000 80ca 	beq.w	80103b8 <_dtoa_r+0xb20>
 8010224:	9b03      	ldr	r3, [sp, #12]
 8010226:	9302      	str	r3, [sp, #8]
 8010228:	2d00      	cmp	r5, #0
 801022a:	dd05      	ble.n	8010238 <_dtoa_r+0x9a0>
 801022c:	4639      	mov	r1, r7
 801022e:	462a      	mov	r2, r5
 8010230:	4620      	mov	r0, r4
 8010232:	f000 fb41 	bl	80108b8 <__lshift>
 8010236:	4607      	mov	r7, r0
 8010238:	f1b8 0f00 	cmp.w	r8, #0
 801023c:	d05b      	beq.n	80102f6 <_dtoa_r+0xa5e>
 801023e:	6879      	ldr	r1, [r7, #4]
 8010240:	4620      	mov	r0, r4
 8010242:	f000 f927 	bl	8010494 <_Balloc>
 8010246:	4605      	mov	r5, r0
 8010248:	b928      	cbnz	r0, 8010256 <_dtoa_r+0x9be>
 801024a:	4b87      	ldr	r3, [pc, #540]	; (8010468 <_dtoa_r+0xbd0>)
 801024c:	4602      	mov	r2, r0
 801024e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010252:	f7ff bb3b 	b.w	800f8cc <_dtoa_r+0x34>
 8010256:	693a      	ldr	r2, [r7, #16]
 8010258:	3202      	adds	r2, #2
 801025a:	0092      	lsls	r2, r2, #2
 801025c:	f107 010c 	add.w	r1, r7, #12
 8010260:	300c      	adds	r0, #12
 8010262:	f7fe fcf5 	bl	800ec50 <memcpy>
 8010266:	2201      	movs	r2, #1
 8010268:	4629      	mov	r1, r5
 801026a:	4620      	mov	r0, r4
 801026c:	f000 fb24 	bl	80108b8 <__lshift>
 8010270:	9b01      	ldr	r3, [sp, #4]
 8010272:	f103 0901 	add.w	r9, r3, #1
 8010276:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801027a:	4413      	add	r3, r2
 801027c:	9305      	str	r3, [sp, #20]
 801027e:	f00a 0301 	and.w	r3, sl, #1
 8010282:	46b8      	mov	r8, r7
 8010284:	9304      	str	r3, [sp, #16]
 8010286:	4607      	mov	r7, r0
 8010288:	4631      	mov	r1, r6
 801028a:	ee18 0a10 	vmov	r0, s16
 801028e:	f7ff fa77 	bl	800f780 <quorem>
 8010292:	4641      	mov	r1, r8
 8010294:	9002      	str	r0, [sp, #8]
 8010296:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801029a:	ee18 0a10 	vmov	r0, s16
 801029e:	f000 fb7b 	bl	8010998 <__mcmp>
 80102a2:	463a      	mov	r2, r7
 80102a4:	9003      	str	r0, [sp, #12]
 80102a6:	4631      	mov	r1, r6
 80102a8:	4620      	mov	r0, r4
 80102aa:	f000 fb91 	bl	80109d0 <__mdiff>
 80102ae:	68c2      	ldr	r2, [r0, #12]
 80102b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80102b4:	4605      	mov	r5, r0
 80102b6:	bb02      	cbnz	r2, 80102fa <_dtoa_r+0xa62>
 80102b8:	4601      	mov	r1, r0
 80102ba:	ee18 0a10 	vmov	r0, s16
 80102be:	f000 fb6b 	bl	8010998 <__mcmp>
 80102c2:	4602      	mov	r2, r0
 80102c4:	4629      	mov	r1, r5
 80102c6:	4620      	mov	r0, r4
 80102c8:	9207      	str	r2, [sp, #28]
 80102ca:	f000 f923 	bl	8010514 <_Bfree>
 80102ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80102d2:	ea43 0102 	orr.w	r1, r3, r2
 80102d6:	9b04      	ldr	r3, [sp, #16]
 80102d8:	430b      	orrs	r3, r1
 80102da:	464d      	mov	r5, r9
 80102dc:	d10f      	bne.n	80102fe <_dtoa_r+0xa66>
 80102de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80102e2:	d02a      	beq.n	801033a <_dtoa_r+0xaa2>
 80102e4:	9b03      	ldr	r3, [sp, #12]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	dd02      	ble.n	80102f0 <_dtoa_r+0xa58>
 80102ea:	9b02      	ldr	r3, [sp, #8]
 80102ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80102f0:	f88b a000 	strb.w	sl, [fp]
 80102f4:	e775      	b.n	80101e2 <_dtoa_r+0x94a>
 80102f6:	4638      	mov	r0, r7
 80102f8:	e7ba      	b.n	8010270 <_dtoa_r+0x9d8>
 80102fa:	2201      	movs	r2, #1
 80102fc:	e7e2      	b.n	80102c4 <_dtoa_r+0xa2c>
 80102fe:	9b03      	ldr	r3, [sp, #12]
 8010300:	2b00      	cmp	r3, #0
 8010302:	db04      	blt.n	801030e <_dtoa_r+0xa76>
 8010304:	9906      	ldr	r1, [sp, #24]
 8010306:	430b      	orrs	r3, r1
 8010308:	9904      	ldr	r1, [sp, #16]
 801030a:	430b      	orrs	r3, r1
 801030c:	d122      	bne.n	8010354 <_dtoa_r+0xabc>
 801030e:	2a00      	cmp	r2, #0
 8010310:	ddee      	ble.n	80102f0 <_dtoa_r+0xa58>
 8010312:	ee18 1a10 	vmov	r1, s16
 8010316:	2201      	movs	r2, #1
 8010318:	4620      	mov	r0, r4
 801031a:	f000 facd 	bl	80108b8 <__lshift>
 801031e:	4631      	mov	r1, r6
 8010320:	ee08 0a10 	vmov	s16, r0
 8010324:	f000 fb38 	bl	8010998 <__mcmp>
 8010328:	2800      	cmp	r0, #0
 801032a:	dc03      	bgt.n	8010334 <_dtoa_r+0xa9c>
 801032c:	d1e0      	bne.n	80102f0 <_dtoa_r+0xa58>
 801032e:	f01a 0f01 	tst.w	sl, #1
 8010332:	d0dd      	beq.n	80102f0 <_dtoa_r+0xa58>
 8010334:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010338:	d1d7      	bne.n	80102ea <_dtoa_r+0xa52>
 801033a:	2339      	movs	r3, #57	; 0x39
 801033c:	f88b 3000 	strb.w	r3, [fp]
 8010340:	462b      	mov	r3, r5
 8010342:	461d      	mov	r5, r3
 8010344:	3b01      	subs	r3, #1
 8010346:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801034a:	2a39      	cmp	r2, #57	; 0x39
 801034c:	d071      	beq.n	8010432 <_dtoa_r+0xb9a>
 801034e:	3201      	adds	r2, #1
 8010350:	701a      	strb	r2, [r3, #0]
 8010352:	e746      	b.n	80101e2 <_dtoa_r+0x94a>
 8010354:	2a00      	cmp	r2, #0
 8010356:	dd07      	ble.n	8010368 <_dtoa_r+0xad0>
 8010358:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801035c:	d0ed      	beq.n	801033a <_dtoa_r+0xaa2>
 801035e:	f10a 0301 	add.w	r3, sl, #1
 8010362:	f88b 3000 	strb.w	r3, [fp]
 8010366:	e73c      	b.n	80101e2 <_dtoa_r+0x94a>
 8010368:	9b05      	ldr	r3, [sp, #20]
 801036a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801036e:	4599      	cmp	r9, r3
 8010370:	d047      	beq.n	8010402 <_dtoa_r+0xb6a>
 8010372:	ee18 1a10 	vmov	r1, s16
 8010376:	2300      	movs	r3, #0
 8010378:	220a      	movs	r2, #10
 801037a:	4620      	mov	r0, r4
 801037c:	f000 f8ec 	bl	8010558 <__multadd>
 8010380:	45b8      	cmp	r8, r7
 8010382:	ee08 0a10 	vmov	s16, r0
 8010386:	f04f 0300 	mov.w	r3, #0
 801038a:	f04f 020a 	mov.w	r2, #10
 801038e:	4641      	mov	r1, r8
 8010390:	4620      	mov	r0, r4
 8010392:	d106      	bne.n	80103a2 <_dtoa_r+0xb0a>
 8010394:	f000 f8e0 	bl	8010558 <__multadd>
 8010398:	4680      	mov	r8, r0
 801039a:	4607      	mov	r7, r0
 801039c:	f109 0901 	add.w	r9, r9, #1
 80103a0:	e772      	b.n	8010288 <_dtoa_r+0x9f0>
 80103a2:	f000 f8d9 	bl	8010558 <__multadd>
 80103a6:	4639      	mov	r1, r7
 80103a8:	4680      	mov	r8, r0
 80103aa:	2300      	movs	r3, #0
 80103ac:	220a      	movs	r2, #10
 80103ae:	4620      	mov	r0, r4
 80103b0:	f000 f8d2 	bl	8010558 <__multadd>
 80103b4:	4607      	mov	r7, r0
 80103b6:	e7f1      	b.n	801039c <_dtoa_r+0xb04>
 80103b8:	9b03      	ldr	r3, [sp, #12]
 80103ba:	9302      	str	r3, [sp, #8]
 80103bc:	9d01      	ldr	r5, [sp, #4]
 80103be:	ee18 0a10 	vmov	r0, s16
 80103c2:	4631      	mov	r1, r6
 80103c4:	f7ff f9dc 	bl	800f780 <quorem>
 80103c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80103cc:	9b01      	ldr	r3, [sp, #4]
 80103ce:	f805 ab01 	strb.w	sl, [r5], #1
 80103d2:	1aea      	subs	r2, r5, r3
 80103d4:	9b02      	ldr	r3, [sp, #8]
 80103d6:	4293      	cmp	r3, r2
 80103d8:	dd09      	ble.n	80103ee <_dtoa_r+0xb56>
 80103da:	ee18 1a10 	vmov	r1, s16
 80103de:	2300      	movs	r3, #0
 80103e0:	220a      	movs	r2, #10
 80103e2:	4620      	mov	r0, r4
 80103e4:	f000 f8b8 	bl	8010558 <__multadd>
 80103e8:	ee08 0a10 	vmov	s16, r0
 80103ec:	e7e7      	b.n	80103be <_dtoa_r+0xb26>
 80103ee:	9b02      	ldr	r3, [sp, #8]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	bfc8      	it	gt
 80103f4:	461d      	movgt	r5, r3
 80103f6:	9b01      	ldr	r3, [sp, #4]
 80103f8:	bfd8      	it	le
 80103fa:	2501      	movle	r5, #1
 80103fc:	441d      	add	r5, r3
 80103fe:	f04f 0800 	mov.w	r8, #0
 8010402:	ee18 1a10 	vmov	r1, s16
 8010406:	2201      	movs	r2, #1
 8010408:	4620      	mov	r0, r4
 801040a:	f000 fa55 	bl	80108b8 <__lshift>
 801040e:	4631      	mov	r1, r6
 8010410:	ee08 0a10 	vmov	s16, r0
 8010414:	f000 fac0 	bl	8010998 <__mcmp>
 8010418:	2800      	cmp	r0, #0
 801041a:	dc91      	bgt.n	8010340 <_dtoa_r+0xaa8>
 801041c:	d102      	bne.n	8010424 <_dtoa_r+0xb8c>
 801041e:	f01a 0f01 	tst.w	sl, #1
 8010422:	d18d      	bne.n	8010340 <_dtoa_r+0xaa8>
 8010424:	462b      	mov	r3, r5
 8010426:	461d      	mov	r5, r3
 8010428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801042c:	2a30      	cmp	r2, #48	; 0x30
 801042e:	d0fa      	beq.n	8010426 <_dtoa_r+0xb8e>
 8010430:	e6d7      	b.n	80101e2 <_dtoa_r+0x94a>
 8010432:	9a01      	ldr	r2, [sp, #4]
 8010434:	429a      	cmp	r2, r3
 8010436:	d184      	bne.n	8010342 <_dtoa_r+0xaaa>
 8010438:	9b00      	ldr	r3, [sp, #0]
 801043a:	3301      	adds	r3, #1
 801043c:	9300      	str	r3, [sp, #0]
 801043e:	2331      	movs	r3, #49	; 0x31
 8010440:	7013      	strb	r3, [r2, #0]
 8010442:	e6ce      	b.n	80101e2 <_dtoa_r+0x94a>
 8010444:	4b09      	ldr	r3, [pc, #36]	; (801046c <_dtoa_r+0xbd4>)
 8010446:	f7ff ba95 	b.w	800f974 <_dtoa_r+0xdc>
 801044a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801044c:	2b00      	cmp	r3, #0
 801044e:	f47f aa6e 	bne.w	800f92e <_dtoa_r+0x96>
 8010452:	4b07      	ldr	r3, [pc, #28]	; (8010470 <_dtoa_r+0xbd8>)
 8010454:	f7ff ba8e 	b.w	800f974 <_dtoa_r+0xdc>
 8010458:	9b02      	ldr	r3, [sp, #8]
 801045a:	2b00      	cmp	r3, #0
 801045c:	dcae      	bgt.n	80103bc <_dtoa_r+0xb24>
 801045e:	9b06      	ldr	r3, [sp, #24]
 8010460:	2b02      	cmp	r3, #2
 8010462:	f73f aea8 	bgt.w	80101b6 <_dtoa_r+0x91e>
 8010466:	e7a9      	b.n	80103bc <_dtoa_r+0xb24>
 8010468:	0806d7a7 	.word	0x0806d7a7
 801046c:	0806d704 	.word	0x0806d704
 8010470:	0806d728 	.word	0x0806d728

08010474 <_localeconv_r>:
 8010474:	4800      	ldr	r0, [pc, #0]	; (8010478 <_localeconv_r+0x4>)
 8010476:	4770      	bx	lr
 8010478:	20000a78 	.word	0x20000a78

0801047c <__malloc_lock>:
 801047c:	4801      	ldr	r0, [pc, #4]	; (8010484 <__malloc_lock+0x8>)
 801047e:	f000 bd5e 	b.w	8010f3e <__retarget_lock_acquire_recursive>
 8010482:	bf00      	nop
 8010484:	2000a014 	.word	0x2000a014

08010488 <__malloc_unlock>:
 8010488:	4801      	ldr	r0, [pc, #4]	; (8010490 <__malloc_unlock+0x8>)
 801048a:	f000 bd59 	b.w	8010f40 <__retarget_lock_release_recursive>
 801048e:	bf00      	nop
 8010490:	2000a014 	.word	0x2000a014

08010494 <_Balloc>:
 8010494:	b570      	push	{r4, r5, r6, lr}
 8010496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010498:	4604      	mov	r4, r0
 801049a:	460d      	mov	r5, r1
 801049c:	b976      	cbnz	r6, 80104bc <_Balloc+0x28>
 801049e:	2010      	movs	r0, #16
 80104a0:	f7fe fbc6 	bl	800ec30 <malloc>
 80104a4:	4602      	mov	r2, r0
 80104a6:	6260      	str	r0, [r4, #36]	; 0x24
 80104a8:	b920      	cbnz	r0, 80104b4 <_Balloc+0x20>
 80104aa:	4b18      	ldr	r3, [pc, #96]	; (801050c <_Balloc+0x78>)
 80104ac:	4818      	ldr	r0, [pc, #96]	; (8010510 <_Balloc+0x7c>)
 80104ae:	2166      	movs	r1, #102	; 0x66
 80104b0:	f000 fd14 	bl	8010edc <__assert_func>
 80104b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104b8:	6006      	str	r6, [r0, #0]
 80104ba:	60c6      	str	r6, [r0, #12]
 80104bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80104be:	68f3      	ldr	r3, [r6, #12]
 80104c0:	b183      	cbz	r3, 80104e4 <_Balloc+0x50>
 80104c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80104ca:	b9b8      	cbnz	r0, 80104fc <_Balloc+0x68>
 80104cc:	2101      	movs	r1, #1
 80104ce:	fa01 f605 	lsl.w	r6, r1, r5
 80104d2:	1d72      	adds	r2, r6, #5
 80104d4:	0092      	lsls	r2, r2, #2
 80104d6:	4620      	mov	r0, r4
 80104d8:	f000 fb60 	bl	8010b9c <_calloc_r>
 80104dc:	b160      	cbz	r0, 80104f8 <_Balloc+0x64>
 80104de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80104e2:	e00e      	b.n	8010502 <_Balloc+0x6e>
 80104e4:	2221      	movs	r2, #33	; 0x21
 80104e6:	2104      	movs	r1, #4
 80104e8:	4620      	mov	r0, r4
 80104ea:	f000 fb57 	bl	8010b9c <_calloc_r>
 80104ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104f0:	60f0      	str	r0, [r6, #12]
 80104f2:	68db      	ldr	r3, [r3, #12]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d1e4      	bne.n	80104c2 <_Balloc+0x2e>
 80104f8:	2000      	movs	r0, #0
 80104fa:	bd70      	pop	{r4, r5, r6, pc}
 80104fc:	6802      	ldr	r2, [r0, #0]
 80104fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010502:	2300      	movs	r3, #0
 8010504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010508:	e7f7      	b.n	80104fa <_Balloc+0x66>
 801050a:	bf00      	nop
 801050c:	0806d735 	.word	0x0806d735
 8010510:	0806d7b8 	.word	0x0806d7b8

08010514 <_Bfree>:
 8010514:	b570      	push	{r4, r5, r6, lr}
 8010516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010518:	4605      	mov	r5, r0
 801051a:	460c      	mov	r4, r1
 801051c:	b976      	cbnz	r6, 801053c <_Bfree+0x28>
 801051e:	2010      	movs	r0, #16
 8010520:	f7fe fb86 	bl	800ec30 <malloc>
 8010524:	4602      	mov	r2, r0
 8010526:	6268      	str	r0, [r5, #36]	; 0x24
 8010528:	b920      	cbnz	r0, 8010534 <_Bfree+0x20>
 801052a:	4b09      	ldr	r3, [pc, #36]	; (8010550 <_Bfree+0x3c>)
 801052c:	4809      	ldr	r0, [pc, #36]	; (8010554 <_Bfree+0x40>)
 801052e:	218a      	movs	r1, #138	; 0x8a
 8010530:	f000 fcd4 	bl	8010edc <__assert_func>
 8010534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010538:	6006      	str	r6, [r0, #0]
 801053a:	60c6      	str	r6, [r0, #12]
 801053c:	b13c      	cbz	r4, 801054e <_Bfree+0x3a>
 801053e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010540:	6862      	ldr	r2, [r4, #4]
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010548:	6021      	str	r1, [r4, #0]
 801054a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801054e:	bd70      	pop	{r4, r5, r6, pc}
 8010550:	0806d735 	.word	0x0806d735
 8010554:	0806d7b8 	.word	0x0806d7b8

08010558 <__multadd>:
 8010558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801055c:	690d      	ldr	r5, [r1, #16]
 801055e:	4607      	mov	r7, r0
 8010560:	460c      	mov	r4, r1
 8010562:	461e      	mov	r6, r3
 8010564:	f101 0c14 	add.w	ip, r1, #20
 8010568:	2000      	movs	r0, #0
 801056a:	f8dc 3000 	ldr.w	r3, [ip]
 801056e:	b299      	uxth	r1, r3
 8010570:	fb02 6101 	mla	r1, r2, r1, r6
 8010574:	0c1e      	lsrs	r6, r3, #16
 8010576:	0c0b      	lsrs	r3, r1, #16
 8010578:	fb02 3306 	mla	r3, r2, r6, r3
 801057c:	b289      	uxth	r1, r1
 801057e:	3001      	adds	r0, #1
 8010580:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010584:	4285      	cmp	r5, r0
 8010586:	f84c 1b04 	str.w	r1, [ip], #4
 801058a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801058e:	dcec      	bgt.n	801056a <__multadd+0x12>
 8010590:	b30e      	cbz	r6, 80105d6 <__multadd+0x7e>
 8010592:	68a3      	ldr	r3, [r4, #8]
 8010594:	42ab      	cmp	r3, r5
 8010596:	dc19      	bgt.n	80105cc <__multadd+0x74>
 8010598:	6861      	ldr	r1, [r4, #4]
 801059a:	4638      	mov	r0, r7
 801059c:	3101      	adds	r1, #1
 801059e:	f7ff ff79 	bl	8010494 <_Balloc>
 80105a2:	4680      	mov	r8, r0
 80105a4:	b928      	cbnz	r0, 80105b2 <__multadd+0x5a>
 80105a6:	4602      	mov	r2, r0
 80105a8:	4b0c      	ldr	r3, [pc, #48]	; (80105dc <__multadd+0x84>)
 80105aa:	480d      	ldr	r0, [pc, #52]	; (80105e0 <__multadd+0x88>)
 80105ac:	21b5      	movs	r1, #181	; 0xb5
 80105ae:	f000 fc95 	bl	8010edc <__assert_func>
 80105b2:	6922      	ldr	r2, [r4, #16]
 80105b4:	3202      	adds	r2, #2
 80105b6:	f104 010c 	add.w	r1, r4, #12
 80105ba:	0092      	lsls	r2, r2, #2
 80105bc:	300c      	adds	r0, #12
 80105be:	f7fe fb47 	bl	800ec50 <memcpy>
 80105c2:	4621      	mov	r1, r4
 80105c4:	4638      	mov	r0, r7
 80105c6:	f7ff ffa5 	bl	8010514 <_Bfree>
 80105ca:	4644      	mov	r4, r8
 80105cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80105d0:	3501      	adds	r5, #1
 80105d2:	615e      	str	r6, [r3, #20]
 80105d4:	6125      	str	r5, [r4, #16]
 80105d6:	4620      	mov	r0, r4
 80105d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105dc:	0806d7a7 	.word	0x0806d7a7
 80105e0:	0806d7b8 	.word	0x0806d7b8

080105e4 <__hi0bits>:
 80105e4:	0c03      	lsrs	r3, r0, #16
 80105e6:	041b      	lsls	r3, r3, #16
 80105e8:	b9d3      	cbnz	r3, 8010620 <__hi0bits+0x3c>
 80105ea:	0400      	lsls	r0, r0, #16
 80105ec:	2310      	movs	r3, #16
 80105ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80105f2:	bf04      	itt	eq
 80105f4:	0200      	lsleq	r0, r0, #8
 80105f6:	3308      	addeq	r3, #8
 80105f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80105fc:	bf04      	itt	eq
 80105fe:	0100      	lsleq	r0, r0, #4
 8010600:	3304      	addeq	r3, #4
 8010602:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010606:	bf04      	itt	eq
 8010608:	0080      	lsleq	r0, r0, #2
 801060a:	3302      	addeq	r3, #2
 801060c:	2800      	cmp	r0, #0
 801060e:	db05      	blt.n	801061c <__hi0bits+0x38>
 8010610:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010614:	f103 0301 	add.w	r3, r3, #1
 8010618:	bf08      	it	eq
 801061a:	2320      	moveq	r3, #32
 801061c:	4618      	mov	r0, r3
 801061e:	4770      	bx	lr
 8010620:	2300      	movs	r3, #0
 8010622:	e7e4      	b.n	80105ee <__hi0bits+0xa>

08010624 <__lo0bits>:
 8010624:	6803      	ldr	r3, [r0, #0]
 8010626:	f013 0207 	ands.w	r2, r3, #7
 801062a:	4601      	mov	r1, r0
 801062c:	d00b      	beq.n	8010646 <__lo0bits+0x22>
 801062e:	07da      	lsls	r2, r3, #31
 8010630:	d423      	bmi.n	801067a <__lo0bits+0x56>
 8010632:	0798      	lsls	r0, r3, #30
 8010634:	bf49      	itett	mi
 8010636:	085b      	lsrmi	r3, r3, #1
 8010638:	089b      	lsrpl	r3, r3, #2
 801063a:	2001      	movmi	r0, #1
 801063c:	600b      	strmi	r3, [r1, #0]
 801063e:	bf5c      	itt	pl
 8010640:	600b      	strpl	r3, [r1, #0]
 8010642:	2002      	movpl	r0, #2
 8010644:	4770      	bx	lr
 8010646:	b298      	uxth	r0, r3
 8010648:	b9a8      	cbnz	r0, 8010676 <__lo0bits+0x52>
 801064a:	0c1b      	lsrs	r3, r3, #16
 801064c:	2010      	movs	r0, #16
 801064e:	b2da      	uxtb	r2, r3
 8010650:	b90a      	cbnz	r2, 8010656 <__lo0bits+0x32>
 8010652:	3008      	adds	r0, #8
 8010654:	0a1b      	lsrs	r3, r3, #8
 8010656:	071a      	lsls	r2, r3, #28
 8010658:	bf04      	itt	eq
 801065a:	091b      	lsreq	r3, r3, #4
 801065c:	3004      	addeq	r0, #4
 801065e:	079a      	lsls	r2, r3, #30
 8010660:	bf04      	itt	eq
 8010662:	089b      	lsreq	r3, r3, #2
 8010664:	3002      	addeq	r0, #2
 8010666:	07da      	lsls	r2, r3, #31
 8010668:	d403      	bmi.n	8010672 <__lo0bits+0x4e>
 801066a:	085b      	lsrs	r3, r3, #1
 801066c:	f100 0001 	add.w	r0, r0, #1
 8010670:	d005      	beq.n	801067e <__lo0bits+0x5a>
 8010672:	600b      	str	r3, [r1, #0]
 8010674:	4770      	bx	lr
 8010676:	4610      	mov	r0, r2
 8010678:	e7e9      	b.n	801064e <__lo0bits+0x2a>
 801067a:	2000      	movs	r0, #0
 801067c:	4770      	bx	lr
 801067e:	2020      	movs	r0, #32
 8010680:	4770      	bx	lr
	...

08010684 <__i2b>:
 8010684:	b510      	push	{r4, lr}
 8010686:	460c      	mov	r4, r1
 8010688:	2101      	movs	r1, #1
 801068a:	f7ff ff03 	bl	8010494 <_Balloc>
 801068e:	4602      	mov	r2, r0
 8010690:	b928      	cbnz	r0, 801069e <__i2b+0x1a>
 8010692:	4b05      	ldr	r3, [pc, #20]	; (80106a8 <__i2b+0x24>)
 8010694:	4805      	ldr	r0, [pc, #20]	; (80106ac <__i2b+0x28>)
 8010696:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801069a:	f000 fc1f 	bl	8010edc <__assert_func>
 801069e:	2301      	movs	r3, #1
 80106a0:	6144      	str	r4, [r0, #20]
 80106a2:	6103      	str	r3, [r0, #16]
 80106a4:	bd10      	pop	{r4, pc}
 80106a6:	bf00      	nop
 80106a8:	0806d7a7 	.word	0x0806d7a7
 80106ac:	0806d7b8 	.word	0x0806d7b8

080106b0 <__multiply>:
 80106b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b4:	4691      	mov	r9, r2
 80106b6:	690a      	ldr	r2, [r1, #16]
 80106b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80106bc:	429a      	cmp	r2, r3
 80106be:	bfb8      	it	lt
 80106c0:	460b      	movlt	r3, r1
 80106c2:	460c      	mov	r4, r1
 80106c4:	bfbc      	itt	lt
 80106c6:	464c      	movlt	r4, r9
 80106c8:	4699      	movlt	r9, r3
 80106ca:	6927      	ldr	r7, [r4, #16]
 80106cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80106d0:	68a3      	ldr	r3, [r4, #8]
 80106d2:	6861      	ldr	r1, [r4, #4]
 80106d4:	eb07 060a 	add.w	r6, r7, sl
 80106d8:	42b3      	cmp	r3, r6
 80106da:	b085      	sub	sp, #20
 80106dc:	bfb8      	it	lt
 80106de:	3101      	addlt	r1, #1
 80106e0:	f7ff fed8 	bl	8010494 <_Balloc>
 80106e4:	b930      	cbnz	r0, 80106f4 <__multiply+0x44>
 80106e6:	4602      	mov	r2, r0
 80106e8:	4b44      	ldr	r3, [pc, #272]	; (80107fc <__multiply+0x14c>)
 80106ea:	4845      	ldr	r0, [pc, #276]	; (8010800 <__multiply+0x150>)
 80106ec:	f240 115d 	movw	r1, #349	; 0x15d
 80106f0:	f000 fbf4 	bl	8010edc <__assert_func>
 80106f4:	f100 0514 	add.w	r5, r0, #20
 80106f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80106fc:	462b      	mov	r3, r5
 80106fe:	2200      	movs	r2, #0
 8010700:	4543      	cmp	r3, r8
 8010702:	d321      	bcc.n	8010748 <__multiply+0x98>
 8010704:	f104 0314 	add.w	r3, r4, #20
 8010708:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801070c:	f109 0314 	add.w	r3, r9, #20
 8010710:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010714:	9202      	str	r2, [sp, #8]
 8010716:	1b3a      	subs	r2, r7, r4
 8010718:	3a15      	subs	r2, #21
 801071a:	f022 0203 	bic.w	r2, r2, #3
 801071e:	3204      	adds	r2, #4
 8010720:	f104 0115 	add.w	r1, r4, #21
 8010724:	428f      	cmp	r7, r1
 8010726:	bf38      	it	cc
 8010728:	2204      	movcc	r2, #4
 801072a:	9201      	str	r2, [sp, #4]
 801072c:	9a02      	ldr	r2, [sp, #8]
 801072e:	9303      	str	r3, [sp, #12]
 8010730:	429a      	cmp	r2, r3
 8010732:	d80c      	bhi.n	801074e <__multiply+0x9e>
 8010734:	2e00      	cmp	r6, #0
 8010736:	dd03      	ble.n	8010740 <__multiply+0x90>
 8010738:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801073c:	2b00      	cmp	r3, #0
 801073e:	d05a      	beq.n	80107f6 <__multiply+0x146>
 8010740:	6106      	str	r6, [r0, #16]
 8010742:	b005      	add	sp, #20
 8010744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010748:	f843 2b04 	str.w	r2, [r3], #4
 801074c:	e7d8      	b.n	8010700 <__multiply+0x50>
 801074e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010752:	f1ba 0f00 	cmp.w	sl, #0
 8010756:	d024      	beq.n	80107a2 <__multiply+0xf2>
 8010758:	f104 0e14 	add.w	lr, r4, #20
 801075c:	46a9      	mov	r9, r5
 801075e:	f04f 0c00 	mov.w	ip, #0
 8010762:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010766:	f8d9 1000 	ldr.w	r1, [r9]
 801076a:	fa1f fb82 	uxth.w	fp, r2
 801076e:	b289      	uxth	r1, r1
 8010770:	fb0a 110b 	mla	r1, sl, fp, r1
 8010774:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010778:	f8d9 2000 	ldr.w	r2, [r9]
 801077c:	4461      	add	r1, ip
 801077e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010782:	fb0a c20b 	mla	r2, sl, fp, ip
 8010786:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801078a:	b289      	uxth	r1, r1
 801078c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010790:	4577      	cmp	r7, lr
 8010792:	f849 1b04 	str.w	r1, [r9], #4
 8010796:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801079a:	d8e2      	bhi.n	8010762 <__multiply+0xb2>
 801079c:	9a01      	ldr	r2, [sp, #4]
 801079e:	f845 c002 	str.w	ip, [r5, r2]
 80107a2:	9a03      	ldr	r2, [sp, #12]
 80107a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80107a8:	3304      	adds	r3, #4
 80107aa:	f1b9 0f00 	cmp.w	r9, #0
 80107ae:	d020      	beq.n	80107f2 <__multiply+0x142>
 80107b0:	6829      	ldr	r1, [r5, #0]
 80107b2:	f104 0c14 	add.w	ip, r4, #20
 80107b6:	46ae      	mov	lr, r5
 80107b8:	f04f 0a00 	mov.w	sl, #0
 80107bc:	f8bc b000 	ldrh.w	fp, [ip]
 80107c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80107c4:	fb09 220b 	mla	r2, r9, fp, r2
 80107c8:	4492      	add	sl, r2
 80107ca:	b289      	uxth	r1, r1
 80107cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80107d0:	f84e 1b04 	str.w	r1, [lr], #4
 80107d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80107d8:	f8be 1000 	ldrh.w	r1, [lr]
 80107dc:	0c12      	lsrs	r2, r2, #16
 80107de:	fb09 1102 	mla	r1, r9, r2, r1
 80107e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80107e6:	4567      	cmp	r7, ip
 80107e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80107ec:	d8e6      	bhi.n	80107bc <__multiply+0x10c>
 80107ee:	9a01      	ldr	r2, [sp, #4]
 80107f0:	50a9      	str	r1, [r5, r2]
 80107f2:	3504      	adds	r5, #4
 80107f4:	e79a      	b.n	801072c <__multiply+0x7c>
 80107f6:	3e01      	subs	r6, #1
 80107f8:	e79c      	b.n	8010734 <__multiply+0x84>
 80107fa:	bf00      	nop
 80107fc:	0806d7a7 	.word	0x0806d7a7
 8010800:	0806d7b8 	.word	0x0806d7b8

08010804 <__pow5mult>:
 8010804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010808:	4615      	mov	r5, r2
 801080a:	f012 0203 	ands.w	r2, r2, #3
 801080e:	4606      	mov	r6, r0
 8010810:	460f      	mov	r7, r1
 8010812:	d007      	beq.n	8010824 <__pow5mult+0x20>
 8010814:	4c25      	ldr	r4, [pc, #148]	; (80108ac <__pow5mult+0xa8>)
 8010816:	3a01      	subs	r2, #1
 8010818:	2300      	movs	r3, #0
 801081a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801081e:	f7ff fe9b 	bl	8010558 <__multadd>
 8010822:	4607      	mov	r7, r0
 8010824:	10ad      	asrs	r5, r5, #2
 8010826:	d03d      	beq.n	80108a4 <__pow5mult+0xa0>
 8010828:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801082a:	b97c      	cbnz	r4, 801084c <__pow5mult+0x48>
 801082c:	2010      	movs	r0, #16
 801082e:	f7fe f9ff 	bl	800ec30 <malloc>
 8010832:	4602      	mov	r2, r0
 8010834:	6270      	str	r0, [r6, #36]	; 0x24
 8010836:	b928      	cbnz	r0, 8010844 <__pow5mult+0x40>
 8010838:	4b1d      	ldr	r3, [pc, #116]	; (80108b0 <__pow5mult+0xac>)
 801083a:	481e      	ldr	r0, [pc, #120]	; (80108b4 <__pow5mult+0xb0>)
 801083c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010840:	f000 fb4c 	bl	8010edc <__assert_func>
 8010844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010848:	6004      	str	r4, [r0, #0]
 801084a:	60c4      	str	r4, [r0, #12]
 801084c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010854:	b94c      	cbnz	r4, 801086a <__pow5mult+0x66>
 8010856:	f240 2171 	movw	r1, #625	; 0x271
 801085a:	4630      	mov	r0, r6
 801085c:	f7ff ff12 	bl	8010684 <__i2b>
 8010860:	2300      	movs	r3, #0
 8010862:	f8c8 0008 	str.w	r0, [r8, #8]
 8010866:	4604      	mov	r4, r0
 8010868:	6003      	str	r3, [r0, #0]
 801086a:	f04f 0900 	mov.w	r9, #0
 801086e:	07eb      	lsls	r3, r5, #31
 8010870:	d50a      	bpl.n	8010888 <__pow5mult+0x84>
 8010872:	4639      	mov	r1, r7
 8010874:	4622      	mov	r2, r4
 8010876:	4630      	mov	r0, r6
 8010878:	f7ff ff1a 	bl	80106b0 <__multiply>
 801087c:	4639      	mov	r1, r7
 801087e:	4680      	mov	r8, r0
 8010880:	4630      	mov	r0, r6
 8010882:	f7ff fe47 	bl	8010514 <_Bfree>
 8010886:	4647      	mov	r7, r8
 8010888:	106d      	asrs	r5, r5, #1
 801088a:	d00b      	beq.n	80108a4 <__pow5mult+0xa0>
 801088c:	6820      	ldr	r0, [r4, #0]
 801088e:	b938      	cbnz	r0, 80108a0 <__pow5mult+0x9c>
 8010890:	4622      	mov	r2, r4
 8010892:	4621      	mov	r1, r4
 8010894:	4630      	mov	r0, r6
 8010896:	f7ff ff0b 	bl	80106b0 <__multiply>
 801089a:	6020      	str	r0, [r4, #0]
 801089c:	f8c0 9000 	str.w	r9, [r0]
 80108a0:	4604      	mov	r4, r0
 80108a2:	e7e4      	b.n	801086e <__pow5mult+0x6a>
 80108a4:	4638      	mov	r0, r7
 80108a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108aa:	bf00      	nop
 80108ac:	0806d908 	.word	0x0806d908
 80108b0:	0806d735 	.word	0x0806d735
 80108b4:	0806d7b8 	.word	0x0806d7b8

080108b8 <__lshift>:
 80108b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108bc:	460c      	mov	r4, r1
 80108be:	6849      	ldr	r1, [r1, #4]
 80108c0:	6923      	ldr	r3, [r4, #16]
 80108c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80108c6:	68a3      	ldr	r3, [r4, #8]
 80108c8:	4607      	mov	r7, r0
 80108ca:	4691      	mov	r9, r2
 80108cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80108d0:	f108 0601 	add.w	r6, r8, #1
 80108d4:	42b3      	cmp	r3, r6
 80108d6:	db0b      	blt.n	80108f0 <__lshift+0x38>
 80108d8:	4638      	mov	r0, r7
 80108da:	f7ff fddb 	bl	8010494 <_Balloc>
 80108de:	4605      	mov	r5, r0
 80108e0:	b948      	cbnz	r0, 80108f6 <__lshift+0x3e>
 80108e2:	4602      	mov	r2, r0
 80108e4:	4b2a      	ldr	r3, [pc, #168]	; (8010990 <__lshift+0xd8>)
 80108e6:	482b      	ldr	r0, [pc, #172]	; (8010994 <__lshift+0xdc>)
 80108e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80108ec:	f000 faf6 	bl	8010edc <__assert_func>
 80108f0:	3101      	adds	r1, #1
 80108f2:	005b      	lsls	r3, r3, #1
 80108f4:	e7ee      	b.n	80108d4 <__lshift+0x1c>
 80108f6:	2300      	movs	r3, #0
 80108f8:	f100 0114 	add.w	r1, r0, #20
 80108fc:	f100 0210 	add.w	r2, r0, #16
 8010900:	4618      	mov	r0, r3
 8010902:	4553      	cmp	r3, sl
 8010904:	db37      	blt.n	8010976 <__lshift+0xbe>
 8010906:	6920      	ldr	r0, [r4, #16]
 8010908:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801090c:	f104 0314 	add.w	r3, r4, #20
 8010910:	f019 091f 	ands.w	r9, r9, #31
 8010914:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010918:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801091c:	d02f      	beq.n	801097e <__lshift+0xc6>
 801091e:	f1c9 0e20 	rsb	lr, r9, #32
 8010922:	468a      	mov	sl, r1
 8010924:	f04f 0c00 	mov.w	ip, #0
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	fa02 f209 	lsl.w	r2, r2, r9
 801092e:	ea42 020c 	orr.w	r2, r2, ip
 8010932:	f84a 2b04 	str.w	r2, [sl], #4
 8010936:	f853 2b04 	ldr.w	r2, [r3], #4
 801093a:	4298      	cmp	r0, r3
 801093c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010940:	d8f2      	bhi.n	8010928 <__lshift+0x70>
 8010942:	1b03      	subs	r3, r0, r4
 8010944:	3b15      	subs	r3, #21
 8010946:	f023 0303 	bic.w	r3, r3, #3
 801094a:	3304      	adds	r3, #4
 801094c:	f104 0215 	add.w	r2, r4, #21
 8010950:	4290      	cmp	r0, r2
 8010952:	bf38      	it	cc
 8010954:	2304      	movcc	r3, #4
 8010956:	f841 c003 	str.w	ip, [r1, r3]
 801095a:	f1bc 0f00 	cmp.w	ip, #0
 801095e:	d001      	beq.n	8010964 <__lshift+0xac>
 8010960:	f108 0602 	add.w	r6, r8, #2
 8010964:	3e01      	subs	r6, #1
 8010966:	4638      	mov	r0, r7
 8010968:	612e      	str	r6, [r5, #16]
 801096a:	4621      	mov	r1, r4
 801096c:	f7ff fdd2 	bl	8010514 <_Bfree>
 8010970:	4628      	mov	r0, r5
 8010972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010976:	f842 0f04 	str.w	r0, [r2, #4]!
 801097a:	3301      	adds	r3, #1
 801097c:	e7c1      	b.n	8010902 <__lshift+0x4a>
 801097e:	3904      	subs	r1, #4
 8010980:	f853 2b04 	ldr.w	r2, [r3], #4
 8010984:	f841 2f04 	str.w	r2, [r1, #4]!
 8010988:	4298      	cmp	r0, r3
 801098a:	d8f9      	bhi.n	8010980 <__lshift+0xc8>
 801098c:	e7ea      	b.n	8010964 <__lshift+0xac>
 801098e:	bf00      	nop
 8010990:	0806d7a7 	.word	0x0806d7a7
 8010994:	0806d7b8 	.word	0x0806d7b8

08010998 <__mcmp>:
 8010998:	b530      	push	{r4, r5, lr}
 801099a:	6902      	ldr	r2, [r0, #16]
 801099c:	690c      	ldr	r4, [r1, #16]
 801099e:	1b12      	subs	r2, r2, r4
 80109a0:	d10e      	bne.n	80109c0 <__mcmp+0x28>
 80109a2:	f100 0314 	add.w	r3, r0, #20
 80109a6:	3114      	adds	r1, #20
 80109a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80109ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80109b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80109b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80109b8:	42a5      	cmp	r5, r4
 80109ba:	d003      	beq.n	80109c4 <__mcmp+0x2c>
 80109bc:	d305      	bcc.n	80109ca <__mcmp+0x32>
 80109be:	2201      	movs	r2, #1
 80109c0:	4610      	mov	r0, r2
 80109c2:	bd30      	pop	{r4, r5, pc}
 80109c4:	4283      	cmp	r3, r0
 80109c6:	d3f3      	bcc.n	80109b0 <__mcmp+0x18>
 80109c8:	e7fa      	b.n	80109c0 <__mcmp+0x28>
 80109ca:	f04f 32ff 	mov.w	r2, #4294967295
 80109ce:	e7f7      	b.n	80109c0 <__mcmp+0x28>

080109d0 <__mdiff>:
 80109d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d4:	460c      	mov	r4, r1
 80109d6:	4606      	mov	r6, r0
 80109d8:	4611      	mov	r1, r2
 80109da:	4620      	mov	r0, r4
 80109dc:	4690      	mov	r8, r2
 80109de:	f7ff ffdb 	bl	8010998 <__mcmp>
 80109e2:	1e05      	subs	r5, r0, #0
 80109e4:	d110      	bne.n	8010a08 <__mdiff+0x38>
 80109e6:	4629      	mov	r1, r5
 80109e8:	4630      	mov	r0, r6
 80109ea:	f7ff fd53 	bl	8010494 <_Balloc>
 80109ee:	b930      	cbnz	r0, 80109fe <__mdiff+0x2e>
 80109f0:	4b3a      	ldr	r3, [pc, #232]	; (8010adc <__mdiff+0x10c>)
 80109f2:	4602      	mov	r2, r0
 80109f4:	f240 2132 	movw	r1, #562	; 0x232
 80109f8:	4839      	ldr	r0, [pc, #228]	; (8010ae0 <__mdiff+0x110>)
 80109fa:	f000 fa6f 	bl	8010edc <__assert_func>
 80109fe:	2301      	movs	r3, #1
 8010a00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010a04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a08:	bfa4      	itt	ge
 8010a0a:	4643      	movge	r3, r8
 8010a0c:	46a0      	movge	r8, r4
 8010a0e:	4630      	mov	r0, r6
 8010a10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010a14:	bfa6      	itte	ge
 8010a16:	461c      	movge	r4, r3
 8010a18:	2500      	movge	r5, #0
 8010a1a:	2501      	movlt	r5, #1
 8010a1c:	f7ff fd3a 	bl	8010494 <_Balloc>
 8010a20:	b920      	cbnz	r0, 8010a2c <__mdiff+0x5c>
 8010a22:	4b2e      	ldr	r3, [pc, #184]	; (8010adc <__mdiff+0x10c>)
 8010a24:	4602      	mov	r2, r0
 8010a26:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010a2a:	e7e5      	b.n	80109f8 <__mdiff+0x28>
 8010a2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010a30:	6926      	ldr	r6, [r4, #16]
 8010a32:	60c5      	str	r5, [r0, #12]
 8010a34:	f104 0914 	add.w	r9, r4, #20
 8010a38:	f108 0514 	add.w	r5, r8, #20
 8010a3c:	f100 0e14 	add.w	lr, r0, #20
 8010a40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010a44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010a48:	f108 0210 	add.w	r2, r8, #16
 8010a4c:	46f2      	mov	sl, lr
 8010a4e:	2100      	movs	r1, #0
 8010a50:	f859 3b04 	ldr.w	r3, [r9], #4
 8010a54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010a58:	fa1f f883 	uxth.w	r8, r3
 8010a5c:	fa11 f18b 	uxtah	r1, r1, fp
 8010a60:	0c1b      	lsrs	r3, r3, #16
 8010a62:	eba1 0808 	sub.w	r8, r1, r8
 8010a66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010a6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010a6e:	fa1f f888 	uxth.w	r8, r8
 8010a72:	1419      	asrs	r1, r3, #16
 8010a74:	454e      	cmp	r6, r9
 8010a76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010a7a:	f84a 3b04 	str.w	r3, [sl], #4
 8010a7e:	d8e7      	bhi.n	8010a50 <__mdiff+0x80>
 8010a80:	1b33      	subs	r3, r6, r4
 8010a82:	3b15      	subs	r3, #21
 8010a84:	f023 0303 	bic.w	r3, r3, #3
 8010a88:	3304      	adds	r3, #4
 8010a8a:	3415      	adds	r4, #21
 8010a8c:	42a6      	cmp	r6, r4
 8010a8e:	bf38      	it	cc
 8010a90:	2304      	movcc	r3, #4
 8010a92:	441d      	add	r5, r3
 8010a94:	4473      	add	r3, lr
 8010a96:	469e      	mov	lr, r3
 8010a98:	462e      	mov	r6, r5
 8010a9a:	4566      	cmp	r6, ip
 8010a9c:	d30e      	bcc.n	8010abc <__mdiff+0xec>
 8010a9e:	f10c 0203 	add.w	r2, ip, #3
 8010aa2:	1b52      	subs	r2, r2, r5
 8010aa4:	f022 0203 	bic.w	r2, r2, #3
 8010aa8:	3d03      	subs	r5, #3
 8010aaa:	45ac      	cmp	ip, r5
 8010aac:	bf38      	it	cc
 8010aae:	2200      	movcc	r2, #0
 8010ab0:	441a      	add	r2, r3
 8010ab2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010ab6:	b17b      	cbz	r3, 8010ad8 <__mdiff+0x108>
 8010ab8:	6107      	str	r7, [r0, #16]
 8010aba:	e7a3      	b.n	8010a04 <__mdiff+0x34>
 8010abc:	f856 8b04 	ldr.w	r8, [r6], #4
 8010ac0:	fa11 f288 	uxtah	r2, r1, r8
 8010ac4:	1414      	asrs	r4, r2, #16
 8010ac6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010aca:	b292      	uxth	r2, r2
 8010acc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010ad0:	f84e 2b04 	str.w	r2, [lr], #4
 8010ad4:	1421      	asrs	r1, r4, #16
 8010ad6:	e7e0      	b.n	8010a9a <__mdiff+0xca>
 8010ad8:	3f01      	subs	r7, #1
 8010ada:	e7ea      	b.n	8010ab2 <__mdiff+0xe2>
 8010adc:	0806d7a7 	.word	0x0806d7a7
 8010ae0:	0806d7b8 	.word	0x0806d7b8

08010ae4 <__d2b>:
 8010ae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ae8:	4689      	mov	r9, r1
 8010aea:	2101      	movs	r1, #1
 8010aec:	ec57 6b10 	vmov	r6, r7, d0
 8010af0:	4690      	mov	r8, r2
 8010af2:	f7ff fccf 	bl	8010494 <_Balloc>
 8010af6:	4604      	mov	r4, r0
 8010af8:	b930      	cbnz	r0, 8010b08 <__d2b+0x24>
 8010afa:	4602      	mov	r2, r0
 8010afc:	4b25      	ldr	r3, [pc, #148]	; (8010b94 <__d2b+0xb0>)
 8010afe:	4826      	ldr	r0, [pc, #152]	; (8010b98 <__d2b+0xb4>)
 8010b00:	f240 310a 	movw	r1, #778	; 0x30a
 8010b04:	f000 f9ea 	bl	8010edc <__assert_func>
 8010b08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010b0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010b10:	bb35      	cbnz	r5, 8010b60 <__d2b+0x7c>
 8010b12:	2e00      	cmp	r6, #0
 8010b14:	9301      	str	r3, [sp, #4]
 8010b16:	d028      	beq.n	8010b6a <__d2b+0x86>
 8010b18:	4668      	mov	r0, sp
 8010b1a:	9600      	str	r6, [sp, #0]
 8010b1c:	f7ff fd82 	bl	8010624 <__lo0bits>
 8010b20:	9900      	ldr	r1, [sp, #0]
 8010b22:	b300      	cbz	r0, 8010b66 <__d2b+0x82>
 8010b24:	9a01      	ldr	r2, [sp, #4]
 8010b26:	f1c0 0320 	rsb	r3, r0, #32
 8010b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8010b2e:	430b      	orrs	r3, r1
 8010b30:	40c2      	lsrs	r2, r0
 8010b32:	6163      	str	r3, [r4, #20]
 8010b34:	9201      	str	r2, [sp, #4]
 8010b36:	9b01      	ldr	r3, [sp, #4]
 8010b38:	61a3      	str	r3, [r4, #24]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	bf14      	ite	ne
 8010b3e:	2202      	movne	r2, #2
 8010b40:	2201      	moveq	r2, #1
 8010b42:	6122      	str	r2, [r4, #16]
 8010b44:	b1d5      	cbz	r5, 8010b7c <__d2b+0x98>
 8010b46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010b4a:	4405      	add	r5, r0
 8010b4c:	f8c9 5000 	str.w	r5, [r9]
 8010b50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010b54:	f8c8 0000 	str.w	r0, [r8]
 8010b58:	4620      	mov	r0, r4
 8010b5a:	b003      	add	sp, #12
 8010b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b64:	e7d5      	b.n	8010b12 <__d2b+0x2e>
 8010b66:	6161      	str	r1, [r4, #20]
 8010b68:	e7e5      	b.n	8010b36 <__d2b+0x52>
 8010b6a:	a801      	add	r0, sp, #4
 8010b6c:	f7ff fd5a 	bl	8010624 <__lo0bits>
 8010b70:	9b01      	ldr	r3, [sp, #4]
 8010b72:	6163      	str	r3, [r4, #20]
 8010b74:	2201      	movs	r2, #1
 8010b76:	6122      	str	r2, [r4, #16]
 8010b78:	3020      	adds	r0, #32
 8010b7a:	e7e3      	b.n	8010b44 <__d2b+0x60>
 8010b7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010b80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010b84:	f8c9 0000 	str.w	r0, [r9]
 8010b88:	6918      	ldr	r0, [r3, #16]
 8010b8a:	f7ff fd2b 	bl	80105e4 <__hi0bits>
 8010b8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010b92:	e7df      	b.n	8010b54 <__d2b+0x70>
 8010b94:	0806d7a7 	.word	0x0806d7a7
 8010b98:	0806d7b8 	.word	0x0806d7b8

08010b9c <_calloc_r>:
 8010b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b9e:	fba1 2402 	umull	r2, r4, r1, r2
 8010ba2:	b94c      	cbnz	r4, 8010bb8 <_calloc_r+0x1c>
 8010ba4:	4611      	mov	r1, r2
 8010ba6:	9201      	str	r2, [sp, #4]
 8010ba8:	f7fe f8d4 	bl	800ed54 <_malloc_r>
 8010bac:	9a01      	ldr	r2, [sp, #4]
 8010bae:	4605      	mov	r5, r0
 8010bb0:	b930      	cbnz	r0, 8010bc0 <_calloc_r+0x24>
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	b003      	add	sp, #12
 8010bb6:	bd30      	pop	{r4, r5, pc}
 8010bb8:	220c      	movs	r2, #12
 8010bba:	6002      	str	r2, [r0, #0]
 8010bbc:	2500      	movs	r5, #0
 8010bbe:	e7f8      	b.n	8010bb2 <_calloc_r+0x16>
 8010bc0:	4621      	mov	r1, r4
 8010bc2:	f7fe f853 	bl	800ec6c <memset>
 8010bc6:	e7f4      	b.n	8010bb2 <_calloc_r+0x16>

08010bc8 <_realloc_r>:
 8010bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bcc:	4680      	mov	r8, r0
 8010bce:	4614      	mov	r4, r2
 8010bd0:	460e      	mov	r6, r1
 8010bd2:	b921      	cbnz	r1, 8010bde <_realloc_r+0x16>
 8010bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bd8:	4611      	mov	r1, r2
 8010bda:	f7fe b8bb 	b.w	800ed54 <_malloc_r>
 8010bde:	b92a      	cbnz	r2, 8010bec <_realloc_r+0x24>
 8010be0:	f7fe f84c 	bl	800ec7c <_free_r>
 8010be4:	4625      	mov	r5, r4
 8010be6:	4628      	mov	r0, r5
 8010be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bec:	f000 f9d5 	bl	8010f9a <_malloc_usable_size_r>
 8010bf0:	4284      	cmp	r4, r0
 8010bf2:	4607      	mov	r7, r0
 8010bf4:	d802      	bhi.n	8010bfc <_realloc_r+0x34>
 8010bf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010bfa:	d812      	bhi.n	8010c22 <_realloc_r+0x5a>
 8010bfc:	4621      	mov	r1, r4
 8010bfe:	4640      	mov	r0, r8
 8010c00:	f7fe f8a8 	bl	800ed54 <_malloc_r>
 8010c04:	4605      	mov	r5, r0
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d0ed      	beq.n	8010be6 <_realloc_r+0x1e>
 8010c0a:	42bc      	cmp	r4, r7
 8010c0c:	4622      	mov	r2, r4
 8010c0e:	4631      	mov	r1, r6
 8010c10:	bf28      	it	cs
 8010c12:	463a      	movcs	r2, r7
 8010c14:	f7fe f81c 	bl	800ec50 <memcpy>
 8010c18:	4631      	mov	r1, r6
 8010c1a:	4640      	mov	r0, r8
 8010c1c:	f7fe f82e 	bl	800ec7c <_free_r>
 8010c20:	e7e1      	b.n	8010be6 <_realloc_r+0x1e>
 8010c22:	4635      	mov	r5, r6
 8010c24:	e7df      	b.n	8010be6 <_realloc_r+0x1e>

08010c26 <__ssputs_r>:
 8010c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c2a:	688e      	ldr	r6, [r1, #8]
 8010c2c:	429e      	cmp	r6, r3
 8010c2e:	4682      	mov	sl, r0
 8010c30:	460c      	mov	r4, r1
 8010c32:	4690      	mov	r8, r2
 8010c34:	461f      	mov	r7, r3
 8010c36:	d838      	bhi.n	8010caa <__ssputs_r+0x84>
 8010c38:	898a      	ldrh	r2, [r1, #12]
 8010c3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010c3e:	d032      	beq.n	8010ca6 <__ssputs_r+0x80>
 8010c40:	6825      	ldr	r5, [r4, #0]
 8010c42:	6909      	ldr	r1, [r1, #16]
 8010c44:	eba5 0901 	sub.w	r9, r5, r1
 8010c48:	6965      	ldr	r5, [r4, #20]
 8010c4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c52:	3301      	adds	r3, #1
 8010c54:	444b      	add	r3, r9
 8010c56:	106d      	asrs	r5, r5, #1
 8010c58:	429d      	cmp	r5, r3
 8010c5a:	bf38      	it	cc
 8010c5c:	461d      	movcc	r5, r3
 8010c5e:	0553      	lsls	r3, r2, #21
 8010c60:	d531      	bpl.n	8010cc6 <__ssputs_r+0xa0>
 8010c62:	4629      	mov	r1, r5
 8010c64:	f7fe f876 	bl	800ed54 <_malloc_r>
 8010c68:	4606      	mov	r6, r0
 8010c6a:	b950      	cbnz	r0, 8010c82 <__ssputs_r+0x5c>
 8010c6c:	230c      	movs	r3, #12
 8010c6e:	f8ca 3000 	str.w	r3, [sl]
 8010c72:	89a3      	ldrh	r3, [r4, #12]
 8010c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c78:	81a3      	strh	r3, [r4, #12]
 8010c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c82:	6921      	ldr	r1, [r4, #16]
 8010c84:	464a      	mov	r2, r9
 8010c86:	f7fd ffe3 	bl	800ec50 <memcpy>
 8010c8a:	89a3      	ldrh	r3, [r4, #12]
 8010c8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c94:	81a3      	strh	r3, [r4, #12]
 8010c96:	6126      	str	r6, [r4, #16]
 8010c98:	6165      	str	r5, [r4, #20]
 8010c9a:	444e      	add	r6, r9
 8010c9c:	eba5 0509 	sub.w	r5, r5, r9
 8010ca0:	6026      	str	r6, [r4, #0]
 8010ca2:	60a5      	str	r5, [r4, #8]
 8010ca4:	463e      	mov	r6, r7
 8010ca6:	42be      	cmp	r6, r7
 8010ca8:	d900      	bls.n	8010cac <__ssputs_r+0x86>
 8010caa:	463e      	mov	r6, r7
 8010cac:	6820      	ldr	r0, [r4, #0]
 8010cae:	4632      	mov	r2, r6
 8010cb0:	4641      	mov	r1, r8
 8010cb2:	f000 f958 	bl	8010f66 <memmove>
 8010cb6:	68a3      	ldr	r3, [r4, #8]
 8010cb8:	1b9b      	subs	r3, r3, r6
 8010cba:	60a3      	str	r3, [r4, #8]
 8010cbc:	6823      	ldr	r3, [r4, #0]
 8010cbe:	4433      	add	r3, r6
 8010cc0:	6023      	str	r3, [r4, #0]
 8010cc2:	2000      	movs	r0, #0
 8010cc4:	e7db      	b.n	8010c7e <__ssputs_r+0x58>
 8010cc6:	462a      	mov	r2, r5
 8010cc8:	f7ff ff7e 	bl	8010bc8 <_realloc_r>
 8010ccc:	4606      	mov	r6, r0
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	d1e1      	bne.n	8010c96 <__ssputs_r+0x70>
 8010cd2:	6921      	ldr	r1, [r4, #16]
 8010cd4:	4650      	mov	r0, sl
 8010cd6:	f7fd ffd1 	bl	800ec7c <_free_r>
 8010cda:	e7c7      	b.n	8010c6c <__ssputs_r+0x46>

08010cdc <_svfiprintf_r>:
 8010cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce0:	4698      	mov	r8, r3
 8010ce2:	898b      	ldrh	r3, [r1, #12]
 8010ce4:	061b      	lsls	r3, r3, #24
 8010ce6:	b09d      	sub	sp, #116	; 0x74
 8010ce8:	4607      	mov	r7, r0
 8010cea:	460d      	mov	r5, r1
 8010cec:	4614      	mov	r4, r2
 8010cee:	d50e      	bpl.n	8010d0e <_svfiprintf_r+0x32>
 8010cf0:	690b      	ldr	r3, [r1, #16]
 8010cf2:	b963      	cbnz	r3, 8010d0e <_svfiprintf_r+0x32>
 8010cf4:	2140      	movs	r1, #64	; 0x40
 8010cf6:	f7fe f82d 	bl	800ed54 <_malloc_r>
 8010cfa:	6028      	str	r0, [r5, #0]
 8010cfc:	6128      	str	r0, [r5, #16]
 8010cfe:	b920      	cbnz	r0, 8010d0a <_svfiprintf_r+0x2e>
 8010d00:	230c      	movs	r3, #12
 8010d02:	603b      	str	r3, [r7, #0]
 8010d04:	f04f 30ff 	mov.w	r0, #4294967295
 8010d08:	e0d1      	b.n	8010eae <_svfiprintf_r+0x1d2>
 8010d0a:	2340      	movs	r3, #64	; 0x40
 8010d0c:	616b      	str	r3, [r5, #20]
 8010d0e:	2300      	movs	r3, #0
 8010d10:	9309      	str	r3, [sp, #36]	; 0x24
 8010d12:	2320      	movs	r3, #32
 8010d14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d1c:	2330      	movs	r3, #48	; 0x30
 8010d1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010ec8 <_svfiprintf_r+0x1ec>
 8010d22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d26:	f04f 0901 	mov.w	r9, #1
 8010d2a:	4623      	mov	r3, r4
 8010d2c:	469a      	mov	sl, r3
 8010d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d32:	b10a      	cbz	r2, 8010d38 <_svfiprintf_r+0x5c>
 8010d34:	2a25      	cmp	r2, #37	; 0x25
 8010d36:	d1f9      	bne.n	8010d2c <_svfiprintf_r+0x50>
 8010d38:	ebba 0b04 	subs.w	fp, sl, r4
 8010d3c:	d00b      	beq.n	8010d56 <_svfiprintf_r+0x7a>
 8010d3e:	465b      	mov	r3, fp
 8010d40:	4622      	mov	r2, r4
 8010d42:	4629      	mov	r1, r5
 8010d44:	4638      	mov	r0, r7
 8010d46:	f7ff ff6e 	bl	8010c26 <__ssputs_r>
 8010d4a:	3001      	adds	r0, #1
 8010d4c:	f000 80aa 	beq.w	8010ea4 <_svfiprintf_r+0x1c8>
 8010d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d52:	445a      	add	r2, fp
 8010d54:	9209      	str	r2, [sp, #36]	; 0x24
 8010d56:	f89a 3000 	ldrb.w	r3, [sl]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	f000 80a2 	beq.w	8010ea4 <_svfiprintf_r+0x1c8>
 8010d60:	2300      	movs	r3, #0
 8010d62:	f04f 32ff 	mov.w	r2, #4294967295
 8010d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d6a:	f10a 0a01 	add.w	sl, sl, #1
 8010d6e:	9304      	str	r3, [sp, #16]
 8010d70:	9307      	str	r3, [sp, #28]
 8010d72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d76:	931a      	str	r3, [sp, #104]	; 0x68
 8010d78:	4654      	mov	r4, sl
 8010d7a:	2205      	movs	r2, #5
 8010d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d80:	4851      	ldr	r0, [pc, #324]	; (8010ec8 <_svfiprintf_r+0x1ec>)
 8010d82:	f7ef fa4d 	bl	8000220 <memchr>
 8010d86:	9a04      	ldr	r2, [sp, #16]
 8010d88:	b9d8      	cbnz	r0, 8010dc2 <_svfiprintf_r+0xe6>
 8010d8a:	06d0      	lsls	r0, r2, #27
 8010d8c:	bf44      	itt	mi
 8010d8e:	2320      	movmi	r3, #32
 8010d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d94:	0711      	lsls	r1, r2, #28
 8010d96:	bf44      	itt	mi
 8010d98:	232b      	movmi	r3, #43	; 0x2b
 8010d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8010da2:	2b2a      	cmp	r3, #42	; 0x2a
 8010da4:	d015      	beq.n	8010dd2 <_svfiprintf_r+0xf6>
 8010da6:	9a07      	ldr	r2, [sp, #28]
 8010da8:	4654      	mov	r4, sl
 8010daa:	2000      	movs	r0, #0
 8010dac:	f04f 0c0a 	mov.w	ip, #10
 8010db0:	4621      	mov	r1, r4
 8010db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010db6:	3b30      	subs	r3, #48	; 0x30
 8010db8:	2b09      	cmp	r3, #9
 8010dba:	d94e      	bls.n	8010e5a <_svfiprintf_r+0x17e>
 8010dbc:	b1b0      	cbz	r0, 8010dec <_svfiprintf_r+0x110>
 8010dbe:	9207      	str	r2, [sp, #28]
 8010dc0:	e014      	b.n	8010dec <_svfiprintf_r+0x110>
 8010dc2:	eba0 0308 	sub.w	r3, r0, r8
 8010dc6:	fa09 f303 	lsl.w	r3, r9, r3
 8010dca:	4313      	orrs	r3, r2
 8010dcc:	9304      	str	r3, [sp, #16]
 8010dce:	46a2      	mov	sl, r4
 8010dd0:	e7d2      	b.n	8010d78 <_svfiprintf_r+0x9c>
 8010dd2:	9b03      	ldr	r3, [sp, #12]
 8010dd4:	1d19      	adds	r1, r3, #4
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	9103      	str	r1, [sp, #12]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	bfbb      	ittet	lt
 8010dde:	425b      	neglt	r3, r3
 8010de0:	f042 0202 	orrlt.w	r2, r2, #2
 8010de4:	9307      	strge	r3, [sp, #28]
 8010de6:	9307      	strlt	r3, [sp, #28]
 8010de8:	bfb8      	it	lt
 8010dea:	9204      	strlt	r2, [sp, #16]
 8010dec:	7823      	ldrb	r3, [r4, #0]
 8010dee:	2b2e      	cmp	r3, #46	; 0x2e
 8010df0:	d10c      	bne.n	8010e0c <_svfiprintf_r+0x130>
 8010df2:	7863      	ldrb	r3, [r4, #1]
 8010df4:	2b2a      	cmp	r3, #42	; 0x2a
 8010df6:	d135      	bne.n	8010e64 <_svfiprintf_r+0x188>
 8010df8:	9b03      	ldr	r3, [sp, #12]
 8010dfa:	1d1a      	adds	r2, r3, #4
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	9203      	str	r2, [sp, #12]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	bfb8      	it	lt
 8010e04:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e08:	3402      	adds	r4, #2
 8010e0a:	9305      	str	r3, [sp, #20]
 8010e0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010ed8 <_svfiprintf_r+0x1fc>
 8010e10:	7821      	ldrb	r1, [r4, #0]
 8010e12:	2203      	movs	r2, #3
 8010e14:	4650      	mov	r0, sl
 8010e16:	f7ef fa03 	bl	8000220 <memchr>
 8010e1a:	b140      	cbz	r0, 8010e2e <_svfiprintf_r+0x152>
 8010e1c:	2340      	movs	r3, #64	; 0x40
 8010e1e:	eba0 000a 	sub.w	r0, r0, sl
 8010e22:	fa03 f000 	lsl.w	r0, r3, r0
 8010e26:	9b04      	ldr	r3, [sp, #16]
 8010e28:	4303      	orrs	r3, r0
 8010e2a:	3401      	adds	r4, #1
 8010e2c:	9304      	str	r3, [sp, #16]
 8010e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e32:	4826      	ldr	r0, [pc, #152]	; (8010ecc <_svfiprintf_r+0x1f0>)
 8010e34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e38:	2206      	movs	r2, #6
 8010e3a:	f7ef f9f1 	bl	8000220 <memchr>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	d038      	beq.n	8010eb4 <_svfiprintf_r+0x1d8>
 8010e42:	4b23      	ldr	r3, [pc, #140]	; (8010ed0 <_svfiprintf_r+0x1f4>)
 8010e44:	bb1b      	cbnz	r3, 8010e8e <_svfiprintf_r+0x1b2>
 8010e46:	9b03      	ldr	r3, [sp, #12]
 8010e48:	3307      	adds	r3, #7
 8010e4a:	f023 0307 	bic.w	r3, r3, #7
 8010e4e:	3308      	adds	r3, #8
 8010e50:	9303      	str	r3, [sp, #12]
 8010e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e54:	4433      	add	r3, r6
 8010e56:	9309      	str	r3, [sp, #36]	; 0x24
 8010e58:	e767      	b.n	8010d2a <_svfiprintf_r+0x4e>
 8010e5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e5e:	460c      	mov	r4, r1
 8010e60:	2001      	movs	r0, #1
 8010e62:	e7a5      	b.n	8010db0 <_svfiprintf_r+0xd4>
 8010e64:	2300      	movs	r3, #0
 8010e66:	3401      	adds	r4, #1
 8010e68:	9305      	str	r3, [sp, #20]
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	f04f 0c0a 	mov.w	ip, #10
 8010e70:	4620      	mov	r0, r4
 8010e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e76:	3a30      	subs	r2, #48	; 0x30
 8010e78:	2a09      	cmp	r2, #9
 8010e7a:	d903      	bls.n	8010e84 <_svfiprintf_r+0x1a8>
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d0c5      	beq.n	8010e0c <_svfiprintf_r+0x130>
 8010e80:	9105      	str	r1, [sp, #20]
 8010e82:	e7c3      	b.n	8010e0c <_svfiprintf_r+0x130>
 8010e84:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e88:	4604      	mov	r4, r0
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	e7f0      	b.n	8010e70 <_svfiprintf_r+0x194>
 8010e8e:	ab03      	add	r3, sp, #12
 8010e90:	9300      	str	r3, [sp, #0]
 8010e92:	462a      	mov	r2, r5
 8010e94:	4b0f      	ldr	r3, [pc, #60]	; (8010ed4 <_svfiprintf_r+0x1f8>)
 8010e96:	a904      	add	r1, sp, #16
 8010e98:	4638      	mov	r0, r7
 8010e9a:	f7fe f86f 	bl	800ef7c <_printf_float>
 8010e9e:	1c42      	adds	r2, r0, #1
 8010ea0:	4606      	mov	r6, r0
 8010ea2:	d1d6      	bne.n	8010e52 <_svfiprintf_r+0x176>
 8010ea4:	89ab      	ldrh	r3, [r5, #12]
 8010ea6:	065b      	lsls	r3, r3, #25
 8010ea8:	f53f af2c 	bmi.w	8010d04 <_svfiprintf_r+0x28>
 8010eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010eae:	b01d      	add	sp, #116	; 0x74
 8010eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb4:	ab03      	add	r3, sp, #12
 8010eb6:	9300      	str	r3, [sp, #0]
 8010eb8:	462a      	mov	r2, r5
 8010eba:	4b06      	ldr	r3, [pc, #24]	; (8010ed4 <_svfiprintf_r+0x1f8>)
 8010ebc:	a904      	add	r1, sp, #16
 8010ebe:	4638      	mov	r0, r7
 8010ec0:	f7fe fb00 	bl	800f4c4 <_printf_i>
 8010ec4:	e7eb      	b.n	8010e9e <_svfiprintf_r+0x1c2>
 8010ec6:	bf00      	nop
 8010ec8:	0806d914 	.word	0x0806d914
 8010ecc:	0806d91e 	.word	0x0806d91e
 8010ed0:	0800ef7d 	.word	0x0800ef7d
 8010ed4:	08010c27 	.word	0x08010c27
 8010ed8:	0806d91a 	.word	0x0806d91a

08010edc <__assert_func>:
 8010edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ede:	4614      	mov	r4, r2
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	4b09      	ldr	r3, [pc, #36]	; (8010f08 <__assert_func+0x2c>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	4605      	mov	r5, r0
 8010ee8:	68d8      	ldr	r0, [r3, #12]
 8010eea:	b14c      	cbz	r4, 8010f00 <__assert_func+0x24>
 8010eec:	4b07      	ldr	r3, [pc, #28]	; (8010f0c <__assert_func+0x30>)
 8010eee:	9100      	str	r1, [sp, #0]
 8010ef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ef4:	4906      	ldr	r1, [pc, #24]	; (8010f10 <__assert_func+0x34>)
 8010ef6:	462b      	mov	r3, r5
 8010ef8:	f000 f80e 	bl	8010f18 <fiprintf>
 8010efc:	f000 fa7c 	bl	80113f8 <abort>
 8010f00:	4b04      	ldr	r3, [pc, #16]	; (8010f14 <__assert_func+0x38>)
 8010f02:	461c      	mov	r4, r3
 8010f04:	e7f3      	b.n	8010eee <__assert_func+0x12>
 8010f06:	bf00      	nop
 8010f08:	20000924 	.word	0x20000924
 8010f0c:	0806d925 	.word	0x0806d925
 8010f10:	0806d932 	.word	0x0806d932
 8010f14:	08011b6a 	.word	0x08011b6a

08010f18 <fiprintf>:
 8010f18:	b40e      	push	{r1, r2, r3}
 8010f1a:	b503      	push	{r0, r1, lr}
 8010f1c:	4601      	mov	r1, r0
 8010f1e:	ab03      	add	r3, sp, #12
 8010f20:	4805      	ldr	r0, [pc, #20]	; (8010f38 <fiprintf+0x20>)
 8010f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f26:	6800      	ldr	r0, [r0, #0]
 8010f28:	9301      	str	r3, [sp, #4]
 8010f2a:	f000 f867 	bl	8010ffc <_vfiprintf_r>
 8010f2e:	b002      	add	sp, #8
 8010f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f34:	b003      	add	sp, #12
 8010f36:	4770      	bx	lr
 8010f38:	20000924 	.word	0x20000924

08010f3c <__retarget_lock_init_recursive>:
 8010f3c:	4770      	bx	lr

08010f3e <__retarget_lock_acquire_recursive>:
 8010f3e:	4770      	bx	lr

08010f40 <__retarget_lock_release_recursive>:
 8010f40:	4770      	bx	lr

08010f42 <__ascii_mbtowc>:
 8010f42:	b082      	sub	sp, #8
 8010f44:	b901      	cbnz	r1, 8010f48 <__ascii_mbtowc+0x6>
 8010f46:	a901      	add	r1, sp, #4
 8010f48:	b142      	cbz	r2, 8010f5c <__ascii_mbtowc+0x1a>
 8010f4a:	b14b      	cbz	r3, 8010f60 <__ascii_mbtowc+0x1e>
 8010f4c:	7813      	ldrb	r3, [r2, #0]
 8010f4e:	600b      	str	r3, [r1, #0]
 8010f50:	7812      	ldrb	r2, [r2, #0]
 8010f52:	1e10      	subs	r0, r2, #0
 8010f54:	bf18      	it	ne
 8010f56:	2001      	movne	r0, #1
 8010f58:	b002      	add	sp, #8
 8010f5a:	4770      	bx	lr
 8010f5c:	4610      	mov	r0, r2
 8010f5e:	e7fb      	b.n	8010f58 <__ascii_mbtowc+0x16>
 8010f60:	f06f 0001 	mvn.w	r0, #1
 8010f64:	e7f8      	b.n	8010f58 <__ascii_mbtowc+0x16>

08010f66 <memmove>:
 8010f66:	4288      	cmp	r0, r1
 8010f68:	b510      	push	{r4, lr}
 8010f6a:	eb01 0402 	add.w	r4, r1, r2
 8010f6e:	d902      	bls.n	8010f76 <memmove+0x10>
 8010f70:	4284      	cmp	r4, r0
 8010f72:	4623      	mov	r3, r4
 8010f74:	d807      	bhi.n	8010f86 <memmove+0x20>
 8010f76:	1e43      	subs	r3, r0, #1
 8010f78:	42a1      	cmp	r1, r4
 8010f7a:	d008      	beq.n	8010f8e <memmove+0x28>
 8010f7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f84:	e7f8      	b.n	8010f78 <memmove+0x12>
 8010f86:	4402      	add	r2, r0
 8010f88:	4601      	mov	r1, r0
 8010f8a:	428a      	cmp	r2, r1
 8010f8c:	d100      	bne.n	8010f90 <memmove+0x2a>
 8010f8e:	bd10      	pop	{r4, pc}
 8010f90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010f98:	e7f7      	b.n	8010f8a <memmove+0x24>

08010f9a <_malloc_usable_size_r>:
 8010f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f9e:	1f18      	subs	r0, r3, #4
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	bfbc      	itt	lt
 8010fa4:	580b      	ldrlt	r3, [r1, r0]
 8010fa6:	18c0      	addlt	r0, r0, r3
 8010fa8:	4770      	bx	lr

08010faa <__sfputc_r>:
 8010faa:	6893      	ldr	r3, [r2, #8]
 8010fac:	3b01      	subs	r3, #1
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	b410      	push	{r4}
 8010fb2:	6093      	str	r3, [r2, #8]
 8010fb4:	da08      	bge.n	8010fc8 <__sfputc_r+0x1e>
 8010fb6:	6994      	ldr	r4, [r2, #24]
 8010fb8:	42a3      	cmp	r3, r4
 8010fba:	db01      	blt.n	8010fc0 <__sfputc_r+0x16>
 8010fbc:	290a      	cmp	r1, #10
 8010fbe:	d103      	bne.n	8010fc8 <__sfputc_r+0x1e>
 8010fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fc4:	f000 b94a 	b.w	801125c <__swbuf_r>
 8010fc8:	6813      	ldr	r3, [r2, #0]
 8010fca:	1c58      	adds	r0, r3, #1
 8010fcc:	6010      	str	r0, [r2, #0]
 8010fce:	7019      	strb	r1, [r3, #0]
 8010fd0:	4608      	mov	r0, r1
 8010fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fd6:	4770      	bx	lr

08010fd8 <__sfputs_r>:
 8010fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fda:	4606      	mov	r6, r0
 8010fdc:	460f      	mov	r7, r1
 8010fde:	4614      	mov	r4, r2
 8010fe0:	18d5      	adds	r5, r2, r3
 8010fe2:	42ac      	cmp	r4, r5
 8010fe4:	d101      	bne.n	8010fea <__sfputs_r+0x12>
 8010fe6:	2000      	movs	r0, #0
 8010fe8:	e007      	b.n	8010ffa <__sfputs_r+0x22>
 8010fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fee:	463a      	mov	r2, r7
 8010ff0:	4630      	mov	r0, r6
 8010ff2:	f7ff ffda 	bl	8010faa <__sfputc_r>
 8010ff6:	1c43      	adds	r3, r0, #1
 8010ff8:	d1f3      	bne.n	8010fe2 <__sfputs_r+0xa>
 8010ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010ffc <_vfiprintf_r>:
 8010ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011000:	460d      	mov	r5, r1
 8011002:	b09d      	sub	sp, #116	; 0x74
 8011004:	4614      	mov	r4, r2
 8011006:	4698      	mov	r8, r3
 8011008:	4606      	mov	r6, r0
 801100a:	b118      	cbz	r0, 8011014 <_vfiprintf_r+0x18>
 801100c:	6983      	ldr	r3, [r0, #24]
 801100e:	b90b      	cbnz	r3, 8011014 <_vfiprintf_r+0x18>
 8011010:	f000 fb14 	bl	801163c <__sinit>
 8011014:	4b89      	ldr	r3, [pc, #548]	; (801123c <_vfiprintf_r+0x240>)
 8011016:	429d      	cmp	r5, r3
 8011018:	d11b      	bne.n	8011052 <_vfiprintf_r+0x56>
 801101a:	6875      	ldr	r5, [r6, #4]
 801101c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801101e:	07d9      	lsls	r1, r3, #31
 8011020:	d405      	bmi.n	801102e <_vfiprintf_r+0x32>
 8011022:	89ab      	ldrh	r3, [r5, #12]
 8011024:	059a      	lsls	r2, r3, #22
 8011026:	d402      	bmi.n	801102e <_vfiprintf_r+0x32>
 8011028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801102a:	f7ff ff88 	bl	8010f3e <__retarget_lock_acquire_recursive>
 801102e:	89ab      	ldrh	r3, [r5, #12]
 8011030:	071b      	lsls	r3, r3, #28
 8011032:	d501      	bpl.n	8011038 <_vfiprintf_r+0x3c>
 8011034:	692b      	ldr	r3, [r5, #16]
 8011036:	b9eb      	cbnz	r3, 8011074 <_vfiprintf_r+0x78>
 8011038:	4629      	mov	r1, r5
 801103a:	4630      	mov	r0, r6
 801103c:	f000 f96e 	bl	801131c <__swsetup_r>
 8011040:	b1c0      	cbz	r0, 8011074 <_vfiprintf_r+0x78>
 8011042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011044:	07dc      	lsls	r4, r3, #31
 8011046:	d50e      	bpl.n	8011066 <_vfiprintf_r+0x6a>
 8011048:	f04f 30ff 	mov.w	r0, #4294967295
 801104c:	b01d      	add	sp, #116	; 0x74
 801104e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011052:	4b7b      	ldr	r3, [pc, #492]	; (8011240 <_vfiprintf_r+0x244>)
 8011054:	429d      	cmp	r5, r3
 8011056:	d101      	bne.n	801105c <_vfiprintf_r+0x60>
 8011058:	68b5      	ldr	r5, [r6, #8]
 801105a:	e7df      	b.n	801101c <_vfiprintf_r+0x20>
 801105c:	4b79      	ldr	r3, [pc, #484]	; (8011244 <_vfiprintf_r+0x248>)
 801105e:	429d      	cmp	r5, r3
 8011060:	bf08      	it	eq
 8011062:	68f5      	ldreq	r5, [r6, #12]
 8011064:	e7da      	b.n	801101c <_vfiprintf_r+0x20>
 8011066:	89ab      	ldrh	r3, [r5, #12]
 8011068:	0598      	lsls	r0, r3, #22
 801106a:	d4ed      	bmi.n	8011048 <_vfiprintf_r+0x4c>
 801106c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801106e:	f7ff ff67 	bl	8010f40 <__retarget_lock_release_recursive>
 8011072:	e7e9      	b.n	8011048 <_vfiprintf_r+0x4c>
 8011074:	2300      	movs	r3, #0
 8011076:	9309      	str	r3, [sp, #36]	; 0x24
 8011078:	2320      	movs	r3, #32
 801107a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801107e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011082:	2330      	movs	r3, #48	; 0x30
 8011084:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011248 <_vfiprintf_r+0x24c>
 8011088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801108c:	f04f 0901 	mov.w	r9, #1
 8011090:	4623      	mov	r3, r4
 8011092:	469a      	mov	sl, r3
 8011094:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011098:	b10a      	cbz	r2, 801109e <_vfiprintf_r+0xa2>
 801109a:	2a25      	cmp	r2, #37	; 0x25
 801109c:	d1f9      	bne.n	8011092 <_vfiprintf_r+0x96>
 801109e:	ebba 0b04 	subs.w	fp, sl, r4
 80110a2:	d00b      	beq.n	80110bc <_vfiprintf_r+0xc0>
 80110a4:	465b      	mov	r3, fp
 80110a6:	4622      	mov	r2, r4
 80110a8:	4629      	mov	r1, r5
 80110aa:	4630      	mov	r0, r6
 80110ac:	f7ff ff94 	bl	8010fd8 <__sfputs_r>
 80110b0:	3001      	adds	r0, #1
 80110b2:	f000 80aa 	beq.w	801120a <_vfiprintf_r+0x20e>
 80110b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110b8:	445a      	add	r2, fp
 80110ba:	9209      	str	r2, [sp, #36]	; 0x24
 80110bc:	f89a 3000 	ldrb.w	r3, [sl]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	f000 80a2 	beq.w	801120a <_vfiprintf_r+0x20e>
 80110c6:	2300      	movs	r3, #0
 80110c8:	f04f 32ff 	mov.w	r2, #4294967295
 80110cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110d0:	f10a 0a01 	add.w	sl, sl, #1
 80110d4:	9304      	str	r3, [sp, #16]
 80110d6:	9307      	str	r3, [sp, #28]
 80110d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110dc:	931a      	str	r3, [sp, #104]	; 0x68
 80110de:	4654      	mov	r4, sl
 80110e0:	2205      	movs	r2, #5
 80110e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110e6:	4858      	ldr	r0, [pc, #352]	; (8011248 <_vfiprintf_r+0x24c>)
 80110e8:	f7ef f89a 	bl	8000220 <memchr>
 80110ec:	9a04      	ldr	r2, [sp, #16]
 80110ee:	b9d8      	cbnz	r0, 8011128 <_vfiprintf_r+0x12c>
 80110f0:	06d1      	lsls	r1, r2, #27
 80110f2:	bf44      	itt	mi
 80110f4:	2320      	movmi	r3, #32
 80110f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110fa:	0713      	lsls	r3, r2, #28
 80110fc:	bf44      	itt	mi
 80110fe:	232b      	movmi	r3, #43	; 0x2b
 8011100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011104:	f89a 3000 	ldrb.w	r3, [sl]
 8011108:	2b2a      	cmp	r3, #42	; 0x2a
 801110a:	d015      	beq.n	8011138 <_vfiprintf_r+0x13c>
 801110c:	9a07      	ldr	r2, [sp, #28]
 801110e:	4654      	mov	r4, sl
 8011110:	2000      	movs	r0, #0
 8011112:	f04f 0c0a 	mov.w	ip, #10
 8011116:	4621      	mov	r1, r4
 8011118:	f811 3b01 	ldrb.w	r3, [r1], #1
 801111c:	3b30      	subs	r3, #48	; 0x30
 801111e:	2b09      	cmp	r3, #9
 8011120:	d94e      	bls.n	80111c0 <_vfiprintf_r+0x1c4>
 8011122:	b1b0      	cbz	r0, 8011152 <_vfiprintf_r+0x156>
 8011124:	9207      	str	r2, [sp, #28]
 8011126:	e014      	b.n	8011152 <_vfiprintf_r+0x156>
 8011128:	eba0 0308 	sub.w	r3, r0, r8
 801112c:	fa09 f303 	lsl.w	r3, r9, r3
 8011130:	4313      	orrs	r3, r2
 8011132:	9304      	str	r3, [sp, #16]
 8011134:	46a2      	mov	sl, r4
 8011136:	e7d2      	b.n	80110de <_vfiprintf_r+0xe2>
 8011138:	9b03      	ldr	r3, [sp, #12]
 801113a:	1d19      	adds	r1, r3, #4
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	9103      	str	r1, [sp, #12]
 8011140:	2b00      	cmp	r3, #0
 8011142:	bfbb      	ittet	lt
 8011144:	425b      	neglt	r3, r3
 8011146:	f042 0202 	orrlt.w	r2, r2, #2
 801114a:	9307      	strge	r3, [sp, #28]
 801114c:	9307      	strlt	r3, [sp, #28]
 801114e:	bfb8      	it	lt
 8011150:	9204      	strlt	r2, [sp, #16]
 8011152:	7823      	ldrb	r3, [r4, #0]
 8011154:	2b2e      	cmp	r3, #46	; 0x2e
 8011156:	d10c      	bne.n	8011172 <_vfiprintf_r+0x176>
 8011158:	7863      	ldrb	r3, [r4, #1]
 801115a:	2b2a      	cmp	r3, #42	; 0x2a
 801115c:	d135      	bne.n	80111ca <_vfiprintf_r+0x1ce>
 801115e:	9b03      	ldr	r3, [sp, #12]
 8011160:	1d1a      	adds	r2, r3, #4
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	9203      	str	r2, [sp, #12]
 8011166:	2b00      	cmp	r3, #0
 8011168:	bfb8      	it	lt
 801116a:	f04f 33ff 	movlt.w	r3, #4294967295
 801116e:	3402      	adds	r4, #2
 8011170:	9305      	str	r3, [sp, #20]
 8011172:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011258 <_vfiprintf_r+0x25c>
 8011176:	7821      	ldrb	r1, [r4, #0]
 8011178:	2203      	movs	r2, #3
 801117a:	4650      	mov	r0, sl
 801117c:	f7ef f850 	bl	8000220 <memchr>
 8011180:	b140      	cbz	r0, 8011194 <_vfiprintf_r+0x198>
 8011182:	2340      	movs	r3, #64	; 0x40
 8011184:	eba0 000a 	sub.w	r0, r0, sl
 8011188:	fa03 f000 	lsl.w	r0, r3, r0
 801118c:	9b04      	ldr	r3, [sp, #16]
 801118e:	4303      	orrs	r3, r0
 8011190:	3401      	adds	r4, #1
 8011192:	9304      	str	r3, [sp, #16]
 8011194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011198:	482c      	ldr	r0, [pc, #176]	; (801124c <_vfiprintf_r+0x250>)
 801119a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801119e:	2206      	movs	r2, #6
 80111a0:	f7ef f83e 	bl	8000220 <memchr>
 80111a4:	2800      	cmp	r0, #0
 80111a6:	d03f      	beq.n	8011228 <_vfiprintf_r+0x22c>
 80111a8:	4b29      	ldr	r3, [pc, #164]	; (8011250 <_vfiprintf_r+0x254>)
 80111aa:	bb1b      	cbnz	r3, 80111f4 <_vfiprintf_r+0x1f8>
 80111ac:	9b03      	ldr	r3, [sp, #12]
 80111ae:	3307      	adds	r3, #7
 80111b0:	f023 0307 	bic.w	r3, r3, #7
 80111b4:	3308      	adds	r3, #8
 80111b6:	9303      	str	r3, [sp, #12]
 80111b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111ba:	443b      	add	r3, r7
 80111bc:	9309      	str	r3, [sp, #36]	; 0x24
 80111be:	e767      	b.n	8011090 <_vfiprintf_r+0x94>
 80111c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80111c4:	460c      	mov	r4, r1
 80111c6:	2001      	movs	r0, #1
 80111c8:	e7a5      	b.n	8011116 <_vfiprintf_r+0x11a>
 80111ca:	2300      	movs	r3, #0
 80111cc:	3401      	adds	r4, #1
 80111ce:	9305      	str	r3, [sp, #20]
 80111d0:	4619      	mov	r1, r3
 80111d2:	f04f 0c0a 	mov.w	ip, #10
 80111d6:	4620      	mov	r0, r4
 80111d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111dc:	3a30      	subs	r2, #48	; 0x30
 80111de:	2a09      	cmp	r2, #9
 80111e0:	d903      	bls.n	80111ea <_vfiprintf_r+0x1ee>
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d0c5      	beq.n	8011172 <_vfiprintf_r+0x176>
 80111e6:	9105      	str	r1, [sp, #20]
 80111e8:	e7c3      	b.n	8011172 <_vfiprintf_r+0x176>
 80111ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80111ee:	4604      	mov	r4, r0
 80111f0:	2301      	movs	r3, #1
 80111f2:	e7f0      	b.n	80111d6 <_vfiprintf_r+0x1da>
 80111f4:	ab03      	add	r3, sp, #12
 80111f6:	9300      	str	r3, [sp, #0]
 80111f8:	462a      	mov	r2, r5
 80111fa:	4b16      	ldr	r3, [pc, #88]	; (8011254 <_vfiprintf_r+0x258>)
 80111fc:	a904      	add	r1, sp, #16
 80111fe:	4630      	mov	r0, r6
 8011200:	f7fd febc 	bl	800ef7c <_printf_float>
 8011204:	4607      	mov	r7, r0
 8011206:	1c78      	adds	r0, r7, #1
 8011208:	d1d6      	bne.n	80111b8 <_vfiprintf_r+0x1bc>
 801120a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801120c:	07d9      	lsls	r1, r3, #31
 801120e:	d405      	bmi.n	801121c <_vfiprintf_r+0x220>
 8011210:	89ab      	ldrh	r3, [r5, #12]
 8011212:	059a      	lsls	r2, r3, #22
 8011214:	d402      	bmi.n	801121c <_vfiprintf_r+0x220>
 8011216:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011218:	f7ff fe92 	bl	8010f40 <__retarget_lock_release_recursive>
 801121c:	89ab      	ldrh	r3, [r5, #12]
 801121e:	065b      	lsls	r3, r3, #25
 8011220:	f53f af12 	bmi.w	8011048 <_vfiprintf_r+0x4c>
 8011224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011226:	e711      	b.n	801104c <_vfiprintf_r+0x50>
 8011228:	ab03      	add	r3, sp, #12
 801122a:	9300      	str	r3, [sp, #0]
 801122c:	462a      	mov	r2, r5
 801122e:	4b09      	ldr	r3, [pc, #36]	; (8011254 <_vfiprintf_r+0x258>)
 8011230:	a904      	add	r1, sp, #16
 8011232:	4630      	mov	r0, r6
 8011234:	f7fe f946 	bl	800f4c4 <_printf_i>
 8011238:	e7e4      	b.n	8011204 <_vfiprintf_r+0x208>
 801123a:	bf00      	nop
 801123c:	0806da8c 	.word	0x0806da8c
 8011240:	0806daac 	.word	0x0806daac
 8011244:	0806da6c 	.word	0x0806da6c
 8011248:	0806d914 	.word	0x0806d914
 801124c:	0806d91e 	.word	0x0806d91e
 8011250:	0800ef7d 	.word	0x0800ef7d
 8011254:	08010fd9 	.word	0x08010fd9
 8011258:	0806d91a 	.word	0x0806d91a

0801125c <__swbuf_r>:
 801125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125e:	460e      	mov	r6, r1
 8011260:	4614      	mov	r4, r2
 8011262:	4605      	mov	r5, r0
 8011264:	b118      	cbz	r0, 801126e <__swbuf_r+0x12>
 8011266:	6983      	ldr	r3, [r0, #24]
 8011268:	b90b      	cbnz	r3, 801126e <__swbuf_r+0x12>
 801126a:	f000 f9e7 	bl	801163c <__sinit>
 801126e:	4b21      	ldr	r3, [pc, #132]	; (80112f4 <__swbuf_r+0x98>)
 8011270:	429c      	cmp	r4, r3
 8011272:	d12b      	bne.n	80112cc <__swbuf_r+0x70>
 8011274:	686c      	ldr	r4, [r5, #4]
 8011276:	69a3      	ldr	r3, [r4, #24]
 8011278:	60a3      	str	r3, [r4, #8]
 801127a:	89a3      	ldrh	r3, [r4, #12]
 801127c:	071a      	lsls	r2, r3, #28
 801127e:	d52f      	bpl.n	80112e0 <__swbuf_r+0x84>
 8011280:	6923      	ldr	r3, [r4, #16]
 8011282:	b36b      	cbz	r3, 80112e0 <__swbuf_r+0x84>
 8011284:	6923      	ldr	r3, [r4, #16]
 8011286:	6820      	ldr	r0, [r4, #0]
 8011288:	1ac0      	subs	r0, r0, r3
 801128a:	6963      	ldr	r3, [r4, #20]
 801128c:	b2f6      	uxtb	r6, r6
 801128e:	4283      	cmp	r3, r0
 8011290:	4637      	mov	r7, r6
 8011292:	dc04      	bgt.n	801129e <__swbuf_r+0x42>
 8011294:	4621      	mov	r1, r4
 8011296:	4628      	mov	r0, r5
 8011298:	f000 f93c 	bl	8011514 <_fflush_r>
 801129c:	bb30      	cbnz	r0, 80112ec <__swbuf_r+0x90>
 801129e:	68a3      	ldr	r3, [r4, #8]
 80112a0:	3b01      	subs	r3, #1
 80112a2:	60a3      	str	r3, [r4, #8]
 80112a4:	6823      	ldr	r3, [r4, #0]
 80112a6:	1c5a      	adds	r2, r3, #1
 80112a8:	6022      	str	r2, [r4, #0]
 80112aa:	701e      	strb	r6, [r3, #0]
 80112ac:	6963      	ldr	r3, [r4, #20]
 80112ae:	3001      	adds	r0, #1
 80112b0:	4283      	cmp	r3, r0
 80112b2:	d004      	beq.n	80112be <__swbuf_r+0x62>
 80112b4:	89a3      	ldrh	r3, [r4, #12]
 80112b6:	07db      	lsls	r3, r3, #31
 80112b8:	d506      	bpl.n	80112c8 <__swbuf_r+0x6c>
 80112ba:	2e0a      	cmp	r6, #10
 80112bc:	d104      	bne.n	80112c8 <__swbuf_r+0x6c>
 80112be:	4621      	mov	r1, r4
 80112c0:	4628      	mov	r0, r5
 80112c2:	f000 f927 	bl	8011514 <_fflush_r>
 80112c6:	b988      	cbnz	r0, 80112ec <__swbuf_r+0x90>
 80112c8:	4638      	mov	r0, r7
 80112ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112cc:	4b0a      	ldr	r3, [pc, #40]	; (80112f8 <__swbuf_r+0x9c>)
 80112ce:	429c      	cmp	r4, r3
 80112d0:	d101      	bne.n	80112d6 <__swbuf_r+0x7a>
 80112d2:	68ac      	ldr	r4, [r5, #8]
 80112d4:	e7cf      	b.n	8011276 <__swbuf_r+0x1a>
 80112d6:	4b09      	ldr	r3, [pc, #36]	; (80112fc <__swbuf_r+0xa0>)
 80112d8:	429c      	cmp	r4, r3
 80112da:	bf08      	it	eq
 80112dc:	68ec      	ldreq	r4, [r5, #12]
 80112de:	e7ca      	b.n	8011276 <__swbuf_r+0x1a>
 80112e0:	4621      	mov	r1, r4
 80112e2:	4628      	mov	r0, r5
 80112e4:	f000 f81a 	bl	801131c <__swsetup_r>
 80112e8:	2800      	cmp	r0, #0
 80112ea:	d0cb      	beq.n	8011284 <__swbuf_r+0x28>
 80112ec:	f04f 37ff 	mov.w	r7, #4294967295
 80112f0:	e7ea      	b.n	80112c8 <__swbuf_r+0x6c>
 80112f2:	bf00      	nop
 80112f4:	0806da8c 	.word	0x0806da8c
 80112f8:	0806daac 	.word	0x0806daac
 80112fc:	0806da6c 	.word	0x0806da6c

08011300 <__ascii_wctomb>:
 8011300:	b149      	cbz	r1, 8011316 <__ascii_wctomb+0x16>
 8011302:	2aff      	cmp	r2, #255	; 0xff
 8011304:	bf85      	ittet	hi
 8011306:	238a      	movhi	r3, #138	; 0x8a
 8011308:	6003      	strhi	r3, [r0, #0]
 801130a:	700a      	strbls	r2, [r1, #0]
 801130c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011310:	bf98      	it	ls
 8011312:	2001      	movls	r0, #1
 8011314:	4770      	bx	lr
 8011316:	4608      	mov	r0, r1
 8011318:	4770      	bx	lr
	...

0801131c <__swsetup_r>:
 801131c:	4b32      	ldr	r3, [pc, #200]	; (80113e8 <__swsetup_r+0xcc>)
 801131e:	b570      	push	{r4, r5, r6, lr}
 8011320:	681d      	ldr	r5, [r3, #0]
 8011322:	4606      	mov	r6, r0
 8011324:	460c      	mov	r4, r1
 8011326:	b125      	cbz	r5, 8011332 <__swsetup_r+0x16>
 8011328:	69ab      	ldr	r3, [r5, #24]
 801132a:	b913      	cbnz	r3, 8011332 <__swsetup_r+0x16>
 801132c:	4628      	mov	r0, r5
 801132e:	f000 f985 	bl	801163c <__sinit>
 8011332:	4b2e      	ldr	r3, [pc, #184]	; (80113ec <__swsetup_r+0xd0>)
 8011334:	429c      	cmp	r4, r3
 8011336:	d10f      	bne.n	8011358 <__swsetup_r+0x3c>
 8011338:	686c      	ldr	r4, [r5, #4]
 801133a:	89a3      	ldrh	r3, [r4, #12]
 801133c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011340:	0719      	lsls	r1, r3, #28
 8011342:	d42c      	bmi.n	801139e <__swsetup_r+0x82>
 8011344:	06dd      	lsls	r5, r3, #27
 8011346:	d411      	bmi.n	801136c <__swsetup_r+0x50>
 8011348:	2309      	movs	r3, #9
 801134a:	6033      	str	r3, [r6, #0]
 801134c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011350:	81a3      	strh	r3, [r4, #12]
 8011352:	f04f 30ff 	mov.w	r0, #4294967295
 8011356:	e03e      	b.n	80113d6 <__swsetup_r+0xba>
 8011358:	4b25      	ldr	r3, [pc, #148]	; (80113f0 <__swsetup_r+0xd4>)
 801135a:	429c      	cmp	r4, r3
 801135c:	d101      	bne.n	8011362 <__swsetup_r+0x46>
 801135e:	68ac      	ldr	r4, [r5, #8]
 8011360:	e7eb      	b.n	801133a <__swsetup_r+0x1e>
 8011362:	4b24      	ldr	r3, [pc, #144]	; (80113f4 <__swsetup_r+0xd8>)
 8011364:	429c      	cmp	r4, r3
 8011366:	bf08      	it	eq
 8011368:	68ec      	ldreq	r4, [r5, #12]
 801136a:	e7e6      	b.n	801133a <__swsetup_r+0x1e>
 801136c:	0758      	lsls	r0, r3, #29
 801136e:	d512      	bpl.n	8011396 <__swsetup_r+0x7a>
 8011370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011372:	b141      	cbz	r1, 8011386 <__swsetup_r+0x6a>
 8011374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011378:	4299      	cmp	r1, r3
 801137a:	d002      	beq.n	8011382 <__swsetup_r+0x66>
 801137c:	4630      	mov	r0, r6
 801137e:	f7fd fc7d 	bl	800ec7c <_free_r>
 8011382:	2300      	movs	r3, #0
 8011384:	6363      	str	r3, [r4, #52]	; 0x34
 8011386:	89a3      	ldrh	r3, [r4, #12]
 8011388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801138c:	81a3      	strh	r3, [r4, #12]
 801138e:	2300      	movs	r3, #0
 8011390:	6063      	str	r3, [r4, #4]
 8011392:	6923      	ldr	r3, [r4, #16]
 8011394:	6023      	str	r3, [r4, #0]
 8011396:	89a3      	ldrh	r3, [r4, #12]
 8011398:	f043 0308 	orr.w	r3, r3, #8
 801139c:	81a3      	strh	r3, [r4, #12]
 801139e:	6923      	ldr	r3, [r4, #16]
 80113a0:	b94b      	cbnz	r3, 80113b6 <__swsetup_r+0x9a>
 80113a2:	89a3      	ldrh	r3, [r4, #12]
 80113a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80113a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113ac:	d003      	beq.n	80113b6 <__swsetup_r+0x9a>
 80113ae:	4621      	mov	r1, r4
 80113b0:	4630      	mov	r0, r6
 80113b2:	f000 fa05 	bl	80117c0 <__smakebuf_r>
 80113b6:	89a0      	ldrh	r0, [r4, #12]
 80113b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113bc:	f010 0301 	ands.w	r3, r0, #1
 80113c0:	d00a      	beq.n	80113d8 <__swsetup_r+0xbc>
 80113c2:	2300      	movs	r3, #0
 80113c4:	60a3      	str	r3, [r4, #8]
 80113c6:	6963      	ldr	r3, [r4, #20]
 80113c8:	425b      	negs	r3, r3
 80113ca:	61a3      	str	r3, [r4, #24]
 80113cc:	6923      	ldr	r3, [r4, #16]
 80113ce:	b943      	cbnz	r3, 80113e2 <__swsetup_r+0xc6>
 80113d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80113d4:	d1ba      	bne.n	801134c <__swsetup_r+0x30>
 80113d6:	bd70      	pop	{r4, r5, r6, pc}
 80113d8:	0781      	lsls	r1, r0, #30
 80113da:	bf58      	it	pl
 80113dc:	6963      	ldrpl	r3, [r4, #20]
 80113de:	60a3      	str	r3, [r4, #8]
 80113e0:	e7f4      	b.n	80113cc <__swsetup_r+0xb0>
 80113e2:	2000      	movs	r0, #0
 80113e4:	e7f7      	b.n	80113d6 <__swsetup_r+0xba>
 80113e6:	bf00      	nop
 80113e8:	20000924 	.word	0x20000924
 80113ec:	0806da8c 	.word	0x0806da8c
 80113f0:	0806daac 	.word	0x0806daac
 80113f4:	0806da6c 	.word	0x0806da6c

080113f8 <abort>:
 80113f8:	b508      	push	{r3, lr}
 80113fa:	2006      	movs	r0, #6
 80113fc:	f000 fa48 	bl	8011890 <raise>
 8011400:	2001      	movs	r0, #1
 8011402:	f000 fb4d 	bl	8011aa0 <_exit>
	...

08011408 <__sflush_r>:
 8011408:	898a      	ldrh	r2, [r1, #12]
 801140a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801140e:	4605      	mov	r5, r0
 8011410:	0710      	lsls	r0, r2, #28
 8011412:	460c      	mov	r4, r1
 8011414:	d458      	bmi.n	80114c8 <__sflush_r+0xc0>
 8011416:	684b      	ldr	r3, [r1, #4]
 8011418:	2b00      	cmp	r3, #0
 801141a:	dc05      	bgt.n	8011428 <__sflush_r+0x20>
 801141c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801141e:	2b00      	cmp	r3, #0
 8011420:	dc02      	bgt.n	8011428 <__sflush_r+0x20>
 8011422:	2000      	movs	r0, #0
 8011424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801142a:	2e00      	cmp	r6, #0
 801142c:	d0f9      	beq.n	8011422 <__sflush_r+0x1a>
 801142e:	2300      	movs	r3, #0
 8011430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011434:	682f      	ldr	r7, [r5, #0]
 8011436:	602b      	str	r3, [r5, #0]
 8011438:	d032      	beq.n	80114a0 <__sflush_r+0x98>
 801143a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801143c:	89a3      	ldrh	r3, [r4, #12]
 801143e:	075a      	lsls	r2, r3, #29
 8011440:	d505      	bpl.n	801144e <__sflush_r+0x46>
 8011442:	6863      	ldr	r3, [r4, #4]
 8011444:	1ac0      	subs	r0, r0, r3
 8011446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011448:	b10b      	cbz	r3, 801144e <__sflush_r+0x46>
 801144a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801144c:	1ac0      	subs	r0, r0, r3
 801144e:	2300      	movs	r3, #0
 8011450:	4602      	mov	r2, r0
 8011452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011454:	6a21      	ldr	r1, [r4, #32]
 8011456:	4628      	mov	r0, r5
 8011458:	47b0      	blx	r6
 801145a:	1c43      	adds	r3, r0, #1
 801145c:	89a3      	ldrh	r3, [r4, #12]
 801145e:	d106      	bne.n	801146e <__sflush_r+0x66>
 8011460:	6829      	ldr	r1, [r5, #0]
 8011462:	291d      	cmp	r1, #29
 8011464:	d82c      	bhi.n	80114c0 <__sflush_r+0xb8>
 8011466:	4a2a      	ldr	r2, [pc, #168]	; (8011510 <__sflush_r+0x108>)
 8011468:	40ca      	lsrs	r2, r1
 801146a:	07d6      	lsls	r6, r2, #31
 801146c:	d528      	bpl.n	80114c0 <__sflush_r+0xb8>
 801146e:	2200      	movs	r2, #0
 8011470:	6062      	str	r2, [r4, #4]
 8011472:	04d9      	lsls	r1, r3, #19
 8011474:	6922      	ldr	r2, [r4, #16]
 8011476:	6022      	str	r2, [r4, #0]
 8011478:	d504      	bpl.n	8011484 <__sflush_r+0x7c>
 801147a:	1c42      	adds	r2, r0, #1
 801147c:	d101      	bne.n	8011482 <__sflush_r+0x7a>
 801147e:	682b      	ldr	r3, [r5, #0]
 8011480:	b903      	cbnz	r3, 8011484 <__sflush_r+0x7c>
 8011482:	6560      	str	r0, [r4, #84]	; 0x54
 8011484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011486:	602f      	str	r7, [r5, #0]
 8011488:	2900      	cmp	r1, #0
 801148a:	d0ca      	beq.n	8011422 <__sflush_r+0x1a>
 801148c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011490:	4299      	cmp	r1, r3
 8011492:	d002      	beq.n	801149a <__sflush_r+0x92>
 8011494:	4628      	mov	r0, r5
 8011496:	f7fd fbf1 	bl	800ec7c <_free_r>
 801149a:	2000      	movs	r0, #0
 801149c:	6360      	str	r0, [r4, #52]	; 0x34
 801149e:	e7c1      	b.n	8011424 <__sflush_r+0x1c>
 80114a0:	6a21      	ldr	r1, [r4, #32]
 80114a2:	2301      	movs	r3, #1
 80114a4:	4628      	mov	r0, r5
 80114a6:	47b0      	blx	r6
 80114a8:	1c41      	adds	r1, r0, #1
 80114aa:	d1c7      	bne.n	801143c <__sflush_r+0x34>
 80114ac:	682b      	ldr	r3, [r5, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d0c4      	beq.n	801143c <__sflush_r+0x34>
 80114b2:	2b1d      	cmp	r3, #29
 80114b4:	d001      	beq.n	80114ba <__sflush_r+0xb2>
 80114b6:	2b16      	cmp	r3, #22
 80114b8:	d101      	bne.n	80114be <__sflush_r+0xb6>
 80114ba:	602f      	str	r7, [r5, #0]
 80114bc:	e7b1      	b.n	8011422 <__sflush_r+0x1a>
 80114be:	89a3      	ldrh	r3, [r4, #12]
 80114c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114c4:	81a3      	strh	r3, [r4, #12]
 80114c6:	e7ad      	b.n	8011424 <__sflush_r+0x1c>
 80114c8:	690f      	ldr	r7, [r1, #16]
 80114ca:	2f00      	cmp	r7, #0
 80114cc:	d0a9      	beq.n	8011422 <__sflush_r+0x1a>
 80114ce:	0793      	lsls	r3, r2, #30
 80114d0:	680e      	ldr	r6, [r1, #0]
 80114d2:	bf08      	it	eq
 80114d4:	694b      	ldreq	r3, [r1, #20]
 80114d6:	600f      	str	r7, [r1, #0]
 80114d8:	bf18      	it	ne
 80114da:	2300      	movne	r3, #0
 80114dc:	eba6 0807 	sub.w	r8, r6, r7
 80114e0:	608b      	str	r3, [r1, #8]
 80114e2:	f1b8 0f00 	cmp.w	r8, #0
 80114e6:	dd9c      	ble.n	8011422 <__sflush_r+0x1a>
 80114e8:	6a21      	ldr	r1, [r4, #32]
 80114ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80114ec:	4643      	mov	r3, r8
 80114ee:	463a      	mov	r2, r7
 80114f0:	4628      	mov	r0, r5
 80114f2:	47b0      	blx	r6
 80114f4:	2800      	cmp	r0, #0
 80114f6:	dc06      	bgt.n	8011506 <__sflush_r+0xfe>
 80114f8:	89a3      	ldrh	r3, [r4, #12]
 80114fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114fe:	81a3      	strh	r3, [r4, #12]
 8011500:	f04f 30ff 	mov.w	r0, #4294967295
 8011504:	e78e      	b.n	8011424 <__sflush_r+0x1c>
 8011506:	4407      	add	r7, r0
 8011508:	eba8 0800 	sub.w	r8, r8, r0
 801150c:	e7e9      	b.n	80114e2 <__sflush_r+0xda>
 801150e:	bf00      	nop
 8011510:	20400001 	.word	0x20400001

08011514 <_fflush_r>:
 8011514:	b538      	push	{r3, r4, r5, lr}
 8011516:	690b      	ldr	r3, [r1, #16]
 8011518:	4605      	mov	r5, r0
 801151a:	460c      	mov	r4, r1
 801151c:	b913      	cbnz	r3, 8011524 <_fflush_r+0x10>
 801151e:	2500      	movs	r5, #0
 8011520:	4628      	mov	r0, r5
 8011522:	bd38      	pop	{r3, r4, r5, pc}
 8011524:	b118      	cbz	r0, 801152e <_fflush_r+0x1a>
 8011526:	6983      	ldr	r3, [r0, #24]
 8011528:	b90b      	cbnz	r3, 801152e <_fflush_r+0x1a>
 801152a:	f000 f887 	bl	801163c <__sinit>
 801152e:	4b14      	ldr	r3, [pc, #80]	; (8011580 <_fflush_r+0x6c>)
 8011530:	429c      	cmp	r4, r3
 8011532:	d11b      	bne.n	801156c <_fflush_r+0x58>
 8011534:	686c      	ldr	r4, [r5, #4]
 8011536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d0ef      	beq.n	801151e <_fflush_r+0xa>
 801153e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011540:	07d0      	lsls	r0, r2, #31
 8011542:	d404      	bmi.n	801154e <_fflush_r+0x3a>
 8011544:	0599      	lsls	r1, r3, #22
 8011546:	d402      	bmi.n	801154e <_fflush_r+0x3a>
 8011548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801154a:	f7ff fcf8 	bl	8010f3e <__retarget_lock_acquire_recursive>
 801154e:	4628      	mov	r0, r5
 8011550:	4621      	mov	r1, r4
 8011552:	f7ff ff59 	bl	8011408 <__sflush_r>
 8011556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011558:	07da      	lsls	r2, r3, #31
 801155a:	4605      	mov	r5, r0
 801155c:	d4e0      	bmi.n	8011520 <_fflush_r+0xc>
 801155e:	89a3      	ldrh	r3, [r4, #12]
 8011560:	059b      	lsls	r3, r3, #22
 8011562:	d4dd      	bmi.n	8011520 <_fflush_r+0xc>
 8011564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011566:	f7ff fceb 	bl	8010f40 <__retarget_lock_release_recursive>
 801156a:	e7d9      	b.n	8011520 <_fflush_r+0xc>
 801156c:	4b05      	ldr	r3, [pc, #20]	; (8011584 <_fflush_r+0x70>)
 801156e:	429c      	cmp	r4, r3
 8011570:	d101      	bne.n	8011576 <_fflush_r+0x62>
 8011572:	68ac      	ldr	r4, [r5, #8]
 8011574:	e7df      	b.n	8011536 <_fflush_r+0x22>
 8011576:	4b04      	ldr	r3, [pc, #16]	; (8011588 <_fflush_r+0x74>)
 8011578:	429c      	cmp	r4, r3
 801157a:	bf08      	it	eq
 801157c:	68ec      	ldreq	r4, [r5, #12]
 801157e:	e7da      	b.n	8011536 <_fflush_r+0x22>
 8011580:	0806da8c 	.word	0x0806da8c
 8011584:	0806daac 	.word	0x0806daac
 8011588:	0806da6c 	.word	0x0806da6c

0801158c <std>:
 801158c:	2300      	movs	r3, #0
 801158e:	b510      	push	{r4, lr}
 8011590:	4604      	mov	r4, r0
 8011592:	e9c0 3300 	strd	r3, r3, [r0]
 8011596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801159a:	6083      	str	r3, [r0, #8]
 801159c:	8181      	strh	r1, [r0, #12]
 801159e:	6643      	str	r3, [r0, #100]	; 0x64
 80115a0:	81c2      	strh	r2, [r0, #14]
 80115a2:	6183      	str	r3, [r0, #24]
 80115a4:	4619      	mov	r1, r3
 80115a6:	2208      	movs	r2, #8
 80115a8:	305c      	adds	r0, #92	; 0x5c
 80115aa:	f7fd fb5f 	bl	800ec6c <memset>
 80115ae:	4b05      	ldr	r3, [pc, #20]	; (80115c4 <std+0x38>)
 80115b0:	6263      	str	r3, [r4, #36]	; 0x24
 80115b2:	4b05      	ldr	r3, [pc, #20]	; (80115c8 <std+0x3c>)
 80115b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80115b6:	4b05      	ldr	r3, [pc, #20]	; (80115cc <std+0x40>)
 80115b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80115ba:	4b05      	ldr	r3, [pc, #20]	; (80115d0 <std+0x44>)
 80115bc:	6224      	str	r4, [r4, #32]
 80115be:	6323      	str	r3, [r4, #48]	; 0x30
 80115c0:	bd10      	pop	{r4, pc}
 80115c2:	bf00      	nop
 80115c4:	080118c9 	.word	0x080118c9
 80115c8:	080118eb 	.word	0x080118eb
 80115cc:	08011923 	.word	0x08011923
 80115d0:	08011947 	.word	0x08011947

080115d4 <_cleanup_r>:
 80115d4:	4901      	ldr	r1, [pc, #4]	; (80115dc <_cleanup_r+0x8>)
 80115d6:	f000 b8af 	b.w	8011738 <_fwalk_reent>
 80115da:	bf00      	nop
 80115dc:	08011515 	.word	0x08011515

080115e0 <__sfmoreglue>:
 80115e0:	b570      	push	{r4, r5, r6, lr}
 80115e2:	2268      	movs	r2, #104	; 0x68
 80115e4:	1e4d      	subs	r5, r1, #1
 80115e6:	4355      	muls	r5, r2
 80115e8:	460e      	mov	r6, r1
 80115ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80115ee:	f7fd fbb1 	bl	800ed54 <_malloc_r>
 80115f2:	4604      	mov	r4, r0
 80115f4:	b140      	cbz	r0, 8011608 <__sfmoreglue+0x28>
 80115f6:	2100      	movs	r1, #0
 80115f8:	e9c0 1600 	strd	r1, r6, [r0]
 80115fc:	300c      	adds	r0, #12
 80115fe:	60a0      	str	r0, [r4, #8]
 8011600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011604:	f7fd fb32 	bl	800ec6c <memset>
 8011608:	4620      	mov	r0, r4
 801160a:	bd70      	pop	{r4, r5, r6, pc}

0801160c <__sfp_lock_acquire>:
 801160c:	4801      	ldr	r0, [pc, #4]	; (8011614 <__sfp_lock_acquire+0x8>)
 801160e:	f7ff bc96 	b.w	8010f3e <__retarget_lock_acquire_recursive>
 8011612:	bf00      	nop
 8011614:	2000a015 	.word	0x2000a015

08011618 <__sfp_lock_release>:
 8011618:	4801      	ldr	r0, [pc, #4]	; (8011620 <__sfp_lock_release+0x8>)
 801161a:	f7ff bc91 	b.w	8010f40 <__retarget_lock_release_recursive>
 801161e:	bf00      	nop
 8011620:	2000a015 	.word	0x2000a015

08011624 <__sinit_lock_acquire>:
 8011624:	4801      	ldr	r0, [pc, #4]	; (801162c <__sinit_lock_acquire+0x8>)
 8011626:	f7ff bc8a 	b.w	8010f3e <__retarget_lock_acquire_recursive>
 801162a:	bf00      	nop
 801162c:	2000a016 	.word	0x2000a016

08011630 <__sinit_lock_release>:
 8011630:	4801      	ldr	r0, [pc, #4]	; (8011638 <__sinit_lock_release+0x8>)
 8011632:	f7ff bc85 	b.w	8010f40 <__retarget_lock_release_recursive>
 8011636:	bf00      	nop
 8011638:	2000a016 	.word	0x2000a016

0801163c <__sinit>:
 801163c:	b510      	push	{r4, lr}
 801163e:	4604      	mov	r4, r0
 8011640:	f7ff fff0 	bl	8011624 <__sinit_lock_acquire>
 8011644:	69a3      	ldr	r3, [r4, #24]
 8011646:	b11b      	cbz	r3, 8011650 <__sinit+0x14>
 8011648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801164c:	f7ff bff0 	b.w	8011630 <__sinit_lock_release>
 8011650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011654:	6523      	str	r3, [r4, #80]	; 0x50
 8011656:	4b13      	ldr	r3, [pc, #76]	; (80116a4 <__sinit+0x68>)
 8011658:	4a13      	ldr	r2, [pc, #76]	; (80116a8 <__sinit+0x6c>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	62a2      	str	r2, [r4, #40]	; 0x28
 801165e:	42a3      	cmp	r3, r4
 8011660:	bf04      	itt	eq
 8011662:	2301      	moveq	r3, #1
 8011664:	61a3      	streq	r3, [r4, #24]
 8011666:	4620      	mov	r0, r4
 8011668:	f000 f820 	bl	80116ac <__sfp>
 801166c:	6060      	str	r0, [r4, #4]
 801166e:	4620      	mov	r0, r4
 8011670:	f000 f81c 	bl	80116ac <__sfp>
 8011674:	60a0      	str	r0, [r4, #8]
 8011676:	4620      	mov	r0, r4
 8011678:	f000 f818 	bl	80116ac <__sfp>
 801167c:	2200      	movs	r2, #0
 801167e:	60e0      	str	r0, [r4, #12]
 8011680:	2104      	movs	r1, #4
 8011682:	6860      	ldr	r0, [r4, #4]
 8011684:	f7ff ff82 	bl	801158c <std>
 8011688:	68a0      	ldr	r0, [r4, #8]
 801168a:	2201      	movs	r2, #1
 801168c:	2109      	movs	r1, #9
 801168e:	f7ff ff7d 	bl	801158c <std>
 8011692:	68e0      	ldr	r0, [r4, #12]
 8011694:	2202      	movs	r2, #2
 8011696:	2112      	movs	r1, #18
 8011698:	f7ff ff78 	bl	801158c <std>
 801169c:	2301      	movs	r3, #1
 801169e:	61a3      	str	r3, [r4, #24]
 80116a0:	e7d2      	b.n	8011648 <__sinit+0xc>
 80116a2:	bf00      	nop
 80116a4:	0806d6f0 	.word	0x0806d6f0
 80116a8:	080115d5 	.word	0x080115d5

080116ac <__sfp>:
 80116ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ae:	4607      	mov	r7, r0
 80116b0:	f7ff ffac 	bl	801160c <__sfp_lock_acquire>
 80116b4:	4b1e      	ldr	r3, [pc, #120]	; (8011730 <__sfp+0x84>)
 80116b6:	681e      	ldr	r6, [r3, #0]
 80116b8:	69b3      	ldr	r3, [r6, #24]
 80116ba:	b913      	cbnz	r3, 80116c2 <__sfp+0x16>
 80116bc:	4630      	mov	r0, r6
 80116be:	f7ff ffbd 	bl	801163c <__sinit>
 80116c2:	3648      	adds	r6, #72	; 0x48
 80116c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80116c8:	3b01      	subs	r3, #1
 80116ca:	d503      	bpl.n	80116d4 <__sfp+0x28>
 80116cc:	6833      	ldr	r3, [r6, #0]
 80116ce:	b30b      	cbz	r3, 8011714 <__sfp+0x68>
 80116d0:	6836      	ldr	r6, [r6, #0]
 80116d2:	e7f7      	b.n	80116c4 <__sfp+0x18>
 80116d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80116d8:	b9d5      	cbnz	r5, 8011710 <__sfp+0x64>
 80116da:	4b16      	ldr	r3, [pc, #88]	; (8011734 <__sfp+0x88>)
 80116dc:	60e3      	str	r3, [r4, #12]
 80116de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80116e2:	6665      	str	r5, [r4, #100]	; 0x64
 80116e4:	f7ff fc2a 	bl	8010f3c <__retarget_lock_init_recursive>
 80116e8:	f7ff ff96 	bl	8011618 <__sfp_lock_release>
 80116ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80116f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80116f4:	6025      	str	r5, [r4, #0]
 80116f6:	61a5      	str	r5, [r4, #24]
 80116f8:	2208      	movs	r2, #8
 80116fa:	4629      	mov	r1, r5
 80116fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011700:	f7fd fab4 	bl	800ec6c <memset>
 8011704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801170c:	4620      	mov	r0, r4
 801170e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011710:	3468      	adds	r4, #104	; 0x68
 8011712:	e7d9      	b.n	80116c8 <__sfp+0x1c>
 8011714:	2104      	movs	r1, #4
 8011716:	4638      	mov	r0, r7
 8011718:	f7ff ff62 	bl	80115e0 <__sfmoreglue>
 801171c:	4604      	mov	r4, r0
 801171e:	6030      	str	r0, [r6, #0]
 8011720:	2800      	cmp	r0, #0
 8011722:	d1d5      	bne.n	80116d0 <__sfp+0x24>
 8011724:	f7ff ff78 	bl	8011618 <__sfp_lock_release>
 8011728:	230c      	movs	r3, #12
 801172a:	603b      	str	r3, [r7, #0]
 801172c:	e7ee      	b.n	801170c <__sfp+0x60>
 801172e:	bf00      	nop
 8011730:	0806d6f0 	.word	0x0806d6f0
 8011734:	ffff0001 	.word	0xffff0001

08011738 <_fwalk_reent>:
 8011738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801173c:	4606      	mov	r6, r0
 801173e:	4688      	mov	r8, r1
 8011740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011744:	2700      	movs	r7, #0
 8011746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801174a:	f1b9 0901 	subs.w	r9, r9, #1
 801174e:	d505      	bpl.n	801175c <_fwalk_reent+0x24>
 8011750:	6824      	ldr	r4, [r4, #0]
 8011752:	2c00      	cmp	r4, #0
 8011754:	d1f7      	bne.n	8011746 <_fwalk_reent+0xe>
 8011756:	4638      	mov	r0, r7
 8011758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801175c:	89ab      	ldrh	r3, [r5, #12]
 801175e:	2b01      	cmp	r3, #1
 8011760:	d907      	bls.n	8011772 <_fwalk_reent+0x3a>
 8011762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011766:	3301      	adds	r3, #1
 8011768:	d003      	beq.n	8011772 <_fwalk_reent+0x3a>
 801176a:	4629      	mov	r1, r5
 801176c:	4630      	mov	r0, r6
 801176e:	47c0      	blx	r8
 8011770:	4307      	orrs	r7, r0
 8011772:	3568      	adds	r5, #104	; 0x68
 8011774:	e7e9      	b.n	801174a <_fwalk_reent+0x12>

08011776 <__swhatbuf_r>:
 8011776:	b570      	push	{r4, r5, r6, lr}
 8011778:	460e      	mov	r6, r1
 801177a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801177e:	2900      	cmp	r1, #0
 8011780:	b096      	sub	sp, #88	; 0x58
 8011782:	4614      	mov	r4, r2
 8011784:	461d      	mov	r5, r3
 8011786:	da08      	bge.n	801179a <__swhatbuf_r+0x24>
 8011788:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801178c:	2200      	movs	r2, #0
 801178e:	602a      	str	r2, [r5, #0]
 8011790:	061a      	lsls	r2, r3, #24
 8011792:	d410      	bmi.n	80117b6 <__swhatbuf_r+0x40>
 8011794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011798:	e00e      	b.n	80117b8 <__swhatbuf_r+0x42>
 801179a:	466a      	mov	r2, sp
 801179c:	f000 f8fa 	bl	8011994 <_fstat_r>
 80117a0:	2800      	cmp	r0, #0
 80117a2:	dbf1      	blt.n	8011788 <__swhatbuf_r+0x12>
 80117a4:	9a01      	ldr	r2, [sp, #4]
 80117a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80117aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80117ae:	425a      	negs	r2, r3
 80117b0:	415a      	adcs	r2, r3
 80117b2:	602a      	str	r2, [r5, #0]
 80117b4:	e7ee      	b.n	8011794 <__swhatbuf_r+0x1e>
 80117b6:	2340      	movs	r3, #64	; 0x40
 80117b8:	2000      	movs	r0, #0
 80117ba:	6023      	str	r3, [r4, #0]
 80117bc:	b016      	add	sp, #88	; 0x58
 80117be:	bd70      	pop	{r4, r5, r6, pc}

080117c0 <__smakebuf_r>:
 80117c0:	898b      	ldrh	r3, [r1, #12]
 80117c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80117c4:	079d      	lsls	r5, r3, #30
 80117c6:	4606      	mov	r6, r0
 80117c8:	460c      	mov	r4, r1
 80117ca:	d507      	bpl.n	80117dc <__smakebuf_r+0x1c>
 80117cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80117d0:	6023      	str	r3, [r4, #0]
 80117d2:	6123      	str	r3, [r4, #16]
 80117d4:	2301      	movs	r3, #1
 80117d6:	6163      	str	r3, [r4, #20]
 80117d8:	b002      	add	sp, #8
 80117da:	bd70      	pop	{r4, r5, r6, pc}
 80117dc:	ab01      	add	r3, sp, #4
 80117de:	466a      	mov	r2, sp
 80117e0:	f7ff ffc9 	bl	8011776 <__swhatbuf_r>
 80117e4:	9900      	ldr	r1, [sp, #0]
 80117e6:	4605      	mov	r5, r0
 80117e8:	4630      	mov	r0, r6
 80117ea:	f7fd fab3 	bl	800ed54 <_malloc_r>
 80117ee:	b948      	cbnz	r0, 8011804 <__smakebuf_r+0x44>
 80117f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117f4:	059a      	lsls	r2, r3, #22
 80117f6:	d4ef      	bmi.n	80117d8 <__smakebuf_r+0x18>
 80117f8:	f023 0303 	bic.w	r3, r3, #3
 80117fc:	f043 0302 	orr.w	r3, r3, #2
 8011800:	81a3      	strh	r3, [r4, #12]
 8011802:	e7e3      	b.n	80117cc <__smakebuf_r+0xc>
 8011804:	4b0d      	ldr	r3, [pc, #52]	; (801183c <__smakebuf_r+0x7c>)
 8011806:	62b3      	str	r3, [r6, #40]	; 0x28
 8011808:	89a3      	ldrh	r3, [r4, #12]
 801180a:	6020      	str	r0, [r4, #0]
 801180c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011810:	81a3      	strh	r3, [r4, #12]
 8011812:	9b00      	ldr	r3, [sp, #0]
 8011814:	6163      	str	r3, [r4, #20]
 8011816:	9b01      	ldr	r3, [sp, #4]
 8011818:	6120      	str	r0, [r4, #16]
 801181a:	b15b      	cbz	r3, 8011834 <__smakebuf_r+0x74>
 801181c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011820:	4630      	mov	r0, r6
 8011822:	f000 f8c9 	bl	80119b8 <_isatty_r>
 8011826:	b128      	cbz	r0, 8011834 <__smakebuf_r+0x74>
 8011828:	89a3      	ldrh	r3, [r4, #12]
 801182a:	f023 0303 	bic.w	r3, r3, #3
 801182e:	f043 0301 	orr.w	r3, r3, #1
 8011832:	81a3      	strh	r3, [r4, #12]
 8011834:	89a0      	ldrh	r0, [r4, #12]
 8011836:	4305      	orrs	r5, r0
 8011838:	81a5      	strh	r5, [r4, #12]
 801183a:	e7cd      	b.n	80117d8 <__smakebuf_r+0x18>
 801183c:	080115d5 	.word	0x080115d5

08011840 <_raise_r>:
 8011840:	291f      	cmp	r1, #31
 8011842:	b538      	push	{r3, r4, r5, lr}
 8011844:	4604      	mov	r4, r0
 8011846:	460d      	mov	r5, r1
 8011848:	d904      	bls.n	8011854 <_raise_r+0x14>
 801184a:	2316      	movs	r3, #22
 801184c:	6003      	str	r3, [r0, #0]
 801184e:	f04f 30ff 	mov.w	r0, #4294967295
 8011852:	bd38      	pop	{r3, r4, r5, pc}
 8011854:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011856:	b112      	cbz	r2, 801185e <_raise_r+0x1e>
 8011858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801185c:	b94b      	cbnz	r3, 8011872 <_raise_r+0x32>
 801185e:	4620      	mov	r0, r4
 8011860:	f000 f830 	bl	80118c4 <_getpid_r>
 8011864:	462a      	mov	r2, r5
 8011866:	4601      	mov	r1, r0
 8011868:	4620      	mov	r0, r4
 801186a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801186e:	f000 b817 	b.w	80118a0 <_kill_r>
 8011872:	2b01      	cmp	r3, #1
 8011874:	d00a      	beq.n	801188c <_raise_r+0x4c>
 8011876:	1c59      	adds	r1, r3, #1
 8011878:	d103      	bne.n	8011882 <_raise_r+0x42>
 801187a:	2316      	movs	r3, #22
 801187c:	6003      	str	r3, [r0, #0]
 801187e:	2001      	movs	r0, #1
 8011880:	e7e7      	b.n	8011852 <_raise_r+0x12>
 8011882:	2400      	movs	r4, #0
 8011884:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011888:	4628      	mov	r0, r5
 801188a:	4798      	blx	r3
 801188c:	2000      	movs	r0, #0
 801188e:	e7e0      	b.n	8011852 <_raise_r+0x12>

08011890 <raise>:
 8011890:	4b02      	ldr	r3, [pc, #8]	; (801189c <raise+0xc>)
 8011892:	4601      	mov	r1, r0
 8011894:	6818      	ldr	r0, [r3, #0]
 8011896:	f7ff bfd3 	b.w	8011840 <_raise_r>
 801189a:	bf00      	nop
 801189c:	20000924 	.word	0x20000924

080118a0 <_kill_r>:
 80118a0:	b538      	push	{r3, r4, r5, lr}
 80118a2:	4d07      	ldr	r5, [pc, #28]	; (80118c0 <_kill_r+0x20>)
 80118a4:	2300      	movs	r3, #0
 80118a6:	4604      	mov	r4, r0
 80118a8:	4608      	mov	r0, r1
 80118aa:	4611      	mov	r1, r2
 80118ac:	602b      	str	r3, [r5, #0]
 80118ae:	f000 f8d7 	bl	8011a60 <_kill>
 80118b2:	1c43      	adds	r3, r0, #1
 80118b4:	d102      	bne.n	80118bc <_kill_r+0x1c>
 80118b6:	682b      	ldr	r3, [r5, #0]
 80118b8:	b103      	cbz	r3, 80118bc <_kill_r+0x1c>
 80118ba:	6023      	str	r3, [r4, #0]
 80118bc:	bd38      	pop	{r3, r4, r5, pc}
 80118be:	bf00      	nop
 80118c0:	2000a010 	.word	0x2000a010

080118c4 <_getpid_r>:
 80118c4:	f000 b8bc 	b.w	8011a40 <_getpid>

080118c8 <__sread>:
 80118c8:	b510      	push	{r4, lr}
 80118ca:	460c      	mov	r4, r1
 80118cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118d0:	f000 f894 	bl	80119fc <_read_r>
 80118d4:	2800      	cmp	r0, #0
 80118d6:	bfab      	itete	ge
 80118d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80118da:	89a3      	ldrhlt	r3, [r4, #12]
 80118dc:	181b      	addge	r3, r3, r0
 80118de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80118e2:	bfac      	ite	ge
 80118e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80118e6:	81a3      	strhlt	r3, [r4, #12]
 80118e8:	bd10      	pop	{r4, pc}

080118ea <__swrite>:
 80118ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118ee:	461f      	mov	r7, r3
 80118f0:	898b      	ldrh	r3, [r1, #12]
 80118f2:	05db      	lsls	r3, r3, #23
 80118f4:	4605      	mov	r5, r0
 80118f6:	460c      	mov	r4, r1
 80118f8:	4616      	mov	r6, r2
 80118fa:	d505      	bpl.n	8011908 <__swrite+0x1e>
 80118fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011900:	2302      	movs	r3, #2
 8011902:	2200      	movs	r2, #0
 8011904:	f000 f868 	bl	80119d8 <_lseek_r>
 8011908:	89a3      	ldrh	r3, [r4, #12]
 801190a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801190e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011912:	81a3      	strh	r3, [r4, #12]
 8011914:	4632      	mov	r2, r6
 8011916:	463b      	mov	r3, r7
 8011918:	4628      	mov	r0, r5
 801191a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801191e:	f000 b817 	b.w	8011950 <_write_r>

08011922 <__sseek>:
 8011922:	b510      	push	{r4, lr}
 8011924:	460c      	mov	r4, r1
 8011926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801192a:	f000 f855 	bl	80119d8 <_lseek_r>
 801192e:	1c43      	adds	r3, r0, #1
 8011930:	89a3      	ldrh	r3, [r4, #12]
 8011932:	bf15      	itete	ne
 8011934:	6560      	strne	r0, [r4, #84]	; 0x54
 8011936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801193a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801193e:	81a3      	strheq	r3, [r4, #12]
 8011940:	bf18      	it	ne
 8011942:	81a3      	strhne	r3, [r4, #12]
 8011944:	bd10      	pop	{r4, pc}

08011946 <__sclose>:
 8011946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801194a:	f000 b813 	b.w	8011974 <_close_r>
	...

08011950 <_write_r>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4d07      	ldr	r5, [pc, #28]	; (8011970 <_write_r+0x20>)
 8011954:	4604      	mov	r4, r0
 8011956:	4608      	mov	r0, r1
 8011958:	4611      	mov	r1, r2
 801195a:	2200      	movs	r2, #0
 801195c:	602a      	str	r2, [r5, #0]
 801195e:	461a      	mov	r2, r3
 8011960:	f000 f896 	bl	8011a90 <_write>
 8011964:	1c43      	adds	r3, r0, #1
 8011966:	d102      	bne.n	801196e <_write_r+0x1e>
 8011968:	682b      	ldr	r3, [r5, #0]
 801196a:	b103      	cbz	r3, 801196e <_write_r+0x1e>
 801196c:	6023      	str	r3, [r4, #0]
 801196e:	bd38      	pop	{r3, r4, r5, pc}
 8011970:	2000a010 	.word	0x2000a010

08011974 <_close_r>:
 8011974:	b538      	push	{r3, r4, r5, lr}
 8011976:	4d06      	ldr	r5, [pc, #24]	; (8011990 <_close_r+0x1c>)
 8011978:	2300      	movs	r3, #0
 801197a:	4604      	mov	r4, r0
 801197c:	4608      	mov	r0, r1
 801197e:	602b      	str	r3, [r5, #0]
 8011980:	f000 f84e 	bl	8011a20 <_close>
 8011984:	1c43      	adds	r3, r0, #1
 8011986:	d102      	bne.n	801198e <_close_r+0x1a>
 8011988:	682b      	ldr	r3, [r5, #0]
 801198a:	b103      	cbz	r3, 801198e <_close_r+0x1a>
 801198c:	6023      	str	r3, [r4, #0]
 801198e:	bd38      	pop	{r3, r4, r5, pc}
 8011990:	2000a010 	.word	0x2000a010

08011994 <_fstat_r>:
 8011994:	b538      	push	{r3, r4, r5, lr}
 8011996:	4d07      	ldr	r5, [pc, #28]	; (80119b4 <_fstat_r+0x20>)
 8011998:	2300      	movs	r3, #0
 801199a:	4604      	mov	r4, r0
 801199c:	4608      	mov	r0, r1
 801199e:	4611      	mov	r1, r2
 80119a0:	602b      	str	r3, [r5, #0]
 80119a2:	f000 f845 	bl	8011a30 <_fstat>
 80119a6:	1c43      	adds	r3, r0, #1
 80119a8:	d102      	bne.n	80119b0 <_fstat_r+0x1c>
 80119aa:	682b      	ldr	r3, [r5, #0]
 80119ac:	b103      	cbz	r3, 80119b0 <_fstat_r+0x1c>
 80119ae:	6023      	str	r3, [r4, #0]
 80119b0:	bd38      	pop	{r3, r4, r5, pc}
 80119b2:	bf00      	nop
 80119b4:	2000a010 	.word	0x2000a010

080119b8 <_isatty_r>:
 80119b8:	b538      	push	{r3, r4, r5, lr}
 80119ba:	4d06      	ldr	r5, [pc, #24]	; (80119d4 <_isatty_r+0x1c>)
 80119bc:	2300      	movs	r3, #0
 80119be:	4604      	mov	r4, r0
 80119c0:	4608      	mov	r0, r1
 80119c2:	602b      	str	r3, [r5, #0]
 80119c4:	f000 f844 	bl	8011a50 <_isatty>
 80119c8:	1c43      	adds	r3, r0, #1
 80119ca:	d102      	bne.n	80119d2 <_isatty_r+0x1a>
 80119cc:	682b      	ldr	r3, [r5, #0]
 80119ce:	b103      	cbz	r3, 80119d2 <_isatty_r+0x1a>
 80119d0:	6023      	str	r3, [r4, #0]
 80119d2:	bd38      	pop	{r3, r4, r5, pc}
 80119d4:	2000a010 	.word	0x2000a010

080119d8 <_lseek_r>:
 80119d8:	b538      	push	{r3, r4, r5, lr}
 80119da:	4d07      	ldr	r5, [pc, #28]	; (80119f8 <_lseek_r+0x20>)
 80119dc:	4604      	mov	r4, r0
 80119de:	4608      	mov	r0, r1
 80119e0:	4611      	mov	r1, r2
 80119e2:	2200      	movs	r2, #0
 80119e4:	602a      	str	r2, [r5, #0]
 80119e6:	461a      	mov	r2, r3
 80119e8:	f000 f842 	bl	8011a70 <_lseek>
 80119ec:	1c43      	adds	r3, r0, #1
 80119ee:	d102      	bne.n	80119f6 <_lseek_r+0x1e>
 80119f0:	682b      	ldr	r3, [r5, #0]
 80119f2:	b103      	cbz	r3, 80119f6 <_lseek_r+0x1e>
 80119f4:	6023      	str	r3, [r4, #0]
 80119f6:	bd38      	pop	{r3, r4, r5, pc}
 80119f8:	2000a010 	.word	0x2000a010

080119fc <_read_r>:
 80119fc:	b538      	push	{r3, r4, r5, lr}
 80119fe:	4d07      	ldr	r5, [pc, #28]	; (8011a1c <_read_r+0x20>)
 8011a00:	4604      	mov	r4, r0
 8011a02:	4608      	mov	r0, r1
 8011a04:	4611      	mov	r1, r2
 8011a06:	2200      	movs	r2, #0
 8011a08:	602a      	str	r2, [r5, #0]
 8011a0a:	461a      	mov	r2, r3
 8011a0c:	f000 f838 	bl	8011a80 <_read>
 8011a10:	1c43      	adds	r3, r0, #1
 8011a12:	d102      	bne.n	8011a1a <_read_r+0x1e>
 8011a14:	682b      	ldr	r3, [r5, #0]
 8011a16:	b103      	cbz	r3, 8011a1a <_read_r+0x1e>
 8011a18:	6023      	str	r3, [r4, #0]
 8011a1a:	bd38      	pop	{r3, r4, r5, pc}
 8011a1c:	2000a010 	.word	0x2000a010

08011a20 <_close>:
 8011a20:	4b02      	ldr	r3, [pc, #8]	; (8011a2c <_close+0xc>)
 8011a22:	2258      	movs	r2, #88	; 0x58
 8011a24:	601a      	str	r2, [r3, #0]
 8011a26:	f04f 30ff 	mov.w	r0, #4294967295
 8011a2a:	4770      	bx	lr
 8011a2c:	2000a010 	.word	0x2000a010

08011a30 <_fstat>:
 8011a30:	4b02      	ldr	r3, [pc, #8]	; (8011a3c <_fstat+0xc>)
 8011a32:	2258      	movs	r2, #88	; 0x58
 8011a34:	601a      	str	r2, [r3, #0]
 8011a36:	f04f 30ff 	mov.w	r0, #4294967295
 8011a3a:	4770      	bx	lr
 8011a3c:	2000a010 	.word	0x2000a010

08011a40 <_getpid>:
 8011a40:	4b02      	ldr	r3, [pc, #8]	; (8011a4c <_getpid+0xc>)
 8011a42:	2258      	movs	r2, #88	; 0x58
 8011a44:	601a      	str	r2, [r3, #0]
 8011a46:	f04f 30ff 	mov.w	r0, #4294967295
 8011a4a:	4770      	bx	lr
 8011a4c:	2000a010 	.word	0x2000a010

08011a50 <_isatty>:
 8011a50:	4b02      	ldr	r3, [pc, #8]	; (8011a5c <_isatty+0xc>)
 8011a52:	2258      	movs	r2, #88	; 0x58
 8011a54:	601a      	str	r2, [r3, #0]
 8011a56:	2000      	movs	r0, #0
 8011a58:	4770      	bx	lr
 8011a5a:	bf00      	nop
 8011a5c:	2000a010 	.word	0x2000a010

08011a60 <_kill>:
 8011a60:	4b02      	ldr	r3, [pc, #8]	; (8011a6c <_kill+0xc>)
 8011a62:	2258      	movs	r2, #88	; 0x58
 8011a64:	601a      	str	r2, [r3, #0]
 8011a66:	f04f 30ff 	mov.w	r0, #4294967295
 8011a6a:	4770      	bx	lr
 8011a6c:	2000a010 	.word	0x2000a010

08011a70 <_lseek>:
 8011a70:	4b02      	ldr	r3, [pc, #8]	; (8011a7c <_lseek+0xc>)
 8011a72:	2258      	movs	r2, #88	; 0x58
 8011a74:	601a      	str	r2, [r3, #0]
 8011a76:	f04f 30ff 	mov.w	r0, #4294967295
 8011a7a:	4770      	bx	lr
 8011a7c:	2000a010 	.word	0x2000a010

08011a80 <_read>:
 8011a80:	4b02      	ldr	r3, [pc, #8]	; (8011a8c <_read+0xc>)
 8011a82:	2258      	movs	r2, #88	; 0x58
 8011a84:	601a      	str	r2, [r3, #0]
 8011a86:	f04f 30ff 	mov.w	r0, #4294967295
 8011a8a:	4770      	bx	lr
 8011a8c:	2000a010 	.word	0x2000a010

08011a90 <_write>:
 8011a90:	4b02      	ldr	r3, [pc, #8]	; (8011a9c <_write+0xc>)
 8011a92:	2258      	movs	r2, #88	; 0x58
 8011a94:	601a      	str	r2, [r3, #0]
 8011a96:	f04f 30ff 	mov.w	r0, #4294967295
 8011a9a:	4770      	bx	lr
 8011a9c:	2000a010 	.word	0x2000a010

08011aa0 <_exit>:
 8011aa0:	e7fe      	b.n	8011aa0 <_exit>
	...

08011aa4 <_init>:
 8011aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aa6:	bf00      	nop
 8011aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aaa:	bc08      	pop	{r3}
 8011aac:	469e      	mov	lr, r3
 8011aae:	4770      	bx	lr

08011ab0 <_fini>:
 8011ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ab2:	bf00      	nop
 8011ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ab6:	bc08      	pop	{r3}
 8011ab8:	469e      	mov	lr, r3
 8011aba:	4770      	bx	lr
